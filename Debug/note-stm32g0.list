
note-stm32g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aac  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a4  08009b68  08009b68  00019b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a20c  0800a20c  00020200  2**0
                  CONTENTS
  4 .ARM          00000008  0800a20c  0800a20c  0001a20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a214  0800a214  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a214  0800a214  0001a214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a218  0800a218  0001a218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800a21c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000200  0800a41c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  0800a41c  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b7d  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000303e  00000000  00000000  00032da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001088  00000000  00000000  00035de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  00036e70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001787c  00000000  00000000  00037e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e38a  00000000  00000000  0004f69c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c50a  00000000  00000000  0005da26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e9f30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f24  00000000  00000000  000e9fac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000200 	.word	0x20000200
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08009b50 	.word	0x08009b50

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000204 	.word	0x20000204
 8000100:	08009b50 	.word	0x08009b50

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cfrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c08      	adds	r0, r1, #0
 8000418:	4661      	mov	r1, ip
 800041a:	e7ff      	b.n	800041c <__aeabi_cfcmpeq>

0800041c <__aeabi_cfcmpeq>:
 800041c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041e:	f000 fc4f 	bl	8000cc0 <__lesf2>
 8000422:	2800      	cmp	r0, #0
 8000424:	d401      	bmi.n	800042a <__aeabi_cfcmpeq+0xe>
 8000426:	2100      	movs	r1, #0
 8000428:	42c8      	cmn	r0, r1
 800042a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800042c <__aeabi_fcmpeq>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fbd1 	bl	8000bd4 <__eqsf2>
 8000432:	4240      	negs	r0, r0
 8000434:	3001      	adds	r0, #1
 8000436:	bd10      	pop	{r4, pc}

08000438 <__aeabi_fcmplt>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fc41 	bl	8000cc0 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	db01      	blt.n	8000446 <__aeabi_fcmplt+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_fcmple>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fc37 	bl	8000cc0 <__lesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dd01      	ble.n	800045a <__aeabi_fcmple+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__aeabi_fcmpgt>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 fbdf 	bl	8000c24 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	dc01      	bgt.n	800046e <__aeabi_fcmpgt+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			; (mov r8, r8)

08000474 <__aeabi_fcmpge>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f000 fbd5 	bl	8000c24 <__gesf2>
 800047a:	2800      	cmp	r0, #0
 800047c:	da01      	bge.n	8000482 <__aeabi_fcmpge+0xe>
 800047e:	2000      	movs	r0, #0
 8000480:	bd10      	pop	{r4, pc}
 8000482:	2001      	movs	r0, #1
 8000484:	bd10      	pop	{r4, pc}
 8000486:	46c0      	nop			; (mov r8, r8)

08000488 <__aeabi_uldivmod>:
 8000488:	2b00      	cmp	r3, #0
 800048a:	d111      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 800048c:	2a00      	cmp	r2, #0
 800048e:	d10f      	bne.n	80004b0 <__aeabi_uldivmod+0x28>
 8000490:	2900      	cmp	r1, #0
 8000492:	d100      	bne.n	8000496 <__aeabi_uldivmod+0xe>
 8000494:	2800      	cmp	r0, #0
 8000496:	d002      	beq.n	800049e <__aeabi_uldivmod+0x16>
 8000498:	2100      	movs	r1, #0
 800049a:	43c9      	mvns	r1, r1
 800049c:	1c08      	adds	r0, r1, #0
 800049e:	b407      	push	{r0, r1, r2}
 80004a0:	4802      	ldr	r0, [pc, #8]	; (80004ac <__aeabi_uldivmod+0x24>)
 80004a2:	a102      	add	r1, pc, #8	; (adr r1, 80004ac <__aeabi_uldivmod+0x24>)
 80004a4:	1840      	adds	r0, r0, r1
 80004a6:	9002      	str	r0, [sp, #8]
 80004a8:	bd03      	pop	{r0, r1, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	ffffff65 	.word	0xffffff65
 80004b0:	b403      	push	{r0, r1}
 80004b2:	4668      	mov	r0, sp
 80004b4:	b501      	push	{r0, lr}
 80004b6:	9802      	ldr	r0, [sp, #8]
 80004b8:	f000 f81e 	bl	80004f8 <__udivmoddi4>
 80004bc:	9b01      	ldr	r3, [sp, #4]
 80004be:	469e      	mov	lr, r3
 80004c0:	b002      	add	sp, #8
 80004c2:	bc0c      	pop	{r2, r3}
 80004c4:	4770      	bx	lr
 80004c6:	46c0      	nop			; (mov r8, r8)

080004c8 <__aeabi_f2uiz>:
 80004c8:	219e      	movs	r1, #158	; 0x9e
 80004ca:	b510      	push	{r4, lr}
 80004cc:	05c9      	lsls	r1, r1, #23
 80004ce:	1c04      	adds	r4, r0, #0
 80004d0:	f7ff ffd0 	bl	8000474 <__aeabi_fcmpge>
 80004d4:	2800      	cmp	r0, #0
 80004d6:	d103      	bne.n	80004e0 <__aeabi_f2uiz+0x18>
 80004d8:	1c20      	adds	r0, r4, #0
 80004da:	f000 ff37 	bl	800134c <__aeabi_f2iz>
 80004de:	bd10      	pop	{r4, pc}
 80004e0:	219e      	movs	r1, #158	; 0x9e
 80004e2:	1c20      	adds	r0, r4, #0
 80004e4:	05c9      	lsls	r1, r1, #23
 80004e6:	f000 fd6d 	bl	8000fc4 <__aeabi_fsub>
 80004ea:	f000 ff2f 	bl	800134c <__aeabi_f2iz>
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	061b      	lsls	r3, r3, #24
 80004f2:	469c      	mov	ip, r3
 80004f4:	4460      	add	r0, ip
 80004f6:	e7f2      	b.n	80004de <__aeabi_f2uiz+0x16>

080004f8 <__udivmoddi4>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	464f      	mov	r7, r9
 80004fc:	4646      	mov	r6, r8
 80004fe:	46d6      	mov	lr, sl
 8000500:	b5c0      	push	{r6, r7, lr}
 8000502:	0004      	movs	r4, r0
 8000504:	b082      	sub	sp, #8
 8000506:	000d      	movs	r5, r1
 8000508:	4691      	mov	r9, r2
 800050a:	4698      	mov	r8, r3
 800050c:	428b      	cmp	r3, r1
 800050e:	d82f      	bhi.n	8000570 <__udivmoddi4+0x78>
 8000510:	d02c      	beq.n	800056c <__udivmoddi4+0x74>
 8000512:	4641      	mov	r1, r8
 8000514:	4648      	mov	r0, r9
 8000516:	f001 fe2d 	bl	8002174 <__clzdi2>
 800051a:	0029      	movs	r1, r5
 800051c:	0006      	movs	r6, r0
 800051e:	0020      	movs	r0, r4
 8000520:	f001 fe28 	bl	8002174 <__clzdi2>
 8000524:	1a33      	subs	r3, r6, r0
 8000526:	469c      	mov	ip, r3
 8000528:	3b20      	subs	r3, #32
 800052a:	469a      	mov	sl, r3
 800052c:	d500      	bpl.n	8000530 <__udivmoddi4+0x38>
 800052e:	e076      	b.n	800061e <__udivmoddi4+0x126>
 8000530:	464b      	mov	r3, r9
 8000532:	4652      	mov	r2, sl
 8000534:	4093      	lsls	r3, r2
 8000536:	001f      	movs	r7, r3
 8000538:	464b      	mov	r3, r9
 800053a:	4662      	mov	r2, ip
 800053c:	4093      	lsls	r3, r2
 800053e:	001e      	movs	r6, r3
 8000540:	42af      	cmp	r7, r5
 8000542:	d828      	bhi.n	8000596 <__udivmoddi4+0x9e>
 8000544:	d025      	beq.n	8000592 <__udivmoddi4+0x9a>
 8000546:	4653      	mov	r3, sl
 8000548:	1ba4      	subs	r4, r4, r6
 800054a:	41bd      	sbcs	r5, r7
 800054c:	2b00      	cmp	r3, #0
 800054e:	da00      	bge.n	8000552 <__udivmoddi4+0x5a>
 8000550:	e07b      	b.n	800064a <__udivmoddi4+0x152>
 8000552:	2200      	movs	r2, #0
 8000554:	2300      	movs	r3, #0
 8000556:	9200      	str	r2, [sp, #0]
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	4652      	mov	r2, sl
 800055e:	4093      	lsls	r3, r2
 8000560:	9301      	str	r3, [sp, #4]
 8000562:	2301      	movs	r3, #1
 8000564:	4662      	mov	r2, ip
 8000566:	4093      	lsls	r3, r2
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	e018      	b.n	800059e <__udivmoddi4+0xa6>
 800056c:	4282      	cmp	r2, r0
 800056e:	d9d0      	bls.n	8000512 <__udivmoddi4+0x1a>
 8000570:	2200      	movs	r2, #0
 8000572:	2300      	movs	r3, #0
 8000574:	9200      	str	r2, [sp, #0]
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <__udivmoddi4+0x8a>
 800057e:	601c      	str	r4, [r3, #0]
 8000580:	605d      	str	r5, [r3, #4]
 8000582:	9800      	ldr	r0, [sp, #0]
 8000584:	9901      	ldr	r1, [sp, #4]
 8000586:	b002      	add	sp, #8
 8000588:	bc1c      	pop	{r2, r3, r4}
 800058a:	4690      	mov	r8, r2
 800058c:	4699      	mov	r9, r3
 800058e:	46a2      	mov	sl, r4
 8000590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000592:	42a3      	cmp	r3, r4
 8000594:	d9d7      	bls.n	8000546 <__udivmoddi4+0x4e>
 8000596:	2200      	movs	r2, #0
 8000598:	2300      	movs	r3, #0
 800059a:	9200      	str	r2, [sp, #0]
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	4663      	mov	r3, ip
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d0e9      	beq.n	8000578 <__udivmoddi4+0x80>
 80005a4:	07fb      	lsls	r3, r7, #31
 80005a6:	4698      	mov	r8, r3
 80005a8:	4641      	mov	r1, r8
 80005aa:	0872      	lsrs	r2, r6, #1
 80005ac:	430a      	orrs	r2, r1
 80005ae:	087b      	lsrs	r3, r7, #1
 80005b0:	4666      	mov	r6, ip
 80005b2:	e00e      	b.n	80005d2 <__udivmoddi4+0xda>
 80005b4:	42ab      	cmp	r3, r5
 80005b6:	d101      	bne.n	80005bc <__udivmoddi4+0xc4>
 80005b8:	42a2      	cmp	r2, r4
 80005ba:	d80c      	bhi.n	80005d6 <__udivmoddi4+0xde>
 80005bc:	1aa4      	subs	r4, r4, r2
 80005be:	419d      	sbcs	r5, r3
 80005c0:	2001      	movs	r0, #1
 80005c2:	1924      	adds	r4, r4, r4
 80005c4:	416d      	adcs	r5, r5
 80005c6:	2100      	movs	r1, #0
 80005c8:	3e01      	subs	r6, #1
 80005ca:	1824      	adds	r4, r4, r0
 80005cc:	414d      	adcs	r5, r1
 80005ce:	2e00      	cmp	r6, #0
 80005d0:	d006      	beq.n	80005e0 <__udivmoddi4+0xe8>
 80005d2:	42ab      	cmp	r3, r5
 80005d4:	d9ee      	bls.n	80005b4 <__udivmoddi4+0xbc>
 80005d6:	3e01      	subs	r6, #1
 80005d8:	1924      	adds	r4, r4, r4
 80005da:	416d      	adcs	r5, r5
 80005dc:	2e00      	cmp	r6, #0
 80005de:	d1f8      	bne.n	80005d2 <__udivmoddi4+0xda>
 80005e0:	9800      	ldr	r0, [sp, #0]
 80005e2:	9901      	ldr	r1, [sp, #4]
 80005e4:	4653      	mov	r3, sl
 80005e6:	1900      	adds	r0, r0, r4
 80005e8:	4169      	adcs	r1, r5
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	db23      	blt.n	8000636 <__udivmoddi4+0x13e>
 80005ee:	002b      	movs	r3, r5
 80005f0:	4652      	mov	r2, sl
 80005f2:	40d3      	lsrs	r3, r2
 80005f4:	002a      	movs	r2, r5
 80005f6:	4664      	mov	r4, ip
 80005f8:	40e2      	lsrs	r2, r4
 80005fa:	001c      	movs	r4, r3
 80005fc:	4653      	mov	r3, sl
 80005fe:	0015      	movs	r5, r2
 8000600:	2b00      	cmp	r3, #0
 8000602:	db2d      	blt.n	8000660 <__udivmoddi4+0x168>
 8000604:	0026      	movs	r6, r4
 8000606:	4657      	mov	r7, sl
 8000608:	40be      	lsls	r6, r7
 800060a:	0033      	movs	r3, r6
 800060c:	0026      	movs	r6, r4
 800060e:	4667      	mov	r7, ip
 8000610:	40be      	lsls	r6, r7
 8000612:	0032      	movs	r2, r6
 8000614:	1a80      	subs	r0, r0, r2
 8000616:	4199      	sbcs	r1, r3
 8000618:	9000      	str	r0, [sp, #0]
 800061a:	9101      	str	r1, [sp, #4]
 800061c:	e7ac      	b.n	8000578 <__udivmoddi4+0x80>
 800061e:	4662      	mov	r2, ip
 8000620:	2320      	movs	r3, #32
 8000622:	1a9b      	subs	r3, r3, r2
 8000624:	464a      	mov	r2, r9
 8000626:	40da      	lsrs	r2, r3
 8000628:	4661      	mov	r1, ip
 800062a:	0013      	movs	r3, r2
 800062c:	4642      	mov	r2, r8
 800062e:	408a      	lsls	r2, r1
 8000630:	0017      	movs	r7, r2
 8000632:	431f      	orrs	r7, r3
 8000634:	e780      	b.n	8000538 <__udivmoddi4+0x40>
 8000636:	4662      	mov	r2, ip
 8000638:	2320      	movs	r3, #32
 800063a:	1a9b      	subs	r3, r3, r2
 800063c:	002a      	movs	r2, r5
 800063e:	4666      	mov	r6, ip
 8000640:	409a      	lsls	r2, r3
 8000642:	0023      	movs	r3, r4
 8000644:	40f3      	lsrs	r3, r6
 8000646:	4313      	orrs	r3, r2
 8000648:	e7d4      	b.n	80005f4 <__udivmoddi4+0xfc>
 800064a:	4662      	mov	r2, ip
 800064c:	2320      	movs	r3, #32
 800064e:	2100      	movs	r1, #0
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	2200      	movs	r2, #0
 8000654:	9100      	str	r1, [sp, #0]
 8000656:	9201      	str	r2, [sp, #4]
 8000658:	2201      	movs	r2, #1
 800065a:	40da      	lsrs	r2, r3
 800065c:	9201      	str	r2, [sp, #4]
 800065e:	e780      	b.n	8000562 <__udivmoddi4+0x6a>
 8000660:	2320      	movs	r3, #32
 8000662:	4662      	mov	r2, ip
 8000664:	0026      	movs	r6, r4
 8000666:	1a9b      	subs	r3, r3, r2
 8000668:	40de      	lsrs	r6, r3
 800066a:	002f      	movs	r7, r5
 800066c:	46b0      	mov	r8, r6
 800066e:	4666      	mov	r6, ip
 8000670:	40b7      	lsls	r7, r6
 8000672:	4646      	mov	r6, r8
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7c8      	b.n	800060c <__udivmoddi4+0x114>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fadd>:
 800067c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800067e:	4647      	mov	r7, r8
 8000680:	46ce      	mov	lr, r9
 8000682:	0243      	lsls	r3, r0, #9
 8000684:	0a5b      	lsrs	r3, r3, #9
 8000686:	0044      	lsls	r4, r0, #1
 8000688:	0fc2      	lsrs	r2, r0, #31
 800068a:	469c      	mov	ip, r3
 800068c:	0048      	lsls	r0, r1, #1
 800068e:	00dd      	lsls	r5, r3, #3
 8000690:	024b      	lsls	r3, r1, #9
 8000692:	0e24      	lsrs	r4, r4, #24
 8000694:	0a5b      	lsrs	r3, r3, #9
 8000696:	0e00      	lsrs	r0, r0, #24
 8000698:	b580      	push	{r7, lr}
 800069a:	4698      	mov	r8, r3
 800069c:	0026      	movs	r6, r4
 800069e:	4691      	mov	r9, r2
 80006a0:	0fc9      	lsrs	r1, r1, #31
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	1a27      	subs	r7, r4, r0
 80006a6:	428a      	cmp	r2, r1
 80006a8:	d029      	beq.n	80006fe <__aeabi_fadd+0x82>
 80006aa:	2f00      	cmp	r7, #0
 80006ac:	dd15      	ble.n	80006da <__aeabi_fadd+0x5e>
 80006ae:	2800      	cmp	r0, #0
 80006b0:	d14a      	bne.n	8000748 <__aeabi_fadd+0xcc>
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fadd+0x3c>
 80006b6:	e095      	b.n	80007e4 <__aeabi_fadd+0x168>
 80006b8:	08ed      	lsrs	r5, r5, #3
 80006ba:	2cff      	cmp	r4, #255	; 0xff
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fadd+0x44>
 80006be:	e088      	b.n	80007d2 <__aeabi_fadd+0x156>
 80006c0:	026b      	lsls	r3, r5, #9
 80006c2:	0a5b      	lsrs	r3, r3, #9
 80006c4:	b2e6      	uxtb	r6, r4
 80006c6:	025b      	lsls	r3, r3, #9
 80006c8:	05f6      	lsls	r6, r6, #23
 80006ca:	0a58      	lsrs	r0, r3, #9
 80006cc:	4330      	orrs	r0, r6
 80006ce:	07d2      	lsls	r2, r2, #31
 80006d0:	4310      	orrs	r0, r2
 80006d2:	bc0c      	pop	{r2, r3}
 80006d4:	4690      	mov	r8, r2
 80006d6:	4699      	mov	r9, r3
 80006d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006da:	2f00      	cmp	r7, #0
 80006dc:	d000      	beq.n	80006e0 <__aeabi_fadd+0x64>
 80006de:	e087      	b.n	80007f0 <__aeabi_fadd+0x174>
 80006e0:	1c60      	adds	r0, r4, #1
 80006e2:	b2c0      	uxtb	r0, r0
 80006e4:	2801      	cmp	r0, #1
 80006e6:	dc00      	bgt.n	80006ea <__aeabi_fadd+0x6e>
 80006e8:	e0b6      	b.n	8000858 <__aeabi_fadd+0x1dc>
 80006ea:	1aee      	subs	r6, r5, r3
 80006ec:	0172      	lsls	r2, r6, #5
 80006ee:	d500      	bpl.n	80006f2 <__aeabi_fadd+0x76>
 80006f0:	e0c5      	b.n	800087e <__aeabi_fadd+0x202>
 80006f2:	2e00      	cmp	r6, #0
 80006f4:	d13d      	bne.n	8000772 <__aeabi_fadd+0xf6>
 80006f6:	2200      	movs	r2, #0
 80006f8:	2600      	movs	r6, #0
 80006fa:	2300      	movs	r3, #0
 80006fc:	e7e3      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80006fe:	2f00      	cmp	r7, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_fadd+0x88>
 8000702:	e096      	b.n	8000832 <__aeabi_fadd+0x1b6>
 8000704:	2800      	cmp	r0, #0
 8000706:	d05d      	beq.n	80007c4 <__aeabi_fadd+0x148>
 8000708:	2cff      	cmp	r4, #255	; 0xff
 800070a:	d060      	beq.n	80007ce <__aeabi_fadd+0x152>
 800070c:	2280      	movs	r2, #128	; 0x80
 800070e:	04d2      	lsls	r2, r2, #19
 8000710:	4313      	orrs	r3, r2
 8000712:	2f1b      	cmp	r7, #27
 8000714:	dd00      	ble.n	8000718 <__aeabi_fadd+0x9c>
 8000716:	e0ec      	b.n	80008f2 <__aeabi_fadd+0x276>
 8000718:	2220      	movs	r2, #32
 800071a:	1bd2      	subs	r2, r2, r7
 800071c:	0018      	movs	r0, r3
 800071e:	4093      	lsls	r3, r2
 8000720:	40f8      	lsrs	r0, r7
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	4193      	sbcs	r3, r2
 8000726:	4303      	orrs	r3, r0
 8000728:	18ed      	adds	r5, r5, r3
 800072a:	016b      	lsls	r3, r5, #5
 800072c:	d57b      	bpl.n	8000826 <__aeabi_fadd+0x1aa>
 800072e:	3401      	adds	r4, #1
 8000730:	2cff      	cmp	r4, #255	; 0xff
 8000732:	d100      	bne.n	8000736 <__aeabi_fadd+0xba>
 8000734:	e0b7      	b.n	80008a6 <__aeabi_fadd+0x22a>
 8000736:	2201      	movs	r2, #1
 8000738:	2607      	movs	r6, #7
 800073a:	402a      	ands	r2, r5
 800073c:	086b      	lsrs	r3, r5, #1
 800073e:	4d9a      	ldr	r5, [pc, #616]	; (80009a8 <__aeabi_fadd+0x32c>)
 8000740:	401d      	ands	r5, r3
 8000742:	4315      	orrs	r5, r2
 8000744:	402e      	ands	r6, r5
 8000746:	e029      	b.n	800079c <__aeabi_fadd+0x120>
 8000748:	2cff      	cmp	r4, #255	; 0xff
 800074a:	d0b5      	beq.n	80006b8 <__aeabi_fadd+0x3c>
 800074c:	2280      	movs	r2, #128	; 0x80
 800074e:	04d2      	lsls	r2, r2, #19
 8000750:	4313      	orrs	r3, r2
 8000752:	2f1b      	cmp	r7, #27
 8000754:	dd00      	ble.n	8000758 <__aeabi_fadd+0xdc>
 8000756:	e0b2      	b.n	80008be <__aeabi_fadd+0x242>
 8000758:	2220      	movs	r2, #32
 800075a:	1bd2      	subs	r2, r2, r7
 800075c:	0019      	movs	r1, r3
 800075e:	4093      	lsls	r3, r2
 8000760:	40f9      	lsrs	r1, r7
 8000762:	1e5a      	subs	r2, r3, #1
 8000764:	4193      	sbcs	r3, r2
 8000766:	430b      	orrs	r3, r1
 8000768:	1aed      	subs	r5, r5, r3
 800076a:	016b      	lsls	r3, r5, #5
 800076c:	d55b      	bpl.n	8000826 <__aeabi_fadd+0x1aa>
 800076e:	01ad      	lsls	r5, r5, #6
 8000770:	09ae      	lsrs	r6, r5, #6
 8000772:	0030      	movs	r0, r6
 8000774:	f001 fce0 	bl	8002138 <__clzsi2>
 8000778:	3805      	subs	r0, #5
 800077a:	4086      	lsls	r6, r0
 800077c:	4284      	cmp	r4, r0
 800077e:	dc65      	bgt.n	800084c <__aeabi_fadd+0x1d0>
 8000780:	1b04      	subs	r4, r0, r4
 8000782:	0033      	movs	r3, r6
 8000784:	2020      	movs	r0, #32
 8000786:	3401      	adds	r4, #1
 8000788:	40e3      	lsrs	r3, r4
 800078a:	1b04      	subs	r4, r0, r4
 800078c:	40a6      	lsls	r6, r4
 800078e:	1e75      	subs	r5, r6, #1
 8000790:	41ae      	sbcs	r6, r5
 8000792:	4333      	orrs	r3, r6
 8000794:	2607      	movs	r6, #7
 8000796:	001d      	movs	r5, r3
 8000798:	2400      	movs	r4, #0
 800079a:	401e      	ands	r6, r3
 800079c:	2201      	movs	r2, #1
 800079e:	464b      	mov	r3, r9
 80007a0:	401a      	ands	r2, r3
 80007a2:	2e00      	cmp	r6, #0
 80007a4:	d004      	beq.n	80007b0 <__aeabi_fadd+0x134>
 80007a6:	230f      	movs	r3, #15
 80007a8:	402b      	ands	r3, r5
 80007aa:	2b04      	cmp	r3, #4
 80007ac:	d000      	beq.n	80007b0 <__aeabi_fadd+0x134>
 80007ae:	3504      	adds	r5, #4
 80007b0:	016b      	lsls	r3, r5, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fadd+0x13a>
 80007b4:	e780      	b.n	80006b8 <__aeabi_fadd+0x3c>
 80007b6:	3401      	adds	r4, #1
 80007b8:	b2e6      	uxtb	r6, r4
 80007ba:	2cff      	cmp	r4, #255	; 0xff
 80007bc:	d12f      	bne.n	800081e <__aeabi_fadd+0x1a2>
 80007be:	26ff      	movs	r6, #255	; 0xff
 80007c0:	2300      	movs	r3, #0
 80007c2:	e780      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d152      	bne.n	800086e <__aeabi_fadd+0x1f2>
 80007c8:	2cff      	cmp	r4, #255	; 0xff
 80007ca:	d000      	beq.n	80007ce <__aeabi_fadd+0x152>
 80007cc:	e774      	b.n	80006b8 <__aeabi_fadd+0x3c>
 80007ce:	000a      	movs	r2, r1
 80007d0:	08ed      	lsrs	r5, r5, #3
 80007d2:	2d00      	cmp	r5, #0
 80007d4:	d0f3      	beq.n	80007be <__aeabi_fadd+0x142>
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	03db      	lsls	r3, r3, #15
 80007da:	432b      	orrs	r3, r5
 80007dc:	025b      	lsls	r3, r3, #9
 80007de:	0a5b      	lsrs	r3, r3, #9
 80007e0:	26ff      	movs	r6, #255	; 0xff
 80007e2:	e770      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80007e4:	3f01      	subs	r7, #1
 80007e6:	2f00      	cmp	r7, #0
 80007e8:	d0be      	beq.n	8000768 <__aeabi_fadd+0xec>
 80007ea:	2cff      	cmp	r4, #255	; 0xff
 80007ec:	d1b1      	bne.n	8000752 <__aeabi_fadd+0xd6>
 80007ee:	e763      	b.n	80006b8 <__aeabi_fadd+0x3c>
 80007f0:	2c00      	cmp	r4, #0
 80007f2:	d047      	beq.n	8000884 <__aeabi_fadd+0x208>
 80007f4:	28ff      	cmp	r0, #255	; 0xff
 80007f6:	d069      	beq.n	80008cc <__aeabi_fadd+0x250>
 80007f8:	2480      	movs	r4, #128	; 0x80
 80007fa:	04e4      	lsls	r4, r4, #19
 80007fc:	427a      	negs	r2, r7
 80007fe:	4325      	orrs	r5, r4
 8000800:	2a1b      	cmp	r2, #27
 8000802:	dd00      	ble.n	8000806 <__aeabi_fadd+0x18a>
 8000804:	e0c5      	b.n	8000992 <__aeabi_fadd+0x316>
 8000806:	002c      	movs	r4, r5
 8000808:	2620      	movs	r6, #32
 800080a:	40d4      	lsrs	r4, r2
 800080c:	1ab2      	subs	r2, r6, r2
 800080e:	4095      	lsls	r5, r2
 8000810:	1e6a      	subs	r2, r5, #1
 8000812:	4195      	sbcs	r5, r2
 8000814:	4325      	orrs	r5, r4
 8000816:	1b5d      	subs	r5, r3, r5
 8000818:	0004      	movs	r4, r0
 800081a:	4689      	mov	r9, r1
 800081c:	e7a5      	b.n	800076a <__aeabi_fadd+0xee>
 800081e:	01ab      	lsls	r3, r5, #6
 8000820:	0a5b      	lsrs	r3, r3, #9
 8000822:	e750      	b.n	80006c6 <__aeabi_fadd+0x4a>
 8000824:	2400      	movs	r4, #0
 8000826:	2201      	movs	r2, #1
 8000828:	464b      	mov	r3, r9
 800082a:	401a      	ands	r2, r3
 800082c:	076b      	lsls	r3, r5, #29
 800082e:	d1ba      	bne.n	80007a6 <__aeabi_fadd+0x12a>
 8000830:	e742      	b.n	80006b8 <__aeabi_fadd+0x3c>
 8000832:	2f00      	cmp	r7, #0
 8000834:	d13b      	bne.n	80008ae <__aeabi_fadd+0x232>
 8000836:	3401      	adds	r4, #1
 8000838:	b2e0      	uxtb	r0, r4
 800083a:	2801      	cmp	r0, #1
 800083c:	dd4a      	ble.n	80008d4 <__aeabi_fadd+0x258>
 800083e:	2cff      	cmp	r4, #255	; 0xff
 8000840:	d0bd      	beq.n	80007be <__aeabi_fadd+0x142>
 8000842:	2607      	movs	r6, #7
 8000844:	18ed      	adds	r5, r5, r3
 8000846:	086d      	lsrs	r5, r5, #1
 8000848:	402e      	ands	r6, r5
 800084a:	e7a7      	b.n	800079c <__aeabi_fadd+0x120>
 800084c:	2307      	movs	r3, #7
 800084e:	4d57      	ldr	r5, [pc, #348]	; (80009ac <__aeabi_fadd+0x330>)
 8000850:	1a24      	subs	r4, r4, r0
 8000852:	4035      	ands	r5, r6
 8000854:	401e      	ands	r6, r3
 8000856:	e7a1      	b.n	800079c <__aeabi_fadd+0x120>
 8000858:	2c00      	cmp	r4, #0
 800085a:	d11b      	bne.n	8000894 <__aeabi_fadd+0x218>
 800085c:	2d00      	cmp	r5, #0
 800085e:	d16e      	bne.n	800093e <__aeabi_fadd+0x2c2>
 8000860:	2b00      	cmp	r3, #0
 8000862:	d100      	bne.n	8000866 <__aeabi_fadd+0x1ea>
 8000864:	e09a      	b.n	800099c <__aeabi_fadd+0x320>
 8000866:	000a      	movs	r2, r1
 8000868:	001d      	movs	r5, r3
 800086a:	003c      	movs	r4, r7
 800086c:	e724      	b.n	80006b8 <__aeabi_fadd+0x3c>
 800086e:	3f01      	subs	r7, #1
 8000870:	2f00      	cmp	r7, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_fadd+0x1fa>
 8000874:	e758      	b.n	8000728 <__aeabi_fadd+0xac>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d000      	beq.n	800087c <__aeabi_fadd+0x200>
 800087a:	e74a      	b.n	8000712 <__aeabi_fadd+0x96>
 800087c:	e7a7      	b.n	80007ce <__aeabi_fadd+0x152>
 800087e:	1b5e      	subs	r6, r3, r5
 8000880:	4689      	mov	r9, r1
 8000882:	e776      	b.n	8000772 <__aeabi_fadd+0xf6>
 8000884:	2d00      	cmp	r5, #0
 8000886:	d11c      	bne.n	80008c2 <__aeabi_fadd+0x246>
 8000888:	000a      	movs	r2, r1
 800088a:	28ff      	cmp	r0, #255	; 0xff
 800088c:	d01f      	beq.n	80008ce <__aeabi_fadd+0x252>
 800088e:	0004      	movs	r4, r0
 8000890:	001d      	movs	r5, r3
 8000892:	e711      	b.n	80006b8 <__aeabi_fadd+0x3c>
 8000894:	2d00      	cmp	r5, #0
 8000896:	d15d      	bne.n	8000954 <__aeabi_fadd+0x2d8>
 8000898:	2b00      	cmp	r3, #0
 800089a:	d117      	bne.n	80008cc <__aeabi_fadd+0x250>
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	2200      	movs	r2, #0
 80008a0:	03db      	lsls	r3, r3, #15
 80008a2:	26ff      	movs	r6, #255	; 0xff
 80008a4:	e70f      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80008a6:	000a      	movs	r2, r1
 80008a8:	26ff      	movs	r6, #255	; 0xff
 80008aa:	2300      	movs	r3, #0
 80008ac:	e70b      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80008ae:	2c00      	cmp	r4, #0
 80008b0:	d121      	bne.n	80008f6 <__aeabi_fadd+0x27a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d166      	bne.n	8000984 <__aeabi_fadd+0x308>
 80008b6:	28ff      	cmp	r0, #255	; 0xff
 80008b8:	d1e9      	bne.n	800088e <__aeabi_fadd+0x212>
 80008ba:	001d      	movs	r5, r3
 80008bc:	e787      	b.n	80007ce <__aeabi_fadd+0x152>
 80008be:	2301      	movs	r3, #1
 80008c0:	e752      	b.n	8000768 <__aeabi_fadd+0xec>
 80008c2:	1c7a      	adds	r2, r7, #1
 80008c4:	d0a7      	beq.n	8000816 <__aeabi_fadd+0x19a>
 80008c6:	43fa      	mvns	r2, r7
 80008c8:	28ff      	cmp	r0, #255	; 0xff
 80008ca:	d199      	bne.n	8000800 <__aeabi_fadd+0x184>
 80008cc:	000a      	movs	r2, r1
 80008ce:	001d      	movs	r5, r3
 80008d0:	24ff      	movs	r4, #255	; 0xff
 80008d2:	e6f1      	b.n	80006b8 <__aeabi_fadd+0x3c>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d121      	bne.n	800091c <__aeabi_fadd+0x2a0>
 80008d8:	2d00      	cmp	r5, #0
 80008da:	d04f      	beq.n	800097c <__aeabi_fadd+0x300>
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d04c      	beq.n	800097a <__aeabi_fadd+0x2fe>
 80008e0:	18ed      	adds	r5, r5, r3
 80008e2:	016b      	lsls	r3, r5, #5
 80008e4:	d59e      	bpl.n	8000824 <__aeabi_fadd+0x1a8>
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <__aeabi_fadd+0x330>)
 80008e8:	3607      	adds	r6, #7
 80008ea:	402e      	ands	r6, r5
 80008ec:	2401      	movs	r4, #1
 80008ee:	401d      	ands	r5, r3
 80008f0:	e754      	b.n	800079c <__aeabi_fadd+0x120>
 80008f2:	2301      	movs	r3, #1
 80008f4:	e718      	b.n	8000728 <__aeabi_fadd+0xac>
 80008f6:	28ff      	cmp	r0, #255	; 0xff
 80008f8:	d0df      	beq.n	80008ba <__aeabi_fadd+0x23e>
 80008fa:	2480      	movs	r4, #128	; 0x80
 80008fc:	04e4      	lsls	r4, r4, #19
 80008fe:	427f      	negs	r7, r7
 8000900:	4325      	orrs	r5, r4
 8000902:	2f1b      	cmp	r7, #27
 8000904:	dc4d      	bgt.n	80009a2 <__aeabi_fadd+0x326>
 8000906:	2620      	movs	r6, #32
 8000908:	1bf6      	subs	r6, r6, r7
 800090a:	002c      	movs	r4, r5
 800090c:	40b5      	lsls	r5, r6
 800090e:	40fc      	lsrs	r4, r7
 8000910:	1e6a      	subs	r2, r5, #1
 8000912:	4195      	sbcs	r5, r2
 8000914:	4325      	orrs	r5, r4
 8000916:	18ed      	adds	r5, r5, r3
 8000918:	0004      	movs	r4, r0
 800091a:	e706      	b.n	800072a <__aeabi_fadd+0xae>
 800091c:	2d00      	cmp	r5, #0
 800091e:	d0cc      	beq.n	80008ba <__aeabi_fadd+0x23e>
 8000920:	2b00      	cmp	r3, #0
 8000922:	d100      	bne.n	8000926 <__aeabi_fadd+0x2aa>
 8000924:	e753      	b.n	80007ce <__aeabi_fadd+0x152>
 8000926:	2180      	movs	r1, #128	; 0x80
 8000928:	4660      	mov	r0, ip
 800092a:	03c9      	lsls	r1, r1, #15
 800092c:	4208      	tst	r0, r1
 800092e:	d003      	beq.n	8000938 <__aeabi_fadd+0x2bc>
 8000930:	4640      	mov	r0, r8
 8000932:	4208      	tst	r0, r1
 8000934:	d100      	bne.n	8000938 <__aeabi_fadd+0x2bc>
 8000936:	001d      	movs	r5, r3
 8000938:	2101      	movs	r1, #1
 800093a:	4011      	ands	r1, r2
 800093c:	e747      	b.n	80007ce <__aeabi_fadd+0x152>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d100      	bne.n	8000944 <__aeabi_fadd+0x2c8>
 8000942:	e6b9      	b.n	80006b8 <__aeabi_fadd+0x3c>
 8000944:	1aea      	subs	r2, r5, r3
 8000946:	0150      	lsls	r0, r2, #5
 8000948:	d525      	bpl.n	8000996 <__aeabi_fadd+0x31a>
 800094a:	2607      	movs	r6, #7
 800094c:	1b5d      	subs	r5, r3, r5
 800094e:	402e      	ands	r6, r5
 8000950:	4689      	mov	r9, r1
 8000952:	e723      	b.n	800079c <__aeabi_fadd+0x120>
 8000954:	24ff      	movs	r4, #255	; 0xff
 8000956:	2b00      	cmp	r3, #0
 8000958:	d100      	bne.n	800095c <__aeabi_fadd+0x2e0>
 800095a:	e6ad      	b.n	80006b8 <__aeabi_fadd+0x3c>
 800095c:	2280      	movs	r2, #128	; 0x80
 800095e:	4660      	mov	r0, ip
 8000960:	03d2      	lsls	r2, r2, #15
 8000962:	4210      	tst	r0, r2
 8000964:	d004      	beq.n	8000970 <__aeabi_fadd+0x2f4>
 8000966:	4640      	mov	r0, r8
 8000968:	4210      	tst	r0, r2
 800096a:	d101      	bne.n	8000970 <__aeabi_fadd+0x2f4>
 800096c:	001d      	movs	r5, r3
 800096e:	4689      	mov	r9, r1
 8000970:	2201      	movs	r2, #1
 8000972:	464b      	mov	r3, r9
 8000974:	24ff      	movs	r4, #255	; 0xff
 8000976:	401a      	ands	r2, r3
 8000978:	e69e      	b.n	80006b8 <__aeabi_fadd+0x3c>
 800097a:	002b      	movs	r3, r5
 800097c:	08dd      	lsrs	r5, r3, #3
 800097e:	000a      	movs	r2, r1
 8000980:	2400      	movs	r4, #0
 8000982:	e69d      	b.n	80006c0 <__aeabi_fadd+0x44>
 8000984:	1c7a      	adds	r2, r7, #1
 8000986:	d0c6      	beq.n	8000916 <__aeabi_fadd+0x29a>
 8000988:	43ff      	mvns	r7, r7
 800098a:	28ff      	cmp	r0, #255	; 0xff
 800098c:	d1b9      	bne.n	8000902 <__aeabi_fadd+0x286>
 800098e:	001d      	movs	r5, r3
 8000990:	e71d      	b.n	80007ce <__aeabi_fadd+0x152>
 8000992:	2501      	movs	r5, #1
 8000994:	e73f      	b.n	8000816 <__aeabi_fadd+0x19a>
 8000996:	1e15      	subs	r5, r2, #0
 8000998:	d000      	beq.n	800099c <__aeabi_fadd+0x320>
 800099a:	e744      	b.n	8000826 <__aeabi_fadd+0x1aa>
 800099c:	2200      	movs	r2, #0
 800099e:	2300      	movs	r3, #0
 80009a0:	e691      	b.n	80006c6 <__aeabi_fadd+0x4a>
 80009a2:	2501      	movs	r5, #1
 80009a4:	e7b7      	b.n	8000916 <__aeabi_fadd+0x29a>
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	7dffffff 	.word	0x7dffffff
 80009ac:	fbffffff 	.word	0xfbffffff

080009b0 <__aeabi_fdiv>:
 80009b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b2:	4657      	mov	r7, sl
 80009b4:	464e      	mov	r6, r9
 80009b6:	4645      	mov	r5, r8
 80009b8:	46de      	mov	lr, fp
 80009ba:	0244      	lsls	r4, r0, #9
 80009bc:	b5e0      	push	{r5, r6, r7, lr}
 80009be:	0046      	lsls	r6, r0, #1
 80009c0:	4688      	mov	r8, r1
 80009c2:	0a64      	lsrs	r4, r4, #9
 80009c4:	0e36      	lsrs	r6, r6, #24
 80009c6:	0fc7      	lsrs	r7, r0, #31
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d063      	beq.n	8000a94 <__aeabi_fdiv+0xe4>
 80009cc:	2eff      	cmp	r6, #255	; 0xff
 80009ce:	d024      	beq.n	8000a1a <__aeabi_fdiv+0x6a>
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	00e4      	lsls	r4, r4, #3
 80009d4:	04db      	lsls	r3, r3, #19
 80009d6:	431c      	orrs	r4, r3
 80009d8:	2300      	movs	r3, #0
 80009da:	4699      	mov	r9, r3
 80009dc:	469b      	mov	fp, r3
 80009de:	3e7f      	subs	r6, #127	; 0x7f
 80009e0:	4643      	mov	r3, r8
 80009e2:	4642      	mov	r2, r8
 80009e4:	025d      	lsls	r5, r3, #9
 80009e6:	0fd2      	lsrs	r2, r2, #31
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	0a6d      	lsrs	r5, r5, #9
 80009ec:	0e1b      	lsrs	r3, r3, #24
 80009ee:	4690      	mov	r8, r2
 80009f0:	4692      	mov	sl, r2
 80009f2:	d065      	beq.n	8000ac0 <__aeabi_fdiv+0x110>
 80009f4:	2bff      	cmp	r3, #255	; 0xff
 80009f6:	d055      	beq.n	8000aa4 <__aeabi_fdiv+0xf4>
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	2100      	movs	r1, #0
 80009fc:	00ed      	lsls	r5, r5, #3
 80009fe:	04d2      	lsls	r2, r2, #19
 8000a00:	3b7f      	subs	r3, #127	; 0x7f
 8000a02:	4315      	orrs	r5, r2
 8000a04:	1af6      	subs	r6, r6, r3
 8000a06:	4643      	mov	r3, r8
 8000a08:	464a      	mov	r2, r9
 8000a0a:	407b      	eors	r3, r7
 8000a0c:	2a0f      	cmp	r2, #15
 8000a0e:	d900      	bls.n	8000a12 <__aeabi_fdiv+0x62>
 8000a10:	e08d      	b.n	8000b2e <__aeabi_fdiv+0x17e>
 8000a12:	486d      	ldr	r0, [pc, #436]	; (8000bc8 <__aeabi_fdiv+0x218>)
 8000a14:	0092      	lsls	r2, r2, #2
 8000a16:	5882      	ldr	r2, [r0, r2]
 8000a18:	4697      	mov	pc, r2
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d154      	bne.n	8000ac8 <__aeabi_fdiv+0x118>
 8000a1e:	2308      	movs	r3, #8
 8000a20:	4699      	mov	r9, r3
 8000a22:	3b06      	subs	r3, #6
 8000a24:	26ff      	movs	r6, #255	; 0xff
 8000a26:	469b      	mov	fp, r3
 8000a28:	e7da      	b.n	80009e0 <__aeabi_fdiv+0x30>
 8000a2a:	2500      	movs	r5, #0
 8000a2c:	4653      	mov	r3, sl
 8000a2e:	2902      	cmp	r1, #2
 8000a30:	d01b      	beq.n	8000a6a <__aeabi_fdiv+0xba>
 8000a32:	2903      	cmp	r1, #3
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fdiv+0x88>
 8000a36:	e0bf      	b.n	8000bb8 <__aeabi_fdiv+0x208>
 8000a38:	2901      	cmp	r1, #1
 8000a3a:	d028      	beq.n	8000a8e <__aeabi_fdiv+0xde>
 8000a3c:	0030      	movs	r0, r6
 8000a3e:	307f      	adds	r0, #127	; 0x7f
 8000a40:	2800      	cmp	r0, #0
 8000a42:	dd20      	ble.n	8000a86 <__aeabi_fdiv+0xd6>
 8000a44:	076a      	lsls	r2, r5, #29
 8000a46:	d004      	beq.n	8000a52 <__aeabi_fdiv+0xa2>
 8000a48:	220f      	movs	r2, #15
 8000a4a:	402a      	ands	r2, r5
 8000a4c:	2a04      	cmp	r2, #4
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_fdiv+0xa2>
 8000a50:	3504      	adds	r5, #4
 8000a52:	012a      	lsls	r2, r5, #4
 8000a54:	d503      	bpl.n	8000a5e <__aeabi_fdiv+0xae>
 8000a56:	0030      	movs	r0, r6
 8000a58:	4a5c      	ldr	r2, [pc, #368]	; (8000bcc <__aeabi_fdiv+0x21c>)
 8000a5a:	3080      	adds	r0, #128	; 0x80
 8000a5c:	4015      	ands	r5, r2
 8000a5e:	28fe      	cmp	r0, #254	; 0xfe
 8000a60:	dc03      	bgt.n	8000a6a <__aeabi_fdiv+0xba>
 8000a62:	01ac      	lsls	r4, r5, #6
 8000a64:	0a64      	lsrs	r4, r4, #9
 8000a66:	b2c2      	uxtb	r2, r0
 8000a68:	e001      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000a6a:	22ff      	movs	r2, #255	; 0xff
 8000a6c:	2400      	movs	r4, #0
 8000a6e:	0264      	lsls	r4, r4, #9
 8000a70:	05d2      	lsls	r2, r2, #23
 8000a72:	0a60      	lsrs	r0, r4, #9
 8000a74:	07db      	lsls	r3, r3, #31
 8000a76:	4310      	orrs	r0, r2
 8000a78:	4318      	orrs	r0, r3
 8000a7a:	bc3c      	pop	{r2, r3, r4, r5}
 8000a7c:	4690      	mov	r8, r2
 8000a7e:	4699      	mov	r9, r3
 8000a80:	46a2      	mov	sl, r4
 8000a82:	46ab      	mov	fp, r5
 8000a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a86:	2201      	movs	r2, #1
 8000a88:	1a10      	subs	r0, r2, r0
 8000a8a:	281b      	cmp	r0, #27
 8000a8c:	dd7c      	ble.n	8000b88 <__aeabi_fdiv+0x1d8>
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2400      	movs	r4, #0
 8000a92:	e7ec      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000a94:	2c00      	cmp	r4, #0
 8000a96:	d11d      	bne.n	8000ad4 <__aeabi_fdiv+0x124>
 8000a98:	2304      	movs	r3, #4
 8000a9a:	4699      	mov	r9, r3
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	469b      	mov	fp, r3
 8000aa2:	e79d      	b.n	80009e0 <__aeabi_fdiv+0x30>
 8000aa4:	3eff      	subs	r6, #255	; 0xff
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d120      	bne.n	8000aec <__aeabi_fdiv+0x13c>
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4643      	mov	r3, r8
 8000aae:	464a      	mov	r2, r9
 8000ab0:	407b      	eors	r3, r7
 8000ab2:	430a      	orrs	r2, r1
 8000ab4:	2a0f      	cmp	r2, #15
 8000ab6:	d8d8      	bhi.n	8000a6a <__aeabi_fdiv+0xba>
 8000ab8:	4845      	ldr	r0, [pc, #276]	; (8000bd0 <__aeabi_fdiv+0x220>)
 8000aba:	0092      	lsls	r2, r2, #2
 8000abc:	5882      	ldr	r2, [r0, r2]
 8000abe:	4697      	mov	pc, r2
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d119      	bne.n	8000af8 <__aeabi_fdiv+0x148>
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	e7f1      	b.n	8000aac <__aeabi_fdiv+0xfc>
 8000ac8:	230c      	movs	r3, #12
 8000aca:	4699      	mov	r9, r3
 8000acc:	3b09      	subs	r3, #9
 8000ace:	26ff      	movs	r6, #255	; 0xff
 8000ad0:	469b      	mov	fp, r3
 8000ad2:	e785      	b.n	80009e0 <__aeabi_fdiv+0x30>
 8000ad4:	0020      	movs	r0, r4
 8000ad6:	f001 fb2f 	bl	8002138 <__clzsi2>
 8000ada:	2676      	movs	r6, #118	; 0x76
 8000adc:	1f43      	subs	r3, r0, #5
 8000ade:	409c      	lsls	r4, r3
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	4276      	negs	r6, r6
 8000ae4:	1a36      	subs	r6, r6, r0
 8000ae6:	4699      	mov	r9, r3
 8000ae8:	469b      	mov	fp, r3
 8000aea:	e779      	b.n	80009e0 <__aeabi_fdiv+0x30>
 8000aec:	464a      	mov	r2, r9
 8000aee:	2303      	movs	r3, #3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	4691      	mov	r9, r2
 8000af4:	2103      	movs	r1, #3
 8000af6:	e786      	b.n	8000a06 <__aeabi_fdiv+0x56>
 8000af8:	0028      	movs	r0, r5
 8000afa:	f001 fb1d 	bl	8002138 <__clzsi2>
 8000afe:	1f43      	subs	r3, r0, #5
 8000b00:	1836      	adds	r6, r6, r0
 8000b02:	409d      	lsls	r5, r3
 8000b04:	3676      	adds	r6, #118	; 0x76
 8000b06:	2100      	movs	r1, #0
 8000b08:	e77d      	b.n	8000a06 <__aeabi_fdiv+0x56>
 8000b0a:	2480      	movs	r4, #128	; 0x80
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	03e4      	lsls	r4, r4, #15
 8000b10:	22ff      	movs	r2, #255	; 0xff
 8000b12:	e7ac      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000b14:	2500      	movs	r5, #0
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	03db      	lsls	r3, r3, #15
 8000b1a:	421c      	tst	r4, r3
 8000b1c:	d028      	beq.n	8000b70 <__aeabi_fdiv+0x1c0>
 8000b1e:	421d      	tst	r5, r3
 8000b20:	d126      	bne.n	8000b70 <__aeabi_fdiv+0x1c0>
 8000b22:	432b      	orrs	r3, r5
 8000b24:	025c      	lsls	r4, r3, #9
 8000b26:	0a64      	lsrs	r4, r4, #9
 8000b28:	4643      	mov	r3, r8
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	e79f      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000b2e:	0162      	lsls	r2, r4, #5
 8000b30:	016c      	lsls	r4, r5, #5
 8000b32:	42a2      	cmp	r2, r4
 8000b34:	d224      	bcs.n	8000b80 <__aeabi_fdiv+0x1d0>
 8000b36:	211b      	movs	r1, #27
 8000b38:	2500      	movs	r5, #0
 8000b3a:	3e01      	subs	r6, #1
 8000b3c:	2701      	movs	r7, #1
 8000b3e:	0010      	movs	r0, r2
 8000b40:	006d      	lsls	r5, r5, #1
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	2800      	cmp	r0, #0
 8000b46:	db01      	blt.n	8000b4c <__aeabi_fdiv+0x19c>
 8000b48:	4294      	cmp	r4, r2
 8000b4a:	d801      	bhi.n	8000b50 <__aeabi_fdiv+0x1a0>
 8000b4c:	1b12      	subs	r2, r2, r4
 8000b4e:	433d      	orrs	r5, r7
 8000b50:	3901      	subs	r1, #1
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d1f3      	bne.n	8000b3e <__aeabi_fdiv+0x18e>
 8000b56:	0014      	movs	r4, r2
 8000b58:	1e62      	subs	r2, r4, #1
 8000b5a:	4194      	sbcs	r4, r2
 8000b5c:	4325      	orrs	r5, r4
 8000b5e:	e76d      	b.n	8000a3c <__aeabi_fdiv+0x8c>
 8000b60:	46ba      	mov	sl, r7
 8000b62:	4659      	mov	r1, fp
 8000b64:	0025      	movs	r5, r4
 8000b66:	4653      	mov	r3, sl
 8000b68:	2902      	cmp	r1, #2
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_fdiv+0x1be>
 8000b6c:	e761      	b.n	8000a32 <__aeabi_fdiv+0x82>
 8000b6e:	e77c      	b.n	8000a6a <__aeabi_fdiv+0xba>
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	431c      	orrs	r4, r3
 8000b76:	0264      	lsls	r4, r4, #9
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	e776      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000b80:	1b12      	subs	r2, r2, r4
 8000b82:	211a      	movs	r1, #26
 8000b84:	2501      	movs	r5, #1
 8000b86:	e7d9      	b.n	8000b3c <__aeabi_fdiv+0x18c>
 8000b88:	369e      	adds	r6, #158	; 0x9e
 8000b8a:	002a      	movs	r2, r5
 8000b8c:	40b5      	lsls	r5, r6
 8000b8e:	002c      	movs	r4, r5
 8000b90:	40c2      	lsrs	r2, r0
 8000b92:	1e65      	subs	r5, r4, #1
 8000b94:	41ac      	sbcs	r4, r5
 8000b96:	4314      	orrs	r4, r2
 8000b98:	0762      	lsls	r2, r4, #29
 8000b9a:	d004      	beq.n	8000ba6 <__aeabi_fdiv+0x1f6>
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	4022      	ands	r2, r4
 8000ba0:	2a04      	cmp	r2, #4
 8000ba2:	d000      	beq.n	8000ba6 <__aeabi_fdiv+0x1f6>
 8000ba4:	3404      	adds	r4, #4
 8000ba6:	0162      	lsls	r2, r4, #5
 8000ba8:	d403      	bmi.n	8000bb2 <__aeabi_fdiv+0x202>
 8000baa:	01a4      	lsls	r4, r4, #6
 8000bac:	0a64      	lsrs	r4, r4, #9
 8000bae:	2200      	movs	r2, #0
 8000bb0:	e75d      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2400      	movs	r4, #0
 8000bb6:	e75a      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000bb8:	2480      	movs	r4, #128	; 0x80
 8000bba:	03e4      	lsls	r4, r4, #15
 8000bbc:	432c      	orrs	r4, r5
 8000bbe:	0264      	lsls	r4, r4, #9
 8000bc0:	0a64      	lsrs	r4, r4, #9
 8000bc2:	22ff      	movs	r2, #255	; 0xff
 8000bc4:	e753      	b.n	8000a6e <__aeabi_fdiv+0xbe>
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	08009d34 	.word	0x08009d34
 8000bcc:	f7ffffff 	.word	0xf7ffffff
 8000bd0:	08009d74 	.word	0x08009d74

08000bd4 <__eqsf2>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	0042      	lsls	r2, r0, #1
 8000bd8:	024e      	lsls	r6, r1, #9
 8000bda:	004c      	lsls	r4, r1, #1
 8000bdc:	0245      	lsls	r5, r0, #9
 8000bde:	0a6d      	lsrs	r5, r5, #9
 8000be0:	0e12      	lsrs	r2, r2, #24
 8000be2:	0fc3      	lsrs	r3, r0, #31
 8000be4:	0a76      	lsrs	r6, r6, #9
 8000be6:	0e24      	lsrs	r4, r4, #24
 8000be8:	0fc9      	lsrs	r1, r1, #31
 8000bea:	2aff      	cmp	r2, #255	; 0xff
 8000bec:	d00f      	beq.n	8000c0e <__eqsf2+0x3a>
 8000bee:	2cff      	cmp	r4, #255	; 0xff
 8000bf0:	d011      	beq.n	8000c16 <__eqsf2+0x42>
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	42a2      	cmp	r2, r4
 8000bf6:	d000      	beq.n	8000bfa <__eqsf2+0x26>
 8000bf8:	bd70      	pop	{r4, r5, r6, pc}
 8000bfa:	42b5      	cmp	r5, r6
 8000bfc:	d1fc      	bne.n	8000bf8 <__eqsf2+0x24>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d00d      	beq.n	8000c1e <__eqsf2+0x4a>
 8000c02:	2a00      	cmp	r2, #0
 8000c04:	d1f8      	bne.n	8000bf8 <__eqsf2+0x24>
 8000c06:	0028      	movs	r0, r5
 8000c08:	1e45      	subs	r5, r0, #1
 8000c0a:	41a8      	sbcs	r0, r5
 8000c0c:	e7f4      	b.n	8000bf8 <__eqsf2+0x24>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2d00      	cmp	r5, #0
 8000c12:	d1f1      	bne.n	8000bf8 <__eqsf2+0x24>
 8000c14:	e7eb      	b.n	8000bee <__eqsf2+0x1a>
 8000c16:	2001      	movs	r0, #1
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d1ed      	bne.n	8000bf8 <__eqsf2+0x24>
 8000c1c:	e7e9      	b.n	8000bf2 <__eqsf2+0x1e>
 8000c1e:	2000      	movs	r0, #0
 8000c20:	e7ea      	b.n	8000bf8 <__eqsf2+0x24>
 8000c22:	46c0      	nop			; (mov r8, r8)

08000c24 <__gesf2>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	004a      	lsls	r2, r1, #1
 8000c28:	024e      	lsls	r6, r1, #9
 8000c2a:	0245      	lsls	r5, r0, #9
 8000c2c:	0044      	lsls	r4, r0, #1
 8000c2e:	0a6d      	lsrs	r5, r5, #9
 8000c30:	0e24      	lsrs	r4, r4, #24
 8000c32:	0fc3      	lsrs	r3, r0, #31
 8000c34:	0a76      	lsrs	r6, r6, #9
 8000c36:	0e12      	lsrs	r2, r2, #24
 8000c38:	0fc9      	lsrs	r1, r1, #31
 8000c3a:	2cff      	cmp	r4, #255	; 0xff
 8000c3c:	d015      	beq.n	8000c6a <__gesf2+0x46>
 8000c3e:	2aff      	cmp	r2, #255	; 0xff
 8000c40:	d00e      	beq.n	8000c60 <__gesf2+0x3c>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d115      	bne.n	8000c72 <__gesf2+0x4e>
 8000c46:	2a00      	cmp	r2, #0
 8000c48:	d101      	bne.n	8000c4e <__gesf2+0x2a>
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d01c      	beq.n	8000c88 <__gesf2+0x64>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	d014      	beq.n	8000c7c <__gesf2+0x58>
 8000c52:	428b      	cmp	r3, r1
 8000c54:	d027      	beq.n	8000ca6 <__gesf2+0x82>
 8000c56:	2002      	movs	r0, #2
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	4018      	ands	r0, r3
 8000c5c:	3801      	subs	r0, #1
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
 8000c60:	2e00      	cmp	r6, #0
 8000c62:	d0ee      	beq.n	8000c42 <__gesf2+0x1e>
 8000c64:	2002      	movs	r0, #2
 8000c66:	4240      	negs	r0, r0
 8000c68:	e7f9      	b.n	8000c5e <__gesf2+0x3a>
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	d1fa      	bne.n	8000c64 <__gesf2+0x40>
 8000c6e:	2aff      	cmp	r2, #255	; 0xff
 8000c70:	d00e      	beq.n	8000c90 <__gesf2+0x6c>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d10e      	bne.n	8000c94 <__gesf2+0x70>
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d0ed      	beq.n	8000c56 <__gesf2+0x32>
 8000c7a:	e00b      	b.n	8000c94 <__gesf2+0x70>
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	3901      	subs	r1, #1
 8000c80:	4399      	bics	r1, r3
 8000c82:	0008      	movs	r0, r1
 8000c84:	3001      	adds	r0, #1
 8000c86:	e7ea      	b.n	8000c5e <__gesf2+0x3a>
 8000c88:	2000      	movs	r0, #0
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e7      	beq.n	8000c5e <__gesf2+0x3a>
 8000c8e:	e7e2      	b.n	8000c56 <__gesf2+0x32>
 8000c90:	2e00      	cmp	r6, #0
 8000c92:	d1e7      	bne.n	8000c64 <__gesf2+0x40>
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d1de      	bne.n	8000c56 <__gesf2+0x32>
 8000c98:	4294      	cmp	r4, r2
 8000c9a:	dd05      	ble.n	8000ca8 <__gesf2+0x84>
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	1e58      	subs	r0, r3, #1
 8000ca0:	4008      	ands	r0, r1
 8000ca2:	3801      	subs	r0, #1
 8000ca4:	e7db      	b.n	8000c5e <__gesf2+0x3a>
 8000ca6:	2400      	movs	r4, #0
 8000ca8:	42a2      	cmp	r2, r4
 8000caa:	dc04      	bgt.n	8000cb6 <__gesf2+0x92>
 8000cac:	42b5      	cmp	r5, r6
 8000cae:	d8d2      	bhi.n	8000c56 <__gesf2+0x32>
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	42b5      	cmp	r5, r6
 8000cb4:	d2d3      	bcs.n	8000c5e <__gesf2+0x3a>
 8000cb6:	1e58      	subs	r0, r3, #1
 8000cb8:	2301      	movs	r3, #1
 8000cba:	4398      	bics	r0, r3
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	e7ce      	b.n	8000c5e <__gesf2+0x3a>

08000cc0 <__lesf2>:
 8000cc0:	b530      	push	{r4, r5, lr}
 8000cc2:	0042      	lsls	r2, r0, #1
 8000cc4:	0244      	lsls	r4, r0, #9
 8000cc6:	024d      	lsls	r5, r1, #9
 8000cc8:	0fc3      	lsrs	r3, r0, #31
 8000cca:	0048      	lsls	r0, r1, #1
 8000ccc:	0a64      	lsrs	r4, r4, #9
 8000cce:	0e12      	lsrs	r2, r2, #24
 8000cd0:	0a6d      	lsrs	r5, r5, #9
 8000cd2:	0e00      	lsrs	r0, r0, #24
 8000cd4:	0fc9      	lsrs	r1, r1, #31
 8000cd6:	2aff      	cmp	r2, #255	; 0xff
 8000cd8:	d012      	beq.n	8000d00 <__lesf2+0x40>
 8000cda:	28ff      	cmp	r0, #255	; 0xff
 8000cdc:	d00c      	beq.n	8000cf8 <__lesf2+0x38>
 8000cde:	2a00      	cmp	r2, #0
 8000ce0:	d112      	bne.n	8000d08 <__lesf2+0x48>
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	d119      	bne.n	8000d1a <__lesf2+0x5a>
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d117      	bne.n	8000d1a <__lesf2+0x5a>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d02b      	beq.n	8000d46 <__lesf2+0x86>
 8000cee:	2002      	movs	r0, #2
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	4018      	ands	r0, r3
 8000cf4:	3801      	subs	r0, #1
 8000cf6:	e026      	b.n	8000d46 <__lesf2+0x86>
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0f0      	beq.n	8000cde <__lesf2+0x1e>
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	e022      	b.n	8000d46 <__lesf2+0x86>
 8000d00:	2c00      	cmp	r4, #0
 8000d02:	d1fb      	bne.n	8000cfc <__lesf2+0x3c>
 8000d04:	28ff      	cmp	r0, #255	; 0xff
 8000d06:	d01f      	beq.n	8000d48 <__lesf2+0x88>
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d11f      	bne.n	8000d4c <__lesf2+0x8c>
 8000d0c:	2d00      	cmp	r5, #0
 8000d0e:	d11d      	bne.n	8000d4c <__lesf2+0x8c>
 8000d10:	2002      	movs	r0, #2
 8000d12:	3b01      	subs	r3, #1
 8000d14:	4018      	ands	r0, r3
 8000d16:	3801      	subs	r0, #1
 8000d18:	e015      	b.n	8000d46 <__lesf2+0x86>
 8000d1a:	2c00      	cmp	r4, #0
 8000d1c:	d00e      	beq.n	8000d3c <__lesf2+0x7c>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d1e5      	bne.n	8000cee <__lesf2+0x2e>
 8000d22:	2200      	movs	r2, #0
 8000d24:	4290      	cmp	r0, r2
 8000d26:	dc04      	bgt.n	8000d32 <__lesf2+0x72>
 8000d28:	42ac      	cmp	r4, r5
 8000d2a:	d8e0      	bhi.n	8000cee <__lesf2+0x2e>
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	42ac      	cmp	r4, r5
 8000d30:	d209      	bcs.n	8000d46 <__lesf2+0x86>
 8000d32:	1e58      	subs	r0, r3, #1
 8000d34:	2301      	movs	r3, #1
 8000d36:	4398      	bics	r0, r3
 8000d38:	3001      	adds	r0, #1
 8000d3a:	e004      	b.n	8000d46 <__lesf2+0x86>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	3901      	subs	r1, #1
 8000d40:	4399      	bics	r1, r3
 8000d42:	0008      	movs	r0, r1
 8000d44:	3001      	adds	r0, #1
 8000d46:	bd30      	pop	{r4, r5, pc}
 8000d48:	2d00      	cmp	r5, #0
 8000d4a:	d1d7      	bne.n	8000cfc <__lesf2+0x3c>
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d1ce      	bne.n	8000cee <__lesf2+0x2e>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	dde7      	ble.n	8000d24 <__lesf2+0x64>
 8000d54:	2102      	movs	r1, #2
 8000d56:	1e58      	subs	r0, r3, #1
 8000d58:	4008      	ands	r0, r1
 8000d5a:	3801      	subs	r0, #1
 8000d5c:	e7f3      	b.n	8000d46 <__lesf2+0x86>
 8000d5e:	46c0      	nop			; (mov r8, r8)

08000d60 <__aeabi_fmul>:
 8000d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d62:	464e      	mov	r6, r9
 8000d64:	4657      	mov	r7, sl
 8000d66:	4645      	mov	r5, r8
 8000d68:	46de      	mov	lr, fp
 8000d6a:	b5e0      	push	{r5, r6, r7, lr}
 8000d6c:	0243      	lsls	r3, r0, #9
 8000d6e:	0a5b      	lsrs	r3, r3, #9
 8000d70:	0045      	lsls	r5, r0, #1
 8000d72:	b083      	sub	sp, #12
 8000d74:	1c0f      	adds	r7, r1, #0
 8000d76:	4699      	mov	r9, r3
 8000d78:	0e2d      	lsrs	r5, r5, #24
 8000d7a:	0fc6      	lsrs	r6, r0, #31
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d057      	beq.n	8000e30 <__aeabi_fmul+0xd0>
 8000d80:	2dff      	cmp	r5, #255	; 0xff
 8000d82:	d024      	beq.n	8000dce <__aeabi_fmul+0x6e>
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	04c0      	lsls	r0, r0, #19
 8000d8a:	4318      	orrs	r0, r3
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4681      	mov	r9, r0
 8000d90:	469a      	mov	sl, r3
 8000d92:	469b      	mov	fp, r3
 8000d94:	3d7f      	subs	r5, #127	; 0x7f
 8000d96:	027c      	lsls	r4, r7, #9
 8000d98:	007a      	lsls	r2, r7, #1
 8000d9a:	0ffb      	lsrs	r3, r7, #31
 8000d9c:	0a64      	lsrs	r4, r4, #9
 8000d9e:	0e12      	lsrs	r2, r2, #24
 8000da0:	4698      	mov	r8, r3
 8000da2:	d023      	beq.n	8000dec <__aeabi_fmul+0x8c>
 8000da4:	2aff      	cmp	r2, #255	; 0xff
 8000da6:	d04b      	beq.n	8000e40 <__aeabi_fmul+0xe0>
 8000da8:	00e3      	lsls	r3, r4, #3
 8000daa:	2480      	movs	r4, #128	; 0x80
 8000dac:	2000      	movs	r0, #0
 8000dae:	04e4      	lsls	r4, r4, #19
 8000db0:	3a7f      	subs	r2, #127	; 0x7f
 8000db2:	431c      	orrs	r4, r3
 8000db4:	18ad      	adds	r5, r5, r2
 8000db6:	1c6b      	adds	r3, r5, #1
 8000db8:	4647      	mov	r7, r8
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	4653      	mov	r3, sl
 8000dbe:	4077      	eors	r7, r6
 8000dc0:	003a      	movs	r2, r7
 8000dc2:	2b0f      	cmp	r3, #15
 8000dc4:	d848      	bhi.n	8000e58 <__aeabi_fmul+0xf8>
 8000dc6:	497d      	ldr	r1, [pc, #500]	; (8000fbc <__aeabi_fmul+0x25c>)
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	58cb      	ldr	r3, [r1, r3]
 8000dcc:	469f      	mov	pc, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d000      	beq.n	8000dd4 <__aeabi_fmul+0x74>
 8000dd2:	e085      	b.n	8000ee0 <__aeabi_fmul+0x180>
 8000dd4:	3308      	adds	r3, #8
 8000dd6:	469a      	mov	sl, r3
 8000dd8:	3b06      	subs	r3, #6
 8000dda:	469b      	mov	fp, r3
 8000ddc:	027c      	lsls	r4, r7, #9
 8000dde:	007a      	lsls	r2, r7, #1
 8000de0:	0ffb      	lsrs	r3, r7, #31
 8000de2:	25ff      	movs	r5, #255	; 0xff
 8000de4:	0a64      	lsrs	r4, r4, #9
 8000de6:	0e12      	lsrs	r2, r2, #24
 8000de8:	4698      	mov	r8, r3
 8000dea:	d1db      	bne.n	8000da4 <__aeabi_fmul+0x44>
 8000dec:	2c00      	cmp	r4, #0
 8000dee:	d000      	beq.n	8000df2 <__aeabi_fmul+0x92>
 8000df0:	e090      	b.n	8000f14 <__aeabi_fmul+0x1b4>
 8000df2:	4652      	mov	r2, sl
 8000df4:	2301      	movs	r3, #1
 8000df6:	431a      	orrs	r2, r3
 8000df8:	4692      	mov	sl, r2
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	e7db      	b.n	8000db6 <__aeabi_fmul+0x56>
 8000dfe:	464c      	mov	r4, r9
 8000e00:	4658      	mov	r0, fp
 8000e02:	0017      	movs	r7, r2
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d024      	beq.n	8000e52 <__aeabi_fmul+0xf2>
 8000e08:	2803      	cmp	r0, #3
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_fmul+0xae>
 8000e0c:	e0cf      	b.n	8000fae <__aeabi_fmul+0x24e>
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2300      	movs	r3, #0
 8000e12:	2801      	cmp	r0, #1
 8000e14:	d14d      	bne.n	8000eb2 <__aeabi_fmul+0x152>
 8000e16:	0258      	lsls	r0, r3, #9
 8000e18:	05d2      	lsls	r2, r2, #23
 8000e1a:	0a40      	lsrs	r0, r0, #9
 8000e1c:	07ff      	lsls	r7, r7, #31
 8000e1e:	4310      	orrs	r0, r2
 8000e20:	4338      	orrs	r0, r7
 8000e22:	b003      	add	sp, #12
 8000e24:	bc3c      	pop	{r2, r3, r4, r5}
 8000e26:	4690      	mov	r8, r2
 8000e28:	4699      	mov	r9, r3
 8000e2a:	46a2      	mov	sl, r4
 8000e2c:	46ab      	mov	fp, r5
 8000e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d15b      	bne.n	8000eec <__aeabi_fmul+0x18c>
 8000e34:	2304      	movs	r3, #4
 8000e36:	469a      	mov	sl, r3
 8000e38:	3b03      	subs	r3, #3
 8000e3a:	2500      	movs	r5, #0
 8000e3c:	469b      	mov	fp, r3
 8000e3e:	e7aa      	b.n	8000d96 <__aeabi_fmul+0x36>
 8000e40:	35ff      	adds	r5, #255	; 0xff
 8000e42:	2c00      	cmp	r4, #0
 8000e44:	d160      	bne.n	8000f08 <__aeabi_fmul+0x1a8>
 8000e46:	4652      	mov	r2, sl
 8000e48:	2302      	movs	r3, #2
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	4692      	mov	sl, r2
 8000e4e:	2002      	movs	r0, #2
 8000e50:	e7b1      	b.n	8000db6 <__aeabi_fmul+0x56>
 8000e52:	22ff      	movs	r2, #255	; 0xff
 8000e54:	2300      	movs	r3, #0
 8000e56:	e7de      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000e58:	464b      	mov	r3, r9
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	469c      	mov	ip, r3
 8000e5e:	464b      	mov	r3, r9
 8000e60:	0426      	lsls	r6, r4, #16
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	0418      	lsls	r0, r3, #16
 8000e66:	4661      	mov	r1, ip
 8000e68:	0033      	movs	r3, r6
 8000e6a:	0c22      	lsrs	r2, r4, #16
 8000e6c:	4664      	mov	r4, ip
 8000e6e:	0c00      	lsrs	r0, r0, #16
 8000e70:	4343      	muls	r3, r0
 8000e72:	434e      	muls	r6, r1
 8000e74:	4350      	muls	r0, r2
 8000e76:	4354      	muls	r4, r2
 8000e78:	1980      	adds	r0, r0, r6
 8000e7a:	0c1a      	lsrs	r2, r3, #16
 8000e7c:	1812      	adds	r2, r2, r0
 8000e7e:	4296      	cmp	r6, r2
 8000e80:	d903      	bls.n	8000e8a <__aeabi_fmul+0x12a>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4464      	add	r4, ip
 8000e8a:	041b      	lsls	r3, r3, #16
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	0410      	lsls	r0, r2, #16
 8000e90:	18c0      	adds	r0, r0, r3
 8000e92:	0183      	lsls	r3, r0, #6
 8000e94:	1e5e      	subs	r6, r3, #1
 8000e96:	41b3      	sbcs	r3, r6
 8000e98:	0e80      	lsrs	r0, r0, #26
 8000e9a:	4318      	orrs	r0, r3
 8000e9c:	0c13      	lsrs	r3, r2, #16
 8000e9e:	191b      	adds	r3, r3, r4
 8000ea0:	019b      	lsls	r3, r3, #6
 8000ea2:	4303      	orrs	r3, r0
 8000ea4:	001c      	movs	r4, r3
 8000ea6:	0123      	lsls	r3, r4, #4
 8000ea8:	d579      	bpl.n	8000f9e <__aeabi_fmul+0x23e>
 8000eaa:	2301      	movs	r3, #1
 8000eac:	0862      	lsrs	r2, r4, #1
 8000eae:	401c      	ands	r4, r3
 8000eb0:	4314      	orrs	r4, r2
 8000eb2:	9a01      	ldr	r2, [sp, #4]
 8000eb4:	327f      	adds	r2, #127	; 0x7f
 8000eb6:	2a00      	cmp	r2, #0
 8000eb8:	dd4d      	ble.n	8000f56 <__aeabi_fmul+0x1f6>
 8000eba:	0763      	lsls	r3, r4, #29
 8000ebc:	d004      	beq.n	8000ec8 <__aeabi_fmul+0x168>
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	4023      	ands	r3, r4
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	d000      	beq.n	8000ec8 <__aeabi_fmul+0x168>
 8000ec6:	3404      	adds	r4, #4
 8000ec8:	0123      	lsls	r3, r4, #4
 8000eca:	d503      	bpl.n	8000ed4 <__aeabi_fmul+0x174>
 8000ecc:	4b3c      	ldr	r3, [pc, #240]	; (8000fc0 <__aeabi_fmul+0x260>)
 8000ece:	9a01      	ldr	r2, [sp, #4]
 8000ed0:	401c      	ands	r4, r3
 8000ed2:	3280      	adds	r2, #128	; 0x80
 8000ed4:	2afe      	cmp	r2, #254	; 0xfe
 8000ed6:	dcbc      	bgt.n	8000e52 <__aeabi_fmul+0xf2>
 8000ed8:	01a3      	lsls	r3, r4, #6
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	b2d2      	uxtb	r2, r2
 8000ede:	e79a      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	469a      	mov	sl, r3
 8000ee4:	3b09      	subs	r3, #9
 8000ee6:	25ff      	movs	r5, #255	; 0xff
 8000ee8:	469b      	mov	fp, r3
 8000eea:	e754      	b.n	8000d96 <__aeabi_fmul+0x36>
 8000eec:	0018      	movs	r0, r3
 8000eee:	f001 f923 	bl	8002138 <__clzsi2>
 8000ef2:	464a      	mov	r2, r9
 8000ef4:	1f43      	subs	r3, r0, #5
 8000ef6:	2576      	movs	r5, #118	; 0x76
 8000ef8:	409a      	lsls	r2, r3
 8000efa:	2300      	movs	r3, #0
 8000efc:	426d      	negs	r5, r5
 8000efe:	4691      	mov	r9, r2
 8000f00:	1a2d      	subs	r5, r5, r0
 8000f02:	469a      	mov	sl, r3
 8000f04:	469b      	mov	fp, r3
 8000f06:	e746      	b.n	8000d96 <__aeabi_fmul+0x36>
 8000f08:	4652      	mov	r2, sl
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	431a      	orrs	r2, r3
 8000f0e:	4692      	mov	sl, r2
 8000f10:	2003      	movs	r0, #3
 8000f12:	e750      	b.n	8000db6 <__aeabi_fmul+0x56>
 8000f14:	0020      	movs	r0, r4
 8000f16:	f001 f90f 	bl	8002138 <__clzsi2>
 8000f1a:	1f43      	subs	r3, r0, #5
 8000f1c:	1a2d      	subs	r5, r5, r0
 8000f1e:	409c      	lsls	r4, r3
 8000f20:	3d76      	subs	r5, #118	; 0x76
 8000f22:	2000      	movs	r0, #0
 8000f24:	e747      	b.n	8000db6 <__aeabi_fmul+0x56>
 8000f26:	2380      	movs	r3, #128	; 0x80
 8000f28:	2700      	movs	r7, #0
 8000f2a:	03db      	lsls	r3, r3, #15
 8000f2c:	22ff      	movs	r2, #255	; 0xff
 8000f2e:	e772      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000f30:	4642      	mov	r2, r8
 8000f32:	e766      	b.n	8000e02 <__aeabi_fmul+0xa2>
 8000f34:	464c      	mov	r4, r9
 8000f36:	0032      	movs	r2, r6
 8000f38:	4658      	mov	r0, fp
 8000f3a:	e762      	b.n	8000e02 <__aeabi_fmul+0xa2>
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	464a      	mov	r2, r9
 8000f40:	03db      	lsls	r3, r3, #15
 8000f42:	421a      	tst	r2, r3
 8000f44:	d022      	beq.n	8000f8c <__aeabi_fmul+0x22c>
 8000f46:	421c      	tst	r4, r3
 8000f48:	d120      	bne.n	8000f8c <__aeabi_fmul+0x22c>
 8000f4a:	4323      	orrs	r3, r4
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	0a5b      	lsrs	r3, r3, #9
 8000f50:	4647      	mov	r7, r8
 8000f52:	22ff      	movs	r2, #255	; 0xff
 8000f54:	e75f      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000f56:	2301      	movs	r3, #1
 8000f58:	1a9a      	subs	r2, r3, r2
 8000f5a:	2a1b      	cmp	r2, #27
 8000f5c:	dc21      	bgt.n	8000fa2 <__aeabi_fmul+0x242>
 8000f5e:	0023      	movs	r3, r4
 8000f60:	9901      	ldr	r1, [sp, #4]
 8000f62:	40d3      	lsrs	r3, r2
 8000f64:	319e      	adds	r1, #158	; 0x9e
 8000f66:	408c      	lsls	r4, r1
 8000f68:	001a      	movs	r2, r3
 8000f6a:	0023      	movs	r3, r4
 8000f6c:	1e5c      	subs	r4, r3, #1
 8000f6e:	41a3      	sbcs	r3, r4
 8000f70:	4313      	orrs	r3, r2
 8000f72:	075a      	lsls	r2, r3, #29
 8000f74:	d004      	beq.n	8000f80 <__aeabi_fmul+0x220>
 8000f76:	220f      	movs	r2, #15
 8000f78:	401a      	ands	r2, r3
 8000f7a:	2a04      	cmp	r2, #4
 8000f7c:	d000      	beq.n	8000f80 <__aeabi_fmul+0x220>
 8000f7e:	3304      	adds	r3, #4
 8000f80:	015a      	lsls	r2, r3, #5
 8000f82:	d411      	bmi.n	8000fa8 <__aeabi_fmul+0x248>
 8000f84:	019b      	lsls	r3, r3, #6
 8000f86:	0a5b      	lsrs	r3, r3, #9
 8000f88:	2200      	movs	r2, #0
 8000f8a:	e744      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	464a      	mov	r2, r9
 8000f90:	03db      	lsls	r3, r3, #15
 8000f92:	4313      	orrs	r3, r2
 8000f94:	025b      	lsls	r3, r3, #9
 8000f96:	0a5b      	lsrs	r3, r3, #9
 8000f98:	0037      	movs	r7, r6
 8000f9a:	22ff      	movs	r2, #255	; 0xff
 8000f9c:	e73b      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000f9e:	9501      	str	r5, [sp, #4]
 8000fa0:	e787      	b.n	8000eb2 <__aeabi_fmul+0x152>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e736      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2300      	movs	r3, #0
 8000fac:	e733      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	03db      	lsls	r3, r3, #15
 8000fb2:	4323      	orrs	r3, r4
 8000fb4:	025b      	lsls	r3, r3, #9
 8000fb6:	0a5b      	lsrs	r3, r3, #9
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	e72c      	b.n	8000e16 <__aeabi_fmul+0xb6>
 8000fbc:	08009db4 	.word	0x08009db4
 8000fc0:	f7ffffff 	.word	0xf7ffffff

08000fc4 <__aeabi_fsub>:
 8000fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fc6:	4647      	mov	r7, r8
 8000fc8:	46ce      	mov	lr, r9
 8000fca:	0044      	lsls	r4, r0, #1
 8000fcc:	0fc2      	lsrs	r2, r0, #31
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	0247      	lsls	r7, r0, #9
 8000fd2:	0248      	lsls	r0, r1, #9
 8000fd4:	0a40      	lsrs	r0, r0, #9
 8000fd6:	4684      	mov	ip, r0
 8000fd8:	4666      	mov	r6, ip
 8000fda:	0048      	lsls	r0, r1, #1
 8000fdc:	0a7f      	lsrs	r7, r7, #9
 8000fde:	0e24      	lsrs	r4, r4, #24
 8000fe0:	00f6      	lsls	r6, r6, #3
 8000fe2:	0025      	movs	r5, r4
 8000fe4:	4690      	mov	r8, r2
 8000fe6:	00fb      	lsls	r3, r7, #3
 8000fe8:	0e00      	lsrs	r0, r0, #24
 8000fea:	0fc9      	lsrs	r1, r1, #31
 8000fec:	46b1      	mov	r9, r6
 8000fee:	28ff      	cmp	r0, #255	; 0xff
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_fsub+0x30>
 8000ff2:	e085      	b.n	8001100 <__aeabi_fsub+0x13c>
 8000ff4:	2601      	movs	r6, #1
 8000ff6:	4071      	eors	r1, r6
 8000ff8:	1a26      	subs	r6, r4, r0
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	d057      	beq.n	80010ae <__aeabi_fsub+0xea>
 8000ffe:	2e00      	cmp	r6, #0
 8001000:	dd43      	ble.n	800108a <__aeabi_fsub+0xc6>
 8001002:	2800      	cmp	r0, #0
 8001004:	d000      	beq.n	8001008 <__aeabi_fsub+0x44>
 8001006:	e07f      	b.n	8001108 <__aeabi_fsub+0x144>
 8001008:	4649      	mov	r1, r9
 800100a:	2900      	cmp	r1, #0
 800100c:	d100      	bne.n	8001010 <__aeabi_fsub+0x4c>
 800100e:	e0aa      	b.n	8001166 <__aeabi_fsub+0x1a2>
 8001010:	3e01      	subs	r6, #1
 8001012:	2e00      	cmp	r6, #0
 8001014:	d000      	beq.n	8001018 <__aeabi_fsub+0x54>
 8001016:	e0f7      	b.n	8001208 <__aeabi_fsub+0x244>
 8001018:	1a5b      	subs	r3, r3, r1
 800101a:	015a      	lsls	r2, r3, #5
 800101c:	d400      	bmi.n	8001020 <__aeabi_fsub+0x5c>
 800101e:	e08b      	b.n	8001138 <__aeabi_fsub+0x174>
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	099c      	lsrs	r4, r3, #6
 8001024:	0020      	movs	r0, r4
 8001026:	f001 f887 	bl	8002138 <__clzsi2>
 800102a:	3805      	subs	r0, #5
 800102c:	4084      	lsls	r4, r0
 800102e:	4285      	cmp	r5, r0
 8001030:	dd00      	ble.n	8001034 <__aeabi_fsub+0x70>
 8001032:	e0d3      	b.n	80011dc <__aeabi_fsub+0x218>
 8001034:	1b45      	subs	r5, r0, r5
 8001036:	0023      	movs	r3, r4
 8001038:	2020      	movs	r0, #32
 800103a:	3501      	adds	r5, #1
 800103c:	40eb      	lsrs	r3, r5
 800103e:	1b45      	subs	r5, r0, r5
 8001040:	40ac      	lsls	r4, r5
 8001042:	1e62      	subs	r2, r4, #1
 8001044:	4194      	sbcs	r4, r2
 8001046:	4323      	orrs	r3, r4
 8001048:	2407      	movs	r4, #7
 800104a:	2500      	movs	r5, #0
 800104c:	401c      	ands	r4, r3
 800104e:	2201      	movs	r2, #1
 8001050:	4641      	mov	r1, r8
 8001052:	400a      	ands	r2, r1
 8001054:	2c00      	cmp	r4, #0
 8001056:	d004      	beq.n	8001062 <__aeabi_fsub+0x9e>
 8001058:	210f      	movs	r1, #15
 800105a:	4019      	ands	r1, r3
 800105c:	2904      	cmp	r1, #4
 800105e:	d000      	beq.n	8001062 <__aeabi_fsub+0x9e>
 8001060:	3304      	adds	r3, #4
 8001062:	0159      	lsls	r1, r3, #5
 8001064:	d400      	bmi.n	8001068 <__aeabi_fsub+0xa4>
 8001066:	e080      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001068:	3501      	adds	r5, #1
 800106a:	b2ec      	uxtb	r4, r5
 800106c:	2dff      	cmp	r5, #255	; 0xff
 800106e:	d000      	beq.n	8001072 <__aeabi_fsub+0xae>
 8001070:	e0a3      	b.n	80011ba <__aeabi_fsub+0x1f6>
 8001072:	24ff      	movs	r4, #255	; 0xff
 8001074:	2300      	movs	r3, #0
 8001076:	025b      	lsls	r3, r3, #9
 8001078:	05e4      	lsls	r4, r4, #23
 800107a:	0a58      	lsrs	r0, r3, #9
 800107c:	07d2      	lsls	r2, r2, #31
 800107e:	4320      	orrs	r0, r4
 8001080:	4310      	orrs	r0, r2
 8001082:	bc0c      	pop	{r2, r3}
 8001084:	4690      	mov	r8, r2
 8001086:	4699      	mov	r9, r3
 8001088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800108a:	2e00      	cmp	r6, #0
 800108c:	d174      	bne.n	8001178 <__aeabi_fsub+0x1b4>
 800108e:	1c60      	adds	r0, r4, #1
 8001090:	b2c0      	uxtb	r0, r0
 8001092:	2801      	cmp	r0, #1
 8001094:	dc00      	bgt.n	8001098 <__aeabi_fsub+0xd4>
 8001096:	e0a7      	b.n	80011e8 <__aeabi_fsub+0x224>
 8001098:	464a      	mov	r2, r9
 800109a:	1a9c      	subs	r4, r3, r2
 800109c:	0162      	lsls	r2, r4, #5
 800109e:	d500      	bpl.n	80010a2 <__aeabi_fsub+0xde>
 80010a0:	e0b6      	b.n	8001210 <__aeabi_fsub+0x24c>
 80010a2:	2c00      	cmp	r4, #0
 80010a4:	d1be      	bne.n	8001024 <__aeabi_fsub+0x60>
 80010a6:	2200      	movs	r2, #0
 80010a8:	2400      	movs	r4, #0
 80010aa:	2300      	movs	r3, #0
 80010ac:	e7e3      	b.n	8001076 <__aeabi_fsub+0xb2>
 80010ae:	2e00      	cmp	r6, #0
 80010b0:	dc00      	bgt.n	80010b4 <__aeabi_fsub+0xf0>
 80010b2:	e085      	b.n	80011c0 <__aeabi_fsub+0x1fc>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	d046      	beq.n	8001146 <__aeabi_fsub+0x182>
 80010b8:	2cff      	cmp	r4, #255	; 0xff
 80010ba:	d049      	beq.n	8001150 <__aeabi_fsub+0x18c>
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	4648      	mov	r0, r9
 80010c0:	04d2      	lsls	r2, r2, #19
 80010c2:	4310      	orrs	r0, r2
 80010c4:	4681      	mov	r9, r0
 80010c6:	2201      	movs	r2, #1
 80010c8:	2e1b      	cmp	r6, #27
 80010ca:	dc09      	bgt.n	80010e0 <__aeabi_fsub+0x11c>
 80010cc:	2020      	movs	r0, #32
 80010ce:	464c      	mov	r4, r9
 80010d0:	1b80      	subs	r0, r0, r6
 80010d2:	4084      	lsls	r4, r0
 80010d4:	464a      	mov	r2, r9
 80010d6:	0020      	movs	r0, r4
 80010d8:	40f2      	lsrs	r2, r6
 80010da:	1e44      	subs	r4, r0, #1
 80010dc:	41a0      	sbcs	r0, r4
 80010de:	4302      	orrs	r2, r0
 80010e0:	189b      	adds	r3, r3, r2
 80010e2:	015a      	lsls	r2, r3, #5
 80010e4:	d528      	bpl.n	8001138 <__aeabi_fsub+0x174>
 80010e6:	3501      	adds	r5, #1
 80010e8:	2dff      	cmp	r5, #255	; 0xff
 80010ea:	d100      	bne.n	80010ee <__aeabi_fsub+0x12a>
 80010ec:	e0a8      	b.n	8001240 <__aeabi_fsub+0x27c>
 80010ee:	2201      	movs	r2, #1
 80010f0:	2407      	movs	r4, #7
 80010f2:	4994      	ldr	r1, [pc, #592]	; (8001344 <__aeabi_fsub+0x380>)
 80010f4:	401a      	ands	r2, r3
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	400b      	ands	r3, r1
 80010fa:	4313      	orrs	r3, r2
 80010fc:	401c      	ands	r4, r3
 80010fe:	e7a6      	b.n	800104e <__aeabi_fsub+0x8a>
 8001100:	2e00      	cmp	r6, #0
 8001102:	d000      	beq.n	8001106 <__aeabi_fsub+0x142>
 8001104:	e778      	b.n	8000ff8 <__aeabi_fsub+0x34>
 8001106:	e775      	b.n	8000ff4 <__aeabi_fsub+0x30>
 8001108:	2cff      	cmp	r4, #255	; 0xff
 800110a:	d054      	beq.n	80011b6 <__aeabi_fsub+0x1f2>
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	4649      	mov	r1, r9
 8001110:	04d2      	lsls	r2, r2, #19
 8001112:	4311      	orrs	r1, r2
 8001114:	4689      	mov	r9, r1
 8001116:	2201      	movs	r2, #1
 8001118:	2e1b      	cmp	r6, #27
 800111a:	dc09      	bgt.n	8001130 <__aeabi_fsub+0x16c>
 800111c:	2120      	movs	r1, #32
 800111e:	4648      	mov	r0, r9
 8001120:	1b89      	subs	r1, r1, r6
 8001122:	4088      	lsls	r0, r1
 8001124:	464a      	mov	r2, r9
 8001126:	0001      	movs	r1, r0
 8001128:	40f2      	lsrs	r2, r6
 800112a:	1e48      	subs	r0, r1, #1
 800112c:	4181      	sbcs	r1, r0
 800112e:	430a      	orrs	r2, r1
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	015a      	lsls	r2, r3, #5
 8001134:	d500      	bpl.n	8001138 <__aeabi_fsub+0x174>
 8001136:	e773      	b.n	8001020 <__aeabi_fsub+0x5c>
 8001138:	2201      	movs	r2, #1
 800113a:	4641      	mov	r1, r8
 800113c:	400a      	ands	r2, r1
 800113e:	0759      	lsls	r1, r3, #29
 8001140:	d000      	beq.n	8001144 <__aeabi_fsub+0x180>
 8001142:	e789      	b.n	8001058 <__aeabi_fsub+0x94>
 8001144:	e011      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001146:	4648      	mov	r0, r9
 8001148:	2800      	cmp	r0, #0
 800114a:	d158      	bne.n	80011fe <__aeabi_fsub+0x23a>
 800114c:	2cff      	cmp	r4, #255	; 0xff
 800114e:	d10c      	bne.n	800116a <__aeabi_fsub+0x1a6>
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	2b00      	cmp	r3, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x194>
 8001156:	e78c      	b.n	8001072 <__aeabi_fsub+0xae>
 8001158:	2080      	movs	r0, #128	; 0x80
 800115a:	03c0      	lsls	r0, r0, #15
 800115c:	4303      	orrs	r3, r0
 800115e:	025b      	lsls	r3, r3, #9
 8001160:	0a5b      	lsrs	r3, r3, #9
 8001162:	24ff      	movs	r4, #255	; 0xff
 8001164:	e787      	b.n	8001076 <__aeabi_fsub+0xb2>
 8001166:	2cff      	cmp	r4, #255	; 0xff
 8001168:	d025      	beq.n	80011b6 <__aeabi_fsub+0x1f2>
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	2dff      	cmp	r5, #255	; 0xff
 800116e:	d0f0      	beq.n	8001152 <__aeabi_fsub+0x18e>
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	0a5b      	lsrs	r3, r3, #9
 8001174:	b2ec      	uxtb	r4, r5
 8001176:	e77e      	b.n	8001076 <__aeabi_fsub+0xb2>
 8001178:	2c00      	cmp	r4, #0
 800117a:	d04d      	beq.n	8001218 <__aeabi_fsub+0x254>
 800117c:	28ff      	cmp	r0, #255	; 0xff
 800117e:	d018      	beq.n	80011b2 <__aeabi_fsub+0x1ee>
 8001180:	2480      	movs	r4, #128	; 0x80
 8001182:	04e4      	lsls	r4, r4, #19
 8001184:	4272      	negs	r2, r6
 8001186:	4323      	orrs	r3, r4
 8001188:	2a1b      	cmp	r2, #27
 800118a:	dd00      	ble.n	800118e <__aeabi_fsub+0x1ca>
 800118c:	e0c4      	b.n	8001318 <__aeabi_fsub+0x354>
 800118e:	001c      	movs	r4, r3
 8001190:	2520      	movs	r5, #32
 8001192:	40d4      	lsrs	r4, r2
 8001194:	1aaa      	subs	r2, r5, r2
 8001196:	4093      	lsls	r3, r2
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	4193      	sbcs	r3, r2
 800119c:	4323      	orrs	r3, r4
 800119e:	464a      	mov	r2, r9
 80011a0:	0005      	movs	r5, r0
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	4688      	mov	r8, r1
 80011a6:	e738      	b.n	800101a <__aeabi_fsub+0x56>
 80011a8:	1c72      	adds	r2, r6, #1
 80011aa:	d0f8      	beq.n	800119e <__aeabi_fsub+0x1da>
 80011ac:	43f2      	mvns	r2, r6
 80011ae:	28ff      	cmp	r0, #255	; 0xff
 80011b0:	d1ea      	bne.n	8001188 <__aeabi_fsub+0x1c4>
 80011b2:	000a      	movs	r2, r1
 80011b4:	464b      	mov	r3, r9
 80011b6:	25ff      	movs	r5, #255	; 0xff
 80011b8:	e7d7      	b.n	800116a <__aeabi_fsub+0x1a6>
 80011ba:	019b      	lsls	r3, r3, #6
 80011bc:	0a5b      	lsrs	r3, r3, #9
 80011be:	e75a      	b.n	8001076 <__aeabi_fsub+0xb2>
 80011c0:	2e00      	cmp	r6, #0
 80011c2:	d141      	bne.n	8001248 <__aeabi_fsub+0x284>
 80011c4:	1c65      	adds	r5, r4, #1
 80011c6:	b2e9      	uxtb	r1, r5
 80011c8:	2901      	cmp	r1, #1
 80011ca:	dd45      	ble.n	8001258 <__aeabi_fsub+0x294>
 80011cc:	2dff      	cmp	r5, #255	; 0xff
 80011ce:	d100      	bne.n	80011d2 <__aeabi_fsub+0x20e>
 80011d0:	e74f      	b.n	8001072 <__aeabi_fsub+0xae>
 80011d2:	2407      	movs	r4, #7
 80011d4:	444b      	add	r3, r9
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	401c      	ands	r4, r3
 80011da:	e738      	b.n	800104e <__aeabi_fsub+0x8a>
 80011dc:	2207      	movs	r2, #7
 80011de:	4b5a      	ldr	r3, [pc, #360]	; (8001348 <__aeabi_fsub+0x384>)
 80011e0:	1a2d      	subs	r5, r5, r0
 80011e2:	4023      	ands	r3, r4
 80011e4:	4014      	ands	r4, r2
 80011e6:	e732      	b.n	800104e <__aeabi_fsub+0x8a>
 80011e8:	2c00      	cmp	r4, #0
 80011ea:	d11d      	bne.n	8001228 <__aeabi_fsub+0x264>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d17a      	bne.n	80012e6 <__aeabi_fsub+0x322>
 80011f0:	464b      	mov	r3, r9
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d100      	bne.n	80011f8 <__aeabi_fsub+0x234>
 80011f6:	e091      	b.n	800131c <__aeabi_fsub+0x358>
 80011f8:	000a      	movs	r2, r1
 80011fa:	2500      	movs	r5, #0
 80011fc:	e7b5      	b.n	800116a <__aeabi_fsub+0x1a6>
 80011fe:	3e01      	subs	r6, #1
 8001200:	2e00      	cmp	r6, #0
 8001202:	d119      	bne.n	8001238 <__aeabi_fsub+0x274>
 8001204:	444b      	add	r3, r9
 8001206:	e76c      	b.n	80010e2 <__aeabi_fsub+0x11e>
 8001208:	2cff      	cmp	r4, #255	; 0xff
 800120a:	d184      	bne.n	8001116 <__aeabi_fsub+0x152>
 800120c:	25ff      	movs	r5, #255	; 0xff
 800120e:	e7ac      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001210:	464a      	mov	r2, r9
 8001212:	4688      	mov	r8, r1
 8001214:	1ad4      	subs	r4, r2, r3
 8001216:	e705      	b.n	8001024 <__aeabi_fsub+0x60>
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1c5      	bne.n	80011a8 <__aeabi_fsub+0x1e4>
 800121c:	000a      	movs	r2, r1
 800121e:	28ff      	cmp	r0, #255	; 0xff
 8001220:	d0c8      	beq.n	80011b4 <__aeabi_fsub+0x1f0>
 8001222:	0005      	movs	r5, r0
 8001224:	464b      	mov	r3, r9
 8001226:	e7a0      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001228:	2b00      	cmp	r3, #0
 800122a:	d149      	bne.n	80012c0 <__aeabi_fsub+0x2fc>
 800122c:	464b      	mov	r3, r9
 800122e:	2b00      	cmp	r3, #0
 8001230:	d077      	beq.n	8001322 <__aeabi_fsub+0x35e>
 8001232:	000a      	movs	r2, r1
 8001234:	25ff      	movs	r5, #255	; 0xff
 8001236:	e798      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001238:	2cff      	cmp	r4, #255	; 0xff
 800123a:	d000      	beq.n	800123e <__aeabi_fsub+0x27a>
 800123c:	e743      	b.n	80010c6 <__aeabi_fsub+0x102>
 800123e:	e787      	b.n	8001150 <__aeabi_fsub+0x18c>
 8001240:	000a      	movs	r2, r1
 8001242:	24ff      	movs	r4, #255	; 0xff
 8001244:	2300      	movs	r3, #0
 8001246:	e716      	b.n	8001076 <__aeabi_fsub+0xb2>
 8001248:	2c00      	cmp	r4, #0
 800124a:	d115      	bne.n	8001278 <__aeabi_fsub+0x2b4>
 800124c:	2b00      	cmp	r3, #0
 800124e:	d157      	bne.n	8001300 <__aeabi_fsub+0x33c>
 8001250:	28ff      	cmp	r0, #255	; 0xff
 8001252:	d1e6      	bne.n	8001222 <__aeabi_fsub+0x25e>
 8001254:	464b      	mov	r3, r9
 8001256:	e77b      	b.n	8001150 <__aeabi_fsub+0x18c>
 8001258:	2c00      	cmp	r4, #0
 800125a:	d120      	bne.n	800129e <__aeabi_fsub+0x2da>
 800125c:	2b00      	cmp	r3, #0
 800125e:	d057      	beq.n	8001310 <__aeabi_fsub+0x34c>
 8001260:	4649      	mov	r1, r9
 8001262:	2900      	cmp	r1, #0
 8001264:	d053      	beq.n	800130e <__aeabi_fsub+0x34a>
 8001266:	444b      	add	r3, r9
 8001268:	015a      	lsls	r2, r3, #5
 800126a:	d568      	bpl.n	800133e <__aeabi_fsub+0x37a>
 800126c:	2407      	movs	r4, #7
 800126e:	4a36      	ldr	r2, [pc, #216]	; (8001348 <__aeabi_fsub+0x384>)
 8001270:	401c      	ands	r4, r3
 8001272:	2501      	movs	r5, #1
 8001274:	4013      	ands	r3, r2
 8001276:	e6ea      	b.n	800104e <__aeabi_fsub+0x8a>
 8001278:	28ff      	cmp	r0, #255	; 0xff
 800127a:	d0eb      	beq.n	8001254 <__aeabi_fsub+0x290>
 800127c:	2280      	movs	r2, #128	; 0x80
 800127e:	04d2      	lsls	r2, r2, #19
 8001280:	4276      	negs	r6, r6
 8001282:	4313      	orrs	r3, r2
 8001284:	2e1b      	cmp	r6, #27
 8001286:	dc53      	bgt.n	8001330 <__aeabi_fsub+0x36c>
 8001288:	2520      	movs	r5, #32
 800128a:	1bad      	subs	r5, r5, r6
 800128c:	001a      	movs	r2, r3
 800128e:	40ab      	lsls	r3, r5
 8001290:	40f2      	lsrs	r2, r6
 8001292:	1e5c      	subs	r4, r3, #1
 8001294:	41a3      	sbcs	r3, r4
 8001296:	4313      	orrs	r3, r2
 8001298:	444b      	add	r3, r9
 800129a:	0005      	movs	r5, r0
 800129c:	e721      	b.n	80010e2 <__aeabi_fsub+0x11e>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0d8      	beq.n	8001254 <__aeabi_fsub+0x290>
 80012a2:	4649      	mov	r1, r9
 80012a4:	2900      	cmp	r1, #0
 80012a6:	d100      	bne.n	80012aa <__aeabi_fsub+0x2e6>
 80012a8:	e752      	b.n	8001150 <__aeabi_fsub+0x18c>
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	03c9      	lsls	r1, r1, #15
 80012ae:	420f      	tst	r7, r1
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x2f0>
 80012b2:	e74d      	b.n	8001150 <__aeabi_fsub+0x18c>
 80012b4:	4660      	mov	r0, ip
 80012b6:	4208      	tst	r0, r1
 80012b8:	d000      	beq.n	80012bc <__aeabi_fsub+0x2f8>
 80012ba:	e749      	b.n	8001150 <__aeabi_fsub+0x18c>
 80012bc:	464b      	mov	r3, r9
 80012be:	e747      	b.n	8001150 <__aeabi_fsub+0x18c>
 80012c0:	4648      	mov	r0, r9
 80012c2:	25ff      	movs	r5, #255	; 0xff
 80012c4:	2800      	cmp	r0, #0
 80012c6:	d100      	bne.n	80012ca <__aeabi_fsub+0x306>
 80012c8:	e74f      	b.n	800116a <__aeabi_fsub+0x1a6>
 80012ca:	2280      	movs	r2, #128	; 0x80
 80012cc:	03d2      	lsls	r2, r2, #15
 80012ce:	4217      	tst	r7, r2
 80012d0:	d004      	beq.n	80012dc <__aeabi_fsub+0x318>
 80012d2:	4660      	mov	r0, ip
 80012d4:	4210      	tst	r0, r2
 80012d6:	d101      	bne.n	80012dc <__aeabi_fsub+0x318>
 80012d8:	464b      	mov	r3, r9
 80012da:	4688      	mov	r8, r1
 80012dc:	2201      	movs	r2, #1
 80012de:	4641      	mov	r1, r8
 80012e0:	25ff      	movs	r5, #255	; 0xff
 80012e2:	400a      	ands	r2, r1
 80012e4:	e741      	b.n	800116a <__aeabi_fsub+0x1a6>
 80012e6:	4648      	mov	r0, r9
 80012e8:	2800      	cmp	r0, #0
 80012ea:	d01f      	beq.n	800132c <__aeabi_fsub+0x368>
 80012ec:	1a1a      	subs	r2, r3, r0
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d520      	bpl.n	8001334 <__aeabi_fsub+0x370>
 80012f2:	464a      	mov	r2, r9
 80012f4:	2407      	movs	r4, #7
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	401c      	ands	r4, r3
 80012fa:	4688      	mov	r8, r1
 80012fc:	2500      	movs	r5, #0
 80012fe:	e6a6      	b.n	800104e <__aeabi_fsub+0x8a>
 8001300:	1c74      	adds	r4, r6, #1
 8001302:	d0c9      	beq.n	8001298 <__aeabi_fsub+0x2d4>
 8001304:	43f6      	mvns	r6, r6
 8001306:	28ff      	cmp	r0, #255	; 0xff
 8001308:	d1bc      	bne.n	8001284 <__aeabi_fsub+0x2c0>
 800130a:	464b      	mov	r3, r9
 800130c:	e720      	b.n	8001150 <__aeabi_fsub+0x18c>
 800130e:	4699      	mov	r9, r3
 8001310:	464b      	mov	r3, r9
 8001312:	2500      	movs	r5, #0
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	e72b      	b.n	8001170 <__aeabi_fsub+0x1ac>
 8001318:	2301      	movs	r3, #1
 800131a:	e740      	b.n	800119e <__aeabi_fsub+0x1da>
 800131c:	2200      	movs	r2, #0
 800131e:	2300      	movs	r3, #0
 8001320:	e6a9      	b.n	8001076 <__aeabi_fsub+0xb2>
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	2200      	movs	r2, #0
 8001326:	03db      	lsls	r3, r3, #15
 8001328:	24ff      	movs	r4, #255	; 0xff
 800132a:	e6a4      	b.n	8001076 <__aeabi_fsub+0xb2>
 800132c:	2500      	movs	r5, #0
 800132e:	e71c      	b.n	800116a <__aeabi_fsub+0x1a6>
 8001330:	2301      	movs	r3, #1
 8001332:	e7b1      	b.n	8001298 <__aeabi_fsub+0x2d4>
 8001334:	2a00      	cmp	r2, #0
 8001336:	d0f1      	beq.n	800131c <__aeabi_fsub+0x358>
 8001338:	0013      	movs	r3, r2
 800133a:	2500      	movs	r5, #0
 800133c:	e6fc      	b.n	8001138 <__aeabi_fsub+0x174>
 800133e:	2500      	movs	r5, #0
 8001340:	e6fa      	b.n	8001138 <__aeabi_fsub+0x174>
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	7dffffff 	.word	0x7dffffff
 8001348:	fbffffff 	.word	0xfbffffff

0800134c <__aeabi_f2iz>:
 800134c:	0241      	lsls	r1, r0, #9
 800134e:	0042      	lsls	r2, r0, #1
 8001350:	0fc3      	lsrs	r3, r0, #31
 8001352:	0a49      	lsrs	r1, r1, #9
 8001354:	0e12      	lsrs	r2, r2, #24
 8001356:	2000      	movs	r0, #0
 8001358:	2a7e      	cmp	r2, #126	; 0x7e
 800135a:	d90d      	bls.n	8001378 <__aeabi_f2iz+0x2c>
 800135c:	2a9d      	cmp	r2, #157	; 0x9d
 800135e:	d80c      	bhi.n	800137a <__aeabi_f2iz+0x2e>
 8001360:	2080      	movs	r0, #128	; 0x80
 8001362:	0400      	lsls	r0, r0, #16
 8001364:	4301      	orrs	r1, r0
 8001366:	2a95      	cmp	r2, #149	; 0x95
 8001368:	dc0a      	bgt.n	8001380 <__aeabi_f2iz+0x34>
 800136a:	2096      	movs	r0, #150	; 0x96
 800136c:	1a82      	subs	r2, r0, r2
 800136e:	40d1      	lsrs	r1, r2
 8001370:	4248      	negs	r0, r1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d100      	bne.n	8001378 <__aeabi_f2iz+0x2c>
 8001376:	0008      	movs	r0, r1
 8001378:	4770      	bx	lr
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <__aeabi_f2iz+0x3c>)
 800137c:	1898      	adds	r0, r3, r2
 800137e:	e7fb      	b.n	8001378 <__aeabi_f2iz+0x2c>
 8001380:	3a96      	subs	r2, #150	; 0x96
 8001382:	4091      	lsls	r1, r2
 8001384:	e7f4      	b.n	8001370 <__aeabi_f2iz+0x24>
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	7fffffff 	.word	0x7fffffff

0800138c <__aeabi_i2f>:
 800138c:	b570      	push	{r4, r5, r6, lr}
 800138e:	2800      	cmp	r0, #0
 8001390:	d03d      	beq.n	800140e <__aeabi_i2f+0x82>
 8001392:	17c3      	asrs	r3, r0, #31
 8001394:	18c5      	adds	r5, r0, r3
 8001396:	405d      	eors	r5, r3
 8001398:	0fc4      	lsrs	r4, r0, #31
 800139a:	0028      	movs	r0, r5
 800139c:	f000 fecc 	bl	8002138 <__clzsi2>
 80013a0:	229e      	movs	r2, #158	; 0x9e
 80013a2:	1a12      	subs	r2, r2, r0
 80013a4:	2a96      	cmp	r2, #150	; 0x96
 80013a6:	dc07      	bgt.n	80013b8 <__aeabi_i2f+0x2c>
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	2808      	cmp	r0, #8
 80013ac:	dd33      	ble.n	8001416 <__aeabi_i2f+0x8a>
 80013ae:	3808      	subs	r0, #8
 80013b0:	4085      	lsls	r5, r0
 80013b2:	0268      	lsls	r0, r5, #9
 80013b4:	0a40      	lsrs	r0, r0, #9
 80013b6:	e023      	b.n	8001400 <__aeabi_i2f+0x74>
 80013b8:	2a99      	cmp	r2, #153	; 0x99
 80013ba:	dd0b      	ble.n	80013d4 <__aeabi_i2f+0x48>
 80013bc:	2305      	movs	r3, #5
 80013be:	0029      	movs	r1, r5
 80013c0:	1a1b      	subs	r3, r3, r0
 80013c2:	40d9      	lsrs	r1, r3
 80013c4:	0003      	movs	r3, r0
 80013c6:	331b      	adds	r3, #27
 80013c8:	409d      	lsls	r5, r3
 80013ca:	002b      	movs	r3, r5
 80013cc:	1e5d      	subs	r5, r3, #1
 80013ce:	41ab      	sbcs	r3, r5
 80013d0:	4319      	orrs	r1, r3
 80013d2:	000d      	movs	r5, r1
 80013d4:	2805      	cmp	r0, #5
 80013d6:	dd01      	ble.n	80013dc <__aeabi_i2f+0x50>
 80013d8:	1f43      	subs	r3, r0, #5
 80013da:	409d      	lsls	r5, r3
 80013dc:	002b      	movs	r3, r5
 80013de:	490f      	ldr	r1, [pc, #60]	; (800141c <__aeabi_i2f+0x90>)
 80013e0:	400b      	ands	r3, r1
 80013e2:	076e      	lsls	r6, r5, #29
 80013e4:	d009      	beq.n	80013fa <__aeabi_i2f+0x6e>
 80013e6:	260f      	movs	r6, #15
 80013e8:	4035      	ands	r5, r6
 80013ea:	2d04      	cmp	r5, #4
 80013ec:	d005      	beq.n	80013fa <__aeabi_i2f+0x6e>
 80013ee:	3304      	adds	r3, #4
 80013f0:	015d      	lsls	r5, r3, #5
 80013f2:	d502      	bpl.n	80013fa <__aeabi_i2f+0x6e>
 80013f4:	229f      	movs	r2, #159	; 0x9f
 80013f6:	400b      	ands	r3, r1
 80013f8:	1a12      	subs	r2, r2, r0
 80013fa:	019b      	lsls	r3, r3, #6
 80013fc:	0a58      	lsrs	r0, r3, #9
 80013fe:	b2d2      	uxtb	r2, r2
 8001400:	0240      	lsls	r0, r0, #9
 8001402:	05d2      	lsls	r2, r2, #23
 8001404:	0a40      	lsrs	r0, r0, #9
 8001406:	07e4      	lsls	r4, r4, #31
 8001408:	4310      	orrs	r0, r2
 800140a:	4320      	orrs	r0, r4
 800140c:	bd70      	pop	{r4, r5, r6, pc}
 800140e:	2400      	movs	r4, #0
 8001410:	2200      	movs	r2, #0
 8001412:	2000      	movs	r0, #0
 8001414:	e7f4      	b.n	8001400 <__aeabi_i2f+0x74>
 8001416:	0268      	lsls	r0, r5, #9
 8001418:	0a40      	lsrs	r0, r0, #9
 800141a:	e7f1      	b.n	8001400 <__aeabi_i2f+0x74>
 800141c:	fbffffff 	.word	0xfbffffff

08001420 <__aeabi_ui2f>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	1e04      	subs	r4, r0, #0
 8001424:	d034      	beq.n	8001490 <__aeabi_ui2f+0x70>
 8001426:	f000 fe87 	bl	8002138 <__clzsi2>
 800142a:	229e      	movs	r2, #158	; 0x9e
 800142c:	1a12      	subs	r2, r2, r0
 800142e:	2a96      	cmp	r2, #150	; 0x96
 8001430:	dc07      	bgt.n	8001442 <__aeabi_ui2f+0x22>
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	2808      	cmp	r0, #8
 8001436:	dd2e      	ble.n	8001496 <__aeabi_ui2f+0x76>
 8001438:	3808      	subs	r0, #8
 800143a:	4084      	lsls	r4, r0
 800143c:	0260      	lsls	r0, r4, #9
 800143e:	0a40      	lsrs	r0, r0, #9
 8001440:	e021      	b.n	8001486 <__aeabi_ui2f+0x66>
 8001442:	2a99      	cmp	r2, #153	; 0x99
 8001444:	dd09      	ble.n	800145a <__aeabi_ui2f+0x3a>
 8001446:	0003      	movs	r3, r0
 8001448:	0021      	movs	r1, r4
 800144a:	331b      	adds	r3, #27
 800144c:	4099      	lsls	r1, r3
 800144e:	1e4b      	subs	r3, r1, #1
 8001450:	4199      	sbcs	r1, r3
 8001452:	2305      	movs	r3, #5
 8001454:	1a1b      	subs	r3, r3, r0
 8001456:	40dc      	lsrs	r4, r3
 8001458:	430c      	orrs	r4, r1
 800145a:	2805      	cmp	r0, #5
 800145c:	dd01      	ble.n	8001462 <__aeabi_ui2f+0x42>
 800145e:	1f43      	subs	r3, r0, #5
 8001460:	409c      	lsls	r4, r3
 8001462:	0023      	movs	r3, r4
 8001464:	490d      	ldr	r1, [pc, #52]	; (800149c <__aeabi_ui2f+0x7c>)
 8001466:	400b      	ands	r3, r1
 8001468:	0765      	lsls	r5, r4, #29
 800146a:	d009      	beq.n	8001480 <__aeabi_ui2f+0x60>
 800146c:	250f      	movs	r5, #15
 800146e:	402c      	ands	r4, r5
 8001470:	2c04      	cmp	r4, #4
 8001472:	d005      	beq.n	8001480 <__aeabi_ui2f+0x60>
 8001474:	3304      	adds	r3, #4
 8001476:	015c      	lsls	r4, r3, #5
 8001478:	d502      	bpl.n	8001480 <__aeabi_ui2f+0x60>
 800147a:	229f      	movs	r2, #159	; 0x9f
 800147c:	400b      	ands	r3, r1
 800147e:	1a12      	subs	r2, r2, r0
 8001480:	019b      	lsls	r3, r3, #6
 8001482:	0a58      	lsrs	r0, r3, #9
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	0240      	lsls	r0, r0, #9
 8001488:	05d2      	lsls	r2, r2, #23
 800148a:	0a40      	lsrs	r0, r0, #9
 800148c:	4310      	orrs	r0, r2
 800148e:	bd70      	pop	{r4, r5, r6, pc}
 8001490:	2200      	movs	r2, #0
 8001492:	2000      	movs	r0, #0
 8001494:	e7f7      	b.n	8001486 <__aeabi_ui2f+0x66>
 8001496:	0260      	lsls	r0, r4, #9
 8001498:	0a40      	lsrs	r0, r0, #9
 800149a:	e7f4      	b.n	8001486 <__aeabi_ui2f+0x66>
 800149c:	fbffffff 	.word	0xfbffffff

080014a0 <__aeabi_dadd>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	464f      	mov	r7, r9
 80014a4:	4646      	mov	r6, r8
 80014a6:	46d6      	mov	lr, sl
 80014a8:	000c      	movs	r4, r1
 80014aa:	0309      	lsls	r1, r1, #12
 80014ac:	b5c0      	push	{r6, r7, lr}
 80014ae:	0a49      	lsrs	r1, r1, #9
 80014b0:	0f47      	lsrs	r7, r0, #29
 80014b2:	005e      	lsls	r6, r3, #1
 80014b4:	4339      	orrs	r1, r7
 80014b6:	031f      	lsls	r7, r3, #12
 80014b8:	0fdb      	lsrs	r3, r3, #31
 80014ba:	469c      	mov	ip, r3
 80014bc:	0065      	lsls	r5, r4, #1
 80014be:	0a7b      	lsrs	r3, r7, #9
 80014c0:	0f57      	lsrs	r7, r2, #29
 80014c2:	431f      	orrs	r7, r3
 80014c4:	0d6d      	lsrs	r5, r5, #21
 80014c6:	0fe4      	lsrs	r4, r4, #31
 80014c8:	0d76      	lsrs	r6, r6, #21
 80014ca:	46a1      	mov	r9, r4
 80014cc:	00c0      	lsls	r0, r0, #3
 80014ce:	46b8      	mov	r8, r7
 80014d0:	00d2      	lsls	r2, r2, #3
 80014d2:	1bab      	subs	r3, r5, r6
 80014d4:	4564      	cmp	r4, ip
 80014d6:	d07b      	beq.n	80015d0 <__aeabi_dadd+0x130>
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd5f      	ble.n	800159c <__aeabi_dadd+0xfc>
 80014dc:	2e00      	cmp	r6, #0
 80014de:	d000      	beq.n	80014e2 <__aeabi_dadd+0x42>
 80014e0:	e0a4      	b.n	800162c <__aeabi_dadd+0x18c>
 80014e2:	003e      	movs	r6, r7
 80014e4:	4316      	orrs	r6, r2
 80014e6:	d100      	bne.n	80014ea <__aeabi_dadd+0x4a>
 80014e8:	e112      	b.n	8001710 <__aeabi_dadd+0x270>
 80014ea:	1e5e      	subs	r6, r3, #1
 80014ec:	2e00      	cmp	r6, #0
 80014ee:	d000      	beq.n	80014f2 <__aeabi_dadd+0x52>
 80014f0:	e19e      	b.n	8001830 <__aeabi_dadd+0x390>
 80014f2:	1a87      	subs	r7, r0, r2
 80014f4:	4643      	mov	r3, r8
 80014f6:	42b8      	cmp	r0, r7
 80014f8:	4180      	sbcs	r0, r0
 80014fa:	2501      	movs	r5, #1
 80014fc:	1ac9      	subs	r1, r1, r3
 80014fe:	4240      	negs	r0, r0
 8001500:	1a09      	subs	r1, r1, r0
 8001502:	020b      	lsls	r3, r1, #8
 8001504:	d400      	bmi.n	8001508 <__aeabi_dadd+0x68>
 8001506:	e131      	b.n	800176c <__aeabi_dadd+0x2cc>
 8001508:	0249      	lsls	r1, r1, #9
 800150a:	0a4e      	lsrs	r6, r1, #9
 800150c:	2e00      	cmp	r6, #0
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x72>
 8001510:	e16e      	b.n	80017f0 <__aeabi_dadd+0x350>
 8001512:	0030      	movs	r0, r6
 8001514:	f000 fe10 	bl	8002138 <__clzsi2>
 8001518:	0003      	movs	r3, r0
 800151a:	3b08      	subs	r3, #8
 800151c:	2b1f      	cmp	r3, #31
 800151e:	dd00      	ble.n	8001522 <__aeabi_dadd+0x82>
 8001520:	e161      	b.n	80017e6 <__aeabi_dadd+0x346>
 8001522:	2220      	movs	r2, #32
 8001524:	0039      	movs	r1, r7
 8001526:	1ad2      	subs	r2, r2, r3
 8001528:	409e      	lsls	r6, r3
 800152a:	40d1      	lsrs	r1, r2
 800152c:	409f      	lsls	r7, r3
 800152e:	430e      	orrs	r6, r1
 8001530:	429d      	cmp	r5, r3
 8001532:	dd00      	ble.n	8001536 <__aeabi_dadd+0x96>
 8001534:	e151      	b.n	80017da <__aeabi_dadd+0x33a>
 8001536:	1b5d      	subs	r5, r3, r5
 8001538:	1c6b      	adds	r3, r5, #1
 800153a:	2b1f      	cmp	r3, #31
 800153c:	dd00      	ble.n	8001540 <__aeabi_dadd+0xa0>
 800153e:	e17c      	b.n	800183a <__aeabi_dadd+0x39a>
 8001540:	2120      	movs	r1, #32
 8001542:	1ac9      	subs	r1, r1, r3
 8001544:	003d      	movs	r5, r7
 8001546:	0030      	movs	r0, r6
 8001548:	408f      	lsls	r7, r1
 800154a:	4088      	lsls	r0, r1
 800154c:	40dd      	lsrs	r5, r3
 800154e:	1e79      	subs	r1, r7, #1
 8001550:	418f      	sbcs	r7, r1
 8001552:	0031      	movs	r1, r6
 8001554:	2207      	movs	r2, #7
 8001556:	4328      	orrs	r0, r5
 8001558:	40d9      	lsrs	r1, r3
 800155a:	2500      	movs	r5, #0
 800155c:	4307      	orrs	r7, r0
 800155e:	403a      	ands	r2, r7
 8001560:	2a00      	cmp	r2, #0
 8001562:	d009      	beq.n	8001578 <__aeabi_dadd+0xd8>
 8001564:	230f      	movs	r3, #15
 8001566:	403b      	ands	r3, r7
 8001568:	2b04      	cmp	r3, #4
 800156a:	d005      	beq.n	8001578 <__aeabi_dadd+0xd8>
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	42bb      	cmp	r3, r7
 8001570:	41bf      	sbcs	r7, r7
 8001572:	427f      	negs	r7, r7
 8001574:	19c9      	adds	r1, r1, r7
 8001576:	001f      	movs	r7, r3
 8001578:	020b      	lsls	r3, r1, #8
 800157a:	d400      	bmi.n	800157e <__aeabi_dadd+0xde>
 800157c:	e226      	b.n	80019cc <__aeabi_dadd+0x52c>
 800157e:	1c6a      	adds	r2, r5, #1
 8001580:	4bc6      	ldr	r3, [pc, #792]	; (800189c <__aeabi_dadd+0x3fc>)
 8001582:	0555      	lsls	r5, r2, #21
 8001584:	0d6d      	lsrs	r5, r5, #21
 8001586:	429a      	cmp	r2, r3
 8001588:	d100      	bne.n	800158c <__aeabi_dadd+0xec>
 800158a:	e106      	b.n	800179a <__aeabi_dadd+0x2fa>
 800158c:	4ac4      	ldr	r2, [pc, #784]	; (80018a0 <__aeabi_dadd+0x400>)
 800158e:	08ff      	lsrs	r7, r7, #3
 8001590:	400a      	ands	r2, r1
 8001592:	0753      	lsls	r3, r2, #29
 8001594:	0252      	lsls	r2, r2, #9
 8001596:	433b      	orrs	r3, r7
 8001598:	0b12      	lsrs	r2, r2, #12
 800159a:	e08e      	b.n	80016ba <__aeabi_dadd+0x21a>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d000      	beq.n	80015a2 <__aeabi_dadd+0x102>
 80015a0:	e0b8      	b.n	8001714 <__aeabi_dadd+0x274>
 80015a2:	1c6b      	adds	r3, r5, #1
 80015a4:	055b      	lsls	r3, r3, #21
 80015a6:	0d5b      	lsrs	r3, r3, #21
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	dc00      	bgt.n	80015ae <__aeabi_dadd+0x10e>
 80015ac:	e130      	b.n	8001810 <__aeabi_dadd+0x370>
 80015ae:	1a87      	subs	r7, r0, r2
 80015b0:	4643      	mov	r3, r8
 80015b2:	42b8      	cmp	r0, r7
 80015b4:	41b6      	sbcs	r6, r6
 80015b6:	1acb      	subs	r3, r1, r3
 80015b8:	4276      	negs	r6, r6
 80015ba:	1b9e      	subs	r6, r3, r6
 80015bc:	0233      	lsls	r3, r6, #8
 80015be:	d500      	bpl.n	80015c2 <__aeabi_dadd+0x122>
 80015c0:	e14c      	b.n	800185c <__aeabi_dadd+0x3bc>
 80015c2:	003b      	movs	r3, r7
 80015c4:	4333      	orrs	r3, r6
 80015c6:	d1a1      	bne.n	800150c <__aeabi_dadd+0x6c>
 80015c8:	2200      	movs	r2, #0
 80015ca:	2400      	movs	r4, #0
 80015cc:	2500      	movs	r5, #0
 80015ce:	e070      	b.n	80016b2 <__aeabi_dadd+0x212>
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	dc00      	bgt.n	80015d6 <__aeabi_dadd+0x136>
 80015d4:	e0e5      	b.n	80017a2 <__aeabi_dadd+0x302>
 80015d6:	2e00      	cmp	r6, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x13c>
 80015da:	e083      	b.n	80016e4 <__aeabi_dadd+0x244>
 80015dc:	4eaf      	ldr	r6, [pc, #700]	; (800189c <__aeabi_dadd+0x3fc>)
 80015de:	42b5      	cmp	r5, r6
 80015e0:	d060      	beq.n	80016a4 <__aeabi_dadd+0x204>
 80015e2:	2680      	movs	r6, #128	; 0x80
 80015e4:	0436      	lsls	r6, r6, #16
 80015e6:	4337      	orrs	r7, r6
 80015e8:	46b8      	mov	r8, r7
 80015ea:	2b38      	cmp	r3, #56	; 0x38
 80015ec:	dc00      	bgt.n	80015f0 <__aeabi_dadd+0x150>
 80015ee:	e13e      	b.n	800186e <__aeabi_dadd+0x3ce>
 80015f0:	4643      	mov	r3, r8
 80015f2:	4313      	orrs	r3, r2
 80015f4:	001f      	movs	r7, r3
 80015f6:	1e7a      	subs	r2, r7, #1
 80015f8:	4197      	sbcs	r7, r2
 80015fa:	183f      	adds	r7, r7, r0
 80015fc:	4287      	cmp	r7, r0
 80015fe:	4180      	sbcs	r0, r0
 8001600:	4240      	negs	r0, r0
 8001602:	1809      	adds	r1, r1, r0
 8001604:	020b      	lsls	r3, r1, #8
 8001606:	d400      	bmi.n	800160a <__aeabi_dadd+0x16a>
 8001608:	e0b0      	b.n	800176c <__aeabi_dadd+0x2cc>
 800160a:	4ba4      	ldr	r3, [pc, #656]	; (800189c <__aeabi_dadd+0x3fc>)
 800160c:	3501      	adds	r5, #1
 800160e:	429d      	cmp	r5, r3
 8001610:	d100      	bne.n	8001614 <__aeabi_dadd+0x174>
 8001612:	e0c3      	b.n	800179c <__aeabi_dadd+0x2fc>
 8001614:	4aa2      	ldr	r2, [pc, #648]	; (80018a0 <__aeabi_dadd+0x400>)
 8001616:	087b      	lsrs	r3, r7, #1
 8001618:	400a      	ands	r2, r1
 800161a:	2101      	movs	r1, #1
 800161c:	400f      	ands	r7, r1
 800161e:	431f      	orrs	r7, r3
 8001620:	0851      	lsrs	r1, r2, #1
 8001622:	07d3      	lsls	r3, r2, #31
 8001624:	2207      	movs	r2, #7
 8001626:	431f      	orrs	r7, r3
 8001628:	403a      	ands	r2, r7
 800162a:	e799      	b.n	8001560 <__aeabi_dadd+0xc0>
 800162c:	4e9b      	ldr	r6, [pc, #620]	; (800189c <__aeabi_dadd+0x3fc>)
 800162e:	42b5      	cmp	r5, r6
 8001630:	d038      	beq.n	80016a4 <__aeabi_dadd+0x204>
 8001632:	2680      	movs	r6, #128	; 0x80
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	4337      	orrs	r7, r6
 8001638:	46b8      	mov	r8, r7
 800163a:	2b38      	cmp	r3, #56	; 0x38
 800163c:	dd00      	ble.n	8001640 <__aeabi_dadd+0x1a0>
 800163e:	e0dc      	b.n	80017fa <__aeabi_dadd+0x35a>
 8001640:	2b1f      	cmp	r3, #31
 8001642:	dc00      	bgt.n	8001646 <__aeabi_dadd+0x1a6>
 8001644:	e130      	b.n	80018a8 <__aeabi_dadd+0x408>
 8001646:	001e      	movs	r6, r3
 8001648:	4647      	mov	r7, r8
 800164a:	3e20      	subs	r6, #32
 800164c:	40f7      	lsrs	r7, r6
 800164e:	46bc      	mov	ip, r7
 8001650:	2b20      	cmp	r3, #32
 8001652:	d004      	beq.n	800165e <__aeabi_dadd+0x1be>
 8001654:	2640      	movs	r6, #64	; 0x40
 8001656:	1af3      	subs	r3, r6, r3
 8001658:	4646      	mov	r6, r8
 800165a:	409e      	lsls	r6, r3
 800165c:	4332      	orrs	r2, r6
 800165e:	0017      	movs	r7, r2
 8001660:	4663      	mov	r3, ip
 8001662:	1e7a      	subs	r2, r7, #1
 8001664:	4197      	sbcs	r7, r2
 8001666:	431f      	orrs	r7, r3
 8001668:	e0cc      	b.n	8001804 <__aeabi_dadd+0x364>
 800166a:	2b00      	cmp	r3, #0
 800166c:	d100      	bne.n	8001670 <__aeabi_dadd+0x1d0>
 800166e:	e204      	b.n	8001a7a <__aeabi_dadd+0x5da>
 8001670:	4643      	mov	r3, r8
 8001672:	4313      	orrs	r3, r2
 8001674:	d100      	bne.n	8001678 <__aeabi_dadd+0x1d8>
 8001676:	e159      	b.n	800192c <__aeabi_dadd+0x48c>
 8001678:	074b      	lsls	r3, r1, #29
 800167a:	08c0      	lsrs	r0, r0, #3
 800167c:	4318      	orrs	r0, r3
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	08c9      	lsrs	r1, r1, #3
 8001682:	031b      	lsls	r3, r3, #12
 8001684:	4219      	tst	r1, r3
 8001686:	d008      	beq.n	800169a <__aeabi_dadd+0x1fa>
 8001688:	4645      	mov	r5, r8
 800168a:	08ed      	lsrs	r5, r5, #3
 800168c:	421d      	tst	r5, r3
 800168e:	d104      	bne.n	800169a <__aeabi_dadd+0x1fa>
 8001690:	4643      	mov	r3, r8
 8001692:	08d0      	lsrs	r0, r2, #3
 8001694:	0759      	lsls	r1, r3, #29
 8001696:	4308      	orrs	r0, r1
 8001698:	0029      	movs	r1, r5
 800169a:	0f42      	lsrs	r2, r0, #29
 800169c:	00c9      	lsls	r1, r1, #3
 800169e:	4d7f      	ldr	r5, [pc, #508]	; (800189c <__aeabi_dadd+0x3fc>)
 80016a0:	4311      	orrs	r1, r2
 80016a2:	00c0      	lsls	r0, r0, #3
 80016a4:	074b      	lsls	r3, r1, #29
 80016a6:	08ca      	lsrs	r2, r1, #3
 80016a8:	497c      	ldr	r1, [pc, #496]	; (800189c <__aeabi_dadd+0x3fc>)
 80016aa:	08c0      	lsrs	r0, r0, #3
 80016ac:	4303      	orrs	r3, r0
 80016ae:	428d      	cmp	r5, r1
 80016b0:	d068      	beq.n	8001784 <__aeabi_dadd+0x2e4>
 80016b2:	0312      	lsls	r2, r2, #12
 80016b4:	056d      	lsls	r5, r5, #21
 80016b6:	0b12      	lsrs	r2, r2, #12
 80016b8:	0d6d      	lsrs	r5, r5, #21
 80016ba:	2100      	movs	r1, #0
 80016bc:	0312      	lsls	r2, r2, #12
 80016be:	0018      	movs	r0, r3
 80016c0:	0b13      	lsrs	r3, r2, #12
 80016c2:	0d0a      	lsrs	r2, r1, #20
 80016c4:	0512      	lsls	r2, r2, #20
 80016c6:	431a      	orrs	r2, r3
 80016c8:	4b76      	ldr	r3, [pc, #472]	; (80018a4 <__aeabi_dadd+0x404>)
 80016ca:	052d      	lsls	r5, r5, #20
 80016cc:	4013      	ands	r3, r2
 80016ce:	432b      	orrs	r3, r5
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	07e4      	lsls	r4, r4, #31
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	4323      	orrs	r3, r4
 80016d8:	0019      	movs	r1, r3
 80016da:	bc1c      	pop	{r2, r3, r4}
 80016dc:	4690      	mov	r8, r2
 80016de:	4699      	mov	r9, r3
 80016e0:	46a2      	mov	sl, r4
 80016e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016e4:	003e      	movs	r6, r7
 80016e6:	4316      	orrs	r6, r2
 80016e8:	d012      	beq.n	8001710 <__aeabi_dadd+0x270>
 80016ea:	1e5e      	subs	r6, r3, #1
 80016ec:	2e00      	cmp	r6, #0
 80016ee:	d000      	beq.n	80016f2 <__aeabi_dadd+0x252>
 80016f0:	e100      	b.n	80018f4 <__aeabi_dadd+0x454>
 80016f2:	1887      	adds	r7, r0, r2
 80016f4:	4287      	cmp	r7, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	4441      	add	r1, r8
 80016fa:	4240      	negs	r0, r0
 80016fc:	1809      	adds	r1, r1, r0
 80016fe:	2501      	movs	r5, #1
 8001700:	020b      	lsls	r3, r1, #8
 8001702:	d533      	bpl.n	800176c <__aeabi_dadd+0x2cc>
 8001704:	2502      	movs	r5, #2
 8001706:	e785      	b.n	8001614 <__aeabi_dadd+0x174>
 8001708:	4664      	mov	r4, ip
 800170a:	0033      	movs	r3, r6
 800170c:	4641      	mov	r1, r8
 800170e:	0010      	movs	r0, r2
 8001710:	001d      	movs	r5, r3
 8001712:	e7c7      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001714:	2d00      	cmp	r5, #0
 8001716:	d000      	beq.n	800171a <__aeabi_dadd+0x27a>
 8001718:	e0da      	b.n	80018d0 <__aeabi_dadd+0x430>
 800171a:	000c      	movs	r4, r1
 800171c:	4304      	orrs	r4, r0
 800171e:	d0f3      	beq.n	8001708 <__aeabi_dadd+0x268>
 8001720:	1c5c      	adds	r4, r3, #1
 8001722:	d100      	bne.n	8001726 <__aeabi_dadd+0x286>
 8001724:	e19f      	b.n	8001a66 <__aeabi_dadd+0x5c6>
 8001726:	4c5d      	ldr	r4, [pc, #372]	; (800189c <__aeabi_dadd+0x3fc>)
 8001728:	42a6      	cmp	r6, r4
 800172a:	d100      	bne.n	800172e <__aeabi_dadd+0x28e>
 800172c:	e12f      	b.n	800198e <__aeabi_dadd+0x4ee>
 800172e:	43db      	mvns	r3, r3
 8001730:	2b38      	cmp	r3, #56	; 0x38
 8001732:	dd00      	ble.n	8001736 <__aeabi_dadd+0x296>
 8001734:	e166      	b.n	8001a04 <__aeabi_dadd+0x564>
 8001736:	2b1f      	cmp	r3, #31
 8001738:	dd00      	ble.n	800173c <__aeabi_dadd+0x29c>
 800173a:	e183      	b.n	8001a44 <__aeabi_dadd+0x5a4>
 800173c:	2420      	movs	r4, #32
 800173e:	0005      	movs	r5, r0
 8001740:	1ae4      	subs	r4, r4, r3
 8001742:	000f      	movs	r7, r1
 8001744:	40dd      	lsrs	r5, r3
 8001746:	40d9      	lsrs	r1, r3
 8001748:	40a0      	lsls	r0, r4
 800174a:	4643      	mov	r3, r8
 800174c:	40a7      	lsls	r7, r4
 800174e:	1a5b      	subs	r3, r3, r1
 8001750:	1e44      	subs	r4, r0, #1
 8001752:	41a0      	sbcs	r0, r4
 8001754:	4698      	mov	r8, r3
 8001756:	432f      	orrs	r7, r5
 8001758:	4338      	orrs	r0, r7
 800175a:	1a17      	subs	r7, r2, r0
 800175c:	42ba      	cmp	r2, r7
 800175e:	4192      	sbcs	r2, r2
 8001760:	4643      	mov	r3, r8
 8001762:	4252      	negs	r2, r2
 8001764:	1a99      	subs	r1, r3, r2
 8001766:	4664      	mov	r4, ip
 8001768:	0035      	movs	r5, r6
 800176a:	e6ca      	b.n	8001502 <__aeabi_dadd+0x62>
 800176c:	2207      	movs	r2, #7
 800176e:	403a      	ands	r2, r7
 8001770:	2a00      	cmp	r2, #0
 8001772:	d000      	beq.n	8001776 <__aeabi_dadd+0x2d6>
 8001774:	e6f6      	b.n	8001564 <__aeabi_dadd+0xc4>
 8001776:	074b      	lsls	r3, r1, #29
 8001778:	08ca      	lsrs	r2, r1, #3
 800177a:	4948      	ldr	r1, [pc, #288]	; (800189c <__aeabi_dadd+0x3fc>)
 800177c:	08ff      	lsrs	r7, r7, #3
 800177e:	433b      	orrs	r3, r7
 8001780:	428d      	cmp	r5, r1
 8001782:	d196      	bne.n	80016b2 <__aeabi_dadd+0x212>
 8001784:	0019      	movs	r1, r3
 8001786:	4311      	orrs	r1, r2
 8001788:	d100      	bne.n	800178c <__aeabi_dadd+0x2ec>
 800178a:	e19e      	b.n	8001aca <__aeabi_dadd+0x62a>
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0309      	lsls	r1, r1, #12
 8001790:	430a      	orrs	r2, r1
 8001792:	0312      	lsls	r2, r2, #12
 8001794:	0b12      	lsrs	r2, r2, #12
 8001796:	4d41      	ldr	r5, [pc, #260]	; (800189c <__aeabi_dadd+0x3fc>)
 8001798:	e78f      	b.n	80016ba <__aeabi_dadd+0x21a>
 800179a:	0015      	movs	r5, r2
 800179c:	2200      	movs	r2, #0
 800179e:	2300      	movs	r3, #0
 80017a0:	e78b      	b.n	80016ba <__aeabi_dadd+0x21a>
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d000      	beq.n	80017a8 <__aeabi_dadd+0x308>
 80017a6:	e0c7      	b.n	8001938 <__aeabi_dadd+0x498>
 80017a8:	1c6b      	adds	r3, r5, #1
 80017aa:	055f      	lsls	r7, r3, #21
 80017ac:	0d7f      	lsrs	r7, r7, #21
 80017ae:	2f01      	cmp	r7, #1
 80017b0:	dc00      	bgt.n	80017b4 <__aeabi_dadd+0x314>
 80017b2:	e0f1      	b.n	8001998 <__aeabi_dadd+0x4f8>
 80017b4:	4d39      	ldr	r5, [pc, #228]	; (800189c <__aeabi_dadd+0x3fc>)
 80017b6:	42ab      	cmp	r3, r5
 80017b8:	d100      	bne.n	80017bc <__aeabi_dadd+0x31c>
 80017ba:	e0b9      	b.n	8001930 <__aeabi_dadd+0x490>
 80017bc:	1885      	adds	r5, r0, r2
 80017be:	000a      	movs	r2, r1
 80017c0:	4285      	cmp	r5, r0
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	4442      	add	r2, r8
 80017c6:	4249      	negs	r1, r1
 80017c8:	1851      	adds	r1, r2, r1
 80017ca:	2207      	movs	r2, #7
 80017cc:	07cf      	lsls	r7, r1, #31
 80017ce:	086d      	lsrs	r5, r5, #1
 80017d0:	432f      	orrs	r7, r5
 80017d2:	0849      	lsrs	r1, r1, #1
 80017d4:	403a      	ands	r2, r7
 80017d6:	001d      	movs	r5, r3
 80017d8:	e6c2      	b.n	8001560 <__aeabi_dadd+0xc0>
 80017da:	2207      	movs	r2, #7
 80017dc:	4930      	ldr	r1, [pc, #192]	; (80018a0 <__aeabi_dadd+0x400>)
 80017de:	1aed      	subs	r5, r5, r3
 80017e0:	4031      	ands	r1, r6
 80017e2:	403a      	ands	r2, r7
 80017e4:	e6bc      	b.n	8001560 <__aeabi_dadd+0xc0>
 80017e6:	003e      	movs	r6, r7
 80017e8:	3828      	subs	r0, #40	; 0x28
 80017ea:	4086      	lsls	r6, r0
 80017ec:	2700      	movs	r7, #0
 80017ee:	e69f      	b.n	8001530 <__aeabi_dadd+0x90>
 80017f0:	0038      	movs	r0, r7
 80017f2:	f000 fca1 	bl	8002138 <__clzsi2>
 80017f6:	3020      	adds	r0, #32
 80017f8:	e68e      	b.n	8001518 <__aeabi_dadd+0x78>
 80017fa:	4643      	mov	r3, r8
 80017fc:	4313      	orrs	r3, r2
 80017fe:	001f      	movs	r7, r3
 8001800:	1e7a      	subs	r2, r7, #1
 8001802:	4197      	sbcs	r7, r2
 8001804:	1bc7      	subs	r7, r0, r7
 8001806:	42b8      	cmp	r0, r7
 8001808:	4180      	sbcs	r0, r0
 800180a:	4240      	negs	r0, r0
 800180c:	1a09      	subs	r1, r1, r0
 800180e:	e678      	b.n	8001502 <__aeabi_dadd+0x62>
 8001810:	000e      	movs	r6, r1
 8001812:	003b      	movs	r3, r7
 8001814:	4306      	orrs	r6, r0
 8001816:	4313      	orrs	r3, r2
 8001818:	2d00      	cmp	r5, #0
 800181a:	d161      	bne.n	80018e0 <__aeabi_dadd+0x440>
 800181c:	2e00      	cmp	r6, #0
 800181e:	d000      	beq.n	8001822 <__aeabi_dadd+0x382>
 8001820:	e0f4      	b.n	8001a0c <__aeabi_dadd+0x56c>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d100      	bne.n	8001828 <__aeabi_dadd+0x388>
 8001826:	e11b      	b.n	8001a60 <__aeabi_dadd+0x5c0>
 8001828:	4664      	mov	r4, ip
 800182a:	0039      	movs	r1, r7
 800182c:	0010      	movs	r0, r2
 800182e:	e739      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001830:	4f1a      	ldr	r7, [pc, #104]	; (800189c <__aeabi_dadd+0x3fc>)
 8001832:	42bb      	cmp	r3, r7
 8001834:	d07a      	beq.n	800192c <__aeabi_dadd+0x48c>
 8001836:	0033      	movs	r3, r6
 8001838:	e6ff      	b.n	800163a <__aeabi_dadd+0x19a>
 800183a:	0030      	movs	r0, r6
 800183c:	3d1f      	subs	r5, #31
 800183e:	40e8      	lsrs	r0, r5
 8001840:	2b20      	cmp	r3, #32
 8001842:	d003      	beq.n	800184c <__aeabi_dadd+0x3ac>
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	1acb      	subs	r3, r1, r3
 8001848:	409e      	lsls	r6, r3
 800184a:	4337      	orrs	r7, r6
 800184c:	1e7b      	subs	r3, r7, #1
 800184e:	419f      	sbcs	r7, r3
 8001850:	2207      	movs	r2, #7
 8001852:	4307      	orrs	r7, r0
 8001854:	403a      	ands	r2, r7
 8001856:	2100      	movs	r1, #0
 8001858:	2500      	movs	r5, #0
 800185a:	e789      	b.n	8001770 <__aeabi_dadd+0x2d0>
 800185c:	1a17      	subs	r7, r2, r0
 800185e:	4643      	mov	r3, r8
 8001860:	42ba      	cmp	r2, r7
 8001862:	41b6      	sbcs	r6, r6
 8001864:	1a59      	subs	r1, r3, r1
 8001866:	4276      	negs	r6, r6
 8001868:	1b8e      	subs	r6, r1, r6
 800186a:	4664      	mov	r4, ip
 800186c:	e64e      	b.n	800150c <__aeabi_dadd+0x6c>
 800186e:	2b1f      	cmp	r3, #31
 8001870:	dd00      	ble.n	8001874 <__aeabi_dadd+0x3d4>
 8001872:	e0ad      	b.n	80019d0 <__aeabi_dadd+0x530>
 8001874:	2620      	movs	r6, #32
 8001876:	4647      	mov	r7, r8
 8001878:	1af6      	subs	r6, r6, r3
 800187a:	40b7      	lsls	r7, r6
 800187c:	46b9      	mov	r9, r7
 800187e:	0017      	movs	r7, r2
 8001880:	46b2      	mov	sl, r6
 8001882:	40df      	lsrs	r7, r3
 8001884:	464e      	mov	r6, r9
 8001886:	433e      	orrs	r6, r7
 8001888:	0037      	movs	r7, r6
 800188a:	4656      	mov	r6, sl
 800188c:	40b2      	lsls	r2, r6
 800188e:	1e56      	subs	r6, r2, #1
 8001890:	41b2      	sbcs	r2, r6
 8001892:	4317      	orrs	r7, r2
 8001894:	4642      	mov	r2, r8
 8001896:	40da      	lsrs	r2, r3
 8001898:	1889      	adds	r1, r1, r2
 800189a:	e6ae      	b.n	80015fa <__aeabi_dadd+0x15a>
 800189c:	000007ff 	.word	0x000007ff
 80018a0:	ff7fffff 	.word	0xff7fffff
 80018a4:	800fffff 	.word	0x800fffff
 80018a8:	2620      	movs	r6, #32
 80018aa:	4647      	mov	r7, r8
 80018ac:	1af6      	subs	r6, r6, r3
 80018ae:	40b7      	lsls	r7, r6
 80018b0:	46b9      	mov	r9, r7
 80018b2:	0017      	movs	r7, r2
 80018b4:	46b2      	mov	sl, r6
 80018b6:	40df      	lsrs	r7, r3
 80018b8:	464e      	mov	r6, r9
 80018ba:	433e      	orrs	r6, r7
 80018bc:	0037      	movs	r7, r6
 80018be:	4656      	mov	r6, sl
 80018c0:	40b2      	lsls	r2, r6
 80018c2:	1e56      	subs	r6, r2, #1
 80018c4:	41b2      	sbcs	r2, r6
 80018c6:	4317      	orrs	r7, r2
 80018c8:	4642      	mov	r2, r8
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	1a89      	subs	r1, r1, r2
 80018ce:	e799      	b.n	8001804 <__aeabi_dadd+0x364>
 80018d0:	4c7f      	ldr	r4, [pc, #508]	; (8001ad0 <__aeabi_dadd+0x630>)
 80018d2:	42a6      	cmp	r6, r4
 80018d4:	d05b      	beq.n	800198e <__aeabi_dadd+0x4ee>
 80018d6:	2480      	movs	r4, #128	; 0x80
 80018d8:	0424      	lsls	r4, r4, #16
 80018da:	425b      	negs	r3, r3
 80018dc:	4321      	orrs	r1, r4
 80018de:	e727      	b.n	8001730 <__aeabi_dadd+0x290>
 80018e0:	2e00      	cmp	r6, #0
 80018e2:	d10c      	bne.n	80018fe <__aeabi_dadd+0x45e>
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d100      	bne.n	80018ea <__aeabi_dadd+0x44a>
 80018e8:	e0cb      	b.n	8001a82 <__aeabi_dadd+0x5e2>
 80018ea:	4664      	mov	r4, ip
 80018ec:	0039      	movs	r1, r7
 80018ee:	0010      	movs	r0, r2
 80018f0:	4d77      	ldr	r5, [pc, #476]	; (8001ad0 <__aeabi_dadd+0x630>)
 80018f2:	e6d7      	b.n	80016a4 <__aeabi_dadd+0x204>
 80018f4:	4f76      	ldr	r7, [pc, #472]	; (8001ad0 <__aeabi_dadd+0x630>)
 80018f6:	42bb      	cmp	r3, r7
 80018f8:	d018      	beq.n	800192c <__aeabi_dadd+0x48c>
 80018fa:	0033      	movs	r3, r6
 80018fc:	e675      	b.n	80015ea <__aeabi_dadd+0x14a>
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d014      	beq.n	800192c <__aeabi_dadd+0x48c>
 8001902:	074b      	lsls	r3, r1, #29
 8001904:	08c0      	lsrs	r0, r0, #3
 8001906:	4318      	orrs	r0, r3
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	08c9      	lsrs	r1, r1, #3
 800190c:	031b      	lsls	r3, r3, #12
 800190e:	4219      	tst	r1, r3
 8001910:	d007      	beq.n	8001922 <__aeabi_dadd+0x482>
 8001912:	08fc      	lsrs	r4, r7, #3
 8001914:	421c      	tst	r4, r3
 8001916:	d104      	bne.n	8001922 <__aeabi_dadd+0x482>
 8001918:	0779      	lsls	r1, r7, #29
 800191a:	08d0      	lsrs	r0, r2, #3
 800191c:	4308      	orrs	r0, r1
 800191e:	46e1      	mov	r9, ip
 8001920:	0021      	movs	r1, r4
 8001922:	464c      	mov	r4, r9
 8001924:	0f42      	lsrs	r2, r0, #29
 8001926:	00c9      	lsls	r1, r1, #3
 8001928:	4311      	orrs	r1, r2
 800192a:	00c0      	lsls	r0, r0, #3
 800192c:	4d68      	ldr	r5, [pc, #416]	; (8001ad0 <__aeabi_dadd+0x630>)
 800192e:	e6b9      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001930:	001d      	movs	r5, r3
 8001932:	2200      	movs	r2, #0
 8001934:	2300      	movs	r3, #0
 8001936:	e6c0      	b.n	80016ba <__aeabi_dadd+0x21a>
 8001938:	2d00      	cmp	r5, #0
 800193a:	d15b      	bne.n	80019f4 <__aeabi_dadd+0x554>
 800193c:	000d      	movs	r5, r1
 800193e:	4305      	orrs	r5, r0
 8001940:	d100      	bne.n	8001944 <__aeabi_dadd+0x4a4>
 8001942:	e6e2      	b.n	800170a <__aeabi_dadd+0x26a>
 8001944:	1c5d      	adds	r5, r3, #1
 8001946:	d100      	bne.n	800194a <__aeabi_dadd+0x4aa>
 8001948:	e0b0      	b.n	8001aac <__aeabi_dadd+0x60c>
 800194a:	4d61      	ldr	r5, [pc, #388]	; (8001ad0 <__aeabi_dadd+0x630>)
 800194c:	42ae      	cmp	r6, r5
 800194e:	d01f      	beq.n	8001990 <__aeabi_dadd+0x4f0>
 8001950:	43db      	mvns	r3, r3
 8001952:	2b38      	cmp	r3, #56	; 0x38
 8001954:	dc71      	bgt.n	8001a3a <__aeabi_dadd+0x59a>
 8001956:	2b1f      	cmp	r3, #31
 8001958:	dd00      	ble.n	800195c <__aeabi_dadd+0x4bc>
 800195a:	e096      	b.n	8001a8a <__aeabi_dadd+0x5ea>
 800195c:	2520      	movs	r5, #32
 800195e:	000f      	movs	r7, r1
 8001960:	1aed      	subs	r5, r5, r3
 8001962:	40af      	lsls	r7, r5
 8001964:	46b9      	mov	r9, r7
 8001966:	0007      	movs	r7, r0
 8001968:	46aa      	mov	sl, r5
 800196a:	40df      	lsrs	r7, r3
 800196c:	464d      	mov	r5, r9
 800196e:	433d      	orrs	r5, r7
 8001970:	002f      	movs	r7, r5
 8001972:	4655      	mov	r5, sl
 8001974:	40a8      	lsls	r0, r5
 8001976:	40d9      	lsrs	r1, r3
 8001978:	1e45      	subs	r5, r0, #1
 800197a:	41a8      	sbcs	r0, r5
 800197c:	4488      	add	r8, r1
 800197e:	4307      	orrs	r7, r0
 8001980:	18bf      	adds	r7, r7, r2
 8001982:	4297      	cmp	r7, r2
 8001984:	4192      	sbcs	r2, r2
 8001986:	4251      	negs	r1, r2
 8001988:	4441      	add	r1, r8
 800198a:	0035      	movs	r5, r6
 800198c:	e63a      	b.n	8001604 <__aeabi_dadd+0x164>
 800198e:	4664      	mov	r4, ip
 8001990:	0035      	movs	r5, r6
 8001992:	4641      	mov	r1, r8
 8001994:	0010      	movs	r0, r2
 8001996:	e685      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001998:	000b      	movs	r3, r1
 800199a:	4303      	orrs	r3, r0
 800199c:	2d00      	cmp	r5, #0
 800199e:	d000      	beq.n	80019a2 <__aeabi_dadd+0x502>
 80019a0:	e663      	b.n	800166a <__aeabi_dadd+0x1ca>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0f5      	beq.n	8001992 <__aeabi_dadd+0x4f2>
 80019a6:	4643      	mov	r3, r8
 80019a8:	4313      	orrs	r3, r2
 80019aa:	d100      	bne.n	80019ae <__aeabi_dadd+0x50e>
 80019ac:	e67a      	b.n	80016a4 <__aeabi_dadd+0x204>
 80019ae:	1887      	adds	r7, r0, r2
 80019b0:	4287      	cmp	r7, r0
 80019b2:	4180      	sbcs	r0, r0
 80019b4:	2207      	movs	r2, #7
 80019b6:	4441      	add	r1, r8
 80019b8:	4240      	negs	r0, r0
 80019ba:	1809      	adds	r1, r1, r0
 80019bc:	403a      	ands	r2, r7
 80019be:	020b      	lsls	r3, r1, #8
 80019c0:	d400      	bmi.n	80019c4 <__aeabi_dadd+0x524>
 80019c2:	e6d5      	b.n	8001770 <__aeabi_dadd+0x2d0>
 80019c4:	4b43      	ldr	r3, [pc, #268]	; (8001ad4 <__aeabi_dadd+0x634>)
 80019c6:	3501      	adds	r5, #1
 80019c8:	4019      	ands	r1, r3
 80019ca:	e5c9      	b.n	8001560 <__aeabi_dadd+0xc0>
 80019cc:	0038      	movs	r0, r7
 80019ce:	e669      	b.n	80016a4 <__aeabi_dadd+0x204>
 80019d0:	001e      	movs	r6, r3
 80019d2:	4647      	mov	r7, r8
 80019d4:	3e20      	subs	r6, #32
 80019d6:	40f7      	lsrs	r7, r6
 80019d8:	46bc      	mov	ip, r7
 80019da:	2b20      	cmp	r3, #32
 80019dc:	d004      	beq.n	80019e8 <__aeabi_dadd+0x548>
 80019de:	2640      	movs	r6, #64	; 0x40
 80019e0:	1af3      	subs	r3, r6, r3
 80019e2:	4646      	mov	r6, r8
 80019e4:	409e      	lsls	r6, r3
 80019e6:	4332      	orrs	r2, r6
 80019e8:	0017      	movs	r7, r2
 80019ea:	4663      	mov	r3, ip
 80019ec:	1e7a      	subs	r2, r7, #1
 80019ee:	4197      	sbcs	r7, r2
 80019f0:	431f      	orrs	r7, r3
 80019f2:	e602      	b.n	80015fa <__aeabi_dadd+0x15a>
 80019f4:	4d36      	ldr	r5, [pc, #216]	; (8001ad0 <__aeabi_dadd+0x630>)
 80019f6:	42ae      	cmp	r6, r5
 80019f8:	d0ca      	beq.n	8001990 <__aeabi_dadd+0x4f0>
 80019fa:	2580      	movs	r5, #128	; 0x80
 80019fc:	042d      	lsls	r5, r5, #16
 80019fe:	425b      	negs	r3, r3
 8001a00:	4329      	orrs	r1, r5
 8001a02:	e7a6      	b.n	8001952 <__aeabi_dadd+0x4b2>
 8001a04:	4308      	orrs	r0, r1
 8001a06:	1e41      	subs	r1, r0, #1
 8001a08:	4188      	sbcs	r0, r1
 8001a0a:	e6a6      	b.n	800175a <__aeabi_dadd+0x2ba>
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dadd+0x572>
 8001a10:	e648      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001a12:	1a87      	subs	r7, r0, r2
 8001a14:	4643      	mov	r3, r8
 8001a16:	42b8      	cmp	r0, r7
 8001a18:	41b6      	sbcs	r6, r6
 8001a1a:	1acb      	subs	r3, r1, r3
 8001a1c:	4276      	negs	r6, r6
 8001a1e:	1b9e      	subs	r6, r3, r6
 8001a20:	0233      	lsls	r3, r6, #8
 8001a22:	d54b      	bpl.n	8001abc <__aeabi_dadd+0x61c>
 8001a24:	1a17      	subs	r7, r2, r0
 8001a26:	4643      	mov	r3, r8
 8001a28:	42ba      	cmp	r2, r7
 8001a2a:	4192      	sbcs	r2, r2
 8001a2c:	1a59      	subs	r1, r3, r1
 8001a2e:	4252      	negs	r2, r2
 8001a30:	1a89      	subs	r1, r1, r2
 8001a32:	2207      	movs	r2, #7
 8001a34:	4664      	mov	r4, ip
 8001a36:	403a      	ands	r2, r7
 8001a38:	e592      	b.n	8001560 <__aeabi_dadd+0xc0>
 8001a3a:	4301      	orrs	r1, r0
 8001a3c:	000f      	movs	r7, r1
 8001a3e:	1e79      	subs	r1, r7, #1
 8001a40:	418f      	sbcs	r7, r1
 8001a42:	e79d      	b.n	8001980 <__aeabi_dadd+0x4e0>
 8001a44:	001c      	movs	r4, r3
 8001a46:	000f      	movs	r7, r1
 8001a48:	3c20      	subs	r4, #32
 8001a4a:	40e7      	lsrs	r7, r4
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	d003      	beq.n	8001a58 <__aeabi_dadd+0x5b8>
 8001a50:	2440      	movs	r4, #64	; 0x40
 8001a52:	1ae3      	subs	r3, r4, r3
 8001a54:	4099      	lsls	r1, r3
 8001a56:	4308      	orrs	r0, r1
 8001a58:	1e41      	subs	r1, r0, #1
 8001a5a:	4188      	sbcs	r0, r1
 8001a5c:	4338      	orrs	r0, r7
 8001a5e:	e67c      	b.n	800175a <__aeabi_dadd+0x2ba>
 8001a60:	2200      	movs	r2, #0
 8001a62:	2400      	movs	r4, #0
 8001a64:	e625      	b.n	80016b2 <__aeabi_dadd+0x212>
 8001a66:	1a17      	subs	r7, r2, r0
 8001a68:	4643      	mov	r3, r8
 8001a6a:	42ba      	cmp	r2, r7
 8001a6c:	4192      	sbcs	r2, r2
 8001a6e:	1a59      	subs	r1, r3, r1
 8001a70:	4252      	negs	r2, r2
 8001a72:	1a89      	subs	r1, r1, r2
 8001a74:	4664      	mov	r4, ip
 8001a76:	0035      	movs	r5, r6
 8001a78:	e543      	b.n	8001502 <__aeabi_dadd+0x62>
 8001a7a:	4641      	mov	r1, r8
 8001a7c:	0010      	movs	r0, r2
 8001a7e:	4d14      	ldr	r5, [pc, #80]	; (8001ad0 <__aeabi_dadd+0x630>)
 8001a80:	e610      	b.n	80016a4 <__aeabi_dadd+0x204>
 8001a82:	2280      	movs	r2, #128	; 0x80
 8001a84:	2400      	movs	r4, #0
 8001a86:	0312      	lsls	r2, r2, #12
 8001a88:	e680      	b.n	800178c <__aeabi_dadd+0x2ec>
 8001a8a:	001d      	movs	r5, r3
 8001a8c:	000f      	movs	r7, r1
 8001a8e:	3d20      	subs	r5, #32
 8001a90:	40ef      	lsrs	r7, r5
 8001a92:	46bc      	mov	ip, r7
 8001a94:	2b20      	cmp	r3, #32
 8001a96:	d003      	beq.n	8001aa0 <__aeabi_dadd+0x600>
 8001a98:	2540      	movs	r5, #64	; 0x40
 8001a9a:	1aeb      	subs	r3, r5, r3
 8001a9c:	4099      	lsls	r1, r3
 8001a9e:	4308      	orrs	r0, r1
 8001aa0:	0007      	movs	r7, r0
 8001aa2:	4663      	mov	r3, ip
 8001aa4:	1e78      	subs	r0, r7, #1
 8001aa6:	4187      	sbcs	r7, r0
 8001aa8:	431f      	orrs	r7, r3
 8001aaa:	e769      	b.n	8001980 <__aeabi_dadd+0x4e0>
 8001aac:	1887      	adds	r7, r0, r2
 8001aae:	4297      	cmp	r7, r2
 8001ab0:	419b      	sbcs	r3, r3
 8001ab2:	4441      	add	r1, r8
 8001ab4:	425b      	negs	r3, r3
 8001ab6:	18c9      	adds	r1, r1, r3
 8001ab8:	0035      	movs	r5, r6
 8001aba:	e5a3      	b.n	8001604 <__aeabi_dadd+0x164>
 8001abc:	003b      	movs	r3, r7
 8001abe:	4333      	orrs	r3, r6
 8001ac0:	d0ce      	beq.n	8001a60 <__aeabi_dadd+0x5c0>
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	0031      	movs	r1, r6
 8001ac6:	403a      	ands	r2, r7
 8001ac8:	e652      	b.n	8001770 <__aeabi_dadd+0x2d0>
 8001aca:	2300      	movs	r3, #0
 8001acc:	001a      	movs	r2, r3
 8001ace:	e5f4      	b.n	80016ba <__aeabi_dadd+0x21a>
 8001ad0:	000007ff 	.word	0x000007ff
 8001ad4:	ff7fffff 	.word	0xff7fffff

08001ad8 <__aeabi_dmul>:
 8001ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ada:	4657      	mov	r7, sl
 8001adc:	46de      	mov	lr, fp
 8001ade:	464e      	mov	r6, r9
 8001ae0:	4645      	mov	r5, r8
 8001ae2:	b5e0      	push	{r5, r6, r7, lr}
 8001ae4:	4683      	mov	fp, r0
 8001ae6:	0006      	movs	r6, r0
 8001ae8:	030f      	lsls	r7, r1, #12
 8001aea:	0048      	lsls	r0, r1, #1
 8001aec:	b087      	sub	sp, #28
 8001aee:	4692      	mov	sl, r2
 8001af0:	001d      	movs	r5, r3
 8001af2:	0b3f      	lsrs	r7, r7, #12
 8001af4:	0d40      	lsrs	r0, r0, #21
 8001af6:	0fcc      	lsrs	r4, r1, #31
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d100      	bne.n	8001afe <__aeabi_dmul+0x26>
 8001afc:	e06f      	b.n	8001bde <__aeabi_dmul+0x106>
 8001afe:	4bde      	ldr	r3, [pc, #888]	; (8001e78 <__aeabi_dmul+0x3a0>)
 8001b00:	4298      	cmp	r0, r3
 8001b02:	d038      	beq.n	8001b76 <__aeabi_dmul+0x9e>
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	00ff      	lsls	r7, r7, #3
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431f      	orrs	r7, r3
 8001b0c:	0f73      	lsrs	r3, r6, #29
 8001b0e:	433b      	orrs	r3, r7
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	4bda      	ldr	r3, [pc, #872]	; (8001e7c <__aeabi_dmul+0x3a4>)
 8001b14:	2700      	movs	r7, #0
 8001b16:	4699      	mov	r9, r3
 8001b18:	2300      	movs	r3, #0
 8001b1a:	469b      	mov	fp, r3
 8001b1c:	00f6      	lsls	r6, r6, #3
 8001b1e:	4481      	add	r9, r0
 8001b20:	032b      	lsls	r3, r5, #12
 8001b22:	0069      	lsls	r1, r5, #1
 8001b24:	0b1b      	lsrs	r3, r3, #12
 8001b26:	4652      	mov	r2, sl
 8001b28:	4698      	mov	r8, r3
 8001b2a:	0d49      	lsrs	r1, r1, #21
 8001b2c:	0fed      	lsrs	r5, r5, #31
 8001b2e:	2900      	cmp	r1, #0
 8001b30:	d100      	bne.n	8001b34 <__aeabi_dmul+0x5c>
 8001b32:	e085      	b.n	8001c40 <__aeabi_dmul+0x168>
 8001b34:	4bd0      	ldr	r3, [pc, #832]	; (8001e78 <__aeabi_dmul+0x3a0>)
 8001b36:	4299      	cmp	r1, r3
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dmul+0x64>
 8001b3a:	e073      	b.n	8001c24 <__aeabi_dmul+0x14c>
 8001b3c:	4643      	mov	r3, r8
 8001b3e:	00da      	lsls	r2, r3, #3
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	4313      	orrs	r3, r2
 8001b46:	4652      	mov	r2, sl
 8001b48:	48cc      	ldr	r0, [pc, #816]	; (8001e7c <__aeabi_dmul+0x3a4>)
 8001b4a:	0f52      	lsrs	r2, r2, #29
 8001b4c:	4684      	mov	ip, r0
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	4652      	mov	r2, sl
 8001b52:	2000      	movs	r0, #0
 8001b54:	4461      	add	r1, ip
 8001b56:	00d2      	lsls	r2, r2, #3
 8001b58:	4489      	add	r9, r1
 8001b5a:	0021      	movs	r1, r4
 8001b5c:	4069      	eors	r1, r5
 8001b5e:	9100      	str	r1, [sp, #0]
 8001b60:	468c      	mov	ip, r1
 8001b62:	2101      	movs	r1, #1
 8001b64:	4449      	add	r1, r9
 8001b66:	468a      	mov	sl, r1
 8001b68:	2f0f      	cmp	r7, #15
 8001b6a:	d900      	bls.n	8001b6e <__aeabi_dmul+0x96>
 8001b6c:	e090      	b.n	8001c90 <__aeabi_dmul+0x1b8>
 8001b6e:	49c4      	ldr	r1, [pc, #784]	; (8001e80 <__aeabi_dmul+0x3a8>)
 8001b70:	00bf      	lsls	r7, r7, #2
 8001b72:	59cf      	ldr	r7, [r1, r7]
 8001b74:	46bf      	mov	pc, r7
 8001b76:	465b      	mov	r3, fp
 8001b78:	433b      	orrs	r3, r7
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_dmul+0xa8>
 8001b7e:	e16a      	b.n	8001e56 <__aeabi_dmul+0x37e>
 8001b80:	2302      	movs	r3, #2
 8001b82:	2708      	movs	r7, #8
 8001b84:	2600      	movs	r6, #0
 8001b86:	4681      	mov	r9, r0
 8001b88:	469b      	mov	fp, r3
 8001b8a:	e7c9      	b.n	8001b20 <__aeabi_dmul+0x48>
 8001b8c:	0032      	movs	r2, r6
 8001b8e:	4658      	mov	r0, fp
 8001b90:	9b01      	ldr	r3, [sp, #4]
 8001b92:	4661      	mov	r1, ip
 8001b94:	9100      	str	r1, [sp, #0]
 8001b96:	2802      	cmp	r0, #2
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dmul+0xc4>
 8001b9a:	e075      	b.n	8001c88 <__aeabi_dmul+0x1b0>
 8001b9c:	2803      	cmp	r0, #3
 8001b9e:	d100      	bne.n	8001ba2 <__aeabi_dmul+0xca>
 8001ba0:	e1fe      	b.n	8001fa0 <__aeabi_dmul+0x4c8>
 8001ba2:	2801      	cmp	r0, #1
 8001ba4:	d000      	beq.n	8001ba8 <__aeabi_dmul+0xd0>
 8001ba6:	e12c      	b.n	8001e02 <__aeabi_dmul+0x32a>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2700      	movs	r7, #0
 8001bac:	2600      	movs	r6, #0
 8001bae:	2500      	movs	r5, #0
 8001bb0:	033f      	lsls	r7, r7, #12
 8001bb2:	0d2a      	lsrs	r2, r5, #20
 8001bb4:	0b3f      	lsrs	r7, r7, #12
 8001bb6:	48b3      	ldr	r0, [pc, #716]	; (8001e84 <__aeabi_dmul+0x3ac>)
 8001bb8:	0512      	lsls	r2, r2, #20
 8001bba:	433a      	orrs	r2, r7
 8001bbc:	4002      	ands	r2, r0
 8001bbe:	051b      	lsls	r3, r3, #20
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	9a00      	ldr	r2, [sp, #0]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	07d1      	lsls	r1, r2, #31
 8001bc8:	085b      	lsrs	r3, r3, #1
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	0030      	movs	r0, r6
 8001bce:	0019      	movs	r1, r3
 8001bd0:	b007      	add	sp, #28
 8001bd2:	bc3c      	pop	{r2, r3, r4, r5}
 8001bd4:	4690      	mov	r8, r2
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	46a2      	mov	sl, r4
 8001bda:	46ab      	mov	fp, r5
 8001bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bde:	465b      	mov	r3, fp
 8001be0:	433b      	orrs	r3, r7
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	d100      	bne.n	8001be8 <__aeabi_dmul+0x110>
 8001be6:	e12f      	b.n	8001e48 <__aeabi_dmul+0x370>
 8001be8:	2f00      	cmp	r7, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dmul+0x116>
 8001bec:	e1a5      	b.n	8001f3a <__aeabi_dmul+0x462>
 8001bee:	0038      	movs	r0, r7
 8001bf0:	f000 faa2 	bl	8002138 <__clzsi2>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	3b0b      	subs	r3, #11
 8001bf8:	2b1c      	cmp	r3, #28
 8001bfa:	dd00      	ble.n	8001bfe <__aeabi_dmul+0x126>
 8001bfc:	e196      	b.n	8001f2c <__aeabi_dmul+0x454>
 8001bfe:	221d      	movs	r2, #29
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	465a      	mov	r2, fp
 8001c04:	0001      	movs	r1, r0
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	465e      	mov	r6, fp
 8001c0a:	3908      	subs	r1, #8
 8001c0c:	408f      	lsls	r7, r1
 8001c0e:	0013      	movs	r3, r2
 8001c10:	408e      	lsls	r6, r1
 8001c12:	433b      	orrs	r3, r7
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	4b9c      	ldr	r3, [pc, #624]	; (8001e88 <__aeabi_dmul+0x3b0>)
 8001c18:	2700      	movs	r7, #0
 8001c1a:	1a1b      	subs	r3, r3, r0
 8001c1c:	4699      	mov	r9, r3
 8001c1e:	2300      	movs	r3, #0
 8001c20:	469b      	mov	fp, r3
 8001c22:	e77d      	b.n	8001b20 <__aeabi_dmul+0x48>
 8001c24:	4641      	mov	r1, r8
 8001c26:	4653      	mov	r3, sl
 8001c28:	430b      	orrs	r3, r1
 8001c2a:	4993      	ldr	r1, [pc, #588]	; (8001e78 <__aeabi_dmul+0x3a0>)
 8001c2c:	468c      	mov	ip, r1
 8001c2e:	44e1      	add	r9, ip
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d000      	beq.n	8001c36 <__aeabi_dmul+0x15e>
 8001c34:	e11a      	b.n	8001e6c <__aeabi_dmul+0x394>
 8001c36:	2202      	movs	r2, #2
 8001c38:	2002      	movs	r0, #2
 8001c3a:	4317      	orrs	r7, r2
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	e78c      	b.n	8001b5a <__aeabi_dmul+0x82>
 8001c40:	4313      	orrs	r3, r2
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dmul+0x16e>
 8001c44:	e10d      	b.n	8001e62 <__aeabi_dmul+0x38a>
 8001c46:	4643      	mov	r3, r8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d100      	bne.n	8001c4e <__aeabi_dmul+0x176>
 8001c4c:	e181      	b.n	8001f52 <__aeabi_dmul+0x47a>
 8001c4e:	4640      	mov	r0, r8
 8001c50:	f000 fa72 	bl	8002138 <__clzsi2>
 8001c54:	0002      	movs	r2, r0
 8001c56:	3a0b      	subs	r2, #11
 8001c58:	2a1c      	cmp	r2, #28
 8001c5a:	dd00      	ble.n	8001c5e <__aeabi_dmul+0x186>
 8001c5c:	e172      	b.n	8001f44 <__aeabi_dmul+0x46c>
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4643      	mov	r3, r8
 8001c62:	3908      	subs	r1, #8
 8001c64:	408b      	lsls	r3, r1
 8001c66:	4698      	mov	r8, r3
 8001c68:	231d      	movs	r3, #29
 8001c6a:	1a9a      	subs	r2, r3, r2
 8001c6c:	4653      	mov	r3, sl
 8001c6e:	40d3      	lsrs	r3, r2
 8001c70:	001a      	movs	r2, r3
 8001c72:	4643      	mov	r3, r8
 8001c74:	4313      	orrs	r3, r2
 8001c76:	4652      	mov	r2, sl
 8001c78:	408a      	lsls	r2, r1
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	1a08      	subs	r0, r1, r0
 8001c7e:	4982      	ldr	r1, [pc, #520]	; (8001e88 <__aeabi_dmul+0x3b0>)
 8001c80:	4689      	mov	r9, r1
 8001c82:	4481      	add	r9, r0
 8001c84:	2000      	movs	r0, #0
 8001c86:	e768      	b.n	8001b5a <__aeabi_dmul+0x82>
 8001c88:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <__aeabi_dmul+0x3a0>)
 8001c8a:	2700      	movs	r7, #0
 8001c8c:	2600      	movs	r6, #0
 8001c8e:	e78e      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001c90:	0c14      	lsrs	r4, r2, #16
 8001c92:	0412      	lsls	r2, r2, #16
 8001c94:	0c12      	lsrs	r2, r2, #16
 8001c96:	0011      	movs	r1, r2
 8001c98:	0c37      	lsrs	r7, r6, #16
 8001c9a:	0436      	lsls	r6, r6, #16
 8001c9c:	0c35      	lsrs	r5, r6, #16
 8001c9e:	4379      	muls	r1, r7
 8001ca0:	0028      	movs	r0, r5
 8001ca2:	468c      	mov	ip, r1
 8001ca4:	002e      	movs	r6, r5
 8001ca6:	4360      	muls	r0, r4
 8001ca8:	4460      	add	r0, ip
 8001caa:	4683      	mov	fp, r0
 8001cac:	4356      	muls	r6, r2
 8001cae:	0021      	movs	r1, r4
 8001cb0:	0c30      	lsrs	r0, r6, #16
 8001cb2:	4680      	mov	r8, r0
 8001cb4:	4658      	mov	r0, fp
 8001cb6:	4379      	muls	r1, r7
 8001cb8:	4440      	add	r0, r8
 8001cba:	9102      	str	r1, [sp, #8]
 8001cbc:	4584      	cmp	ip, r0
 8001cbe:	d906      	bls.n	8001cce <__aeabi_dmul+0x1f6>
 8001cc0:	4688      	mov	r8, r1
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	0249      	lsls	r1, r1, #9
 8001cc6:	468c      	mov	ip, r1
 8001cc8:	44e0      	add	r8, ip
 8001cca:	4641      	mov	r1, r8
 8001ccc:	9102      	str	r1, [sp, #8]
 8001cce:	0436      	lsls	r6, r6, #16
 8001cd0:	0c01      	lsrs	r1, r0, #16
 8001cd2:	0c36      	lsrs	r6, r6, #16
 8001cd4:	0400      	lsls	r0, r0, #16
 8001cd6:	468b      	mov	fp, r1
 8001cd8:	1981      	adds	r1, r0, r6
 8001cda:	0c1e      	lsrs	r6, r3, #16
 8001cdc:	041b      	lsls	r3, r3, #16
 8001cde:	0c1b      	lsrs	r3, r3, #16
 8001ce0:	9103      	str	r1, [sp, #12]
 8001ce2:	0019      	movs	r1, r3
 8001ce4:	4379      	muls	r1, r7
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	0028      	movs	r0, r5
 8001cea:	4375      	muls	r5, r6
 8001cec:	4465      	add	r5, ip
 8001cee:	46a8      	mov	r8, r5
 8001cf0:	4358      	muls	r0, r3
 8001cf2:	0c05      	lsrs	r5, r0, #16
 8001cf4:	4445      	add	r5, r8
 8001cf6:	4377      	muls	r7, r6
 8001cf8:	42a9      	cmp	r1, r5
 8001cfa:	d903      	bls.n	8001d04 <__aeabi_dmul+0x22c>
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0249      	lsls	r1, r1, #9
 8001d00:	468c      	mov	ip, r1
 8001d02:	4467      	add	r7, ip
 8001d04:	0c29      	lsrs	r1, r5, #16
 8001d06:	468c      	mov	ip, r1
 8001d08:	0039      	movs	r1, r7
 8001d0a:	0400      	lsls	r0, r0, #16
 8001d0c:	0c00      	lsrs	r0, r0, #16
 8001d0e:	042d      	lsls	r5, r5, #16
 8001d10:	182d      	adds	r5, r5, r0
 8001d12:	4461      	add	r1, ip
 8001d14:	44ab      	add	fp, r5
 8001d16:	9105      	str	r1, [sp, #20]
 8001d18:	4659      	mov	r1, fp
 8001d1a:	9104      	str	r1, [sp, #16]
 8001d1c:	9901      	ldr	r1, [sp, #4]
 8001d1e:	040f      	lsls	r7, r1, #16
 8001d20:	0c3f      	lsrs	r7, r7, #16
 8001d22:	0c08      	lsrs	r0, r1, #16
 8001d24:	0039      	movs	r1, r7
 8001d26:	4351      	muls	r1, r2
 8001d28:	4342      	muls	r2, r0
 8001d2a:	4690      	mov	r8, r2
 8001d2c:	0002      	movs	r2, r0
 8001d2e:	468c      	mov	ip, r1
 8001d30:	0c09      	lsrs	r1, r1, #16
 8001d32:	468b      	mov	fp, r1
 8001d34:	4362      	muls	r2, r4
 8001d36:	437c      	muls	r4, r7
 8001d38:	4444      	add	r4, r8
 8001d3a:	445c      	add	r4, fp
 8001d3c:	45a0      	cmp	r8, r4
 8001d3e:	d903      	bls.n	8001d48 <__aeabi_dmul+0x270>
 8001d40:	2180      	movs	r1, #128	; 0x80
 8001d42:	0249      	lsls	r1, r1, #9
 8001d44:	4688      	mov	r8, r1
 8001d46:	4442      	add	r2, r8
 8001d48:	0c21      	lsrs	r1, r4, #16
 8001d4a:	4688      	mov	r8, r1
 8001d4c:	4661      	mov	r1, ip
 8001d4e:	0409      	lsls	r1, r1, #16
 8001d50:	0c09      	lsrs	r1, r1, #16
 8001d52:	468c      	mov	ip, r1
 8001d54:	0039      	movs	r1, r7
 8001d56:	4359      	muls	r1, r3
 8001d58:	4343      	muls	r3, r0
 8001d5a:	4370      	muls	r0, r6
 8001d5c:	437e      	muls	r6, r7
 8001d5e:	0c0f      	lsrs	r7, r1, #16
 8001d60:	18f6      	adds	r6, r6, r3
 8001d62:	0424      	lsls	r4, r4, #16
 8001d64:	19be      	adds	r6, r7, r6
 8001d66:	4464      	add	r4, ip
 8001d68:	4442      	add	r2, r8
 8001d6a:	468c      	mov	ip, r1
 8001d6c:	42b3      	cmp	r3, r6
 8001d6e:	d903      	bls.n	8001d78 <__aeabi_dmul+0x2a0>
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	4698      	mov	r8, r3
 8001d76:	4440      	add	r0, r8
 8001d78:	9b02      	ldr	r3, [sp, #8]
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	4698      	mov	r8, r3
 8001d7e:	9b04      	ldr	r3, [sp, #16]
 8001d80:	0437      	lsls	r7, r6, #16
 8001d82:	4443      	add	r3, r8
 8001d84:	469b      	mov	fp, r3
 8001d86:	45ab      	cmp	fp, r5
 8001d88:	41ad      	sbcs	r5, r5
 8001d8a:	426b      	negs	r3, r5
 8001d8c:	040d      	lsls	r5, r1, #16
 8001d8e:	9905      	ldr	r1, [sp, #20]
 8001d90:	0c2d      	lsrs	r5, r5, #16
 8001d92:	468c      	mov	ip, r1
 8001d94:	197f      	adds	r7, r7, r5
 8001d96:	4467      	add	r7, ip
 8001d98:	18fd      	adds	r5, r7, r3
 8001d9a:	46a8      	mov	r8, r5
 8001d9c:	465d      	mov	r5, fp
 8001d9e:	192d      	adds	r5, r5, r4
 8001da0:	42a5      	cmp	r5, r4
 8001da2:	41a4      	sbcs	r4, r4
 8001da4:	4693      	mov	fp, r2
 8001da6:	4264      	negs	r4, r4
 8001da8:	46a4      	mov	ip, r4
 8001daa:	44c3      	add	fp, r8
 8001dac:	44dc      	add	ip, fp
 8001dae:	428f      	cmp	r7, r1
 8001db0:	41bf      	sbcs	r7, r7
 8001db2:	4598      	cmp	r8, r3
 8001db4:	419b      	sbcs	r3, r3
 8001db6:	4593      	cmp	fp, r2
 8001db8:	4192      	sbcs	r2, r2
 8001dba:	45a4      	cmp	ip, r4
 8001dbc:	41a4      	sbcs	r4, r4
 8001dbe:	425b      	negs	r3, r3
 8001dc0:	427f      	negs	r7, r7
 8001dc2:	431f      	orrs	r7, r3
 8001dc4:	0c36      	lsrs	r6, r6, #16
 8001dc6:	4252      	negs	r2, r2
 8001dc8:	4264      	negs	r4, r4
 8001dca:	19bf      	adds	r7, r7, r6
 8001dcc:	4322      	orrs	r2, r4
 8001dce:	18bf      	adds	r7, r7, r2
 8001dd0:	4662      	mov	r2, ip
 8001dd2:	1838      	adds	r0, r7, r0
 8001dd4:	0243      	lsls	r3, r0, #9
 8001dd6:	0dd2      	lsrs	r2, r2, #23
 8001dd8:	9903      	ldr	r1, [sp, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	026a      	lsls	r2, r5, #9
 8001dde:	430a      	orrs	r2, r1
 8001de0:	1e50      	subs	r0, r2, #1
 8001de2:	4182      	sbcs	r2, r0
 8001de4:	4661      	mov	r1, ip
 8001de6:	0ded      	lsrs	r5, r5, #23
 8001de8:	432a      	orrs	r2, r5
 8001dea:	024e      	lsls	r6, r1, #9
 8001dec:	4332      	orrs	r2, r6
 8001dee:	01d9      	lsls	r1, r3, #7
 8001df0:	d400      	bmi.n	8001df4 <__aeabi_dmul+0x31c>
 8001df2:	e0b3      	b.n	8001f5c <__aeabi_dmul+0x484>
 8001df4:	2601      	movs	r6, #1
 8001df6:	0850      	lsrs	r0, r2, #1
 8001df8:	4032      	ands	r2, r6
 8001dfa:	4302      	orrs	r2, r0
 8001dfc:	07de      	lsls	r6, r3, #31
 8001dfe:	4332      	orrs	r2, r6
 8001e00:	085b      	lsrs	r3, r3, #1
 8001e02:	4c22      	ldr	r4, [pc, #136]	; (8001e8c <__aeabi_dmul+0x3b4>)
 8001e04:	4454      	add	r4, sl
 8001e06:	2c00      	cmp	r4, #0
 8001e08:	dd62      	ble.n	8001ed0 <__aeabi_dmul+0x3f8>
 8001e0a:	0751      	lsls	r1, r2, #29
 8001e0c:	d009      	beq.n	8001e22 <__aeabi_dmul+0x34a>
 8001e0e:	200f      	movs	r0, #15
 8001e10:	4010      	ands	r0, r2
 8001e12:	2804      	cmp	r0, #4
 8001e14:	d005      	beq.n	8001e22 <__aeabi_dmul+0x34a>
 8001e16:	1d10      	adds	r0, r2, #4
 8001e18:	4290      	cmp	r0, r2
 8001e1a:	4192      	sbcs	r2, r2
 8001e1c:	4252      	negs	r2, r2
 8001e1e:	189b      	adds	r3, r3, r2
 8001e20:	0002      	movs	r2, r0
 8001e22:	01d9      	lsls	r1, r3, #7
 8001e24:	d504      	bpl.n	8001e30 <__aeabi_dmul+0x358>
 8001e26:	2480      	movs	r4, #128	; 0x80
 8001e28:	4819      	ldr	r0, [pc, #100]	; (8001e90 <__aeabi_dmul+0x3b8>)
 8001e2a:	00e4      	lsls	r4, r4, #3
 8001e2c:	4003      	ands	r3, r0
 8001e2e:	4454      	add	r4, sl
 8001e30:	4818      	ldr	r0, [pc, #96]	; (8001e94 <__aeabi_dmul+0x3bc>)
 8001e32:	4284      	cmp	r4, r0
 8001e34:	dd00      	ble.n	8001e38 <__aeabi_dmul+0x360>
 8001e36:	e727      	b.n	8001c88 <__aeabi_dmul+0x1b0>
 8001e38:	075e      	lsls	r6, r3, #29
 8001e3a:	025b      	lsls	r3, r3, #9
 8001e3c:	08d2      	lsrs	r2, r2, #3
 8001e3e:	0b1f      	lsrs	r7, r3, #12
 8001e40:	0563      	lsls	r3, r4, #21
 8001e42:	4316      	orrs	r6, r2
 8001e44:	0d5b      	lsrs	r3, r3, #21
 8001e46:	e6b2      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	2704      	movs	r7, #4
 8001e50:	2600      	movs	r6, #0
 8001e52:	469b      	mov	fp, r3
 8001e54:	e664      	b.n	8001b20 <__aeabi_dmul+0x48>
 8001e56:	2303      	movs	r3, #3
 8001e58:	9701      	str	r7, [sp, #4]
 8001e5a:	4681      	mov	r9, r0
 8001e5c:	270c      	movs	r7, #12
 8001e5e:	469b      	mov	fp, r3
 8001e60:	e65e      	b.n	8001b20 <__aeabi_dmul+0x48>
 8001e62:	2201      	movs	r2, #1
 8001e64:	2001      	movs	r0, #1
 8001e66:	4317      	orrs	r7, r2
 8001e68:	2200      	movs	r2, #0
 8001e6a:	e676      	b.n	8001b5a <__aeabi_dmul+0x82>
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	2003      	movs	r0, #3
 8001e70:	431f      	orrs	r7, r3
 8001e72:	4643      	mov	r3, r8
 8001e74:	e671      	b.n	8001b5a <__aeabi_dmul+0x82>
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	000007ff 	.word	0x000007ff
 8001e7c:	fffffc01 	.word	0xfffffc01
 8001e80:	08009df4 	.word	0x08009df4
 8001e84:	800fffff 	.word	0x800fffff
 8001e88:	fffffc0d 	.word	0xfffffc0d
 8001e8c:	000003ff 	.word	0x000003ff
 8001e90:	feffffff 	.word	0xfeffffff
 8001e94:	000007fe 	.word	0x000007fe
 8001e98:	2300      	movs	r3, #0
 8001e9a:	2780      	movs	r7, #128	; 0x80
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	033f      	lsls	r7, r7, #12
 8001ea0:	2600      	movs	r6, #0
 8001ea2:	4b43      	ldr	r3, [pc, #268]	; (8001fb0 <__aeabi_dmul+0x4d8>)
 8001ea4:	e683      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001ea6:	9b01      	ldr	r3, [sp, #4]
 8001ea8:	0032      	movs	r2, r6
 8001eaa:	46a4      	mov	ip, r4
 8001eac:	4658      	mov	r0, fp
 8001eae:	e670      	b.n	8001b92 <__aeabi_dmul+0xba>
 8001eb0:	46ac      	mov	ip, r5
 8001eb2:	e66e      	b.n	8001b92 <__aeabi_dmul+0xba>
 8001eb4:	2780      	movs	r7, #128	; 0x80
 8001eb6:	9901      	ldr	r1, [sp, #4]
 8001eb8:	033f      	lsls	r7, r7, #12
 8001eba:	4239      	tst	r1, r7
 8001ebc:	d02d      	beq.n	8001f1a <__aeabi_dmul+0x442>
 8001ebe:	423b      	tst	r3, r7
 8001ec0:	d12b      	bne.n	8001f1a <__aeabi_dmul+0x442>
 8001ec2:	431f      	orrs	r7, r3
 8001ec4:	033f      	lsls	r7, r7, #12
 8001ec6:	0b3f      	lsrs	r7, r7, #12
 8001ec8:	9500      	str	r5, [sp, #0]
 8001eca:	0016      	movs	r6, r2
 8001ecc:	4b38      	ldr	r3, [pc, #224]	; (8001fb0 <__aeabi_dmul+0x4d8>)
 8001ece:	e66e      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001ed0:	2501      	movs	r5, #1
 8001ed2:	1b2d      	subs	r5, r5, r4
 8001ed4:	2d38      	cmp	r5, #56	; 0x38
 8001ed6:	dd00      	ble.n	8001eda <__aeabi_dmul+0x402>
 8001ed8:	e666      	b.n	8001ba8 <__aeabi_dmul+0xd0>
 8001eda:	2d1f      	cmp	r5, #31
 8001edc:	dc40      	bgt.n	8001f60 <__aeabi_dmul+0x488>
 8001ede:	4835      	ldr	r0, [pc, #212]	; (8001fb4 <__aeabi_dmul+0x4dc>)
 8001ee0:	001c      	movs	r4, r3
 8001ee2:	4450      	add	r0, sl
 8001ee4:	0016      	movs	r6, r2
 8001ee6:	4082      	lsls	r2, r0
 8001ee8:	4084      	lsls	r4, r0
 8001eea:	40ee      	lsrs	r6, r5
 8001eec:	1e50      	subs	r0, r2, #1
 8001eee:	4182      	sbcs	r2, r0
 8001ef0:	4334      	orrs	r4, r6
 8001ef2:	4314      	orrs	r4, r2
 8001ef4:	40eb      	lsrs	r3, r5
 8001ef6:	0762      	lsls	r2, r4, #29
 8001ef8:	d009      	beq.n	8001f0e <__aeabi_dmul+0x436>
 8001efa:	220f      	movs	r2, #15
 8001efc:	4022      	ands	r2, r4
 8001efe:	2a04      	cmp	r2, #4
 8001f00:	d005      	beq.n	8001f0e <__aeabi_dmul+0x436>
 8001f02:	0022      	movs	r2, r4
 8001f04:	1d14      	adds	r4, r2, #4
 8001f06:	4294      	cmp	r4, r2
 8001f08:	4180      	sbcs	r0, r0
 8001f0a:	4240      	negs	r0, r0
 8001f0c:	181b      	adds	r3, r3, r0
 8001f0e:	021a      	lsls	r2, r3, #8
 8001f10:	d53e      	bpl.n	8001f90 <__aeabi_dmul+0x4b8>
 8001f12:	2301      	movs	r3, #1
 8001f14:	2700      	movs	r7, #0
 8001f16:	2600      	movs	r6, #0
 8001f18:	e649      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001f1a:	2780      	movs	r7, #128	; 0x80
 8001f1c:	9b01      	ldr	r3, [sp, #4]
 8001f1e:	033f      	lsls	r7, r7, #12
 8001f20:	431f      	orrs	r7, r3
 8001f22:	033f      	lsls	r7, r7, #12
 8001f24:	0b3f      	lsrs	r7, r7, #12
 8001f26:	9400      	str	r4, [sp, #0]
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <__aeabi_dmul+0x4d8>)
 8001f2a:	e640      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001f2c:	0003      	movs	r3, r0
 8001f2e:	465a      	mov	r2, fp
 8001f30:	3b28      	subs	r3, #40	; 0x28
 8001f32:	409a      	lsls	r2, r3
 8001f34:	2600      	movs	r6, #0
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	e66d      	b.n	8001c16 <__aeabi_dmul+0x13e>
 8001f3a:	4658      	mov	r0, fp
 8001f3c:	f000 f8fc 	bl	8002138 <__clzsi2>
 8001f40:	3020      	adds	r0, #32
 8001f42:	e657      	b.n	8001bf4 <__aeabi_dmul+0x11c>
 8001f44:	0003      	movs	r3, r0
 8001f46:	4652      	mov	r2, sl
 8001f48:	3b28      	subs	r3, #40	; 0x28
 8001f4a:	409a      	lsls	r2, r3
 8001f4c:	0013      	movs	r3, r2
 8001f4e:	2200      	movs	r2, #0
 8001f50:	e693      	b.n	8001c7a <__aeabi_dmul+0x1a2>
 8001f52:	4650      	mov	r0, sl
 8001f54:	f000 f8f0 	bl	8002138 <__clzsi2>
 8001f58:	3020      	adds	r0, #32
 8001f5a:	e67b      	b.n	8001c54 <__aeabi_dmul+0x17c>
 8001f5c:	46ca      	mov	sl, r9
 8001f5e:	e750      	b.n	8001e02 <__aeabi_dmul+0x32a>
 8001f60:	201f      	movs	r0, #31
 8001f62:	001e      	movs	r6, r3
 8001f64:	4240      	negs	r0, r0
 8001f66:	1b04      	subs	r4, r0, r4
 8001f68:	40e6      	lsrs	r6, r4
 8001f6a:	2d20      	cmp	r5, #32
 8001f6c:	d003      	beq.n	8001f76 <__aeabi_dmul+0x49e>
 8001f6e:	4c12      	ldr	r4, [pc, #72]	; (8001fb8 <__aeabi_dmul+0x4e0>)
 8001f70:	4454      	add	r4, sl
 8001f72:	40a3      	lsls	r3, r4
 8001f74:	431a      	orrs	r2, r3
 8001f76:	1e50      	subs	r0, r2, #1
 8001f78:	4182      	sbcs	r2, r0
 8001f7a:	4332      	orrs	r2, r6
 8001f7c:	2607      	movs	r6, #7
 8001f7e:	2700      	movs	r7, #0
 8001f80:	4016      	ands	r6, r2
 8001f82:	d009      	beq.n	8001f98 <__aeabi_dmul+0x4c0>
 8001f84:	200f      	movs	r0, #15
 8001f86:	2300      	movs	r3, #0
 8001f88:	4010      	ands	r0, r2
 8001f8a:	0014      	movs	r4, r2
 8001f8c:	2804      	cmp	r0, #4
 8001f8e:	d1b9      	bne.n	8001f04 <__aeabi_dmul+0x42c>
 8001f90:	0022      	movs	r2, r4
 8001f92:	075e      	lsls	r6, r3, #29
 8001f94:	025b      	lsls	r3, r3, #9
 8001f96:	0b1f      	lsrs	r7, r3, #12
 8001f98:	08d2      	lsrs	r2, r2, #3
 8001f9a:	4316      	orrs	r6, r2
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e606      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001fa0:	2780      	movs	r7, #128	; 0x80
 8001fa2:	033f      	lsls	r7, r7, #12
 8001fa4:	431f      	orrs	r7, r3
 8001fa6:	033f      	lsls	r7, r7, #12
 8001fa8:	0b3f      	lsrs	r7, r7, #12
 8001faa:	0016      	movs	r6, r2
 8001fac:	4b00      	ldr	r3, [pc, #0]	; (8001fb0 <__aeabi_dmul+0x4d8>)
 8001fae:	e5fe      	b.n	8001bae <__aeabi_dmul+0xd6>
 8001fb0:	000007ff 	.word	0x000007ff
 8001fb4:	0000041e 	.word	0x0000041e
 8001fb8:	0000043e 	.word	0x0000043e

08001fbc <__aeabi_i2d>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d02d      	beq.n	800201e <__aeabi_i2d+0x62>
 8001fc2:	17c3      	asrs	r3, r0, #31
 8001fc4:	18c5      	adds	r5, r0, r3
 8001fc6:	405d      	eors	r5, r3
 8001fc8:	0fc4      	lsrs	r4, r0, #31
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f000 f8b4 	bl	8002138 <__clzsi2>
 8001fd0:	4b15      	ldr	r3, [pc, #84]	; (8002028 <__aeabi_i2d+0x6c>)
 8001fd2:	1a1b      	subs	r3, r3, r0
 8001fd4:	055b      	lsls	r3, r3, #21
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	280a      	cmp	r0, #10
 8001fda:	dd15      	ble.n	8002008 <__aeabi_i2d+0x4c>
 8001fdc:	380b      	subs	r0, #11
 8001fde:	4085      	lsls	r5, r0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	032d      	lsls	r5, r5, #12
 8001fe4:	0b2d      	lsrs	r5, r5, #12
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	0010      	movs	r0, r2
 8001fea:	032d      	lsls	r5, r5, #12
 8001fec:	0d0a      	lsrs	r2, r1, #20
 8001fee:	0b2d      	lsrs	r5, r5, #12
 8001ff0:	0512      	lsls	r2, r2, #20
 8001ff2:	432a      	orrs	r2, r5
 8001ff4:	4d0d      	ldr	r5, [pc, #52]	; (800202c <__aeabi_i2d+0x70>)
 8001ff6:	051b      	lsls	r3, r3, #20
 8001ff8:	402a      	ands	r2, r5
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	07e4      	lsls	r4, r4, #31
 8002000:	085b      	lsrs	r3, r3, #1
 8002002:	4323      	orrs	r3, r4
 8002004:	0019      	movs	r1, r3
 8002006:	bd70      	pop	{r4, r5, r6, pc}
 8002008:	0002      	movs	r2, r0
 800200a:	0029      	movs	r1, r5
 800200c:	3215      	adds	r2, #21
 800200e:	4091      	lsls	r1, r2
 8002010:	000a      	movs	r2, r1
 8002012:	210b      	movs	r1, #11
 8002014:	1a08      	subs	r0, r1, r0
 8002016:	40c5      	lsrs	r5, r0
 8002018:	032d      	lsls	r5, r5, #12
 800201a:	0b2d      	lsrs	r5, r5, #12
 800201c:	e7e3      	b.n	8001fe6 <__aeabi_i2d+0x2a>
 800201e:	2400      	movs	r4, #0
 8002020:	2300      	movs	r3, #0
 8002022:	2500      	movs	r5, #0
 8002024:	2200      	movs	r2, #0
 8002026:	e7de      	b.n	8001fe6 <__aeabi_i2d+0x2a>
 8002028:	0000041e 	.word	0x0000041e
 800202c:	800fffff 	.word	0x800fffff

08002030 <__aeabi_d2f>:
 8002030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002032:	004c      	lsls	r4, r1, #1
 8002034:	0d64      	lsrs	r4, r4, #21
 8002036:	030b      	lsls	r3, r1, #12
 8002038:	1c62      	adds	r2, r4, #1
 800203a:	0a5b      	lsrs	r3, r3, #9
 800203c:	0f46      	lsrs	r6, r0, #29
 800203e:	0552      	lsls	r2, r2, #21
 8002040:	0fc9      	lsrs	r1, r1, #31
 8002042:	431e      	orrs	r6, r3
 8002044:	00c5      	lsls	r5, r0, #3
 8002046:	0d52      	lsrs	r2, r2, #21
 8002048:	2a01      	cmp	r2, #1
 800204a:	dd29      	ble.n	80020a0 <__aeabi_d2f+0x70>
 800204c:	4b37      	ldr	r3, [pc, #220]	; (800212c <__aeabi_d2f+0xfc>)
 800204e:	18e7      	adds	r7, r4, r3
 8002050:	2ffe      	cmp	r7, #254	; 0xfe
 8002052:	dc1c      	bgt.n	800208e <__aeabi_d2f+0x5e>
 8002054:	2f00      	cmp	r7, #0
 8002056:	dd3b      	ble.n	80020d0 <__aeabi_d2f+0xa0>
 8002058:	0180      	lsls	r0, r0, #6
 800205a:	1e43      	subs	r3, r0, #1
 800205c:	4198      	sbcs	r0, r3
 800205e:	2207      	movs	r2, #7
 8002060:	00f3      	lsls	r3, r6, #3
 8002062:	0f6d      	lsrs	r5, r5, #29
 8002064:	4303      	orrs	r3, r0
 8002066:	432b      	orrs	r3, r5
 8002068:	401a      	ands	r2, r3
 800206a:	2a00      	cmp	r2, #0
 800206c:	d004      	beq.n	8002078 <__aeabi_d2f+0x48>
 800206e:	220f      	movs	r2, #15
 8002070:	401a      	ands	r2, r3
 8002072:	2a04      	cmp	r2, #4
 8002074:	d000      	beq.n	8002078 <__aeabi_d2f+0x48>
 8002076:	3304      	adds	r3, #4
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	04d2      	lsls	r2, r2, #19
 800207c:	401a      	ands	r2, r3
 800207e:	d024      	beq.n	80020ca <__aeabi_d2f+0x9a>
 8002080:	3701      	adds	r7, #1
 8002082:	b2fa      	uxtb	r2, r7
 8002084:	2fff      	cmp	r7, #255	; 0xff
 8002086:	d002      	beq.n	800208e <__aeabi_d2f+0x5e>
 8002088:	019b      	lsls	r3, r3, #6
 800208a:	0a58      	lsrs	r0, r3, #9
 800208c:	e001      	b.n	8002092 <__aeabi_d2f+0x62>
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	2000      	movs	r0, #0
 8002092:	0240      	lsls	r0, r0, #9
 8002094:	05d2      	lsls	r2, r2, #23
 8002096:	0a40      	lsrs	r0, r0, #9
 8002098:	07c9      	lsls	r1, r1, #31
 800209a:	4310      	orrs	r0, r2
 800209c:	4308      	orrs	r0, r1
 800209e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a0:	4335      	orrs	r5, r6
 80020a2:	2c00      	cmp	r4, #0
 80020a4:	d104      	bne.n	80020b0 <__aeabi_d2f+0x80>
 80020a6:	2d00      	cmp	r5, #0
 80020a8:	d10a      	bne.n	80020c0 <__aeabi_d2f+0x90>
 80020aa:	2200      	movs	r2, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	e7f0      	b.n	8002092 <__aeabi_d2f+0x62>
 80020b0:	2d00      	cmp	r5, #0
 80020b2:	d0ec      	beq.n	800208e <__aeabi_d2f+0x5e>
 80020b4:	2080      	movs	r0, #128	; 0x80
 80020b6:	03c0      	lsls	r0, r0, #15
 80020b8:	4330      	orrs	r0, r6
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	e7e9      	b.n	8002092 <__aeabi_d2f+0x62>
 80020be:	2400      	movs	r4, #0
 80020c0:	2300      	movs	r3, #0
 80020c2:	025b      	lsls	r3, r3, #9
 80020c4:	0a58      	lsrs	r0, r3, #9
 80020c6:	b2e2      	uxtb	r2, r4
 80020c8:	e7e3      	b.n	8002092 <__aeabi_d2f+0x62>
 80020ca:	08db      	lsrs	r3, r3, #3
 80020cc:	003c      	movs	r4, r7
 80020ce:	e7f8      	b.n	80020c2 <__aeabi_d2f+0x92>
 80020d0:	003b      	movs	r3, r7
 80020d2:	3317      	adds	r3, #23
 80020d4:	dbf3      	blt.n	80020be <__aeabi_d2f+0x8e>
 80020d6:	2380      	movs	r3, #128	; 0x80
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	4333      	orrs	r3, r6
 80020dc:	261e      	movs	r6, #30
 80020de:	1bf6      	subs	r6, r6, r7
 80020e0:	2e1f      	cmp	r6, #31
 80020e2:	dd14      	ble.n	800210e <__aeabi_d2f+0xde>
 80020e4:	2202      	movs	r2, #2
 80020e6:	4252      	negs	r2, r2
 80020e8:	1bd7      	subs	r7, r2, r7
 80020ea:	001a      	movs	r2, r3
 80020ec:	40fa      	lsrs	r2, r7
 80020ee:	0017      	movs	r7, r2
 80020f0:	2e20      	cmp	r6, #32
 80020f2:	d004      	beq.n	80020fe <__aeabi_d2f+0xce>
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <__aeabi_d2f+0x100>)
 80020f6:	4694      	mov	ip, r2
 80020f8:	4464      	add	r4, ip
 80020fa:	40a3      	lsls	r3, r4
 80020fc:	431d      	orrs	r5, r3
 80020fe:	002b      	movs	r3, r5
 8002100:	1e5d      	subs	r5, r3, #1
 8002102:	41ab      	sbcs	r3, r5
 8002104:	2207      	movs	r2, #7
 8002106:	433b      	orrs	r3, r7
 8002108:	401a      	ands	r2, r3
 800210a:	2700      	movs	r7, #0
 800210c:	e7ad      	b.n	800206a <__aeabi_d2f+0x3a>
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <__aeabi_d2f+0x104>)
 8002110:	0028      	movs	r0, r5
 8002112:	18a2      	adds	r2, r4, r2
 8002114:	4095      	lsls	r5, r2
 8002116:	4093      	lsls	r3, r2
 8002118:	1e6c      	subs	r4, r5, #1
 800211a:	41a5      	sbcs	r5, r4
 800211c:	40f0      	lsrs	r0, r6
 800211e:	2207      	movs	r2, #7
 8002120:	432b      	orrs	r3, r5
 8002122:	4303      	orrs	r3, r0
 8002124:	401a      	ands	r2, r3
 8002126:	2700      	movs	r7, #0
 8002128:	e79f      	b.n	800206a <__aeabi_d2f+0x3a>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	fffffc80 	.word	0xfffffc80
 8002130:	fffffca2 	.word	0xfffffca2
 8002134:	fffffc82 	.word	0xfffffc82

08002138 <__clzsi2>:
 8002138:	211c      	movs	r1, #28
 800213a:	2301      	movs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	4298      	cmp	r0, r3
 8002140:	d301      	bcc.n	8002146 <__clzsi2+0xe>
 8002142:	0c00      	lsrs	r0, r0, #16
 8002144:	3910      	subs	r1, #16
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	4298      	cmp	r0, r3
 800214a:	d301      	bcc.n	8002150 <__clzsi2+0x18>
 800214c:	0a00      	lsrs	r0, r0, #8
 800214e:	3908      	subs	r1, #8
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	4298      	cmp	r0, r3
 8002154:	d301      	bcc.n	800215a <__clzsi2+0x22>
 8002156:	0900      	lsrs	r0, r0, #4
 8002158:	3904      	subs	r1, #4
 800215a:	a202      	add	r2, pc, #8	; (adr r2, 8002164 <__clzsi2+0x2c>)
 800215c:	5c10      	ldrb	r0, [r2, r0]
 800215e:	1840      	adds	r0, r0, r1
 8002160:	4770      	bx	lr
 8002162:	46c0      	nop			; (mov r8, r8)
 8002164:	02020304 	.word	0x02020304
 8002168:	01010101 	.word	0x01010101
	...

08002174 <__clzdi2>:
 8002174:	b510      	push	{r4, lr}
 8002176:	2900      	cmp	r1, #0
 8002178:	d103      	bne.n	8002182 <__clzdi2+0xe>
 800217a:	f7ff ffdd 	bl	8002138 <__clzsi2>
 800217e:	3020      	adds	r0, #32
 8002180:	e002      	b.n	8002188 <__clzdi2+0x14>
 8002182:	1c08      	adds	r0, r1, #0
 8002184:	f7ff ffd8 	bl	8002138 <__clzsi2>
 8002188:	bd10      	pop	{r4, pc}
 800218a:	46c0      	nop			; (mov r8, r8)

0800218c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002192:	1dfb      	adds	r3, r7, #7
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_Init+0x3c>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_Init+0x3c>)
 800219e:	2180      	movs	r1, #128	; 0x80
 80021a0:	0049      	lsls	r1, r1, #1
 80021a2:	430a      	orrs	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a6:	2000      	movs	r0, #0
 80021a8:	f000 f810 	bl	80021cc <HAL_InitTick>
 80021ac:	1e03      	subs	r3, r0, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e001      	b.n	80021bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80021b8:	f004 faf2 	bl	80067a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	781b      	ldrb	r3, [r3, #0]
}
 80021c0:	0018      	movs	r0, r3
 80021c2:	46bd      	mov	sp, r7
 80021c4:	b002      	add	sp, #8
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40022000 	.word	0x40022000

080021cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021d4:	230f      	movs	r3, #15
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_InitTick+0x88>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d02b      	beq.n	800223c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_InitTick+0x8c>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_InitTick+0x88>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	0019      	movs	r1, r3
 80021ee:	23fa      	movs	r3, #250	; 0xfa
 80021f0:	0098      	lsls	r0, r3, #2
 80021f2:	f7fd ff99 	bl	8000128 <__udivsi3>
 80021f6:	0003      	movs	r3, r0
 80021f8:	0019      	movs	r1, r3
 80021fa:	0020      	movs	r0, r4
 80021fc:	f7fd ff94 	bl	8000128 <__udivsi3>
 8002200:	0003      	movs	r3, r0
 8002202:	0018      	movs	r0, r3
 8002204:	f000 f969 	bl	80024da <HAL_SYSTICK_Config>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d112      	bne.n	8002232 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b03      	cmp	r3, #3
 8002210:	d80a      	bhi.n	8002228 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	2301      	movs	r3, #1
 8002216:	425b      	negs	r3, r3
 8002218:	2200      	movs	r2, #0
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f928 	bl	8002470 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002220:	4b0e      	ldr	r3, [pc, #56]	; (800225c <HAL_InitTick+0x90>)
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e00d      	b.n	8002244 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002228:	230f      	movs	r3, #15
 800222a:	18fb      	adds	r3, r7, r3
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]
 8002230:	e008      	b.n	8002244 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002232:	230f      	movs	r3, #15
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
 800223a:	e003      	b.n	8002244 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800223c:	230f      	movs	r3, #15
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002244:	230f      	movs	r3, #15
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	781b      	ldrb	r3, [r3, #0]
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b005      	add	sp, #20
 8002250:	bd90      	pop	{r4, r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	20000004 	.word	0x20000004
 8002258:	20000008 	.word	0x20000008
 800225c:	20000000 	.word	0x20000000

08002260 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <HAL_IncTick+0x18>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <HAL_IncTick+0x1c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	18d2      	adds	r2, r2, r3
 800226e:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_IncTick+0x18>)
 8002270:	601a      	str	r2, [r3, #0]
}
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000284 	.word	0x20000284
 800227c:	20000004 	.word	0x20000004

08002280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  return uwTick;
 8002284:	4b02      	ldr	r3, [pc, #8]	; (8002290 <HAL_GetTick+0x10>)
 8002286:	681b      	ldr	r3, [r3, #0]
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000284 	.word	0x20000284

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff fff0 	bl	8002280 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	d004      	beq.n	80022b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_Delay+0x40>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b8:	46c0      	nop			; (mov r8, r8)
 80022ba:	f7ff ffe1 	bl	8002280 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d8f7      	bhi.n	80022ba <HAL_Delay+0x26>
  {
  }
}
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b004      	add	sp, #16
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000004 	.word	0x20000004

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	0002      	movs	r2, r0
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b7f      	cmp	r3, #127	; 0x7f
 80022ea:	d809      	bhi.n	8002300 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ec:	1dfb      	adds	r3, r7, #7
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	001a      	movs	r2, r3
 80022f2:	231f      	movs	r3, #31
 80022f4:	401a      	ands	r2, r3
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <__NVIC_EnableIRQ+0x30>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	4091      	lsls	r1, r2
 80022fc:	000a      	movs	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]
  }
}
 8002300:	46c0      	nop			; (mov r8, r8)
 8002302:	46bd      	mov	sp, r7
 8002304:	b002      	add	sp, #8
 8002306:	bd80      	pop	{r7, pc}
 8002308:	e000e100 	.word	0xe000e100

0800230c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	0002      	movs	r2, r0
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002318:	1dfb      	adds	r3, r7, #7
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b7f      	cmp	r3, #127	; 0x7f
 800231e:	d80e      	bhi.n	800233e <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	001a      	movs	r2, r3
 8002326:	231f      	movs	r3, #31
 8002328:	4013      	ands	r3, r2
 800232a:	4907      	ldr	r1, [pc, #28]	; (8002348 <__NVIC_DisableIRQ+0x3c>)
 800232c:	2201      	movs	r2, #1
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002336:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800233a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	0002      	movs	r2, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800235a:	1dfb      	adds	r3, r7, #7
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b7f      	cmp	r3, #127	; 0x7f
 8002360:	d828      	bhi.n	80023b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002362:	4a2f      	ldr	r2, [pc, #188]	; (8002420 <__NVIC_SetPriority+0xd4>)
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	b25b      	sxtb	r3, r3
 800236a:	089b      	lsrs	r3, r3, #2
 800236c:	33c0      	adds	r3, #192	; 0xc0
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	589b      	ldr	r3, [r3, r2]
 8002372:	1dfa      	adds	r2, r7, #7
 8002374:	7812      	ldrb	r2, [r2, #0]
 8002376:	0011      	movs	r1, r2
 8002378:	2203      	movs	r2, #3
 800237a:	400a      	ands	r2, r1
 800237c:	00d2      	lsls	r2, r2, #3
 800237e:	21ff      	movs	r1, #255	; 0xff
 8002380:	4091      	lsls	r1, r2
 8002382:	000a      	movs	r2, r1
 8002384:	43d2      	mvns	r2, r2
 8002386:	401a      	ands	r2, r3
 8002388:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	22ff      	movs	r2, #255	; 0xff
 8002390:	401a      	ands	r2, r3
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	0018      	movs	r0, r3
 8002398:	2303      	movs	r3, #3
 800239a:	4003      	ands	r3, r0
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023a0:	481f      	ldr	r0, [pc, #124]	; (8002420 <__NVIC_SetPriority+0xd4>)
 80023a2:	1dfb      	adds	r3, r7, #7
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b25b      	sxtb	r3, r3
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	430a      	orrs	r2, r1
 80023ac:	33c0      	adds	r3, #192	; 0xc0
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023b2:	e031      	b.n	8002418 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023b4:	4a1b      	ldr	r2, [pc, #108]	; (8002424 <__NVIC_SetPriority+0xd8>)
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	0019      	movs	r1, r3
 80023bc:	230f      	movs	r3, #15
 80023be:	400b      	ands	r3, r1
 80023c0:	3b08      	subs	r3, #8
 80023c2:	089b      	lsrs	r3, r3, #2
 80023c4:	3306      	adds	r3, #6
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	18d3      	adds	r3, r2, r3
 80023ca:	3304      	adds	r3, #4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	1dfa      	adds	r2, r7, #7
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	0011      	movs	r1, r2
 80023d4:	2203      	movs	r2, #3
 80023d6:	400a      	ands	r2, r1
 80023d8:	00d2      	lsls	r2, r2, #3
 80023da:	21ff      	movs	r1, #255	; 0xff
 80023dc:	4091      	lsls	r1, r2
 80023de:	000a      	movs	r2, r1
 80023e0:	43d2      	mvns	r2, r2
 80023e2:	401a      	ands	r2, r3
 80023e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	401a      	ands	r2, r3
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	0018      	movs	r0, r3
 80023f4:	2303      	movs	r3, #3
 80023f6:	4003      	ands	r3, r0
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fc:	4809      	ldr	r0, [pc, #36]	; (8002424 <__NVIC_SetPriority+0xd8>)
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	001c      	movs	r4, r3
 8002404:	230f      	movs	r3, #15
 8002406:	4023      	ands	r3, r4
 8002408:	3b08      	subs	r3, #8
 800240a:	089b      	lsrs	r3, r3, #2
 800240c:	430a      	orrs	r2, r1
 800240e:	3306      	adds	r3, #6
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	18c3      	adds	r3, r0, r3
 8002414:	3304      	adds	r3, #4
 8002416:	601a      	str	r2, [r3, #0]
}
 8002418:	46c0      	nop			; (mov r8, r8)
 800241a:	46bd      	mov	sp, r7
 800241c:	b003      	add	sp, #12
 800241e:	bd90      	pop	{r4, r7, pc}
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3b01      	subs	r3, #1
 8002434:	4a0c      	ldr	r2, [pc, #48]	; (8002468 <SysTick_Config+0x40>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d901      	bls.n	800243e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243a:	2301      	movs	r3, #1
 800243c:	e010      	b.n	8002460 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <SysTick_Config+0x44>)
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	3a01      	subs	r2, #1
 8002444:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002446:	2301      	movs	r3, #1
 8002448:	425b      	negs	r3, r3
 800244a:	2103      	movs	r1, #3
 800244c:	0018      	movs	r0, r3
 800244e:	f7ff ff7d 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <SysTick_Config+0x44>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <SysTick_Config+0x44>)
 800245a:	2207      	movs	r2, #7
 800245c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800245e:	2300      	movs	r3, #0
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b002      	add	sp, #8
 8002466:	bd80      	pop	{r7, pc}
 8002468:	00ffffff 	.word	0x00ffffff
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	210f      	movs	r1, #15
 800247c:	187b      	adds	r3, r7, r1
 800247e:	1c02      	adds	r2, r0, #0
 8002480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	187b      	adds	r3, r7, r1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b25b      	sxtb	r3, r3
 800248a:	0011      	movs	r1, r2
 800248c:	0018      	movs	r0, r3
 800248e:	f7ff ff5d 	bl	800234c <__NVIC_SetPriority>
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	b004      	add	sp, #16
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	0002      	movs	r2, r0
 80024a2:	1dfb      	adds	r3, r7, #7
 80024a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	b25b      	sxtb	r3, r3
 80024ac:	0018      	movs	r0, r3
 80024ae:	f7ff ff13 	bl	80022d8 <__NVIC_EnableIRQ>
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b002      	add	sp, #8
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b082      	sub	sp, #8
 80024be:	af00      	add	r7, sp, #0
 80024c0:	0002      	movs	r2, r0
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80024c6:	1dfb      	adds	r3, r7, #7
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	0018      	movs	r0, r3
 80024ce:	f7ff ff1d 	bl	800230c <__NVIC_DisableIRQ>
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b002      	add	sp, #8
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7ff ff9f 	bl	8002428 <SysTick_Config>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	2100      	movs	r1, #0
 800250a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	5c9b      	ldrb	r3, [r3, r2]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_DMA_Abort_IT+0x26>
 8002516:	2302      	movs	r3, #2
 8002518:	e05e      	b.n	80025d8 <HAL_DMA_Abort_IT+0xe4>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2224      	movs	r2, #36	; 0x24
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2225      	movs	r2, #37	; 0x25
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d007      	beq.n	800253e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002534:	230f      	movs	r3, #15
 8002536:	18fb      	adds	r3, r7, r3
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	e049      	b.n	80025d2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	210e      	movs	r1, #14
 800254a:	438a      	bics	r2, r1
 800254c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2101      	movs	r1, #1
 800255a:	438a      	bics	r2, r1
 800255c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002568:	491d      	ldr	r1, [pc, #116]	; (80025e0 <HAL_DMA_Abort_IT+0xec>)
 800256a:	400a      	ands	r2, r1
 800256c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <HAL_DMA_Abort_IT+0xf0>)
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	221c      	movs	r2, #28
 8002578:	4013      	ands	r3, r2
 800257a:	2201      	movs	r2, #1
 800257c:	409a      	lsls	r2, r3
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_DMA_Abort_IT+0xf0>)
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800258c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00c      	beq.n	80025b0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a0:	490f      	ldr	r1, [pc, #60]	; (80025e0 <HAL_DMA_Abort_IT+0xec>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80025ae:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2225      	movs	r2, #37	; 0x25
 80025b4:	2101      	movs	r1, #1
 80025b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	2100      	movs	r1, #0
 80025be:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	0010      	movs	r0, r2
 80025d0:	4798      	blx	r3
    }
  }
  return status;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	fffffeff 	.word	0xfffffeff
 80025e4:	40020000 	.word	0x40020000

080025e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f6:	e147      	b.n	8002888 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2101      	movs	r1, #1
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4091      	lsls	r1, r2
 8002602:	000a      	movs	r2, r1
 8002604:	4013      	ands	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d100      	bne.n	8002610 <HAL_GPIO_Init+0x28>
 800260e:	e138      	b.n	8002882 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b02      	cmp	r3, #2
 8002616:	d003      	beq.n	8002620 <HAL_GPIO_Init+0x38>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b12      	cmp	r3, #18
 800261e:	d123      	bne.n	8002668 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	08da      	lsrs	r2, r3, #3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3208      	adds	r2, #8
 8002628:	0092      	lsls	r2, r2, #2
 800262a:	58d3      	ldr	r3, [r2, r3]
 800262c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2207      	movs	r2, #7
 8002632:	4013      	ands	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	220f      	movs	r2, #15
 8002638:	409a      	lsls	r2, r3
 800263a:	0013      	movs	r3, r2
 800263c:	43da      	mvns	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4013      	ands	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	691a      	ldr	r2, [r3, #16]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2107      	movs	r1, #7
 800264c:	400b      	ands	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	409a      	lsls	r2, r3
 8002652:	0013      	movs	r3, r2
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3208      	adds	r2, #8
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	6939      	ldr	r1, [r7, #16]
 8002666:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	409a      	lsls	r2, r3
 8002676:	0013      	movs	r3, r2
 8002678:	43da      	mvns	r2, r3
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4013      	ands	r3, r2
 800267e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2203      	movs	r2, #3
 8002686:	401a      	ands	r2, r3
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	409a      	lsls	r2, r3
 800268e:	0013      	movs	r3, r2
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d00b      	beq.n	80026bc <HAL_GPIO_Init+0xd4>
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d007      	beq.n	80026bc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026b0:	2b11      	cmp	r3, #17
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b12      	cmp	r3, #18
 80026ba:	d130      	bne.n	800271e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	409a      	lsls	r2, r3
 80026ca:	0013      	movs	r3, r2
 80026cc:	43da      	mvns	r2, r3
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4013      	ands	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	409a      	lsls	r2, r3
 80026de:	0013      	movs	r3, r2
 80026e0:	693a      	ldr	r2, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026f2:	2201      	movs	r2, #1
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	409a      	lsls	r2, r3
 80026f8:	0013      	movs	r3, r2
 80026fa:	43da      	mvns	r2, r3
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	4013      	ands	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	2201      	movs	r2, #1
 800270a:	401a      	ands	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	409a      	lsls	r2, r3
 8002710:	0013      	movs	r3, r2
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	2203      	movs	r2, #3
 800272a:	409a      	lsls	r2, r3
 800272c:	0013      	movs	r3, r2
 800272e:	43da      	mvns	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	4313      	orrs	r3, r2
 8002746:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685a      	ldr	r2, [r3, #4]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	055b      	lsls	r3, r3, #21
 8002756:	4013      	ands	r3, r2
 8002758:	d100      	bne.n	800275c <HAL_GPIO_Init+0x174>
 800275a:	e092      	b.n	8002882 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800275c:	4a50      	ldr	r2, [pc, #320]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3318      	adds	r3, #24
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	589b      	ldr	r3, [r3, r2]
 8002768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2203      	movs	r2, #3
 800276e:	4013      	ands	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	220f      	movs	r2, #15
 8002774:	409a      	lsls	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	43da      	mvns	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	23a0      	movs	r3, #160	; 0xa0
 8002784:	05db      	lsls	r3, r3, #23
 8002786:	429a      	cmp	r2, r3
 8002788:	d013      	beq.n	80027b2 <HAL_GPIO_Init+0x1ca>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a45      	ldr	r2, [pc, #276]	; (80028a4 <HAL_GPIO_Init+0x2bc>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d00d      	beq.n	80027ae <HAL_GPIO_Init+0x1c6>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a44      	ldr	r2, [pc, #272]	; (80028a8 <HAL_GPIO_Init+0x2c0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d007      	beq.n	80027aa <HAL_GPIO_Init+0x1c2>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_GPIO_Init+0x2c4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d101      	bne.n	80027a6 <HAL_GPIO_Init+0x1be>
 80027a2:	2303      	movs	r3, #3
 80027a4:	e006      	b.n	80027b4 <HAL_GPIO_Init+0x1cc>
 80027a6:	2305      	movs	r3, #5
 80027a8:	e004      	b.n	80027b4 <HAL_GPIO_Init+0x1cc>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e002      	b.n	80027b4 <HAL_GPIO_Init+0x1cc>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_GPIO_Init+0x1cc>
 80027b2:	2300      	movs	r3, #0
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	2103      	movs	r1, #3
 80027b8:	400a      	ands	r2, r1
 80027ba:	00d2      	lsls	r2, r2, #3
 80027bc:	4093      	lsls	r3, r2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80027c4:	4936      	ldr	r1, [pc, #216]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	089b      	lsrs	r3, r3, #2
 80027ca:	3318      	adds	r3, #24
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80027d2:	4a33      	ldr	r2, [pc, #204]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	58d3      	ldr	r3, [r2, r3]
 80027d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	43da      	mvns	r2, r3
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4013      	ands	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	2380      	movs	r3, #128	; 0x80
 80027ea:	025b      	lsls	r3, r3, #9
 80027ec:	4013      	ands	r3, r2
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027f8:	4929      	ldr	r1, [pc, #164]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 80027fa:	2280      	movs	r2, #128	; 0x80
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002800:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 8002802:	2384      	movs	r3, #132	; 0x84
 8002804:	58d3      	ldr	r3, [r2, r3]
 8002806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	43da      	mvns	r2, r3
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4013      	ands	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	029b      	lsls	r3, r3, #10
 800281a:	4013      	ands	r3, r2
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002826:	491e      	ldr	r1, [pc, #120]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 8002828:	2284      	movs	r2, #132	; 0x84
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800282e:	4b1c      	ldr	r3, [pc, #112]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	43da      	mvns	r2, r3
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	2380      	movs	r3, #128	; 0x80
 8002844:	035b      	lsls	r3, r3, #13
 8002846:	4013      	ands	r3, r2
 8002848:	d003      	beq.n	8002852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002852:	4b13      	ldr	r3, [pc, #76]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002858:	4b11      	ldr	r3, [pc, #68]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	43da      	mvns	r2, r3
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	2380      	movs	r3, #128	; 0x80
 800286e:	039b      	lsls	r3, r3, #14
 8002870:	4013      	ands	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4313      	orrs	r3, r2
 800287a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800287c:	4b08      	ldr	r3, [pc, #32]	; (80028a0 <HAL_GPIO_Init+0x2b8>)
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	40da      	lsrs	r2, r3
 8002890:	1e13      	subs	r3, r2, #0
 8002892:	d000      	beq.n	8002896 <HAL_GPIO_Init+0x2ae>
 8002894:	e6b0      	b.n	80025f8 <HAL_GPIO_Init+0x10>
  }
}
 8002896:	46c0      	nop			; (mov r8, r8)
 8002898:	46bd      	mov	sp, r7
 800289a:	b006      	add	sp, #24
 800289c:	bd80      	pop	{r7, pc}
 800289e:	46c0      	nop			; (mov r8, r8)
 80028a0:	40021800 	.word	0x40021800
 80028a4:	50000400 	.word	0x50000400
 80028a8:	50000800 	.word	0x50000800
 80028ac:	50000c00 	.word	0x50000c00

080028b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80028be:	e0b4      	b.n	8002a2a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80028c0:	2201      	movs	r2, #1
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	409a      	lsls	r2, r3
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d100      	bne.n	80028d4 <HAL_GPIO_DeInit+0x24>
 80028d2:	e0a7      	b.n	8002a24 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80028d4:	4a5a      	ldr	r2, [pc, #360]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	089b      	lsrs	r3, r3, #2
 80028da:	3318      	adds	r3, #24
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	589b      	ldr	r3, [r3, r2]
 80028e0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2203      	movs	r2, #3
 80028e6:	4013      	ands	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	220f      	movs	r2, #15
 80028ec:	409a      	lsls	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	23a0      	movs	r3, #160	; 0xa0
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d013      	beq.n	8002926 <HAL_GPIO_DeInit+0x76>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a50      	ldr	r2, [pc, #320]	; (8002a44 <HAL_GPIO_DeInit+0x194>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00d      	beq.n	8002922 <HAL_GPIO_DeInit+0x72>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4f      	ldr	r2, [pc, #316]	; (8002a48 <HAL_GPIO_DeInit+0x198>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <HAL_GPIO_DeInit+0x6e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4e      	ldr	r2, [pc, #312]	; (8002a4c <HAL_GPIO_DeInit+0x19c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_GPIO_DeInit+0x6a>
 8002916:	2303      	movs	r3, #3
 8002918:	e006      	b.n	8002928 <HAL_GPIO_DeInit+0x78>
 800291a:	2305      	movs	r3, #5
 800291c:	e004      	b.n	8002928 <HAL_GPIO_DeInit+0x78>
 800291e:	2302      	movs	r3, #2
 8002920:	e002      	b.n	8002928 <HAL_GPIO_DeInit+0x78>
 8002922:	2301      	movs	r3, #1
 8002924:	e000      	b.n	8002928 <HAL_GPIO_DeInit+0x78>
 8002926:	2300      	movs	r3, #0
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	2103      	movs	r1, #3
 800292c:	400a      	ands	r2, r1
 800292e:	00d2      	lsls	r2, r2, #3
 8002930:	4093      	lsls	r3, r2
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d136      	bne.n	80029a6 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002938:	4a41      	ldr	r2, [pc, #260]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800293a:	2380      	movs	r3, #128	; 0x80
 800293c:	58d3      	ldr	r3, [r2, r3]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	43d2      	mvns	r2, r2
 8002942:	493f      	ldr	r1, [pc, #252]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 8002944:	4013      	ands	r3, r2
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800294a:	4a3d      	ldr	r2, [pc, #244]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800294c:	2384      	movs	r3, #132	; 0x84
 800294e:	58d3      	ldr	r3, [r2, r3]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	43d2      	mvns	r2, r2
 8002954:	493a      	ldr	r1, [pc, #232]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 8002956:	4013      	ands	r3, r2
 8002958:	2284      	movs	r2, #132	; 0x84
 800295a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800295c:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	43d9      	mvns	r1, r3
 8002964:	4b36      	ldr	r3, [pc, #216]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 8002966:	400a      	ands	r2, r1
 8002968:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800296a:	4b35      	ldr	r3, [pc, #212]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	43d9      	mvns	r1, r3
 8002972:	4b33      	ldr	r3, [pc, #204]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 8002974:	400a      	ands	r2, r1
 8002976:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2203      	movs	r2, #3
 800297c:	4013      	ands	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	220f      	movs	r2, #15
 8002982:	409a      	lsls	r2, r3
 8002984:	0013      	movs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	089b      	lsrs	r3, r3, #2
 800298e:	3318      	adds	r3, #24
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	589a      	ldr	r2, [r3, r2]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	43d9      	mvns	r1, r3
 8002998:	4829      	ldr	r0, [pc, #164]	; (8002a40 <HAL_GPIO_DeInit+0x190>)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	089b      	lsrs	r3, r3, #2
 800299e:	400a      	ands	r2, r1
 80029a0:	3318      	adds	r3, #24
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2103      	movs	r1, #3
 80029b0:	4099      	lsls	r1, r3
 80029b2:	000b      	movs	r3, r1
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	08da      	lsrs	r2, r3, #3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3208      	adds	r2, #8
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	58d3      	ldr	r3, [r2, r3]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	2107      	movs	r1, #7
 80029ca:	400a      	ands	r2, r1
 80029cc:	0092      	lsls	r2, r2, #2
 80029ce:	210f      	movs	r1, #15
 80029d0:	4091      	lsls	r1, r2
 80029d2:	000a      	movs	r2, r1
 80029d4:	43d1      	mvns	r1, r2
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	08d2      	lsrs	r2, r2, #3
 80029da:	4019      	ands	r1, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3208      	adds	r2, #8
 80029e0:	0092      	lsls	r2, r2, #2
 80029e2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	0052      	lsls	r2, r2, #1
 80029ec:	2103      	movs	r1, #3
 80029ee:	4091      	lsls	r1, r2
 80029f0:	000a      	movs	r2, r1
 80029f2:	43d2      	mvns	r2, r2
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2101      	movs	r1, #1
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4091      	lsls	r1, r2
 8002a04:	000a      	movs	r2, r1
 8002a06:	43d2      	mvns	r2, r2
 8002a08:	401a      	ands	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	0052      	lsls	r2, r2, #1
 8002a16:	2103      	movs	r1, #3
 8002a18:	4091      	lsls	r1, r2
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	43d2      	mvns	r2, r2
 8002a1e:	401a      	ands	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	3301      	adds	r3, #1
 8002a28:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	40da      	lsrs	r2, r3
 8002a30:	1e13      	subs	r3, r2, #0
 8002a32:	d000      	beq.n	8002a36 <HAL_GPIO_DeInit+0x186>
 8002a34:	e744      	b.n	80028c0 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b006      	add	sp, #24
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	40021800 	.word	0x40021800
 8002a44:	50000400 	.word	0x50000400
 8002a48:	50000800 	.word	0x50000800
 8002a4c:	50000c00 	.word	0x50000c00

08002a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	0008      	movs	r0, r1
 8002a5a:	0011      	movs	r1, r2
 8002a5c:	1cbb      	adds	r3, r7, #2
 8002a5e:	1c02      	adds	r2, r0, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	1c7b      	adds	r3, r7, #1
 8002a64:	1c0a      	adds	r2, r1, #0
 8002a66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a68:	1c7b      	adds	r3, r7, #1
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d004      	beq.n	8002a7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a70:	1cbb      	adds	r3, r7, #2
 8002a72:	881a      	ldrh	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a78:	e003      	b.n	8002a82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a7a:	1cbb      	adds	r3, r7, #2
 8002a7c:	881a      	ldrh	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b002      	add	sp, #8
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_LPTIM_Init+0x112>
  }  
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2236      	movs	r2, #54	; 0x36
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d107      	bne.n	8002aba <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2235      	movs	r2, #53	; 0x35
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f003 ff0f 	bl	80068d8 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }
  
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2236      	movs	r2, #54	; 0x36
 8002abe:	2102      	movs	r1, #2
 8002ac0:	5499      	strb	r1, [r3, r2]
  
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d005      	beq.n	8002ade <HAL_LPTIM_Init+0x52>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	041b      	lsls	r3, r3, #16
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d103      	bne.n	8002ae6 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	221e      	movs	r2, #30
 8002ae2:	4393      	bics	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4a2f      	ldr	r2, [pc, #188]	; (8002ba8 <HAL_LPTIM_Init+0x11c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d003      	beq.n	8002af8 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4a2e      	ldr	r2, [pc, #184]	; (8002bac <HAL_LPTIM_Init+0x120>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }
    
  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_LPTIM_Init+0x124>)
 8002afc:	4013      	ands	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
  
  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002b08:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8002b0e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8002b14:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8002b1a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d005      	beq.n	8002b36 <HAL_LPTIM_Init+0xaa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d107      	bne.n	8002b46 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  } 
  
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_LPTIM_Init+0x11c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00a      	beq.n	8002b66 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b58:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8002b5e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a10      	ldr	r2, [pc, #64]	; (8002bb4 <HAL_LPTIM_Init+0x128>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d108      	bne.n	8002b8a <HAL_LPTIM_Init+0xfe>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));
    
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	430a      	orrs	r2, r1
 8002b86:	625a      	str	r2, [r3, #36]	; 0x24
 8002b88:	e004      	b.n	8002b94 <HAL_LPTIM_Init+0x108>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    
    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2236      	movs	r2, #54	; 0x36
 8002b98:	2101      	movs	r1, #1
 8002b9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	0000ffff 	.word	0x0000ffff
 8002bac:	ffff1f3f 	.word	0xffff1f3f
 8002bb0:	ff19f1f8 	.word	0xff19f1f8
 8002bb4:	40007c00 	.word	0x40007c00

08002bb8 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));
               
  /* Set the LPTIM state */
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2236      	movs	r2, #54	; 0x36
 8002bc8:	2102      	movs	r1, #2
 8002bca:	5499      	strb	r1, [r3, r2]
 
  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2180      	movs	r1, #128	; 0x80
 8002bd8:	0309      	lsls	r1, r1, #12
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	60da      	str	r2, [r3, #12]
  
  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2101      	movs	r1, #1
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	611a      	str	r2, [r3, #16]
  
  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	619a      	str	r2, [r3, #24]
  
  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	615a      	str	r2, [r3, #20]
  
  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2104      	movs	r1, #4
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	611a      	str	r2, [r3, #16]
    
  /* Change the TIM state*/
  hlptim->State= HAL_LPTIM_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2236      	movs	r2, #54	; 0x36
 8002c22:	2101      	movs	r1, #1
 8002c24:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	0018      	movs	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	b004      	add	sp, #16
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10e      	bne.n	8002c64 <HAL_LPTIM_IRQHandler+0x34>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d107      	bne.n	8002c64 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	605a      	str	r2, [r3, #4]
      
      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
          hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f003 fc2a 	bl	80064b8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d10e      	bne.n	8002c90 <HAL_LPTIM_IRQHandler+0x60>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d107      	bne.n	8002c90 <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2202      	movs	r2, #2
 8002c86:	605a      	str	r2, [r3, #4]
      
      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	f000 f872 	bl	8002d74 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2204      	movs	r2, #4
 8002c98:	4013      	ands	r3, r2
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d10e      	bne.n	8002cbc <HAL_LPTIM_IRQHandler+0x8c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d107      	bne.n	8002cbc <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	605a      	str	r2, [r3, #4]
      
      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);      
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	f000 f864 	bl	8002d84 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2208      	movs	r2, #8
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d10e      	bne.n	8002ce8 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d107      	bne.n	8002ce8 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2208      	movs	r2, #8
 8002cde:	605a      	str	r2, [r3, #4]
      
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);      
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f856 	bl	8002d94 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2210      	movs	r2, #16
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d10e      	bne.n	8002d14 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b10      	cmp	r3, #16
 8002d02:	d107      	bne.n	8002d14 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2210      	movs	r2, #16
 8002d0a:	605a      	str	r2, [r3, #4]
      
      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	0018      	movs	r0, r3
 8002d10:	f000 f848 	bl	8002da4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d10e      	bne.n	8002d40 <HAL_LPTIM_IRQHandler+0x110>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d107      	bne.n	8002d40 <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2220      	movs	r2, #32
 8002d36:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);      
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f83a 	bl	8002db4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2240      	movs	r2, #64	; 0x40
 8002d48:	4013      	ands	r3, r2
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d10e      	bne.n	8002d6c <HAL_LPTIM_IRQHandler+0x13c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2240      	movs	r2, #64	; 0x40
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d107      	bne.n	8002d6c <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2240      	movs	r2, #64	; 0x40
 8002d62:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);      
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	0018      	movs	r0, r3
 8002d68:	f000 f82c 	bl	8002dc4 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */  
}
 8002d7c:	46c0      	nop			; (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b002      	add	sp, #8
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */  
}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */  
}
 8002d9c:	46c0      	nop			; (mov r8, r8)
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	b002      	add	sp, #8
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode. 
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */  
}
 8002dac:	46c0      	nop			; (mov r8, r8)
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b002      	add	sp, #8
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */  
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */  
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a19      	ldr	r2, [pc, #100]	; (8002e48 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	4b17      	ldr	r3, [pc, #92]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	2380      	movs	r3, #128	; 0x80
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d11f      	bne.n	8002e38 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8002df8:	4b14      	ldr	r3, [pc, #80]	; (8002e4c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	0013      	movs	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	189b      	adds	r3, r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002e06:	0018      	movs	r0, r3
 8002e08:	f7fd f98e 	bl	8000128 <__udivsi3>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e12:	e008      	b.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e001      	b.n	8002e26 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e009      	b.n	8002e3a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e26:	4b07      	ldr	r3, [pc, #28]	; (8002e44 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002e28:	695a      	ldr	r2, [r3, #20]
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	401a      	ands	r2, r3
 8002e30:	2380      	movs	r3, #128	; 0x80
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d0ed      	beq.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	40007000 	.word	0x40007000
 8002e48:	fffff9ff 	.word	0xfffff9ff
 8002e4c:	20000008 	.word	0x20000008
 8002e50:	000f4240 	.word	0x000f4240

08002e54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	23e0      	movs	r3, #224	; 0xe0
 8002e5e:	01db      	lsls	r3, r3, #7
 8002e60:	4013      	ands	r3, r2
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40021000 	.word	0x40021000

08002e6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e304      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x1e>
 8002e88:	e07c      	b.n	8002f84 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	4bc3      	ldr	r3, [pc, #780]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2238      	movs	r2, #56	; 0x38
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e94:	4bc0      	ldr	r3, [pc, #768]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2203      	movs	r2, #3
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	2b10      	cmp	r3, #16
 8002ea2:	d102      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3e>
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b03      	cmp	r3, #3
 8002ea8:	d002      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x44>
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb0:	4bb9      	ldr	r3, [pc, #740]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	2380      	movs	r3, #128	; 0x80
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d062      	beq.n	8002f82 <HAL_RCC_OscConfig+0x116>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d15e      	bne.n	8002f82 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e2df      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	025b      	lsls	r3, r3, #9
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d107      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x78>
 8002ed4:	4bb0      	ldr	r3, [pc, #704]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4baf      	ldr	r3, [pc, #700]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	0249      	lsls	r1, r1, #9
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e020      	b.n	8002f26 <HAL_RCC_OscConfig+0xba>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	23a0      	movs	r3, #160	; 0xa0
 8002eea:	02db      	lsls	r3, r3, #11
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d10e      	bne.n	8002f0e <HAL_RCC_OscConfig+0xa2>
 8002ef0:	4ba9      	ldr	r3, [pc, #676]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4ba8      	ldr	r3, [pc, #672]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	02c9      	lsls	r1, r1, #11
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	4ba6      	ldr	r3, [pc, #664]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4ba5      	ldr	r3, [pc, #660]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0249      	lsls	r1, r1, #9
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	e00b      	b.n	8002f26 <HAL_RCC_OscConfig+0xba>
 8002f0e:	4ba2      	ldr	r3, [pc, #648]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4ba1      	ldr	r3, [pc, #644]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f14:	49a1      	ldr	r1, [pc, #644]	; (800319c <HAL_RCC_OscConfig+0x330>)
 8002f16:	400a      	ands	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	4b9f      	ldr	r3, [pc, #636]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b9e      	ldr	r3, [pc, #632]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f20:	499f      	ldr	r1, [pc, #636]	; (80031a0 <HAL_RCC_OscConfig+0x334>)
 8002f22:	400a      	ands	r2, r1
 8002f24:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d014      	beq.n	8002f58 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7ff f9a7 	bl	8002280 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f38:	f7ff f9a2 	bl	8002280 <HAL_GetTick>
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e29e      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f4a:	4b93      	ldr	r3, [pc, #588]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	029b      	lsls	r3, r3, #10
 8002f52:	4013      	ands	r3, r2
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0xcc>
 8002f56:	e015      	b.n	8002f84 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7ff f992 	bl	8002280 <HAL_GetTick>
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f62:	f7ff f98d 	bl	8002280 <HAL_GetTick>
 8002f66:	0002      	movs	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e289      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f74:	4b88      	ldr	r3, [pc, #544]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	2380      	movs	r3, #128	; 0x80
 8002f7a:	029b      	lsls	r3, r3, #10
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0xf6>
 8002f80:	e000      	b.n	8002f84 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f82:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d100      	bne.n	8002f90 <HAL_RCC_OscConfig+0x124>
 8002f8e:	e099      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f90:	4b81      	ldr	r3, [pc, #516]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	2238      	movs	r2, #56	; 0x38
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f9a:	4b7f      	ldr	r3, [pc, #508]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x144>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d002      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x14a>
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d135      	bne.n	8003022 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb6:	4b78      	ldr	r3, [pc, #480]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2380      	movs	r3, #128	; 0x80
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x162>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e25c      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b72      	ldr	r3, [pc, #456]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a74      	ldr	r2, [pc, #464]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	021a      	lsls	r2, r3, #8
 8002fde:	4b6e      	ldr	r3, [pc, #440]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d112      	bne.n	8003010 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a6e      	ldr	r2, [pc, #440]	; (80031a8 <HAL_RCC_OscConfig+0x33c>)
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	0019      	movs	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ffe:	4b66      	ldr	r3, [pc, #408]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0adb      	lsrs	r3, r3, #11
 8003004:	2207      	movs	r2, #7
 8003006:	4013      	ands	r3, r2
 8003008:	4a68      	ldr	r2, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x340>)
 800300a:	40da      	lsrs	r2, r3
 800300c:	4b68      	ldr	r3, [pc, #416]	; (80031b0 <HAL_RCC_OscConfig+0x344>)
 800300e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003010:	4b68      	ldr	r3, [pc, #416]	; (80031b4 <HAL_RCC_OscConfig+0x348>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	0018      	movs	r0, r3
 8003016:	f7ff f8d9 	bl	80021cc <HAL_InitTick>
 800301a:	1e03      	subs	r3, r0, #0
 800301c:	d051      	beq.n	80030c2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e232      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d030      	beq.n	800308c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800302a:	4b5b      	ldr	r3, [pc, #364]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a5e      	ldr	r2, [pc, #376]	; (80031a8 <HAL_RCC_OscConfig+0x33c>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	4b57      	ldr	r3, [pc, #348]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800303a:	430a      	orrs	r2, r1
 800303c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800303e:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b55      	ldr	r3, [pc, #340]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003044:	2180      	movs	r1, #128	; 0x80
 8003046:	0049      	lsls	r1, r1, #1
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7ff f918 	bl	8002280 <HAL_GetTick>
 8003050:	0003      	movs	r3, r0
 8003052:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7ff f913 	bl	8002280 <HAL_GetTick>
 800305a:	0002      	movs	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e20f      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b4b      	ldr	r3, [pc, #300]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	2380      	movs	r3, #128	; 0x80
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4013      	ands	r3, r2
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b48      	ldr	r3, [pc, #288]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_RCC_OscConfig+0x338>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	e01b      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800308c:	4b42      	ldr	r3, [pc, #264]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	4b41      	ldr	r3, [pc, #260]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003092:	4949      	ldr	r1, [pc, #292]	; (80031b8 <HAL_RCC_OscConfig+0x34c>)
 8003094:	400a      	ands	r2, r1
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7ff f8f2 	bl	8002280 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a2:	f7ff f8ed 	bl	8002280 <HAL_GetTick>
 80030a6:	0002      	movs	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e1e9      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	4b38      	ldr	r3, [pc, #224]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	d1f0      	bne.n	80030a2 <HAL_RCC_OscConfig+0x236>
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2208      	movs	r2, #8
 80030ca:	4013      	ands	r3, r2
 80030cc:	d047      	beq.n	800315e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80030ce:	4b32      	ldr	r3, [pc, #200]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2238      	movs	r2, #56	; 0x38
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b18      	cmp	r3, #24
 80030d8:	d10a      	bne.n	80030f0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80030da:	4b2f      	ldr	r3, [pc, #188]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d03c      	beq.n	800315e <HAL_RCC_OscConfig+0x2f2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d138      	bne.n	800315e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e1cb      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d019      	beq.n	800312c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 80030fe:	2101      	movs	r1, #1
 8003100:	430a      	orrs	r2, r1
 8003102:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff f8bc 	bl	8002280 <HAL_GetTick>
 8003108:	0003      	movs	r3, r0
 800310a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310e:	f7ff f8b7 	bl	8002280 <HAL_GetTick>
 8003112:	0002      	movs	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e1b3      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003120:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	2202      	movs	r2, #2
 8003126:	4013      	ands	r3, r2
 8003128:	d0f1      	beq.n	800310e <HAL_RCC_OscConfig+0x2a2>
 800312a:	e018      	b.n	800315e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800312c:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 800312e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003130:	4b19      	ldr	r3, [pc, #100]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003132:	2101      	movs	r1, #1
 8003134:	438a      	bics	r2, r1
 8003136:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff f8a2 	bl	8002280 <HAL_GetTick>
 800313c:	0003      	movs	r3, r0
 800313e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7ff f89d 	bl	8002280 <HAL_GetTick>
 8003146:	0002      	movs	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e199      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003154:	4b10      	ldr	r3, [pc, #64]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003158:	2202      	movs	r2, #2
 800315a:	4013      	ands	r3, r2
 800315c:	d1f1      	bne.n	8003142 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2204      	movs	r2, #4
 8003164:	4013      	ands	r3, r2
 8003166:	d100      	bne.n	800316a <HAL_RCC_OscConfig+0x2fe>
 8003168:	e0c6      	b.n	80032f8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	231f      	movs	r3, #31
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2200      	movs	r2, #0
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2238      	movs	r2, #56	; 0x38
 8003178:	4013      	ands	r3, r2
 800317a:	2b20      	cmp	r3, #32
 800317c:	d11e      	bne.n	80031bc <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_RCC_OscConfig+0x32c>)
 8003180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003182:	2202      	movs	r2, #2
 8003184:	4013      	ands	r3, r2
 8003186:	d100      	bne.n	800318a <HAL_RCC_OscConfig+0x31e>
 8003188:	e0b6      	b.n	80032f8 <HAL_RCC_OscConfig+0x48c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d000      	beq.n	8003194 <HAL_RCC_OscConfig+0x328>
 8003192:	e0b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e177      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
 8003198:	40021000 	.word	0x40021000
 800319c:	fffeffff 	.word	0xfffeffff
 80031a0:	fffbffff 	.word	0xfffbffff
 80031a4:	ffff80ff 	.word	0xffff80ff
 80031a8:	ffffc7ff 	.word	0xffffc7ff
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	20000008 	.word	0x20000008
 80031b4:	20000000 	.word	0x20000000
 80031b8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031bc:	4bb4      	ldr	r3, [pc, #720]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80031be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	055b      	lsls	r3, r3, #21
 80031c4:	4013      	ands	r3, r2
 80031c6:	d101      	bne.n	80031cc <HAL_RCC_OscConfig+0x360>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x362>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d011      	beq.n	80031f6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80031d2:	4baf      	ldr	r3, [pc, #700]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80031d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031d6:	4bae      	ldr	r3, [pc, #696]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80031d8:	2180      	movs	r1, #128	; 0x80
 80031da:	0549      	lsls	r1, r1, #21
 80031dc:	430a      	orrs	r2, r1
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e0:	4bab      	ldr	r3, [pc, #684]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80031e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031e4:	2380      	movs	r3, #128	; 0x80
 80031e6:	055b      	lsls	r3, r3, #21
 80031e8:	4013      	ands	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80031ee:	231f      	movs	r3, #31
 80031f0:	18fb      	adds	r3, r7, r3
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f6:	4ba7      	ldr	r3, [pc, #668]	; (8003494 <HAL_RCC_OscConfig+0x628>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	2380      	movs	r3, #128	; 0x80
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003202:	4ba4      	ldr	r3, [pc, #656]	; (8003494 <HAL_RCC_OscConfig+0x628>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4ba3      	ldr	r3, [pc, #652]	; (8003494 <HAL_RCC_OscConfig+0x628>)
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	0049      	lsls	r1, r1, #1
 800320c:	430a      	orrs	r2, r1
 800320e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003210:	f7ff f836 	bl	8002280 <HAL_GetTick>
 8003214:	0003      	movs	r3, r0
 8003216:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003218:	e008      	b.n	800322c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321a:	f7ff f831 	bl	8002280 <HAL_GetTick>
 800321e:	0002      	movs	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d901      	bls.n	800322c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e12d      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800322c:	4b99      	ldr	r3, [pc, #612]	; (8003494 <HAL_RCC_OscConfig+0x628>)
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	; 0x80
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4013      	ands	r3, r2
 8003236:	d0f0      	beq.n	800321a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d106      	bne.n	800324e <HAL_RCC_OscConfig+0x3e2>
 8003240:	4b93      	ldr	r3, [pc, #588]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003242:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003244:	4b92      	ldr	r3, [pc, #584]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003246:	2101      	movs	r1, #1
 8003248:	430a      	orrs	r2, r1
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
 800324c:	e01c      	b.n	8003288 <HAL_RCC_OscConfig+0x41c>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d10c      	bne.n	8003270 <HAL_RCC_OscConfig+0x404>
 8003256:	4b8e      	ldr	r3, [pc, #568]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003258:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800325a:	4b8d      	ldr	r3, [pc, #564]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800325c:	2104      	movs	r1, #4
 800325e:	430a      	orrs	r2, r1
 8003260:	65da      	str	r2, [r3, #92]	; 0x5c
 8003262:	4b8b      	ldr	r3, [pc, #556]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003266:	4b8a      	ldr	r3, [pc, #552]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003268:	2101      	movs	r1, #1
 800326a:	430a      	orrs	r2, r1
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
 800326e:	e00b      	b.n	8003288 <HAL_RCC_OscConfig+0x41c>
 8003270:	4b87      	ldr	r3, [pc, #540]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003274:	4b86      	ldr	r3, [pc, #536]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003276:	2101      	movs	r1, #1
 8003278:	438a      	bics	r2, r1
 800327a:	65da      	str	r2, [r3, #92]	; 0x5c
 800327c:	4b84      	ldr	r3, [pc, #528]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800327e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003280:	4b83      	ldr	r3, [pc, #524]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003282:	2104      	movs	r1, #4
 8003284:	438a      	bics	r2, r1
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d014      	beq.n	80032ba <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003290:	f7fe fff6 	bl	8002280 <HAL_GetTick>
 8003294:	0003      	movs	r3, r0
 8003296:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003298:	e009      	b.n	80032ae <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329a:	f7fe fff1 	bl	8002280 <HAL_GetTick>
 800329e:	0002      	movs	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	4a7c      	ldr	r2, [pc, #496]	; (8003498 <HAL_RCC_OscConfig+0x62c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e0ec      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032ae:	4b78      	ldr	r3, [pc, #480]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80032b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b2:	2202      	movs	r2, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	d0f0      	beq.n	800329a <HAL_RCC_OscConfig+0x42e>
 80032b8:	e013      	b.n	80032e2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe ffe1 	bl	8002280 <HAL_GetTick>
 80032be:	0003      	movs	r3, r0
 80032c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032c2:	e009      	b.n	80032d8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032c4:	f7fe ffdc 	bl	8002280 <HAL_GetTick>
 80032c8:	0002      	movs	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	4a72      	ldr	r2, [pc, #456]	; (8003498 <HAL_RCC_OscConfig+0x62c>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e0d7      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d8:	4b6d      	ldr	r3, [pc, #436]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2202      	movs	r2, #2
 80032de:	4013      	ands	r3, r2
 80032e0:	d1f0      	bne.n	80032c4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80032e2:	231f      	movs	r3, #31
 80032e4:	18fb      	adds	r3, r7, r3
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d105      	bne.n	80032f8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80032ec:	4b68      	ldr	r3, [pc, #416]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80032ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032f0:	4b67      	ldr	r3, [pc, #412]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80032f2:	496a      	ldr	r1, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x630>)
 80032f4:	400a      	ands	r2, r1
 80032f6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d100      	bne.n	8003302 <HAL_RCC_OscConfig+0x496>
 8003300:	e0c1      	b.n	8003486 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003302:	4b63      	ldr	r3, [pc, #396]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2238      	movs	r2, #56	; 0x38
 8003308:	4013      	ands	r3, r2
 800330a:	2b10      	cmp	r3, #16
 800330c:	d100      	bne.n	8003310 <HAL_RCC_OscConfig+0x4a4>
 800330e:	e081      	b.n	8003414 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	69db      	ldr	r3, [r3, #28]
 8003314:	2b02      	cmp	r3, #2
 8003316:	d156      	bne.n	80033c6 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003318:	4b5d      	ldr	r3, [pc, #372]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b5c      	ldr	r3, [pc, #368]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800331e:	4960      	ldr	r1, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x634>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fe ffac 	bl	8002280 <HAL_GetTick>
 8003328:	0003      	movs	r3, r0
 800332a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe ffa7 	bl	8002280 <HAL_GetTick>
 8003332:	0002      	movs	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e0a3      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003340:	4b53      	ldr	r3, [pc, #332]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	049b      	lsls	r3, r3, #18
 8003348:	4013      	ands	r3, r2
 800334a:	d1f0      	bne.n	800332e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800334c:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4a54      	ldr	r2, [pc, #336]	; (80034a4 <HAL_RCC_OscConfig+0x638>)
 8003352:	4013      	ands	r3, r2
 8003354:	0019      	movs	r1, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1a      	ldr	r2, [r3, #32]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335e:	431a      	orrs	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003378:	431a      	orrs	r2, r3
 800337a:	4b45      	ldr	r3, [pc, #276]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 800337c:	430a      	orrs	r2, r1
 800337e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003380:	4b43      	ldr	r3, [pc, #268]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	4b42      	ldr	r3, [pc, #264]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0449      	lsls	r1, r1, #17
 800338a:	430a      	orrs	r2, r1
 800338c:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800338e:	4b40      	ldr	r3, [pc, #256]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	4b3f      	ldr	r3, [pc, #252]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003394:	2180      	movs	r1, #128	; 0x80
 8003396:	0549      	lsls	r1, r1, #21
 8003398:	430a      	orrs	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe ff70 	bl	8002280 <HAL_GetTick>
 80033a0:	0003      	movs	r3, r0
 80033a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a6:	f7fe ff6b 	bl	8002280 <HAL_GetTick>
 80033aa:	0002      	movs	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e067      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b8:	4b35      	ldr	r3, [pc, #212]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	049b      	lsls	r3, r3, #18
 80033c0:	4013      	ands	r3, r2
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x53a>
 80033c4:	e05f      	b.n	8003486 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b32      	ldr	r3, [pc, #200]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b31      	ldr	r3, [pc, #196]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033cc:	4934      	ldr	r1, [pc, #208]	; (80034a0 <HAL_RCC_OscConfig+0x634>)
 80033ce:	400a      	ands	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80033d2:	4b2f      	ldr	r3, [pc, #188]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033d8:	2103      	movs	r1, #3
 80033da:	438a      	bics	r2, r1
 80033dc:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80033de:	4b2c      	ldr	r3, [pc, #176]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	4b2b      	ldr	r3, [pc, #172]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 80033e4:	4930      	ldr	r1, [pc, #192]	; (80034a8 <HAL_RCC_OscConfig+0x63c>)
 80033e6:	400a      	ands	r2, r1
 80033e8:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fe ff49 	bl	8002280 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f4:	f7fe ff44 	bl	8002280 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e040      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003406:	4b22      	ldr	r3, [pc, #136]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	2380      	movs	r3, #128	; 0x80
 800340c:	049b      	lsls	r3, r3, #18
 800340e:	4013      	ands	r3, r2
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x588>
 8003412:	e038      	b.n	8003486 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d101      	bne.n	8003420 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e033      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003420:	4b1b      	ldr	r3, [pc, #108]	; (8003490 <HAL_RCC_OscConfig+0x624>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2203      	movs	r2, #3
 800342a:	401a      	ands	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	429a      	cmp	r2, r3
 8003432:	d126      	bne.n	8003482 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	2270      	movs	r2, #112	; 0x70
 8003438:	401a      	ands	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800343e:	429a      	cmp	r2, r3
 8003440:	d11f      	bne.n	8003482 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	23fe      	movs	r3, #254	; 0xfe
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	401a      	ands	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003450:	429a      	cmp	r2, r3
 8003452:	d116      	bne.n	8003482 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	23f8      	movs	r3, #248	; 0xf8
 8003458:	039b      	lsls	r3, r3, #14
 800345a:	401a      	ands	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003460:	429a      	cmp	r2, r3
 8003462:	d10e      	bne.n	8003482 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	23e0      	movs	r3, #224	; 0xe0
 8003468:	051b      	lsls	r3, r3, #20
 800346a:	401a      	ands	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d106      	bne.n	8003482 <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	0f5b      	lsrs	r3, r3, #29
 8003478:	075a      	lsls	r2, r3, #29
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	0018      	movs	r0, r3
 800348a:	46bd      	mov	sp, r7
 800348c:	b008      	add	sp, #32
 800348e:	bd80      	pop	{r7, pc}
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	00001388 	.word	0x00001388
 800349c:	efffffff 	.word	0xefffffff
 80034a0:	feffffff 	.word	0xfeffffff
 80034a4:	11c1808c 	.word	0x11c1808c
 80034a8:	eefeffff 	.word	0xeefeffff

080034ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0e9      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034c0:	4b76      	ldr	r3, [pc, #472]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2207      	movs	r2, #7
 80034c6:	4013      	ands	r3, r2
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d91e      	bls.n	800350c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b73      	ldr	r3, [pc, #460]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2207      	movs	r2, #7
 80034d4:	4393      	bics	r3, r2
 80034d6:	0019      	movs	r1, r3
 80034d8:	4b70      	ldr	r3, [pc, #448]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fece 	bl	8002280 <HAL_GetTick>
 80034e4:	0003      	movs	r3, r0
 80034e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034e8:	e009      	b.n	80034fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ea:	f7fe fec9 	bl	8002280 <HAL_GetTick>
 80034ee:	0002      	movs	r2, r0
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	4a6a      	ldr	r2, [pc, #424]	; (80036a0 <HAL_RCC_ClockConfig+0x1f4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0ca      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80034fe:	4b67      	ldr	r3, [pc, #412]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2207      	movs	r2, #7
 8003504:	4013      	ands	r3, r2
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	429a      	cmp	r2, r3
 800350a:	d1ee      	bne.n	80034ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2202      	movs	r2, #2
 8003512:	4013      	ands	r3, r2
 8003514:	d015      	beq.n	8003542 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2204      	movs	r2, #4
 800351c:	4013      	ands	r3, r2
 800351e:	d006      	beq.n	800352e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003520:	4b60      	ldr	r3, [pc, #384]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003526:	21e0      	movs	r1, #224	; 0xe0
 8003528:	01c9      	lsls	r1, r1, #7
 800352a:	430a      	orrs	r2, r1
 800352c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352e:	4b5d      	ldr	r3, [pc, #372]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	4a5d      	ldr	r2, [pc, #372]	; (80036a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	4b59      	ldr	r3, [pc, #356]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	4013      	ands	r3, r2
 800354a:	d057      	beq.n	80035fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d107      	bne.n	8003564 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003554:	4b53      	ldr	r3, [pc, #332]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	2380      	movs	r3, #128	; 0x80
 800355a:	029b      	lsls	r3, r3, #10
 800355c:	4013      	ands	r3, r2
 800355e:	d12b      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e097      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b02      	cmp	r3, #2
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800356c:	4b4d      	ldr	r3, [pc, #308]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	049b      	lsls	r3, r3, #18
 8003574:	4013      	ands	r3, r2
 8003576:	d11f      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e08b      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003584:	4b47      	ldr	r3, [pc, #284]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4013      	ands	r3, r2
 800358e:	d113      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e07f      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	2b03      	cmp	r3, #3
 800359a:	d106      	bne.n	80035aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800359c:	4b41      	ldr	r3, [pc, #260]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	2202      	movs	r2, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d108      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e074      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035aa:	4b3e      	ldr	r3, [pc, #248]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	2202      	movs	r2, #2
 80035b0:	4013      	ands	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	e06d      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035b8:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2207      	movs	r2, #7
 80035be:	4393      	bics	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4b37      	ldr	r3, [pc, #220]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 80035c8:	430a      	orrs	r2, r1
 80035ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe fe58 	bl	8002280 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d4:	e009      	b.n	80035ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d6:	f7fe fe53 	bl	8002280 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	4a2f      	ldr	r2, [pc, #188]	; (80036a0 <HAL_RCC_ClockConfig+0x1f4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e054      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2238      	movs	r2, #56	; 0x38
 80035f0:	401a      	ands	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1ec      	bne.n	80035d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2207      	movs	r2, #7
 8003602:	4013      	ands	r3, r2
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d21e      	bcs.n	8003648 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360a:	4b24      	ldr	r3, [pc, #144]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2207      	movs	r2, #7
 8003610:	4393      	bics	r3, r2
 8003612:	0019      	movs	r1, r3
 8003614:	4b21      	ldr	r3, [pc, #132]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800361c:	f7fe fe30 	bl	8002280 <HAL_GetTick>
 8003620:	0003      	movs	r3, r0
 8003622:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003624:	e009      	b.n	800363a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003626:	f7fe fe2b 	bl	8002280 <HAL_GetTick>
 800362a:	0002      	movs	r2, r0
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d901      	bls.n	800363a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e02c      	b.n	8003694 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800363a:	4b18      	ldr	r3, [pc, #96]	; (800369c <HAL_RCC_ClockConfig+0x1f0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2207      	movs	r2, #7
 8003640:	4013      	ands	r3, r2
 8003642:	683a      	ldr	r2, [r7, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2204      	movs	r2, #4
 800364e:	4013      	ands	r3, r2
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	4a15      	ldr	r2, [pc, #84]	; (80036ac <HAL_RCC_ClockConfig+0x200>)
 8003658:	4013      	ands	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68da      	ldr	r2, [r3, #12]
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 8003662:	430a      	orrs	r2, r1
 8003664:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003666:	f000 f829 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800366a:	0001      	movs	r1, r0
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_RCC_ClockConfig+0x1f8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	0a1b      	lsrs	r3, r3, #8
 8003672:	220f      	movs	r2, #15
 8003674:	401a      	ands	r2, r3
 8003676:	4b0e      	ldr	r3, [pc, #56]	; (80036b0 <HAL_RCC_ClockConfig+0x204>)
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	58d3      	ldr	r3, [r2, r3]
 800367c:	221f      	movs	r2, #31
 800367e:	4013      	ands	r3, r2
 8003680:	000a      	movs	r2, r1
 8003682:	40da      	lsrs	r2, r3
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x208>)
 8003686:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003688:	4b0b      	ldr	r3, [pc, #44]	; (80036b8 <HAL_RCC_ClockConfig+0x20c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	0018      	movs	r0, r3
 800368e:	f7fe fd9d 	bl	80021cc <HAL_InitTick>
 8003692:	0003      	movs	r3, r0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40022000 	.word	0x40022000
 80036a0:	00001388 	.word	0x00001388
 80036a4:	40021000 	.word	0x40021000
 80036a8:	fffff0ff 	.word	0xfffff0ff
 80036ac:	ffff8fff 	.word	0xffff8fff
 80036b0:	08009e34 	.word	0x08009e34
 80036b4:	20000008 	.word	0x20000008
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80036c2:	4b3c      	ldr	r3, [pc, #240]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	2238      	movs	r2, #56	; 0x38
 80036c8:	4013      	ands	r3, r2
 80036ca:	d10f      	bne.n	80036ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80036cc:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0adb      	lsrs	r3, r3, #11
 80036d2:	2207      	movs	r2, #7
 80036d4:	4013      	ands	r3, r2
 80036d6:	2201      	movs	r2, #1
 80036d8:	409a      	lsls	r2, r3
 80036da:	0013      	movs	r3, r2
 80036dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80036de:	6839      	ldr	r1, [r7, #0]
 80036e0:	4835      	ldr	r0, [pc, #212]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80036e2:	f7fc fd21 	bl	8000128 <__udivsi3>
 80036e6:	0003      	movs	r3, r0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	e05d      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036ec:	4b31      	ldr	r3, [pc, #196]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2238      	movs	r2, #56	; 0x38
 80036f2:	4013      	ands	r3, r2
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d102      	bne.n	80036fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036f8:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_RCC_GetSysClockFreq+0x100>)
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e054      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036fe:	4b2d      	ldr	r3, [pc, #180]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	2238      	movs	r2, #56	; 0x38
 8003704:	4013      	ands	r3, r2
 8003706:	2b10      	cmp	r3, #16
 8003708:	d138      	bne.n	800377c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2203      	movs	r2, #3
 8003710:	4013      	ands	r3, r2
 8003712:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003714:	4b27      	ldr	r3, [pc, #156]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	2207      	movs	r2, #7
 800371c:	4013      	ands	r3, r2
 800371e:	3301      	adds	r3, #1
 8003720:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d10d      	bne.n	8003744 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	4824      	ldr	r0, [pc, #144]	; (80037bc <HAL_RCC_GetSysClockFreq+0x100>)
 800372c:	f7fc fcfc 	bl	8000128 <__udivsi3>
 8003730:	0003      	movs	r3, r0
 8003732:	0019      	movs	r1, r3
 8003734:	4b1f      	ldr	r3, [pc, #124]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	0a1b      	lsrs	r3, r3, #8
 800373a:	227f      	movs	r2, #127	; 0x7f
 800373c:	4013      	ands	r3, r2
 800373e:	434b      	muls	r3, r1
 8003740:	617b      	str	r3, [r7, #20]
        break;
 8003742:	e00d      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003744:	68b9      	ldr	r1, [r7, #8]
 8003746:	481c      	ldr	r0, [pc, #112]	; (80037b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003748:	f7fc fcee 	bl	8000128 <__udivsi3>
 800374c:	0003      	movs	r3, r0
 800374e:	0019      	movs	r1, r3
 8003750:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	0a1b      	lsrs	r3, r3, #8
 8003756:	227f      	movs	r2, #127	; 0x7f
 8003758:	4013      	ands	r3, r2
 800375a:	434b      	muls	r3, r1
 800375c:	617b      	str	r3, [r7, #20]
        break;
 800375e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003760:	4b14      	ldr	r3, [pc, #80]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	0f5b      	lsrs	r3, r3, #29
 8003766:	2207      	movs	r2, #7
 8003768:	4013      	ands	r3, r2
 800376a:	3301      	adds	r3, #1
 800376c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	6978      	ldr	r0, [r7, #20]
 8003772:	f7fc fcd9 	bl	8000128 <__udivsi3>
 8003776:	0003      	movs	r3, r0
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e015      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800377c:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2238      	movs	r2, #56	; 0x38
 8003782:	4013      	ands	r3, r2
 8003784:	2b20      	cmp	r3, #32
 8003786:	d103      	bne.n	8003790 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003788:	2380      	movs	r3, #128	; 0x80
 800378a:	021b      	lsls	r3, r3, #8
 800378c:	613b      	str	r3, [r7, #16]
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2238      	movs	r2, #56	; 0x38
 8003796:	4013      	ands	r3, r2
 8003798:	2b18      	cmp	r3, #24
 800379a:	d103      	bne.n	80037a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800379c:	23fa      	movs	r3, #250	; 0xfa
 800379e:	01db      	lsls	r3, r3, #7
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e001      	b.n	80037a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80037a8:	693b      	ldr	r3, [r7, #16]
}
 80037aa:	0018      	movs	r0, r3
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b006      	add	sp, #24
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	40021000 	.word	0x40021000
 80037b8:	00f42400 	.word	0x00f42400
 80037bc:	007a1200 	.word	0x007a1200

080037c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80037c6:	681b      	ldr	r3, [r3, #0]
}
 80037c8:	0018      	movs	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			; (mov r8, r8)
 80037d0:	20000008 	.word	0x20000008

080037d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80037d8:	f7ff fff2 	bl	80037c0 <HAL_RCC_GetHCLKFreq>
 80037dc:	0004      	movs	r4, r0
 80037de:	f7ff fb39 	bl	8002e54 <LL_RCC_GetAPB1Prescaler>
 80037e2:	0003      	movs	r3, r0
 80037e4:	0b1a      	lsrs	r2, r3, #12
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80037e8:	0092      	lsls	r2, r2, #2
 80037ea:	58d3      	ldr	r3, [r2, r3]
 80037ec:	221f      	movs	r2, #31
 80037ee:	4013      	ands	r3, r2
 80037f0:	40dc      	lsrs	r4, r3
 80037f2:	0023      	movs	r3, r4
}
 80037f4:	0018      	movs	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bdb0      	pop	{r4, r5, r7, pc}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	08009e74 	.word	0x08009e74

08003800 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003808:	2313      	movs	r3, #19
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003810:	2312      	movs	r3, #18
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	4013      	ands	r3, r2
 8003822:	d100      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003824:	e0a4      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2311      	movs	r3, #17
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4ba5      	ldr	r3, [pc, #660]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	055b      	lsls	r3, r3, #21
 8003836:	4013      	ands	r3, r2
 8003838:	d111      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	4ba2      	ldr	r3, [pc, #648]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800383c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800383e:	4ba1      	ldr	r3, [pc, #644]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	0549      	lsls	r1, r1, #21
 8003844:	430a      	orrs	r2, r1
 8003846:	63da      	str	r2, [r3, #60]	; 0x3c
 8003848:	4b9e      	ldr	r3, [pc, #632]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800384a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800384c:	2380      	movs	r3, #128	; 0x80
 800384e:	055b      	lsls	r3, r3, #21
 8003850:	4013      	ands	r3, r2
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	2311      	movs	r3, #17
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800385e:	4b9a      	ldr	r3, [pc, #616]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	4b99      	ldr	r3, [pc, #612]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003864:	2180      	movs	r1, #128	; 0x80
 8003866:	0049      	lsls	r1, r1, #1
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800386c:	f7fe fd08 	bl	8002280 <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003874:	e00b      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fe fd03 	bl	8002280 <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d904      	bls.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8003884:	2313      	movs	r3, #19
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2203      	movs	r2, #3
 800388a:	701a      	strb	r2, [r3, #0]
        break;
 800388c:	e005      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800388e:	4b8e      	ldr	r3, [pc, #568]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4013      	ands	r3, r2
 8003898:	d0ed      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800389a:	2313      	movs	r3, #19
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d154      	bne.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038a4:	4b87      	ldr	r3, [pc, #540]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038a8:	23c0      	movs	r3, #192	; 0xc0
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4013      	ands	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d019      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xea>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d014      	beq.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c0:	4b80      	ldr	r3, [pc, #512]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	4a81      	ldr	r2, [pc, #516]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ca:	4b7e      	ldr	r3, [pc, #504]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038ce:	4b7d      	ldr	r3, [pc, #500]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038d0:	2180      	movs	r1, #128	; 0x80
 80038d2:	0249      	lsls	r1, r1, #9
 80038d4:	430a      	orrs	r2, r1
 80038d6:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038d8:	4b7a      	ldr	r3, [pc, #488]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80038dc:	4b79      	ldr	r3, [pc, #484]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038de:	497c      	ldr	r1, [pc, #496]	; (8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038e4:	4b77      	ldr	r3, [pc, #476]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	2201      	movs	r2, #1
 80038ee:	4013      	ands	r3, r2
 80038f0:	d016      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fe fcc5 	bl	8002280 <HAL_GetTick>
 80038f6:	0003      	movs	r3, r0
 80038f8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038fa:	e00c      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038fc:	f7fe fcc0 	bl	8002280 <HAL_GetTick>
 8003900:	0002      	movs	r2, r0
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	4a73      	ldr	r2, [pc, #460]	; (8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d904      	bls.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 800390c:	2313      	movs	r3, #19
 800390e:	18fb      	adds	r3, r7, r3
 8003910:	2203      	movs	r2, #3
 8003912:	701a      	strb	r2, [r3, #0]
            break;
 8003914:	e004      	b.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003916:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	2202      	movs	r2, #2
 800391c:	4013      	ands	r3, r2
 800391e:	d0ed      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8003920:	2313      	movs	r3, #19
 8003922:	18fb      	adds	r3, r7, r3
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800392a:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	4a67      	ldr	r2, [pc, #412]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003938:	4b62      	ldr	r3, [pc, #392]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800393a:	430a      	orrs	r2, r1
 800393c:	65da      	str	r2, [r3, #92]	; 0x5c
 800393e:	e00c      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003940:	2312      	movs	r3, #18
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	2213      	movs	r2, #19
 8003946:	18ba      	adds	r2, r7, r2
 8003948:	7812      	ldrb	r2, [r2, #0]
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e005      	b.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394e:	2312      	movs	r3, #18
 8003950:	18fb      	adds	r3, r7, r3
 8003952:	2213      	movs	r2, #19
 8003954:	18ba      	adds	r2, r7, r2
 8003956:	7812      	ldrb	r2, [r2, #0]
 8003958:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800395a:	2311      	movs	r3, #17
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d105      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003964:	4b57      	ldr	r3, [pc, #348]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003966:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003968:	4b56      	ldr	r3, [pc, #344]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800396a:	495b      	ldr	r1, [pc, #364]	; (8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800396c:	400a      	ands	r2, r1
 800396e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2201      	movs	r2, #1
 8003976:	4013      	ands	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800397a:	4b52      	ldr	r3, [pc, #328]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800397c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397e:	2203      	movs	r2, #3
 8003980:	4393      	bics	r3, r2
 8003982:	0019      	movs	r1, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4b4e      	ldr	r3, [pc, #312]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800398a:	430a      	orrs	r2, r1
 800398c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2220      	movs	r2, #32
 8003994:	4013      	ands	r3, r2
 8003996:	d009      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003998:	4b4a      	ldr	r3, [pc, #296]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	4a4f      	ldr	r2, [pc, #316]	; (8003adc <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	2380      	movs	r3, #128	; 0x80
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4013      	ands	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039b8:	4b42      	ldr	r3, [pc, #264]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039bc:	4a48      	ldr	r2, [pc, #288]	; (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80039be:	4013      	ands	r3, r2
 80039c0:	0019      	movs	r1, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039c8:	430a      	orrs	r2, r1
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	4013      	ands	r3, r2
 80039d6:	d009      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039d8:	4b3a      	ldr	r3, [pc, #232]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039dc:	4a41      	ldr	r2, [pc, #260]	; (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80039de:	4013      	ands	r3, r2
 80039e0:	0019      	movs	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039e8:	430a      	orrs	r2, r1
 80039ea:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2240      	movs	r2, #64	; 0x40
 80039f2:	4013      	ands	r3, r2
 80039f4:	d009      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039f6:	4b33      	ldr	r3, [pc, #204]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	4a3b      	ldr	r2, [pc, #236]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	0019      	movs	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	4b2f      	ldr	r3, [pc, #188]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a06:	430a      	orrs	r2, r1
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	2380      	movs	r3, #128	; 0x80
 8003a10:	01db      	lsls	r3, r3, #7
 8003a12:	4013      	ands	r3, r2
 8003a14:	d015      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	0899      	lsrs	r1, r3, #2
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	4b28      	ldr	r3, [pc, #160]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a24:	430a      	orrs	r2, r1
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	2380      	movs	r3, #128	; 0x80
 8003a2e:	05db      	lsls	r3, r3, #23
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003a34:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4b22      	ldr	r3, [pc, #136]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	0249      	lsls	r1, r1, #9
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	2380      	movs	r3, #128	; 0x80
 8003a48:	039b      	lsls	r3, r3, #14
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d016      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a52:	4a26      	ldr	r2, [pc, #152]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a1a      	ldr	r2, [r3, #32]
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	2380      	movs	r3, #128	; 0x80
 8003a68:	03db      	lsls	r3, r3, #15
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003a6e:	4b15      	ldr	r3, [pc, #84]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a70:	68da      	ldr	r2, [r3, #12]
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a74:	2180      	movs	r1, #128	; 0x80
 8003a76:	0449      	lsls	r1, r1, #17
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	2380      	movs	r3, #128	; 0x80
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	4013      	ands	r3, r2
 8003a86:	d016      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003a88:	4b0e      	ldr	r3, [pc, #56]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8c:	4a18      	ldr	r2, [pc, #96]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	691a      	ldr	r2, [r3, #16]
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691a      	ldr	r2, [r3, #16]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	01db      	lsls	r3, r3, #7
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d106      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003aae:	2180      	movs	r1, #128	; 0x80
 8003ab0:	0249      	lsls	r1, r1, #9
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8003ab6:	2312      	movs	r3, #18
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	781b      	ldrb	r3, [r3, #0]
}
 8003abc:	0018      	movs	r0, r3
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	b006      	add	sp, #24
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40021000 	.word	0x40021000
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	fffffcff 	.word	0xfffffcff
 8003ad0:	fffeffff 	.word	0xfffeffff
 8003ad4:	00001388 	.word	0x00001388
 8003ad8:	efffffff 	.word	0xefffffff
 8003adc:	fffff3ff 	.word	0xfffff3ff
 8003ae0:	fff3ffff 	.word	0xfff3ffff
 8003ae4:	ffcfffff 	.word	0xffcfffff
 8003ae8:	ffffcfff 	.word	0xffffcfff
 8003aec:	ffbfffff 	.word	0xffbfffff
 8003af0:	ffff3fff 	.word	0xffff3fff

08003af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e046      	b.n	8003b94 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	589b      	ldr	r3, [r3, r2]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d107      	bne.n	8003b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	227c      	movs	r2, #124	; 0x7c
 8003b14:	2100      	movs	r1, #0
 8003b16:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	0018      	movs	r0, r3
 8003b1c:	f002 fe64 	bl	80067e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2280      	movs	r2, #128	; 0x80
 8003b24:	2124      	movs	r1, #36	; 0x24
 8003b26:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2101      	movs	r1, #1
 8003b34:	438a      	bics	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 fb80 	bl	8004240 <UART_SetConfig>
 8003b40:	0003      	movs	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e024      	b.n	8003b94 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d003      	beq.n	8003b5a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	0018      	movs	r0, r3
 8003b56:	f001 fc21 	bl	800539c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	490d      	ldr	r1, [pc, #52]	; (8003b9c <HAL_UART_Init+0xa8>)
 8003b66:	400a      	ands	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	212a      	movs	r1, #42	; 0x2a
 8003b76:	438a      	bics	r2, r1
 8003b78:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2101      	movs	r1, #1
 8003b86:	430a      	orrs	r2, r1
 8003b88:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f001 fcb9 	bl	8005504 <UART_CheckIdleState>
 8003b92:	0003      	movs	r3, r0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b002      	add	sp, #8
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	ffffb7ff 	.word	0xffffb7ff

08003ba0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02c      	b.n	8003c0c <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2280      	movs	r2, #128	; 0x80
 8003bb6:	2124      	movs	r1, #36	; 0x24
 8003bb8:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	438a      	bics	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f002 fe53 	bl	8006890 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2288      	movs	r2, #136	; 0x88
 8003bee:	2100      	movs	r1, #0
 8003bf0:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	2100      	movs	r1, #0
 8003bf8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2284      	movs	r2, #132	; 0x84
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	227c      	movs	r2, #124	; 0x7c
 8003c06:	2100      	movs	r1, #0
 8003c08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	0018      	movs	r0, r3
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	b002      	add	sp, #8
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08a      	sub	sp, #40	; 0x28
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	603b      	str	r3, [r7, #0]
 8003c20:	1dbb      	adds	r3, r7, #6
 8003c22:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	589b      	ldr	r3, [r3, r2]
 8003c2a:	2b20      	cmp	r3, #32
 8003c2c:	d000      	beq.n	8003c30 <HAL_UART_Transmit+0x1c>
 8003c2e:	e097      	b.n	8003d60 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_UART_Transmit+0x2a>
 8003c36:	1dbb      	adds	r3, r7, #6
 8003c38:	881b      	ldrh	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e08f      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	015b      	lsls	r3, r3, #5
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d109      	bne.n	8003c62 <HAL_UART_Transmit+0x4e>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d105      	bne.n	8003c62 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d001      	beq.n	8003c62 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07f      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	227c      	movs	r2, #124	; 0x7c
 8003c66:	5c9b      	ldrb	r3, [r3, r2]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d101      	bne.n	8003c70 <HAL_UART_Transmit+0x5c>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e078      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	227c      	movs	r2, #124	; 0x7c
 8003c74:	2101      	movs	r1, #1
 8003c76:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2288      	movs	r2, #136	; 0x88
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	2121      	movs	r1, #33	; 0x21
 8003c86:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003c88:	f7fe fafa 	bl	8002280 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1dba      	adds	r2, r7, #6
 8003c94:	2154      	movs	r1, #84	; 0x54
 8003c96:	8812      	ldrh	r2, [r2, #0]
 8003c98:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1dba      	adds	r2, r7, #6
 8003c9e:	2156      	movs	r1, #86	; 0x56
 8003ca0:	8812      	ldrh	r2, [r2, #0]
 8003ca2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	2380      	movs	r3, #128	; 0x80
 8003caa:	015b      	lsls	r3, r3, #5
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d108      	bne.n	8003cc2 <HAL_UART_Transmit+0xae>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d104      	bne.n	8003cc2 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	61bb      	str	r3, [r7, #24]
 8003cc0:	e003      	b.n	8003cca <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cca:	e02c      	b.n	8003d26 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	0013      	movs	r3, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2180      	movs	r1, #128	; 0x80
 8003cda:	f001 fc5d 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8003cde:	1e03      	subs	r3, r0, #0
 8003ce0:	d001      	beq.n	8003ce6 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e03d      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	881b      	ldrh	r3, [r3, #0]
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	05d2      	lsls	r2, r2, #23
 8003cf8:	0dd2      	lsrs	r2, r2, #23
 8003cfa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	3302      	adds	r3, #2
 8003d00:	61bb      	str	r3, [r7, #24]
 8003d02:	e007      	b.n	8003d14 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2256      	movs	r2, #86	; 0x56
 8003d18:	5a9b      	ldrh	r3, [r3, r2]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	b299      	uxth	r1, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2256      	movs	r2, #86	; 0x56
 8003d24:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2256      	movs	r2, #86	; 0x56
 8003d2a:	5a9b      	ldrh	r3, [r3, r2]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d1cc      	bne.n	8003ccc <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	9300      	str	r3, [sp, #0]
 8003d3a:	0013      	movs	r3, r2
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	2140      	movs	r1, #64	; 0x40
 8003d40:	f001 fc2a 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8003d44:	1e03      	subs	r3, r0, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e00a      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	2120      	movs	r1, #32
 8003d52:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	227c      	movs	r2, #124	; 0x7c
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b008      	add	sp, #32
 8003d68:	bd80      	pop	{r7, pc}
	...

08003d6c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	1dbb      	adds	r3, r7, #6
 8003d78:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2284      	movs	r2, #132	; 0x84
 8003d7e:	589b      	ldr	r3, [r3, r2]
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d000      	beq.n	8003d86 <HAL_UART_Receive_IT+0x1a>
 8003d84:	e0d6      	b.n	8003f34 <HAL_UART_Receive_IT+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_UART_Receive_IT+0x28>
 8003d8c:	1dbb      	adds	r3, r7, #6
 8003d8e:	881b      	ldrh	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d101      	bne.n	8003d98 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0ce      	b.n	8003f36 <HAL_UART_Receive_IT+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	015b      	lsls	r3, r3, #5
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d109      	bne.n	8003db8 <HAL_UART_Receive_IT+0x4c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <HAL_UART_Receive_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2201      	movs	r2, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Receive_IT+0x4c>
      {
        return  HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0be      	b.n	8003f36 <HAL_UART_Receive_IT+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	227c      	movs	r2, #124	; 0x7c
 8003dbc:	5c9b      	ldrb	r3, [r3, r2]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <HAL_UART_Receive_IT+0x5a>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0b7      	b.n	8003f36 <HAL_UART_Receive_IT+0x1ca>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	227c      	movs	r2, #124	; 0x7c
 8003dca:	2101      	movs	r1, #1
 8003dcc:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	1dba      	adds	r2, r7, #6
 8003dd8:	215c      	movs	r1, #92	; 0x5c
 8003dda:	8812      	ldrh	r2, [r2, #0]
 8003ddc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1dba      	adds	r2, r7, #6
 8003de2:	215e      	movs	r1, #94	; 0x5e
 8003de4:	8812      	ldrh	r2, [r2, #0]
 8003de6:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	2380      	movs	r3, #128	; 0x80
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10d      	bne.n	8003e16 <HAL_UART_Receive_IT+0xaa>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d104      	bne.n	8003e0c <HAL_UART_Receive_IT+0xa0>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2260      	movs	r2, #96	; 0x60
 8003e06:	494e      	ldr	r1, [pc, #312]	; (8003f40 <HAL_UART_Receive_IT+0x1d4>)
 8003e08:	5299      	strh	r1, [r3, r2]
 8003e0a:	e02e      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2260      	movs	r2, #96	; 0x60
 8003e10:	21ff      	movs	r1, #255	; 0xff
 8003e12:	5299      	strh	r1, [r3, r2]
 8003e14:	e029      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10d      	bne.n	8003e3a <HAL_UART_Receive_IT+0xce>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d104      	bne.n	8003e30 <HAL_UART_Receive_IT+0xc4>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2260      	movs	r2, #96	; 0x60
 8003e2a:	21ff      	movs	r1, #255	; 0xff
 8003e2c:	5299      	strh	r1, [r3, r2]
 8003e2e:	e01c      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2260      	movs	r2, #96	; 0x60
 8003e34:	217f      	movs	r1, #127	; 0x7f
 8003e36:	5299      	strh	r1, [r3, r2]
 8003e38:	e017      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	055b      	lsls	r3, r3, #21
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d10d      	bne.n	8003e62 <HAL_UART_Receive_IT+0xf6>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_Receive_IT+0xec>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2260      	movs	r2, #96	; 0x60
 8003e52:	217f      	movs	r1, #127	; 0x7f
 8003e54:	5299      	strh	r1, [r3, r2]
 8003e56:	e008      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2260      	movs	r2, #96	; 0x60
 8003e5c:	213f      	movs	r1, #63	; 0x3f
 8003e5e:	5299      	strh	r1, [r3, r2]
 8003e60:	e003      	b.n	8003e6a <HAL_UART_Receive_IT+0xfe>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2260      	movs	r2, #96	; 0x60
 8003e66:	2100      	movs	r1, #0
 8003e68:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2288      	movs	r2, #136	; 0x88
 8003e6e:	2100      	movs	r1, #0
 8003e70:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2284      	movs	r2, #132	; 0x84
 8003e76:	2122      	movs	r1, #34	; 0x22
 8003e78:	5099      	str	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	430a      	orrs	r2, r1
 8003e88:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003e8e:	2380      	movs	r3, #128	; 0x80
 8003e90:	059b      	lsls	r3, r3, #22
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d12e      	bne.n	8003ef4 <HAL_UART_Receive_IT+0x188>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2268      	movs	r2, #104	; 0x68
 8003e9a:	5a9b      	ldrh	r3, [r3, r2]
 8003e9c:	1dba      	adds	r2, r7, #6
 8003e9e:	8812      	ldrh	r2, [r2, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d327      	bcc.n	8003ef4 <HAL_UART_Receive_IT+0x188>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <HAL_UART_Receive_IT+0x154>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <HAL_UART_Receive_IT+0x154>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <HAL_UART_Receive_IT+0x1d8>)
 8003ebc:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ebe:	e002      	b.n	8003ec6 <HAL_UART_Receive_IT+0x15a>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <HAL_UART_Receive_IT+0x1dc>)
 8003ec4:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	227c      	movs	r2, #124	; 0x7c
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2180      	movs	r1, #128	; 0x80
 8003eda:	0049      	lsls	r1, r1, #1
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2180      	movs	r1, #128	; 0x80
 8003eec:	0549      	lsls	r1, r1, #21
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	e01d      	b.n	8003f30 <HAL_UART_Receive_IT+0x1c4>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	2380      	movs	r3, #128	; 0x80
 8003efa:	015b      	lsls	r3, r3, #5
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d107      	bne.n	8003f10 <HAL_UART_Receive_IT+0x1a4>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d103      	bne.n	8003f10 <HAL_UART_Receive_IT+0x1a4>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a10      	ldr	r2, [pc, #64]	; (8003f4c <HAL_UART_Receive_IT+0x1e0>)
 8003f0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f0e:	e002      	b.n	8003f16 <HAL_UART_Receive_IT+0x1aa>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4a0f      	ldr	r2, [pc, #60]	; (8003f50 <HAL_UART_Receive_IT+0x1e4>)
 8003f14:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	227c      	movs	r2, #124	; 0x7c
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2190      	movs	r1, #144	; 0x90
 8003f2a:	0049      	lsls	r1, r1, #1
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	e000      	b.n	8003f36 <HAL_UART_Receive_IT+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8003f34:	2302      	movs	r3, #2
  }
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b004      	add	sp, #16
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	000001ff 	.word	0x000001ff
 8003f44:	08005999 	.word	0x08005999
 8003f48:	0800585d 	.word	0x0800585d
 8003f4c:	0800579d 	.word	0x0800579d
 8003f50:	080056dd 	.word	0x080056dd

08003f54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	220f      	movs	r2, #15
 8003f78:	4013      	ands	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d117      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	2220      	movs	r2, #32
 8003f86:	4013      	ands	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d104      	bne.n	8003f9c <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	055b      	lsls	r3, r3, #21
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d100      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x52>
 8003fa4:	e127      	b.n	80041f6 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	0010      	movs	r0, r2
 8003fae:	4798      	blx	r3
      }
      return;
 8003fb0:	e121      	b.n	80041f6 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d100      	bne.n	8003fba <HAL_UART_IRQHandler+0x66>
 8003fb8:	e0c8      	b.n	800414c <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4a92      	ldr	r2, [pc, #584]	; (8004208 <HAL_UART_IRQHandler+0x2b4>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d105      	bne.n	8003fce <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	2390      	movs	r3, #144	; 0x90
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d100      	bne.n	8003fce <HAL_UART_IRQHandler+0x7a>
 8003fcc:	e0be      	b.n	800414c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d010      	beq.n	8003ff8 <HAL_UART_IRQHandler+0xa4>
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	2380      	movs	r3, #128	; 0x80
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	4013      	ands	r3, r2
 8003fde:	d00b      	beq.n	8003ff8 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2288      	movs	r2, #136	; 0x88
 8003fec:	589b      	ldr	r3, [r3, r2]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	431a      	orrs	r2, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2188      	movs	r1, #136	; 0x88
 8003ff6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d00f      	beq.n	8004020 <HAL_UART_IRQHandler+0xcc>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2201      	movs	r2, #1
 8004004:	4013      	ands	r3, r2
 8004006:	d00b      	beq.n	8004020 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2202      	movs	r2, #2
 800400e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2288      	movs	r2, #136	; 0x88
 8004014:	589b      	ldr	r3, [r3, r2]
 8004016:	2204      	movs	r2, #4
 8004018:	431a      	orrs	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2188      	movs	r1, #136	; 0x88
 800401e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	2204      	movs	r2, #4
 8004024:	4013      	ands	r3, r2
 8004026:	d00f      	beq.n	8004048 <HAL_UART_IRQHandler+0xf4>
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2201      	movs	r2, #1
 800402c:	4013      	ands	r3, r2
 800402e:	d00b      	beq.n	8004048 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2204      	movs	r2, #4
 8004036:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2288      	movs	r2, #136	; 0x88
 800403c:	589b      	ldr	r3, [r3, r2]
 800403e:	2202      	movs	r2, #2
 8004040:	431a      	orrs	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2188      	movs	r1, #136	; 0x88
 8004046:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2208      	movs	r2, #8
 800404c:	4013      	ands	r3, r2
 800404e:	d013      	beq.n	8004078 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004050:	69bb      	ldr	r3, [r7, #24]
 8004052:	2220      	movs	r2, #32
 8004054:	4013      	ands	r3, r2
 8004056:	d103      	bne.n	8004060 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	4a6b      	ldr	r2, [pc, #428]	; (8004208 <HAL_UART_IRQHandler+0x2b4>)
 800405c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800405e:	d00b      	beq.n	8004078 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2208      	movs	r2, #8
 8004066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2288      	movs	r2, #136	; 0x88
 800406c:	589b      	ldr	r3, [r3, r2]
 800406e:	2208      	movs	r2, #8
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2188      	movs	r1, #136	; 0x88
 8004076:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2288      	movs	r2, #136	; 0x88
 800407c:	589b      	ldr	r3, [r3, r2]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d100      	bne.n	8004084 <HAL_UART_IRQHandler+0x130>
 8004082:	e0ba      	b.n	80041fa <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	2220      	movs	r2, #32
 8004088:	4013      	ands	r3, r2
 800408a:	d011      	beq.n	80040b0 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	2220      	movs	r2, #32
 8004090:	4013      	ands	r3, r2
 8004092:	d104      	bne.n	800409e <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	055b      	lsls	r3, r3, #21
 800409a:	4013      	ands	r3, r2
 800409c:	d008      	beq.n	80040b0 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d004      	beq.n	80040b0 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	0010      	movs	r0, r2
 80040ae:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2288      	movs	r2, #136	; 0x88
 80040b4:	589b      	ldr	r3, [r3, r2]
 80040b6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	2240      	movs	r2, #64	; 0x40
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b40      	cmp	r3, #64	; 0x40
 80040c4:	d003      	beq.n	80040ce <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2208      	movs	r2, #8
 80040ca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040cc:	d033      	beq.n	8004136 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f001 faad 	bl	8005630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2240      	movs	r2, #64	; 0x40
 80040de:	4013      	ands	r3, r2
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d123      	bne.n	800412c <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689a      	ldr	r2, [r3, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2140      	movs	r1, #64	; 0x40
 80040f0:	438a      	bics	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d012      	beq.n	8004122 <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_UART_IRQHandler+0x2b8>)
 8004102:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004108:	0018      	movs	r0, r3
 800410a:	f7fe f9f3 	bl	80024f4 <HAL_DMA_Abort_IT>
 800410e:	1e03      	subs	r3, r0, #0
 8004110:	d01a      	beq.n	8004148 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004116:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411c:	0018      	movs	r0, r3
 800411e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e012      	b.n	8004148 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0018      	movs	r0, r3
 8004126:	f000 f883 	bl	8004230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800412a:	e00d      	b.n	8004148 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	0018      	movs	r0, r3
 8004130:	f000 f87e 	bl	8004230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e008      	b.n	8004148 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0018      	movs	r0, r3
 800413a:	f000 f879 	bl	8004230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2288      	movs	r2, #136	; 0x88
 8004142:	2100      	movs	r1, #0
 8004144:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004146:	e058      	b.n	80041fa <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	46c0      	nop			; (mov r8, r8)
    return;
 800414a:	e056      	b.n	80041fa <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	2380      	movs	r3, #128	; 0x80
 8004150:	035b      	lsls	r3, r3, #13
 8004152:	4013      	ands	r3, r2
 8004154:	d00e      	beq.n	8004174 <HAL_UART_IRQHandler+0x220>
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	03db      	lsls	r3, r3, #15
 800415c:	4013      	ands	r3, r2
 800415e:	d009      	beq.n	8004174 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2280      	movs	r2, #128	; 0x80
 8004166:	0352      	lsls	r2, r2, #13
 8004168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	0018      	movs	r0, r3
 800416e:	f001 fcb1 	bl	8005ad4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004172:	e045      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	2280      	movs	r2, #128	; 0x80
 8004178:	4013      	ands	r3, r2
 800417a:	d012      	beq.n	80041a2 <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	4013      	ands	r3, r2
 8004182:	d104      	bne.n	800418e <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	041b      	lsls	r3, r3, #16
 800418a:	4013      	ands	r3, r2
 800418c:	d009      	beq.n	80041a2 <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	2b00      	cmp	r3, #0
 8004194:	d033      	beq.n	80041fe <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	0010      	movs	r0, r2
 800419e:	4798      	blx	r3
    }
    return;
 80041a0:	e02d      	b.n	80041fe <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	4013      	ands	r3, r2
 80041a8:	d008      	beq.n	80041bc <HAL_UART_IRQHandler+0x268>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	4013      	ands	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	0018      	movs	r0, r3
 80041b6:	f001 fa76 	bl	80056a6 <UART_EndTransmit_IT>
    return;
 80041ba:	e021      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	2380      	movs	r3, #128	; 0x80
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	4013      	ands	r3, r2
 80041c4:	d009      	beq.n	80041da <HAL_UART_IRQHandler+0x286>
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	4013      	ands	r3, r2
 80041ce:	d004      	beq.n	80041da <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0018      	movs	r0, r3
 80041d4:	f001 fc8e 	bl	8005af4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041d8:	e012      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041da:	69fa      	ldr	r2, [r7, #28]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	045b      	lsls	r3, r3, #17
 80041e0:	4013      	ands	r3, r2
 80041e2:	d00d      	beq.n	8004200 <HAL_UART_IRQHandler+0x2ac>
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	da0a      	bge.n	8004200 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	0018      	movs	r0, r3
 80041ee:	f001 fc79 	bl	8005ae4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	e004      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
      return;
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	e002      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
    return;
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	e000      	b.n	8004200 <HAL_UART_IRQHandler+0x2ac>
    return;
 80041fe:	46c0      	nop			; (mov r8, r8)
  }
}
 8004200:	46bd      	mov	sp, r7
 8004202:	b008      	add	sp, #32
 8004204:	bd80      	pop	{r7, pc}
 8004206:	46c0      	nop			; (mov r8, r8)
 8004208:	10000001 	.word	0x10000001
 800420c:	08005679 	.word	0x08005679

08004210 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004218:	46c0      	nop			; (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	b002      	add	sp, #8
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004228:	46c0      	nop			; (mov r8, r8)
 800422a:	46bd      	mov	sp, r7
 800422c:	b002      	add	sp, #8
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b002      	add	sp, #8
 800423e:	bd80      	pop	{r7, pc}

08004240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004242:	b0a1      	sub	sp, #132	; 0x84
 8004244:	af00      	add	r7, sp, #0
 8004246:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004248:	2300      	movs	r3, #0
 800424a:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 800424c:	231b      	movs	r3, #27
 800424e:	2258      	movs	r2, #88	; 0x58
 8004250:	18ba      	adds	r2, r7, r2
 8004252:	18d2      	adds	r2, r2, r3
 8004254:	2300      	movs	r3, #0
 8004256:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004258:	2300      	movs	r3, #0
 800425a:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800425c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	431a      	orrs	r2, r3
 8004266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	431a      	orrs	r2, r3
 800426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	4313      	orrs	r3, r2
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004276:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800427a:	4313      	orrs	r3, r2
 800427c:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800427e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	4bbe      	ldr	r3, [pc, #760]	; (8004580 <UART_SetConfig+0x340>)
 8004286:	401a      	ands	r2, r3
 8004288:	0011      	movs	r1, r2
 800428a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685a      	ldr	r2, [r3, #4]
 800429a:	4bba      	ldr	r3, [pc, #744]	; (8004584 <UART_SetConfig+0x344>)
 800429c:	401a      	ands	r2, r3
 800429e:	0010      	movs	r0, r2
 80042a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	0003      	movs	r3, r0
 80042aa:	430b      	orrs	r3, r1
 80042ac:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4bb3      	ldr	r3, [pc, #716]	; (8004588 <UART_SetConfig+0x348>)
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d004      	beq.n	80042c8 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042c4:	4313      	orrs	r3, r2
 80042c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	4baf      	ldr	r3, [pc, #700]	; (800458c <UART_SetConfig+0x34c>)
 80042d0:	401a      	ands	r2, r3
 80042d2:	0011      	movs	r1, r2
 80042d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042da:	430b      	orrs	r3, r1
 80042dc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e4:	230f      	movs	r3, #15
 80042e6:	439a      	bics	r2, r3
 80042e8:	0010      	movs	r0, r2
 80042ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80042ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	0003      	movs	r3, r0
 80042f4:	430b      	orrs	r3, r1
 80042f6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4ba4      	ldr	r3, [pc, #656]	; (8004590 <UART_SetConfig+0x350>)
 80042fe:	429a      	cmp	r2, r3
 8004300:	d12f      	bne.n	8004362 <UART_SetConfig+0x122>
 8004302:	4ba4      	ldr	r3, [pc, #656]	; (8004594 <UART_SetConfig+0x354>)
 8004304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004306:	2303      	movs	r3, #3
 8004308:	4013      	ands	r3, r2
 800430a:	2b01      	cmp	r3, #1
 800430c:	d013      	beq.n	8004336 <UART_SetConfig+0xf6>
 800430e:	d304      	bcc.n	800431a <UART_SetConfig+0xda>
 8004310:	2b02      	cmp	r3, #2
 8004312:	d009      	beq.n	8004328 <UART_SetConfig+0xe8>
 8004314:	2b03      	cmp	r3, #3
 8004316:	d015      	beq.n	8004344 <UART_SetConfig+0x104>
 8004318:	e01b      	b.n	8004352 <UART_SetConfig+0x112>
 800431a:	2323      	movs	r3, #35	; 0x23
 800431c:	2258      	movs	r2, #88	; 0x58
 800431e:	18ba      	adds	r2, r7, r2
 8004320:	18d2      	adds	r2, r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	7013      	strb	r3, [r2, #0]
 8004326:	e070      	b.n	800440a <UART_SetConfig+0x1ca>
 8004328:	2323      	movs	r3, #35	; 0x23
 800432a:	2258      	movs	r2, #88	; 0x58
 800432c:	18ba      	adds	r2, r7, r2
 800432e:	18d2      	adds	r2, r2, r3
 8004330:	2302      	movs	r3, #2
 8004332:	7013      	strb	r3, [r2, #0]
 8004334:	e069      	b.n	800440a <UART_SetConfig+0x1ca>
 8004336:	2323      	movs	r3, #35	; 0x23
 8004338:	2258      	movs	r2, #88	; 0x58
 800433a:	18ba      	adds	r2, r7, r2
 800433c:	18d2      	adds	r2, r2, r3
 800433e:	2304      	movs	r3, #4
 8004340:	7013      	strb	r3, [r2, #0]
 8004342:	e062      	b.n	800440a <UART_SetConfig+0x1ca>
 8004344:	2323      	movs	r3, #35	; 0x23
 8004346:	2258      	movs	r2, #88	; 0x58
 8004348:	18ba      	adds	r2, r7, r2
 800434a:	18d2      	adds	r2, r2, r3
 800434c:	2308      	movs	r3, #8
 800434e:	7013      	strb	r3, [r2, #0]
 8004350:	e05b      	b.n	800440a <UART_SetConfig+0x1ca>
 8004352:	2323      	movs	r3, #35	; 0x23
 8004354:	2258      	movs	r2, #88	; 0x58
 8004356:	18ba      	adds	r2, r7, r2
 8004358:	18d2      	adds	r2, r2, r3
 800435a:	2310      	movs	r3, #16
 800435c:	7013      	strb	r3, [r2, #0]
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	e053      	b.n	800440a <UART_SetConfig+0x1ca>
 8004362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b8c      	ldr	r3, [pc, #560]	; (8004598 <UART_SetConfig+0x358>)
 8004368:	429a      	cmp	r2, r3
 800436a:	d106      	bne.n	800437a <UART_SetConfig+0x13a>
 800436c:	2323      	movs	r3, #35	; 0x23
 800436e:	2258      	movs	r2, #88	; 0x58
 8004370:	18ba      	adds	r2, r7, r2
 8004372:	18d2      	adds	r2, r2, r3
 8004374:	2300      	movs	r3, #0
 8004376:	7013      	strb	r3, [r2, #0]
 8004378:	e047      	b.n	800440a <UART_SetConfig+0x1ca>
 800437a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b82      	ldr	r3, [pc, #520]	; (8004588 <UART_SetConfig+0x348>)
 8004380:	429a      	cmp	r2, r3
 8004382:	d13c      	bne.n	80043fe <UART_SetConfig+0x1be>
 8004384:	4b83      	ldr	r3, [pc, #524]	; (8004594 <UART_SetConfig+0x354>)
 8004386:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004388:	23c0      	movs	r3, #192	; 0xc0
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	401a      	ands	r2, r3
 800438e:	2380      	movs	r3, #128	; 0x80
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	429a      	cmp	r2, r3
 8004394:	d01d      	beq.n	80043d2 <UART_SetConfig+0x192>
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	429a      	cmp	r2, r3
 800439c:	d802      	bhi.n	80043a4 <UART_SetConfig+0x164>
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d009      	beq.n	80043b6 <UART_SetConfig+0x176>
 80043a2:	e024      	b.n	80043ee <UART_SetConfig+0x1ae>
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d00b      	beq.n	80043c4 <UART_SetConfig+0x184>
 80043ac:	23c0      	movs	r3, #192	; 0xc0
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d015      	beq.n	80043e0 <UART_SetConfig+0x1a0>
 80043b4:	e01b      	b.n	80043ee <UART_SetConfig+0x1ae>
 80043b6:	2323      	movs	r3, #35	; 0x23
 80043b8:	2258      	movs	r2, #88	; 0x58
 80043ba:	18ba      	adds	r2, r7, r2
 80043bc:	18d2      	adds	r2, r2, r3
 80043be:	2300      	movs	r3, #0
 80043c0:	7013      	strb	r3, [r2, #0]
 80043c2:	e022      	b.n	800440a <UART_SetConfig+0x1ca>
 80043c4:	2323      	movs	r3, #35	; 0x23
 80043c6:	2258      	movs	r2, #88	; 0x58
 80043c8:	18ba      	adds	r2, r7, r2
 80043ca:	18d2      	adds	r2, r2, r3
 80043cc:	2302      	movs	r3, #2
 80043ce:	7013      	strb	r3, [r2, #0]
 80043d0:	e01b      	b.n	800440a <UART_SetConfig+0x1ca>
 80043d2:	2323      	movs	r3, #35	; 0x23
 80043d4:	2258      	movs	r2, #88	; 0x58
 80043d6:	18ba      	adds	r2, r7, r2
 80043d8:	18d2      	adds	r2, r2, r3
 80043da:	2304      	movs	r3, #4
 80043dc:	7013      	strb	r3, [r2, #0]
 80043de:	e014      	b.n	800440a <UART_SetConfig+0x1ca>
 80043e0:	2323      	movs	r3, #35	; 0x23
 80043e2:	2258      	movs	r2, #88	; 0x58
 80043e4:	18ba      	adds	r2, r7, r2
 80043e6:	18d2      	adds	r2, r2, r3
 80043e8:	2308      	movs	r3, #8
 80043ea:	7013      	strb	r3, [r2, #0]
 80043ec:	e00d      	b.n	800440a <UART_SetConfig+0x1ca>
 80043ee:	2323      	movs	r3, #35	; 0x23
 80043f0:	2258      	movs	r2, #88	; 0x58
 80043f2:	18ba      	adds	r2, r7, r2
 80043f4:	18d2      	adds	r2, r2, r3
 80043f6:	2310      	movs	r3, #16
 80043f8:	7013      	strb	r3, [r2, #0]
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	e005      	b.n	800440a <UART_SetConfig+0x1ca>
 80043fe:	2323      	movs	r3, #35	; 0x23
 8004400:	2258      	movs	r2, #88	; 0x58
 8004402:	18ba      	adds	r2, r7, r2
 8004404:	18d2      	adds	r2, r2, r3
 8004406:	2310      	movs	r3, #16
 8004408:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800440a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <UART_SetConfig+0x348>)
 8004410:	429a      	cmp	r2, r3
 8004412:	d001      	beq.n	8004418 <UART_SetConfig+0x1d8>
 8004414:	f000 fbe8 	bl	8004be8 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004418:	2323      	movs	r3, #35	; 0x23
 800441a:	2258      	movs	r2, #88	; 0x58
 800441c:	4694      	mov	ip, r2
 800441e:	44bc      	add	ip, r7
 8004420:	4463      	add	r3, ip
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b02      	cmp	r3, #2
 8004426:	d100      	bne.n	800442a <UART_SetConfig+0x1ea>
 8004428:	e05e      	b.n	80044e8 <UART_SetConfig+0x2a8>
 800442a:	dc02      	bgt.n	8004432 <UART_SetConfig+0x1f2>
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <UART_SetConfig+0x200>
 8004430:	e174      	b.n	800471c <UART_SetConfig+0x4dc>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d100      	bne.n	8004438 <UART_SetConfig+0x1f8>
 8004436:	e0c9      	b.n	80045cc <UART_SetConfig+0x38c>
 8004438:	2b08      	cmp	r3, #8
 800443a:	d100      	bne.n	800443e <UART_SetConfig+0x1fe>
 800443c:	e11a      	b.n	8004674 <UART_SetConfig+0x434>
 800443e:	e16d      	b.n	800471c <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004440:	f7ff f9c8 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004444:	0002      	movs	r2, r0
 8004446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444a:	2b00      	cmp	r3, #0
 800444c:	d044      	beq.n	80044d8 <UART_SetConfig+0x298>
 800444e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	2b01      	cmp	r3, #1
 8004454:	d03e      	beq.n	80044d4 <UART_SetConfig+0x294>
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	2b02      	cmp	r3, #2
 800445c:	d038      	beq.n	80044d0 <UART_SetConfig+0x290>
 800445e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004462:	2b03      	cmp	r3, #3
 8004464:	d032      	beq.n	80044cc <UART_SetConfig+0x28c>
 8004466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446a:	2b04      	cmp	r3, #4
 800446c:	d02c      	beq.n	80044c8 <UART_SetConfig+0x288>
 800446e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	2b05      	cmp	r3, #5
 8004474:	d026      	beq.n	80044c4 <UART_SetConfig+0x284>
 8004476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	2b06      	cmp	r3, #6
 800447c:	d020      	beq.n	80044c0 <UART_SetConfig+0x280>
 800447e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	2b07      	cmp	r3, #7
 8004484:	d01a      	beq.n	80044bc <UART_SetConfig+0x27c>
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	2b08      	cmp	r3, #8
 800448c:	d014      	beq.n	80044b8 <UART_SetConfig+0x278>
 800448e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	2b09      	cmp	r3, #9
 8004494:	d00e      	beq.n	80044b4 <UART_SetConfig+0x274>
 8004496:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d008      	beq.n	80044b0 <UART_SetConfig+0x270>
 800449e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b0b      	cmp	r3, #11
 80044a4:	d102      	bne.n	80044ac <UART_SetConfig+0x26c>
 80044a6:	2380      	movs	r3, #128	; 0x80
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	e016      	b.n	80044da <UART_SetConfig+0x29a>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e014      	b.n	80044da <UART_SetConfig+0x29a>
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	e012      	b.n	80044da <UART_SetConfig+0x29a>
 80044b4:	2340      	movs	r3, #64	; 0x40
 80044b6:	e010      	b.n	80044da <UART_SetConfig+0x29a>
 80044b8:	2320      	movs	r3, #32
 80044ba:	e00e      	b.n	80044da <UART_SetConfig+0x29a>
 80044bc:	2310      	movs	r3, #16
 80044be:	e00c      	b.n	80044da <UART_SetConfig+0x29a>
 80044c0:	230c      	movs	r3, #12
 80044c2:	e00a      	b.n	80044da <UART_SetConfig+0x29a>
 80044c4:	230a      	movs	r3, #10
 80044c6:	e008      	b.n	80044da <UART_SetConfig+0x29a>
 80044c8:	2308      	movs	r3, #8
 80044ca:	e006      	b.n	80044da <UART_SetConfig+0x29a>
 80044cc:	2306      	movs	r3, #6
 80044ce:	e004      	b.n	80044da <UART_SetConfig+0x29a>
 80044d0:	2304      	movs	r3, #4
 80044d2:	e002      	b.n	80044da <UART_SetConfig+0x29a>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e000      	b.n	80044da <UART_SetConfig+0x29a>
 80044d8:	2301      	movs	r3, #1
 80044da:	0019      	movs	r1, r3
 80044dc:	0010      	movs	r0, r2
 80044de:	f7fb fe23 	bl	8000128 <__udivsi3>
 80044e2:	0003      	movs	r3, r0
 80044e4:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80044e6:	e120      	b.n	800472a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80044e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d043      	beq.n	8004578 <UART_SetConfig+0x338>
 80044f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d03d      	beq.n	8004574 <UART_SetConfig+0x334>
 80044f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d037      	beq.n	8004570 <UART_SetConfig+0x330>
 8004500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	2b03      	cmp	r3, #3
 8004506:	d031      	beq.n	800456c <UART_SetConfig+0x32c>
 8004508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	2b04      	cmp	r3, #4
 800450e:	d02b      	beq.n	8004568 <UART_SetConfig+0x328>
 8004510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	2b05      	cmp	r3, #5
 8004516:	d025      	beq.n	8004564 <UART_SetConfig+0x324>
 8004518:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2b06      	cmp	r3, #6
 800451e:	d01f      	beq.n	8004560 <UART_SetConfig+0x320>
 8004520:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	2b07      	cmp	r3, #7
 8004526:	d019      	beq.n	800455c <UART_SetConfig+0x31c>
 8004528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	2b08      	cmp	r3, #8
 800452e:	d013      	beq.n	8004558 <UART_SetConfig+0x318>
 8004530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	2b09      	cmp	r3, #9
 8004536:	d00d      	beq.n	8004554 <UART_SetConfig+0x314>
 8004538:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	2b0a      	cmp	r3, #10
 800453e:	d007      	beq.n	8004550 <UART_SetConfig+0x310>
 8004540:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2b0b      	cmp	r3, #11
 8004546:	d101      	bne.n	800454c <UART_SetConfig+0x30c>
 8004548:	4b14      	ldr	r3, [pc, #80]	; (800459c <UART_SetConfig+0x35c>)
 800454a:	e016      	b.n	800457a <UART_SetConfig+0x33a>
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <UART_SetConfig+0x360>)
 800454e:	e014      	b.n	800457a <UART_SetConfig+0x33a>
 8004550:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <UART_SetConfig+0x364>)
 8004552:	e012      	b.n	800457a <UART_SetConfig+0x33a>
 8004554:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <UART_SetConfig+0x368>)
 8004556:	e010      	b.n	800457a <UART_SetConfig+0x33a>
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <UART_SetConfig+0x36c>)
 800455a:	e00e      	b.n	800457a <UART_SetConfig+0x33a>
 800455c:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <UART_SetConfig+0x370>)
 800455e:	e00c      	b.n	800457a <UART_SetConfig+0x33a>
 8004560:	4b14      	ldr	r3, [pc, #80]	; (80045b4 <UART_SetConfig+0x374>)
 8004562:	e00a      	b.n	800457a <UART_SetConfig+0x33a>
 8004564:	4b14      	ldr	r3, [pc, #80]	; (80045b8 <UART_SetConfig+0x378>)
 8004566:	e008      	b.n	800457a <UART_SetConfig+0x33a>
 8004568:	4b14      	ldr	r3, [pc, #80]	; (80045bc <UART_SetConfig+0x37c>)
 800456a:	e006      	b.n	800457a <UART_SetConfig+0x33a>
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <UART_SetConfig+0x380>)
 800456e:	e004      	b.n	800457a <UART_SetConfig+0x33a>
 8004570:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <UART_SetConfig+0x384>)
 8004572:	e002      	b.n	800457a <UART_SetConfig+0x33a>
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <UART_SetConfig+0x388>)
 8004576:	e000      	b.n	800457a <UART_SetConfig+0x33a>
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <UART_SetConfig+0x360>)
 800457a:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800457c:	e0d5      	b.n	800472a <UART_SetConfig+0x4ea>
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	cfff69f3 	.word	0xcfff69f3
 8004584:	ffffcfff 	.word	0xffffcfff
 8004588:	40008000 	.word	0x40008000
 800458c:	11fff4ff 	.word	0x11fff4ff
 8004590:	40013800 	.word	0x40013800
 8004594:	40021000 	.word	0x40021000
 8004598:	40004400 	.word	0x40004400
 800459c:	0000f424 	.word	0x0000f424
 80045a0:	00f42400 	.word	0x00f42400
 80045a4:	0001e848 	.word	0x0001e848
 80045a8:	0003d090 	.word	0x0003d090
 80045ac:	0007a120 	.word	0x0007a120
 80045b0:	000f4240 	.word	0x000f4240
 80045b4:	00145855 	.word	0x00145855
 80045b8:	00186a00 	.word	0x00186a00
 80045bc:	001e8480 	.word	0x001e8480
 80045c0:	0028b0aa 	.word	0x0028b0aa
 80045c4:	003d0900 	.word	0x003d0900
 80045c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045cc:	f7ff f876 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 80045d0:	0002      	movs	r2, r0
 80045d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d044      	beq.n	8004664 <UART_SetConfig+0x424>
 80045da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d03e      	beq.n	8004660 <UART_SetConfig+0x420>
 80045e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d038      	beq.n	800465c <UART_SetConfig+0x41c>
 80045ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2b03      	cmp	r3, #3
 80045f0:	d032      	beq.n	8004658 <UART_SetConfig+0x418>
 80045f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d02c      	beq.n	8004654 <UART_SetConfig+0x414>
 80045fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d026      	beq.n	8004650 <UART_SetConfig+0x410>
 8004602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	2b06      	cmp	r3, #6
 8004608:	d020      	beq.n	800464c <UART_SetConfig+0x40c>
 800460a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	2b07      	cmp	r3, #7
 8004610:	d01a      	beq.n	8004648 <UART_SetConfig+0x408>
 8004612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	2b08      	cmp	r3, #8
 8004618:	d014      	beq.n	8004644 <UART_SetConfig+0x404>
 800461a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b09      	cmp	r3, #9
 8004620:	d00e      	beq.n	8004640 <UART_SetConfig+0x400>
 8004622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	2b0a      	cmp	r3, #10
 8004628:	d008      	beq.n	800463c <UART_SetConfig+0x3fc>
 800462a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	2b0b      	cmp	r3, #11
 8004630:	d102      	bne.n	8004638 <UART_SetConfig+0x3f8>
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	005b      	lsls	r3, r3, #1
 8004636:	e016      	b.n	8004666 <UART_SetConfig+0x426>
 8004638:	2301      	movs	r3, #1
 800463a:	e014      	b.n	8004666 <UART_SetConfig+0x426>
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	e012      	b.n	8004666 <UART_SetConfig+0x426>
 8004640:	2340      	movs	r3, #64	; 0x40
 8004642:	e010      	b.n	8004666 <UART_SetConfig+0x426>
 8004644:	2320      	movs	r3, #32
 8004646:	e00e      	b.n	8004666 <UART_SetConfig+0x426>
 8004648:	2310      	movs	r3, #16
 800464a:	e00c      	b.n	8004666 <UART_SetConfig+0x426>
 800464c:	230c      	movs	r3, #12
 800464e:	e00a      	b.n	8004666 <UART_SetConfig+0x426>
 8004650:	230a      	movs	r3, #10
 8004652:	e008      	b.n	8004666 <UART_SetConfig+0x426>
 8004654:	2308      	movs	r3, #8
 8004656:	e006      	b.n	8004666 <UART_SetConfig+0x426>
 8004658:	2306      	movs	r3, #6
 800465a:	e004      	b.n	8004666 <UART_SetConfig+0x426>
 800465c:	2304      	movs	r3, #4
 800465e:	e002      	b.n	8004666 <UART_SetConfig+0x426>
 8004660:	2302      	movs	r3, #2
 8004662:	e000      	b.n	8004666 <UART_SetConfig+0x426>
 8004664:	2301      	movs	r3, #1
 8004666:	0019      	movs	r1, r3
 8004668:	0010      	movs	r0, r2
 800466a:	f7fb fd5d 	bl	8000128 <__udivsi3>
 800466e:	0003      	movs	r3, r0
 8004670:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8004672:	e05a      	b.n	800472a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d04b      	beq.n	8004714 <UART_SetConfig+0x4d4>
 800467c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b01      	cmp	r3, #1
 8004682:	d044      	beq.n	800470e <UART_SetConfig+0x4ce>
 8004684:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b02      	cmp	r3, #2
 800468a:	d03d      	beq.n	8004708 <UART_SetConfig+0x4c8>
 800468c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b03      	cmp	r3, #3
 8004692:	d037      	beq.n	8004704 <UART_SetConfig+0x4c4>
 8004694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b04      	cmp	r3, #4
 800469a:	d030      	beq.n	80046fe <UART_SetConfig+0x4be>
 800469c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d02a      	beq.n	80046fa <UART_SetConfig+0x4ba>
 80046a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d024      	beq.n	80046f6 <UART_SetConfig+0x4b6>
 80046ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d01d      	beq.n	80046f0 <UART_SetConfig+0x4b0>
 80046b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d016      	beq.n	80046ea <UART_SetConfig+0x4aa>
 80046bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d00f      	beq.n	80046e4 <UART_SetConfig+0x4a4>
 80046c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d008      	beq.n	80046de <UART_SetConfig+0x49e>
 80046cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b0b      	cmp	r3, #11
 80046d2:	d101      	bne.n	80046d8 <UART_SetConfig+0x498>
 80046d4:	2380      	movs	r3, #128	; 0x80
 80046d6:	e01f      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	e01c      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	e019      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	e016      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046ea:	2380      	movs	r3, #128	; 0x80
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	e013      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046f0:	2380      	movs	r3, #128	; 0x80
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	e010      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046f6:	4bbf      	ldr	r3, [pc, #764]	; (80049f4 <UART_SetConfig+0x7b4>)
 80046f8:	e00e      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046fa:	4bbf      	ldr	r3, [pc, #764]	; (80049f8 <UART_SetConfig+0x7b8>)
 80046fc:	e00c      	b.n	8004718 <UART_SetConfig+0x4d8>
 80046fe:	2380      	movs	r3, #128	; 0x80
 8004700:	015b      	lsls	r3, r3, #5
 8004702:	e009      	b.n	8004718 <UART_SetConfig+0x4d8>
 8004704:	4bbd      	ldr	r3, [pc, #756]	; (80049fc <UART_SetConfig+0x7bc>)
 8004706:	e007      	b.n	8004718 <UART_SetConfig+0x4d8>
 8004708:	2380      	movs	r3, #128	; 0x80
 800470a:	019b      	lsls	r3, r3, #6
 800470c:	e004      	b.n	8004718 <UART_SetConfig+0x4d8>
 800470e:	2380      	movs	r3, #128	; 0x80
 8004710:	01db      	lsls	r3, r3, #7
 8004712:	e001      	b.n	8004718 <UART_SetConfig+0x4d8>
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800471a:	e006      	b.n	800472a <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 800471c:	231b      	movs	r3, #27
 800471e:	2258      	movs	r2, #88	; 0x58
 8004720:	18ba      	adds	r2, r7, r2
 8004722:	18d2      	adds	r2, r2, r3
 8004724:	2301      	movs	r3, #1
 8004726:	7013      	strb	r3, [r2, #0]
        break;
 8004728:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800472a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <UART_SetConfig+0x4f4>
 8004730:	f000 fe14 	bl	800535c <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004736:	685a      	ldr	r2, [r3, #4]
 8004738:	0013      	movs	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	189a      	adds	r2, r3, r2
 800473e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004740:	4293      	cmp	r3, r2
 8004742:	d305      	bcc.n	8004750 <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800474a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474c:	4293      	cmp	r3, r2
 800474e:	d908      	bls.n	8004762 <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 8004750:	231b      	movs	r3, #27
 8004752:	2258      	movs	r2, #88	; 0x58
 8004754:	4694      	mov	ip, r2
 8004756:	44bc      	add	ip, r7
 8004758:	4463      	add	r3, ip
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
 800475e:	f000 fdfd 	bl	800535c <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 8004762:	2323      	movs	r3, #35	; 0x23
 8004764:	2258      	movs	r2, #88	; 0x58
 8004766:	4694      	mov	ip, r2
 8004768:	44bc      	add	ip, r7
 800476a:	4463      	add	r3, ip
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d100      	bne.n	8004774 <UART_SetConfig+0x534>
 8004772:	e08c      	b.n	800488e <UART_SetConfig+0x64e>
 8004774:	dc02      	bgt.n	800477c <UART_SetConfig+0x53c>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <UART_SetConfig+0x54a>
 800477a:	e216      	b.n	8004baa <UART_SetConfig+0x96a>
 800477c:	2b04      	cmp	r3, #4
 800477e:	d100      	bne.n	8004782 <UART_SetConfig+0x542>
 8004780:	e0f2      	b.n	8004968 <UART_SetConfig+0x728>
 8004782:	2b08      	cmp	r3, #8
 8004784:	d100      	bne.n	8004788 <UART_SetConfig+0x548>
 8004786:	e199      	b.n	8004abc <UART_SetConfig+0x87c>
 8004788:	e20f      	b.n	8004baa <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800478a:	f7ff f823 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 800478e:	0003      	movs	r3, r0
 8004790:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004792:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004794:	64bb      	str	r3, [r7, #72]	; 0x48
 8004796:	2300      	movs	r3, #0
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d050      	beq.n	8004844 <UART_SetConfig+0x604>
 80047a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d049      	beq.n	800483e <UART_SetConfig+0x5fe>
 80047aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d042      	beq.n	8004838 <UART_SetConfig+0x5f8>
 80047b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d03b      	beq.n	8004832 <UART_SetConfig+0x5f2>
 80047ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d034      	beq.n	800482c <UART_SetConfig+0x5ec>
 80047c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d02d      	beq.n	8004826 <UART_SetConfig+0x5e6>
 80047ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b06      	cmp	r3, #6
 80047d0:	d026      	beq.n	8004820 <UART_SetConfig+0x5e0>
 80047d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d6:	2b07      	cmp	r3, #7
 80047d8:	d01f      	beq.n	800481a <UART_SetConfig+0x5da>
 80047da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d018      	beq.n	8004814 <UART_SetConfig+0x5d4>
 80047e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	2b09      	cmp	r3, #9
 80047e8:	d011      	beq.n	800480e <UART_SetConfig+0x5ce>
 80047ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	2b0a      	cmp	r3, #10
 80047f0:	d00a      	beq.n	8004808 <UART_SetConfig+0x5c8>
 80047f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	2b0b      	cmp	r3, #11
 80047f8:	d103      	bne.n	8004802 <UART_SetConfig+0x5c2>
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	2400      	movs	r4, #0
 8004800:	e022      	b.n	8004848 <UART_SetConfig+0x608>
 8004802:	2301      	movs	r3, #1
 8004804:	2400      	movs	r4, #0
 8004806:	e01f      	b.n	8004848 <UART_SetConfig+0x608>
 8004808:	2380      	movs	r3, #128	; 0x80
 800480a:	2400      	movs	r4, #0
 800480c:	e01c      	b.n	8004848 <UART_SetConfig+0x608>
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	2400      	movs	r4, #0
 8004812:	e019      	b.n	8004848 <UART_SetConfig+0x608>
 8004814:	2320      	movs	r3, #32
 8004816:	2400      	movs	r4, #0
 8004818:	e016      	b.n	8004848 <UART_SetConfig+0x608>
 800481a:	2310      	movs	r3, #16
 800481c:	2400      	movs	r4, #0
 800481e:	e013      	b.n	8004848 <UART_SetConfig+0x608>
 8004820:	230c      	movs	r3, #12
 8004822:	2400      	movs	r4, #0
 8004824:	e010      	b.n	8004848 <UART_SetConfig+0x608>
 8004826:	230a      	movs	r3, #10
 8004828:	2400      	movs	r4, #0
 800482a:	e00d      	b.n	8004848 <UART_SetConfig+0x608>
 800482c:	2308      	movs	r3, #8
 800482e:	2400      	movs	r4, #0
 8004830:	e00a      	b.n	8004848 <UART_SetConfig+0x608>
 8004832:	2306      	movs	r3, #6
 8004834:	2400      	movs	r4, #0
 8004836:	e007      	b.n	8004848 <UART_SetConfig+0x608>
 8004838:	2304      	movs	r3, #4
 800483a:	2400      	movs	r4, #0
 800483c:	e004      	b.n	8004848 <UART_SetConfig+0x608>
 800483e:	2302      	movs	r3, #2
 8004840:	2400      	movs	r4, #0
 8004842:	e001      	b.n	8004848 <UART_SetConfig+0x608>
 8004844:	2301      	movs	r3, #1
 8004846:	2400      	movs	r4, #0
 8004848:	001a      	movs	r2, r3
 800484a:	0023      	movs	r3, r4
 800484c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800484e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004850:	f7fb fe1a 	bl	8000488 <__aeabi_uldivmod>
 8004854:	0003      	movs	r3, r0
 8004856:	000c      	movs	r4, r1
 8004858:	0e1a      	lsrs	r2, r3, #24
 800485a:	0226      	lsls	r6, r4, #8
 800485c:	4316      	orrs	r6, r2
 800485e:	021d      	lsls	r5, r3, #8
 8004860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	085b      	lsrs	r3, r3, #1
 8004866:	643b      	str	r3, [r7, #64]	; 0x40
 8004868:	2300      	movs	r3, #0
 800486a:	647b      	str	r3, [r7, #68]	; 0x44
 800486c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800486e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004870:	1940      	adds	r0, r0, r5
 8004872:	4171      	adcs	r1, r6
 8004874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	63bb      	str	r3, [r7, #56]	; 0x38
 800487a:	2300      	movs	r3, #0
 800487c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800487e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004882:	f7fb fe01 	bl	8000488 <__aeabi_uldivmod>
 8004886:	0003      	movs	r3, r0
 8004888:	000c      	movs	r4, r1
 800488a:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 800488c:	e195      	b.n	8004bba <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800488e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	2b00      	cmp	r3, #0
 8004894:	d04f      	beq.n	8004936 <UART_SetConfig+0x6f6>
 8004896:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b01      	cmp	r3, #1
 800489c:	d048      	beq.n	8004930 <UART_SetConfig+0x6f0>
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d041      	beq.n	800492a <UART_SetConfig+0x6ea>
 80048a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	2b03      	cmp	r3, #3
 80048ac:	d03a      	beq.n	8004924 <UART_SetConfig+0x6e4>
 80048ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d033      	beq.n	800491e <UART_SetConfig+0x6de>
 80048b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d02c      	beq.n	8004918 <UART_SetConfig+0x6d8>
 80048be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	2b06      	cmp	r3, #6
 80048c4:	d025      	beq.n	8004912 <UART_SetConfig+0x6d2>
 80048c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	2b07      	cmp	r3, #7
 80048cc:	d01e      	beq.n	800490c <UART_SetConfig+0x6cc>
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d017      	beq.n	8004906 <UART_SetConfig+0x6c6>
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048da:	2b09      	cmp	r3, #9
 80048dc:	d010      	beq.n	8004900 <UART_SetConfig+0x6c0>
 80048de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b0a      	cmp	r3, #10
 80048e4:	d009      	beq.n	80048fa <UART_SetConfig+0x6ba>
 80048e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ea:	2b0b      	cmp	r3, #11
 80048ec:	d102      	bne.n	80048f4 <UART_SetConfig+0x6b4>
 80048ee:	4b44      	ldr	r3, [pc, #272]	; (8004a00 <UART_SetConfig+0x7c0>)
 80048f0:	2400      	movs	r4, #0
 80048f2:	e022      	b.n	800493a <UART_SetConfig+0x6fa>
 80048f4:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <UART_SetConfig+0x7c4>)
 80048f6:	2400      	movs	r4, #0
 80048f8:	e01f      	b.n	800493a <UART_SetConfig+0x6fa>
 80048fa:	4b43      	ldr	r3, [pc, #268]	; (8004a08 <UART_SetConfig+0x7c8>)
 80048fc:	2400      	movs	r4, #0
 80048fe:	e01c      	b.n	800493a <UART_SetConfig+0x6fa>
 8004900:	4b42      	ldr	r3, [pc, #264]	; (8004a0c <UART_SetConfig+0x7cc>)
 8004902:	2400      	movs	r4, #0
 8004904:	e019      	b.n	800493a <UART_SetConfig+0x6fa>
 8004906:	4b42      	ldr	r3, [pc, #264]	; (8004a10 <UART_SetConfig+0x7d0>)
 8004908:	2400      	movs	r4, #0
 800490a:	e016      	b.n	800493a <UART_SetConfig+0x6fa>
 800490c:	4b41      	ldr	r3, [pc, #260]	; (8004a14 <UART_SetConfig+0x7d4>)
 800490e:	2400      	movs	r4, #0
 8004910:	e013      	b.n	800493a <UART_SetConfig+0x6fa>
 8004912:	4b41      	ldr	r3, [pc, #260]	; (8004a18 <UART_SetConfig+0x7d8>)
 8004914:	2400      	movs	r4, #0
 8004916:	e010      	b.n	800493a <UART_SetConfig+0x6fa>
 8004918:	4b40      	ldr	r3, [pc, #256]	; (8004a1c <UART_SetConfig+0x7dc>)
 800491a:	2400      	movs	r4, #0
 800491c:	e00d      	b.n	800493a <UART_SetConfig+0x6fa>
 800491e:	4b40      	ldr	r3, [pc, #256]	; (8004a20 <UART_SetConfig+0x7e0>)
 8004920:	2400      	movs	r4, #0
 8004922:	e00a      	b.n	800493a <UART_SetConfig+0x6fa>
 8004924:	4b3f      	ldr	r3, [pc, #252]	; (8004a24 <UART_SetConfig+0x7e4>)
 8004926:	2400      	movs	r4, #0
 8004928:	e007      	b.n	800493a <UART_SetConfig+0x6fa>
 800492a:	4b3f      	ldr	r3, [pc, #252]	; (8004a28 <UART_SetConfig+0x7e8>)
 800492c:	2400      	movs	r4, #0
 800492e:	e004      	b.n	800493a <UART_SetConfig+0x6fa>
 8004930:	4b3e      	ldr	r3, [pc, #248]	; (8004a2c <UART_SetConfig+0x7ec>)
 8004932:	2400      	movs	r4, #0
 8004934:	e001      	b.n	800493a <UART_SetConfig+0x6fa>
 8004936:	4b33      	ldr	r3, [pc, #204]	; (8004a04 <UART_SetConfig+0x7c4>)
 8004938:	2400      	movs	r4, #0
 800493a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800493c:	6852      	ldr	r2, [r2, #4]
 800493e:	0852      	lsrs	r2, r2, #1
 8004940:	633a      	str	r2, [r7, #48]	; 0x30
 8004942:	2200      	movs	r2, #0
 8004944:	637a      	str	r2, [r7, #52]	; 0x34
 8004946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004948:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800494a:	18c0      	adds	r0, r0, r3
 800494c:	4161      	adcs	r1, r4
 800494e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
 8004954:	2300      	movs	r3, #0
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004958:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	f7fb fd94 	bl	8000488 <__aeabi_uldivmod>
 8004960:	0003      	movs	r3, r0
 8004962:	000c      	movs	r4, r1
 8004964:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004966:	e128      	b.n	8004bba <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004968:	f7fe fea8 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 800496c:	0003      	movs	r3, r0
 800496e:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	2300      	movs	r3, #0
 8004976:	627b      	str	r3, [r7, #36]	; 0x24
 8004978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <UART_SetConfig+0x742>
 8004980:	e071      	b.n	8004a66 <UART_SetConfig+0x826>
 8004982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b01      	cmp	r3, #1
 8004988:	d100      	bne.n	800498c <UART_SetConfig+0x74c>
 800498a:	e069      	b.n	8004a60 <UART_SetConfig+0x820>
 800498c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	2b02      	cmp	r3, #2
 8004992:	d100      	bne.n	8004996 <UART_SetConfig+0x756>
 8004994:	e061      	b.n	8004a5a <UART_SetConfig+0x81a>
 8004996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b03      	cmp	r3, #3
 800499c:	d05a      	beq.n	8004a54 <UART_SetConfig+0x814>
 800499e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b04      	cmp	r3, #4
 80049a4:	d053      	beq.n	8004a4e <UART_SetConfig+0x80e>
 80049a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b05      	cmp	r3, #5
 80049ac:	d04c      	beq.n	8004a48 <UART_SetConfig+0x808>
 80049ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b06      	cmp	r3, #6
 80049b4:	d045      	beq.n	8004a42 <UART_SetConfig+0x802>
 80049b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b07      	cmp	r3, #7
 80049bc:	d03e      	beq.n	8004a3c <UART_SetConfig+0x7fc>
 80049be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d037      	beq.n	8004a36 <UART_SetConfig+0x7f6>
 80049c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b09      	cmp	r3, #9
 80049cc:	d030      	beq.n	8004a30 <UART_SetConfig+0x7f0>
 80049ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b0a      	cmp	r3, #10
 80049d4:	d00a      	beq.n	80049ec <UART_SetConfig+0x7ac>
 80049d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b0b      	cmp	r3, #11
 80049dc:	d103      	bne.n	80049e6 <UART_SetConfig+0x7a6>
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	2400      	movs	r4, #0
 80049e4:	e041      	b.n	8004a6a <UART_SetConfig+0x82a>
 80049e6:	2301      	movs	r3, #1
 80049e8:	2400      	movs	r4, #0
 80049ea:	e03e      	b.n	8004a6a <UART_SetConfig+0x82a>
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	2400      	movs	r4, #0
 80049f0:	e03b      	b.n	8004a6a <UART_SetConfig+0x82a>
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	00000aaa 	.word	0x00000aaa
 80049f8:	00000ccc 	.word	0x00000ccc
 80049fc:	00001555 	.word	0x00001555
 8004a00:	00f42400 	.word	0x00f42400
 8004a04:	f4240000 	.word	0xf4240000
 8004a08:	01e84800 	.word	0x01e84800
 8004a0c:	03d09000 	.word	0x03d09000
 8004a10:	07a12000 	.word	0x07a12000
 8004a14:	0f424000 	.word	0x0f424000
 8004a18:	14585500 	.word	0x14585500
 8004a1c:	186a0000 	.word	0x186a0000
 8004a20:	1e848000 	.word	0x1e848000
 8004a24:	28b0aa00 	.word	0x28b0aa00
 8004a28:	3d090000 	.word	0x3d090000
 8004a2c:	7a120000 	.word	0x7a120000
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	2400      	movs	r4, #0
 8004a34:	e019      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a36:	2320      	movs	r3, #32
 8004a38:	2400      	movs	r4, #0
 8004a3a:	e016      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	2400      	movs	r4, #0
 8004a40:	e013      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a42:	230c      	movs	r3, #12
 8004a44:	2400      	movs	r4, #0
 8004a46:	e010      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a48:	230a      	movs	r3, #10
 8004a4a:	2400      	movs	r4, #0
 8004a4c:	e00d      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a4e:	2308      	movs	r3, #8
 8004a50:	2400      	movs	r4, #0
 8004a52:	e00a      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a54:	2306      	movs	r3, #6
 8004a56:	2400      	movs	r4, #0
 8004a58:	e007      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a5a:	2304      	movs	r3, #4
 8004a5c:	2400      	movs	r4, #0
 8004a5e:	e004      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a60:	2302      	movs	r3, #2
 8004a62:	2400      	movs	r4, #0
 8004a64:	e001      	b.n	8004a6a <UART_SetConfig+0x82a>
 8004a66:	2301      	movs	r3, #1
 8004a68:	2400      	movs	r4, #0
 8004a6a:	001a      	movs	r2, r3
 8004a6c:	0023      	movs	r3, r4
 8004a6e:	6a38      	ldr	r0, [r7, #32]
 8004a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a72:	f7fb fd09 	bl	8000488 <__aeabi_uldivmod>
 8004a76:	0003      	movs	r3, r0
 8004a78:	000c      	movs	r4, r1
 8004a7a:	0e1a      	lsrs	r2, r3, #24
 8004a7c:	0221      	lsls	r1, r4, #8
 8004a7e:	6579      	str	r1, [r7, #84]	; 0x54
 8004a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a82:	4311      	orrs	r1, r2
 8004a84:	6579      	str	r1, [r7, #84]	; 0x54
 8004a86:	021b      	lsls	r3, r3, #8
 8004a88:	653b      	str	r3, [r7, #80]	; 0x50
 8004a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	61bb      	str	r3, [r7, #24]
 8004a92:	2300      	movs	r3, #0
 8004a94:	61fb      	str	r3, [r7, #28]
 8004a96:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004a98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	69fc      	ldr	r4, [r7, #28]
 8004a9e:	18c0      	adds	r0, r0, r3
 8004aa0:	4161      	adcs	r1, r4
 8004aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	613b      	str	r3, [r7, #16]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	f7fb fcea 	bl	8000488 <__aeabi_uldivmod>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	000c      	movs	r4, r1
 8004ab8:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004aba:	e07e      	b.n	8004bba <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004abc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d058      	beq.n	8004b76 <UART_SetConfig+0x936>
 8004ac4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d050      	beq.n	8004b6e <UART_SetConfig+0x92e>
 8004acc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d048      	beq.n	8004b66 <UART_SetConfig+0x926>
 8004ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad8:	2b03      	cmp	r3, #3
 8004ada:	d041      	beq.n	8004b60 <UART_SetConfig+0x920>
 8004adc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	2b04      	cmp	r3, #4
 8004ae2:	d039      	beq.n	8004b58 <UART_SetConfig+0x918>
 8004ae4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d032      	beq.n	8004b52 <UART_SetConfig+0x912>
 8004aec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d02b      	beq.n	8004b4c <UART_SetConfig+0x90c>
 8004af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	2b07      	cmp	r3, #7
 8004afa:	d023      	beq.n	8004b44 <UART_SetConfig+0x904>
 8004afc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d01b      	beq.n	8004b3c <UART_SetConfig+0x8fc>
 8004b04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	2b09      	cmp	r3, #9
 8004b0a:	d013      	beq.n	8004b34 <UART_SetConfig+0x8f4>
 8004b0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b0a      	cmp	r3, #10
 8004b12:	d00b      	beq.n	8004b2c <UART_SetConfig+0x8ec>
 8004b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	2b0b      	cmp	r3, #11
 8004b1a:	d103      	bne.n	8004b24 <UART_SetConfig+0x8e4>
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	2400      	movs	r4, #0
 8004b22:	e02b      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	2400      	movs	r4, #0
 8004b2a:	e027      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b2c:	2380      	movs	r3, #128	; 0x80
 8004b2e:	025b      	lsls	r3, r3, #9
 8004b30:	2400      	movs	r4, #0
 8004b32:	e023      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b34:	2380      	movs	r3, #128	; 0x80
 8004b36:	029b      	lsls	r3, r3, #10
 8004b38:	2400      	movs	r4, #0
 8004b3a:	e01f      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b3c:	2380      	movs	r3, #128	; 0x80
 8004b3e:	02db      	lsls	r3, r3, #11
 8004b40:	2400      	movs	r4, #0
 8004b42:	e01b      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b44:	2380      	movs	r3, #128	; 0x80
 8004b46:	031b      	lsls	r3, r3, #12
 8004b48:	2400      	movs	r4, #0
 8004b4a:	e017      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b4c:	4bb7      	ldr	r3, [pc, #732]	; (8004e2c <UART_SetConfig+0xbec>)
 8004b4e:	2400      	movs	r4, #0
 8004b50:	e014      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b52:	4bb7      	ldr	r3, [pc, #732]	; (8004e30 <UART_SetConfig+0xbf0>)
 8004b54:	2400      	movs	r4, #0
 8004b56:	e011      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b58:	2380      	movs	r3, #128	; 0x80
 8004b5a:	035b      	lsls	r3, r3, #13
 8004b5c:	2400      	movs	r4, #0
 8004b5e:	e00d      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b60:	4bb4      	ldr	r3, [pc, #720]	; (8004e34 <UART_SetConfig+0xbf4>)
 8004b62:	2400      	movs	r4, #0
 8004b64:	e00a      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b66:	2380      	movs	r3, #128	; 0x80
 8004b68:	039b      	lsls	r3, r3, #14
 8004b6a:	2400      	movs	r4, #0
 8004b6c:	e006      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b6e:	2380      	movs	r3, #128	; 0x80
 8004b70:	03db      	lsls	r3, r3, #15
 8004b72:	2400      	movs	r4, #0
 8004b74:	e002      	b.n	8004b7c <UART_SetConfig+0x93c>
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	041b      	lsls	r3, r3, #16
 8004b7a:	2400      	movs	r4, #0
 8004b7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	0852      	lsrs	r2, r2, #1
 8004b82:	60ba      	str	r2, [r7, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	60fa      	str	r2, [r7, #12]
 8004b88:	68b8      	ldr	r0, [r7, #8]
 8004b8a:	68f9      	ldr	r1, [r7, #12]
 8004b8c:	18c0      	adds	r0, r0, r3
 8004b8e:	4161      	adcs	r1, r4
 8004b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	603b      	str	r3, [r7, #0]
 8004b96:	2300      	movs	r3, #0
 8004b98:	607b      	str	r3, [r7, #4]
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f7fb fc73 	bl	8000488 <__aeabi_uldivmod>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	000c      	movs	r4, r1
 8004ba6:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8004ba8:	e007      	b.n	8004bba <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 8004baa:	231b      	movs	r3, #27
 8004bac:	2258      	movs	r2, #88	; 0x58
 8004bae:	4694      	mov	ip, r2
 8004bb0:	44bc      	add	ip, r7
 8004bb2:	4463      	add	r3, ip
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	701a      	strb	r2, [r3, #0]
            break;
 8004bb8:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bbc:	4a9e      	ldr	r2, [pc, #632]	; (8004e38 <UART_SetConfig+0xbf8>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d909      	bls.n	8004bd6 <UART_SetConfig+0x996>
 8004bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bc4:	4a9d      	ldr	r2, [pc, #628]	; (8004e3c <UART_SetConfig+0xbfc>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d805      	bhi.n	8004bd6 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 8004bca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bd0:	60da      	str	r2, [r3, #12]
 8004bd2:	f000 fbc3 	bl	800535c <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bd6:	231b      	movs	r3, #27
 8004bd8:	2258      	movs	r2, #88	; 0x58
 8004bda:	4694      	mov	ip, r2
 8004bdc:	44bc      	add	ip, r7
 8004bde:	4463      	add	r3, ip
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	f000 fbba 	bl	800535c <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	2380      	movs	r3, #128	; 0x80
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d000      	beq.n	8004bf6 <UART_SetConfig+0x9b6>
 8004bf4:	e1e6      	b.n	8004fc4 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 8004bf6:	2323      	movs	r3, #35	; 0x23
 8004bf8:	2258      	movs	r2, #88	; 0x58
 8004bfa:	4694      	mov	ip, r2
 8004bfc:	44bc      	add	ip, r7
 8004bfe:	4463      	add	r3, ip
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d100      	bne.n	8004c08 <UART_SetConfig+0x9c8>
 8004c06:	e06c      	b.n	8004ce2 <UART_SetConfig+0xaa2>
 8004c08:	dc02      	bgt.n	8004c10 <UART_SetConfig+0x9d0>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d007      	beq.n	8004c1e <UART_SetConfig+0x9de>
 8004c0e:	e1a5      	b.n	8004f5c <UART_SetConfig+0xd1c>
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d100      	bne.n	8004c16 <UART_SetConfig+0x9d6>
 8004c14:	e0bc      	b.n	8004d90 <UART_SetConfig+0xb50>
 8004c16:	2b08      	cmp	r3, #8
 8004c18:	d100      	bne.n	8004c1c <UART_SetConfig+0x9dc>
 8004c1a:	e13e      	b.n	8004e9a <UART_SetConfig+0xc5a>
 8004c1c:	e19e      	b.n	8004f5c <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c1e:	f7fe fdd9 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004c22:	0003      	movs	r3, r0
 8004c24:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d044      	beq.n	8004cb8 <UART_SetConfig+0xa78>
 8004c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d03e      	beq.n	8004cb4 <UART_SetConfig+0xa74>
 8004c36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d038      	beq.n	8004cb0 <UART_SetConfig+0xa70>
 8004c3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d032      	beq.n	8004cac <UART_SetConfig+0xa6c>
 8004c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d02c      	beq.n	8004ca8 <UART_SetConfig+0xa68>
 8004c4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	d026      	beq.n	8004ca4 <UART_SetConfig+0xa64>
 8004c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	2b06      	cmp	r3, #6
 8004c5c:	d020      	beq.n	8004ca0 <UART_SetConfig+0xa60>
 8004c5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2b07      	cmp	r3, #7
 8004c64:	d01a      	beq.n	8004c9c <UART_SetConfig+0xa5c>
 8004c66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d014      	beq.n	8004c98 <UART_SetConfig+0xa58>
 8004c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	d00e      	beq.n	8004c94 <UART_SetConfig+0xa54>
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7a:	2b0a      	cmp	r3, #10
 8004c7c:	d008      	beq.n	8004c90 <UART_SetConfig+0xa50>
 8004c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c82:	2b0b      	cmp	r3, #11
 8004c84:	d102      	bne.n	8004c8c <UART_SetConfig+0xa4c>
 8004c86:	2380      	movs	r3, #128	; 0x80
 8004c88:	005b      	lsls	r3, r3, #1
 8004c8a:	e016      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e014      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004c90:	2380      	movs	r3, #128	; 0x80
 8004c92:	e012      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004c94:	2340      	movs	r3, #64	; 0x40
 8004c96:	e010      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004c98:	2320      	movs	r3, #32
 8004c9a:	e00e      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	e00c      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004ca0:	230c      	movs	r3, #12
 8004ca2:	e00a      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004ca4:	230a      	movs	r3, #10
 8004ca6:	e008      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004ca8:	2308      	movs	r3, #8
 8004caa:	e006      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004cac:	2306      	movs	r3, #6
 8004cae:	e004      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004cb0:	2304      	movs	r3, #4
 8004cb2:	e002      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e000      	b.n	8004cba <UART_SetConfig+0xa7a>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	0019      	movs	r1, r3
 8004cbc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004cbe:	f7fb fa33 	bl	8000128 <__udivsi3>
 8004cc2:	0003      	movs	r3, r0
 8004cc4:	005a      	lsls	r2, r3, #1
 8004cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	18d2      	adds	r2, r2, r3
 8004cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	0019      	movs	r1, r3
 8004cd4:	0010      	movs	r0, r2
 8004cd6:	f7fb fa27 	bl	8000128 <__udivsi3>
 8004cda:	0003      	movs	r3, r0
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004ce0:	e144      	b.n	8004f6c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d043      	beq.n	8004d72 <UART_SetConfig+0xb32>
 8004cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d03d      	beq.n	8004d6e <UART_SetConfig+0xb2e>
 8004cf2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d037      	beq.n	8004d6a <UART_SetConfig+0xb2a>
 8004cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d031      	beq.n	8004d66 <UART_SetConfig+0xb26>
 8004d02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d02b      	beq.n	8004d62 <UART_SetConfig+0xb22>
 8004d0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	2b05      	cmp	r3, #5
 8004d10:	d025      	beq.n	8004d5e <UART_SetConfig+0xb1e>
 8004d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	2b06      	cmp	r3, #6
 8004d18:	d01f      	beq.n	8004d5a <UART_SetConfig+0xb1a>
 8004d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1e:	2b07      	cmp	r3, #7
 8004d20:	d019      	beq.n	8004d56 <UART_SetConfig+0xb16>
 8004d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d013      	beq.n	8004d52 <UART_SetConfig+0xb12>
 8004d2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	2b09      	cmp	r3, #9
 8004d30:	d00d      	beq.n	8004d4e <UART_SetConfig+0xb0e>
 8004d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	2b0a      	cmp	r3, #10
 8004d38:	d007      	beq.n	8004d4a <UART_SetConfig+0xb0a>
 8004d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3e:	2b0b      	cmp	r3, #11
 8004d40:	d101      	bne.n	8004d46 <UART_SetConfig+0xb06>
 8004d42:	4b3f      	ldr	r3, [pc, #252]	; (8004e40 <UART_SetConfig+0xc00>)
 8004d44:	e016      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d46:	4b3f      	ldr	r3, [pc, #252]	; (8004e44 <UART_SetConfig+0xc04>)
 8004d48:	e014      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	; (8004e48 <UART_SetConfig+0xc08>)
 8004d4c:	e012      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d4e:	4b3f      	ldr	r3, [pc, #252]	; (8004e4c <UART_SetConfig+0xc0c>)
 8004d50:	e010      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d52:	4b3f      	ldr	r3, [pc, #252]	; (8004e50 <UART_SetConfig+0xc10>)
 8004d54:	e00e      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d56:	4b3f      	ldr	r3, [pc, #252]	; (8004e54 <UART_SetConfig+0xc14>)
 8004d58:	e00c      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	; (8004e58 <UART_SetConfig+0xc18>)
 8004d5c:	e00a      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d5e:	4b3f      	ldr	r3, [pc, #252]	; (8004e5c <UART_SetConfig+0xc1c>)
 8004d60:	e008      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <UART_SetConfig+0xc20>)
 8004d64:	e006      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d66:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <UART_SetConfig+0xc24>)
 8004d68:	e004      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d6a:	4b3f      	ldr	r3, [pc, #252]	; (8004e68 <UART_SetConfig+0xc28>)
 8004d6c:	e002      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d6e:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <UART_SetConfig+0xc2c>)
 8004d70:	e000      	b.n	8004d74 <UART_SetConfig+0xb34>
 8004d72:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <UART_SetConfig+0xc04>)
 8004d74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d76:	6852      	ldr	r2, [r2, #4]
 8004d78:	0852      	lsrs	r2, r2, #1
 8004d7a:	189a      	adds	r2, r3, r2
 8004d7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0019      	movs	r1, r3
 8004d82:	0010      	movs	r0, r2
 8004d84:	f7fb f9d0 	bl	8000128 <__udivsi3>
 8004d88:	0003      	movs	r3, r0
 8004d8a:	b29b      	uxth	r3, r3
 8004d8c:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004d8e:	e0ed      	b.n	8004f6c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d90:	f7fe fc94 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8004d94:	0003      	movs	r3, r0
 8004d96:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d100      	bne.n	8004da2 <UART_SetConfig+0xb62>
 8004da0:	e066      	b.n	8004e70 <UART_SetConfig+0xc30>
 8004da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d03e      	beq.n	8004e28 <UART_SetConfig+0xbe8>
 8004daa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d038      	beq.n	8004e24 <UART_SetConfig+0xbe4>
 8004db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d032      	beq.n	8004e20 <UART_SetConfig+0xbe0>
 8004dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d02c      	beq.n	8004e1c <UART_SetConfig+0xbdc>
 8004dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	d026      	beq.n	8004e18 <UART_SetConfig+0xbd8>
 8004dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d020      	beq.n	8004e14 <UART_SetConfig+0xbd4>
 8004dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d01a      	beq.n	8004e10 <UART_SetConfig+0xbd0>
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d014      	beq.n	8004e0c <UART_SetConfig+0xbcc>
 8004de2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d00e      	beq.n	8004e08 <UART_SetConfig+0xbc8>
 8004dea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dee:	2b0a      	cmp	r3, #10
 8004df0:	d008      	beq.n	8004e04 <UART_SetConfig+0xbc4>
 8004df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	2b0b      	cmp	r3, #11
 8004df8:	d102      	bne.n	8004e00 <UART_SetConfig+0xbc0>
 8004dfa:	2380      	movs	r3, #128	; 0x80
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	e038      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e036      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e04:	2380      	movs	r3, #128	; 0x80
 8004e06:	e034      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e08:	2340      	movs	r3, #64	; 0x40
 8004e0a:	e032      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	e030      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e10:	2310      	movs	r3, #16
 8004e12:	e02e      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e14:	230c      	movs	r3, #12
 8004e16:	e02c      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e18:	230a      	movs	r3, #10
 8004e1a:	e02a      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	e028      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e20:	2306      	movs	r3, #6
 8004e22:	e026      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e24:	2304      	movs	r3, #4
 8004e26:	e024      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e28:	2302      	movs	r3, #2
 8004e2a:	e022      	b.n	8004e72 <UART_SetConfig+0xc32>
 8004e2c:	000aaa00 	.word	0x000aaa00
 8004e30:	000ccc00 	.word	0x000ccc00
 8004e34:	00155500 	.word	0x00155500
 8004e38:	000002ff 	.word	0x000002ff
 8004e3c:	000fffff 	.word	0x000fffff
 8004e40:	0001e848 	.word	0x0001e848
 8004e44:	01e84800 	.word	0x01e84800
 8004e48:	0003d090 	.word	0x0003d090
 8004e4c:	0007a120 	.word	0x0007a120
 8004e50:	000f4240 	.word	0x000f4240
 8004e54:	001e8480 	.word	0x001e8480
 8004e58:	0028b0aa 	.word	0x0028b0aa
 8004e5c:	0030d400 	.word	0x0030d400
 8004e60:	003d0900 	.word	0x003d0900
 8004e64:	00516154 	.word	0x00516154
 8004e68:	007a1200 	.word	0x007a1200
 8004e6c:	00f42400 	.word	0x00f42400
 8004e70:	2301      	movs	r3, #1
 8004e72:	0019      	movs	r1, r3
 8004e74:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004e76:	f7fb f957 	bl	8000128 <__udivsi3>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	005a      	lsls	r2, r3, #1
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	085b      	lsrs	r3, r3, #1
 8004e84:	18d2      	adds	r2, r2, r3
 8004e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	0019      	movs	r1, r3
 8004e8c:	0010      	movs	r0, r2
 8004e8e:	f7fb f94b 	bl	8000128 <__udivsi3>
 8004e92:	0003      	movs	r3, r0
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004e98:	e068      	b.n	8004f6c <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d04c      	beq.n	8004f3c <UART_SetConfig+0xcfc>
 8004ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d045      	beq.n	8004f36 <UART_SetConfig+0xcf6>
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d03e      	beq.n	8004f30 <UART_SetConfig+0xcf0>
 8004eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d038      	beq.n	8004f2c <UART_SetConfig+0xcec>
 8004eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d031      	beq.n	8004f26 <UART_SetConfig+0xce6>
 8004ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2b05      	cmp	r3, #5
 8004ec8:	d02b      	beq.n	8004f22 <UART_SetConfig+0xce2>
 8004eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ece:	2b06      	cmp	r3, #6
 8004ed0:	d025      	beq.n	8004f1e <UART_SetConfig+0xcde>
 8004ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed6:	2b07      	cmp	r3, #7
 8004ed8:	d01e      	beq.n	8004f18 <UART_SetConfig+0xcd8>
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	2b08      	cmp	r3, #8
 8004ee0:	d017      	beq.n	8004f12 <UART_SetConfig+0xcd2>
 8004ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	d010      	beq.n	8004f0c <UART_SetConfig+0xccc>
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	2b0a      	cmp	r3, #10
 8004ef0:	d009      	beq.n	8004f06 <UART_SetConfig+0xcc6>
 8004ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	2b0b      	cmp	r3, #11
 8004ef8:	d102      	bne.n	8004f00 <UART_SetConfig+0xcc0>
 8004efa:	2380      	movs	r3, #128	; 0x80
 8004efc:	005b      	lsls	r3, r3, #1
 8004efe:	e01f      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	025b      	lsls	r3, r3, #9
 8004f04:	e01c      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	e019      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	00db      	lsls	r3, r3, #3
 8004f10:	e016      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f12:	2380      	movs	r3, #128	; 0x80
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	e013      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	015b      	lsls	r3, r3, #5
 8004f1c:	e010      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f1e:	4bb7      	ldr	r3, [pc, #732]	; (80051fc <UART_SetConfig+0xfbc>)
 8004f20:	e00e      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f22:	4bb7      	ldr	r3, [pc, #732]	; (8005200 <UART_SetConfig+0xfc0>)
 8004f24:	e00c      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	019b      	lsls	r3, r3, #6
 8004f2a:	e009      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f2c:	4bb5      	ldr	r3, [pc, #724]	; (8005204 <UART_SetConfig+0xfc4>)
 8004f2e:	e007      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f30:	2380      	movs	r3, #128	; 0x80
 8004f32:	01db      	lsls	r3, r3, #7
 8004f34:	e004      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f36:	2380      	movs	r3, #128	; 0x80
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	e001      	b.n	8004f40 <UART_SetConfig+0xd00>
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	025b      	lsls	r3, r3, #9
 8004f40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f42:	6852      	ldr	r2, [r2, #4]
 8004f44:	0852      	lsrs	r2, r2, #1
 8004f46:	189a      	adds	r2, r3, r2
 8004f48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	0010      	movs	r0, r2
 8004f50:	f7fb f8ea 	bl	8000128 <__udivsi3>
 8004f54:	0003      	movs	r3, r0
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8004f5a:	e007      	b.n	8004f6c <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8004f5c:	231b      	movs	r3, #27
 8004f5e:	2258      	movs	r2, #88	; 0x58
 8004f60:	4694      	mov	ip, r2
 8004f62:	44bc      	add	ip, r7
 8004f64:	4463      	add	r3, ip
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
        break;
 8004f6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d920      	bls.n	8004fb4 <UART_SetConfig+0xd74>
 8004f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f74:	4aa4      	ldr	r2, [pc, #656]	; (8005208 <UART_SetConfig+0xfc8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d81c      	bhi.n	8004fb4 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	200e      	movs	r0, #14
 8004f80:	2458      	movs	r4, #88	; 0x58
 8004f82:	193b      	adds	r3, r7, r4
 8004f84:	181b      	adds	r3, r3, r0
 8004f86:	210f      	movs	r1, #15
 8004f88:	438a      	bics	r2, r1
 8004f8a:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2207      	movs	r2, #7
 8004f94:	4013      	ands	r3, r2
 8004f96:	b299      	uxth	r1, r3
 8004f98:	193b      	adds	r3, r7, r4
 8004f9a:	181b      	adds	r3, r3, r0
 8004f9c:	193a      	adds	r2, r7, r4
 8004f9e:	1812      	adds	r2, r2, r0
 8004fa0:	8812      	ldrh	r2, [r2, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8004fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	193a      	adds	r2, r7, r4
 8004fac:	1812      	adds	r2, r2, r0
 8004fae:	8812      	ldrh	r2, [r2, #0]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	e1d3      	b.n	800535c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8004fb4:	231b      	movs	r3, #27
 8004fb6:	2258      	movs	r2, #88	; 0x58
 8004fb8:	4694      	mov	ip, r2
 8004fba:	44bc      	add	ip, r7
 8004fbc:	4463      	add	r3, ip
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	701a      	strb	r2, [r3, #0]
 8004fc2:	e1cb      	b.n	800535c <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8004fc4:	2323      	movs	r3, #35	; 0x23
 8004fc6:	2258      	movs	r2, #88	; 0x58
 8004fc8:	4694      	mov	ip, r2
 8004fca:	44bc      	add	ip, r7
 8004fcc:	4463      	add	r3, ip
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d100      	bne.n	8004fd6 <UART_SetConfig+0xd96>
 8004fd4:	e06c      	b.n	80050b0 <UART_SetConfig+0xe70>
 8004fd6:	dc02      	bgt.n	8004fde <UART_SetConfig+0xd9e>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <UART_SetConfig+0xdac>
 8004fdc:	e1a3      	b.n	8005326 <UART_SetConfig+0x10e6>
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d100      	bne.n	8004fe4 <UART_SetConfig+0xda4>
 8004fe2:	e0bc      	b.n	800515e <UART_SetConfig+0xf1e>
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d100      	bne.n	8004fea <UART_SetConfig+0xdaa>
 8004fe8:	e13d      	b.n	8005266 <UART_SetConfig+0x1026>
 8004fea:	e19c      	b.n	8005326 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fec:	f7fe fbf2 	bl	80037d4 <HAL_RCC_GetPCLK1Freq>
 8004ff0:	0003      	movs	r3, r0
 8004ff2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d044      	beq.n	8005086 <UART_SetConfig+0xe46>
 8004ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	2b01      	cmp	r3, #1
 8005002:	d03e      	beq.n	8005082 <UART_SetConfig+0xe42>
 8005004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	2b02      	cmp	r3, #2
 800500a:	d038      	beq.n	800507e <UART_SetConfig+0xe3e>
 800500c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2b03      	cmp	r3, #3
 8005012:	d032      	beq.n	800507a <UART_SetConfig+0xe3a>
 8005014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b04      	cmp	r3, #4
 800501a:	d02c      	beq.n	8005076 <UART_SetConfig+0xe36>
 800501c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b05      	cmp	r3, #5
 8005022:	d026      	beq.n	8005072 <UART_SetConfig+0xe32>
 8005024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b06      	cmp	r3, #6
 800502a:	d020      	beq.n	800506e <UART_SetConfig+0xe2e>
 800502c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b07      	cmp	r3, #7
 8005032:	d01a      	beq.n	800506a <UART_SetConfig+0xe2a>
 8005034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b08      	cmp	r3, #8
 800503a:	d014      	beq.n	8005066 <UART_SetConfig+0xe26>
 800503c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b09      	cmp	r3, #9
 8005042:	d00e      	beq.n	8005062 <UART_SetConfig+0xe22>
 8005044:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b0a      	cmp	r3, #10
 800504a:	d008      	beq.n	800505e <UART_SetConfig+0xe1e>
 800504c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b0b      	cmp	r3, #11
 8005052:	d102      	bne.n	800505a <UART_SetConfig+0xe1a>
 8005054:	2380      	movs	r3, #128	; 0x80
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	e016      	b.n	8005088 <UART_SetConfig+0xe48>
 800505a:	2301      	movs	r3, #1
 800505c:	e014      	b.n	8005088 <UART_SetConfig+0xe48>
 800505e:	2380      	movs	r3, #128	; 0x80
 8005060:	e012      	b.n	8005088 <UART_SetConfig+0xe48>
 8005062:	2340      	movs	r3, #64	; 0x40
 8005064:	e010      	b.n	8005088 <UART_SetConfig+0xe48>
 8005066:	2320      	movs	r3, #32
 8005068:	e00e      	b.n	8005088 <UART_SetConfig+0xe48>
 800506a:	2310      	movs	r3, #16
 800506c:	e00c      	b.n	8005088 <UART_SetConfig+0xe48>
 800506e:	230c      	movs	r3, #12
 8005070:	e00a      	b.n	8005088 <UART_SetConfig+0xe48>
 8005072:	230a      	movs	r3, #10
 8005074:	e008      	b.n	8005088 <UART_SetConfig+0xe48>
 8005076:	2308      	movs	r3, #8
 8005078:	e006      	b.n	8005088 <UART_SetConfig+0xe48>
 800507a:	2306      	movs	r3, #6
 800507c:	e004      	b.n	8005088 <UART_SetConfig+0xe48>
 800507e:	2304      	movs	r3, #4
 8005080:	e002      	b.n	8005088 <UART_SetConfig+0xe48>
 8005082:	2302      	movs	r3, #2
 8005084:	e000      	b.n	8005088 <UART_SetConfig+0xe48>
 8005086:	2301      	movs	r3, #1
 8005088:	0019      	movs	r1, r3
 800508a:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800508c:	f7fb f84c 	bl	8000128 <__udivsi3>
 8005090:	0003      	movs	r3, r0
 8005092:	001a      	movs	r2, r3
 8005094:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	085b      	lsrs	r3, r3, #1
 800509a:	18d2      	adds	r2, r2, r3
 800509c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	0019      	movs	r1, r3
 80050a2:	0010      	movs	r0, r2
 80050a4:	f7fb f840 	bl	8000128 <__udivsi3>
 80050a8:	0003      	movs	r3, r0
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80050ae:	e142      	b.n	8005336 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d043      	beq.n	8005140 <UART_SetConfig+0xf00>
 80050b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d03d      	beq.n	800513c <UART_SetConfig+0xefc>
 80050c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d037      	beq.n	8005138 <UART_SetConfig+0xef8>
 80050c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050cc:	2b03      	cmp	r3, #3
 80050ce:	d031      	beq.n	8005134 <UART_SetConfig+0xef4>
 80050d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d02b      	beq.n	8005130 <UART_SetConfig+0xef0>
 80050d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050dc:	2b05      	cmp	r3, #5
 80050de:	d025      	beq.n	800512c <UART_SetConfig+0xeec>
 80050e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d01f      	beq.n	8005128 <UART_SetConfig+0xee8>
 80050e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d019      	beq.n	8005124 <UART_SetConfig+0xee4>
 80050f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	d013      	beq.n	8005120 <UART_SetConfig+0xee0>
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d00d      	beq.n	800511c <UART_SetConfig+0xedc>
 8005100:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b0a      	cmp	r3, #10
 8005106:	d007      	beq.n	8005118 <UART_SetConfig+0xed8>
 8005108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	2b0b      	cmp	r3, #11
 800510e:	d101      	bne.n	8005114 <UART_SetConfig+0xed4>
 8005110:	4b3e      	ldr	r3, [pc, #248]	; (800520c <UART_SetConfig+0xfcc>)
 8005112:	e016      	b.n	8005142 <UART_SetConfig+0xf02>
 8005114:	4b3e      	ldr	r3, [pc, #248]	; (8005210 <UART_SetConfig+0xfd0>)
 8005116:	e014      	b.n	8005142 <UART_SetConfig+0xf02>
 8005118:	4b3e      	ldr	r3, [pc, #248]	; (8005214 <UART_SetConfig+0xfd4>)
 800511a:	e012      	b.n	8005142 <UART_SetConfig+0xf02>
 800511c:	4b3e      	ldr	r3, [pc, #248]	; (8005218 <UART_SetConfig+0xfd8>)
 800511e:	e010      	b.n	8005142 <UART_SetConfig+0xf02>
 8005120:	4b3e      	ldr	r3, [pc, #248]	; (800521c <UART_SetConfig+0xfdc>)
 8005122:	e00e      	b.n	8005142 <UART_SetConfig+0xf02>
 8005124:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <UART_SetConfig+0xfe0>)
 8005126:	e00c      	b.n	8005142 <UART_SetConfig+0xf02>
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <UART_SetConfig+0xfe4>)
 800512a:	e00a      	b.n	8005142 <UART_SetConfig+0xf02>
 800512c:	4b3e      	ldr	r3, [pc, #248]	; (8005228 <UART_SetConfig+0xfe8>)
 800512e:	e008      	b.n	8005142 <UART_SetConfig+0xf02>
 8005130:	4b3e      	ldr	r3, [pc, #248]	; (800522c <UART_SetConfig+0xfec>)
 8005132:	e006      	b.n	8005142 <UART_SetConfig+0xf02>
 8005134:	4b3e      	ldr	r3, [pc, #248]	; (8005230 <UART_SetConfig+0xff0>)
 8005136:	e004      	b.n	8005142 <UART_SetConfig+0xf02>
 8005138:	4b3e      	ldr	r3, [pc, #248]	; (8005234 <UART_SetConfig+0xff4>)
 800513a:	e002      	b.n	8005142 <UART_SetConfig+0xf02>
 800513c:	4b3e      	ldr	r3, [pc, #248]	; (8005238 <UART_SetConfig+0xff8>)
 800513e:	e000      	b.n	8005142 <UART_SetConfig+0xf02>
 8005140:	4b33      	ldr	r3, [pc, #204]	; (8005210 <UART_SetConfig+0xfd0>)
 8005142:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005144:	6852      	ldr	r2, [r2, #4]
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	189a      	adds	r2, r3, r2
 800514a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	0019      	movs	r1, r3
 8005150:	0010      	movs	r0, r2
 8005152:	f7fa ffe9 	bl	8000128 <__udivsi3>
 8005156:	0003      	movs	r3, r0
 8005158:	b29b      	uxth	r3, r3
 800515a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800515c:	e0eb      	b.n	8005336 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515e:	f7fe faad 	bl	80036bc <HAL_RCC_GetSysClockFreq>
 8005162:	0003      	movs	r3, r0
 8005164:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2b00      	cmp	r3, #0
 800516c:	d100      	bne.n	8005170 <UART_SetConfig+0xf30>
 800516e:	e065      	b.n	800523c <UART_SetConfig+0xffc>
 8005170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	2b01      	cmp	r3, #1
 8005176:	d03e      	beq.n	80051f6 <UART_SetConfig+0xfb6>
 8005178:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517c:	2b02      	cmp	r3, #2
 800517e:	d038      	beq.n	80051f2 <UART_SetConfig+0xfb2>
 8005180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	2b03      	cmp	r3, #3
 8005186:	d032      	beq.n	80051ee <UART_SetConfig+0xfae>
 8005188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2b04      	cmp	r3, #4
 800518e:	d02c      	beq.n	80051ea <UART_SetConfig+0xfaa>
 8005190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005194:	2b05      	cmp	r3, #5
 8005196:	d026      	beq.n	80051e6 <UART_SetConfig+0xfa6>
 8005198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	2b06      	cmp	r3, #6
 800519e:	d020      	beq.n	80051e2 <UART_SetConfig+0xfa2>
 80051a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a4:	2b07      	cmp	r3, #7
 80051a6:	d01a      	beq.n	80051de <UART_SetConfig+0xf9e>
 80051a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ac:	2b08      	cmp	r3, #8
 80051ae:	d014      	beq.n	80051da <UART_SetConfig+0xf9a>
 80051b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b4:	2b09      	cmp	r3, #9
 80051b6:	d00e      	beq.n	80051d6 <UART_SetConfig+0xf96>
 80051b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	2b0a      	cmp	r3, #10
 80051be:	d008      	beq.n	80051d2 <UART_SetConfig+0xf92>
 80051c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	2b0b      	cmp	r3, #11
 80051c6:	d102      	bne.n	80051ce <UART_SetConfig+0xf8e>
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	e037      	b.n	800523e <UART_SetConfig+0xffe>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e035      	b.n	800523e <UART_SetConfig+0xffe>
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	e033      	b.n	800523e <UART_SetConfig+0xffe>
 80051d6:	2340      	movs	r3, #64	; 0x40
 80051d8:	e031      	b.n	800523e <UART_SetConfig+0xffe>
 80051da:	2320      	movs	r3, #32
 80051dc:	e02f      	b.n	800523e <UART_SetConfig+0xffe>
 80051de:	2310      	movs	r3, #16
 80051e0:	e02d      	b.n	800523e <UART_SetConfig+0xffe>
 80051e2:	230c      	movs	r3, #12
 80051e4:	e02b      	b.n	800523e <UART_SetConfig+0xffe>
 80051e6:	230a      	movs	r3, #10
 80051e8:	e029      	b.n	800523e <UART_SetConfig+0xffe>
 80051ea:	2308      	movs	r3, #8
 80051ec:	e027      	b.n	800523e <UART_SetConfig+0xffe>
 80051ee:	2306      	movs	r3, #6
 80051f0:	e025      	b.n	800523e <UART_SetConfig+0xffe>
 80051f2:	2304      	movs	r3, #4
 80051f4:	e023      	b.n	800523e <UART_SetConfig+0xffe>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e021      	b.n	800523e <UART_SetConfig+0xffe>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	00001554 	.word	0x00001554
 8005200:	00001998 	.word	0x00001998
 8005204:	00002aaa 	.word	0x00002aaa
 8005208:	0000ffff 	.word	0x0000ffff
 800520c:	0000f424 	.word	0x0000f424
 8005210:	00f42400 	.word	0x00f42400
 8005214:	0001e848 	.word	0x0001e848
 8005218:	0003d090 	.word	0x0003d090
 800521c:	0007a120 	.word	0x0007a120
 8005220:	000f4240 	.word	0x000f4240
 8005224:	00145855 	.word	0x00145855
 8005228:	00186a00 	.word	0x00186a00
 800522c:	001e8480 	.word	0x001e8480
 8005230:	0028b0aa 	.word	0x0028b0aa
 8005234:	003d0900 	.word	0x003d0900
 8005238:	007a1200 	.word	0x007a1200
 800523c:	2301      	movs	r3, #1
 800523e:	0019      	movs	r1, r3
 8005240:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005242:	f7fa ff71 	bl	8000128 <__udivsi3>
 8005246:	0003      	movs	r3, r0
 8005248:	001a      	movs	r2, r3
 800524a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	085b      	lsrs	r3, r3, #1
 8005250:	18d2      	adds	r2, r2, r3
 8005252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	0019      	movs	r1, r3
 8005258:	0010      	movs	r0, r2
 800525a:	f7fa ff65 	bl	8000128 <__udivsi3>
 800525e:	0003      	movs	r3, r0
 8005260:	b29b      	uxth	r3, r3
 8005262:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005264:	e067      	b.n	8005336 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005266:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04b      	beq.n	8005306 <UART_SetConfig+0x10c6>
 800526e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b01      	cmp	r3, #1
 8005274:	d044      	beq.n	8005300 <UART_SetConfig+0x10c0>
 8005276:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b02      	cmp	r3, #2
 800527c:	d03d      	beq.n	80052fa <UART_SetConfig+0x10ba>
 800527e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005282:	2b03      	cmp	r3, #3
 8005284:	d037      	beq.n	80052f6 <UART_SetConfig+0x10b6>
 8005286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	2b04      	cmp	r3, #4
 800528c:	d030      	beq.n	80052f0 <UART_SetConfig+0x10b0>
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	2b05      	cmp	r3, #5
 8005294:	d02a      	beq.n	80052ec <UART_SetConfig+0x10ac>
 8005296:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529a:	2b06      	cmp	r3, #6
 800529c:	d024      	beq.n	80052e8 <UART_SetConfig+0x10a8>
 800529e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a2:	2b07      	cmp	r3, #7
 80052a4:	d01d      	beq.n	80052e2 <UART_SetConfig+0x10a2>
 80052a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d016      	beq.n	80052dc <UART_SetConfig+0x109c>
 80052ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	2b09      	cmp	r3, #9
 80052b4:	d00f      	beq.n	80052d6 <UART_SetConfig+0x1096>
 80052b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	2b0a      	cmp	r3, #10
 80052bc:	d008      	beq.n	80052d0 <UART_SetConfig+0x1090>
 80052be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b0b      	cmp	r3, #11
 80052c4:	d101      	bne.n	80052ca <UART_SetConfig+0x108a>
 80052c6:	2380      	movs	r3, #128	; 0x80
 80052c8:	e01f      	b.n	800530a <UART_SetConfig+0x10ca>
 80052ca:	2380      	movs	r3, #128	; 0x80
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	e01c      	b.n	800530a <UART_SetConfig+0x10ca>
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	e019      	b.n	800530a <UART_SetConfig+0x10ca>
 80052d6:	2380      	movs	r3, #128	; 0x80
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	e016      	b.n	800530a <UART_SetConfig+0x10ca>
 80052dc:	2380      	movs	r3, #128	; 0x80
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	e013      	b.n	800530a <UART_SetConfig+0x10ca>
 80052e2:	2380      	movs	r3, #128	; 0x80
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	e010      	b.n	800530a <UART_SetConfig+0x10ca>
 80052e8:	4b28      	ldr	r3, [pc, #160]	; (800538c <UART_SetConfig+0x114c>)
 80052ea:	e00e      	b.n	800530a <UART_SetConfig+0x10ca>
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <UART_SetConfig+0x1150>)
 80052ee:	e00c      	b.n	800530a <UART_SetConfig+0x10ca>
 80052f0:	2380      	movs	r3, #128	; 0x80
 80052f2:	015b      	lsls	r3, r3, #5
 80052f4:	e009      	b.n	800530a <UART_SetConfig+0x10ca>
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <UART_SetConfig+0x1154>)
 80052f8:	e007      	b.n	800530a <UART_SetConfig+0x10ca>
 80052fa:	2380      	movs	r3, #128	; 0x80
 80052fc:	019b      	lsls	r3, r3, #6
 80052fe:	e004      	b.n	800530a <UART_SetConfig+0x10ca>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	01db      	lsls	r3, r3, #7
 8005304:	e001      	b.n	800530a <UART_SetConfig+0x10ca>
 8005306:	2380      	movs	r3, #128	; 0x80
 8005308:	021b      	lsls	r3, r3, #8
 800530a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800530c:	6852      	ldr	r2, [r2, #4]
 800530e:	0852      	lsrs	r2, r2, #1
 8005310:	189a      	adds	r2, r3, r2
 8005312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	0019      	movs	r1, r3
 8005318:	0010      	movs	r0, r2
 800531a:	f7fa ff05 	bl	8000128 <__udivsi3>
 800531e:	0003      	movs	r3, r0
 8005320:	b29b      	uxth	r3, r3
 8005322:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005324:	e007      	b.n	8005336 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 8005326:	231b      	movs	r3, #27
 8005328:	2258      	movs	r2, #88	; 0x58
 800532a:	4694      	mov	ip, r2
 800532c:	44bc      	add	ip, r7
 800532e:	4463      	add	r3, ip
 8005330:	2201      	movs	r2, #1
 8005332:	701a      	strb	r2, [r3, #0]
        break;
 8005334:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005336:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005338:	2b0f      	cmp	r3, #15
 800533a:	d908      	bls.n	800534e <UART_SetConfig+0x110e>
 800533c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800533e:	4a16      	ldr	r2, [pc, #88]	; (8005398 <UART_SetConfig+0x1158>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d804      	bhi.n	800534e <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8005344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800534a:	60da      	str	r2, [r3, #12]
 800534c:	e006      	b.n	800535c <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 800534e:	231b      	movs	r3, #27
 8005350:	2258      	movs	r2, #88	; 0x58
 8005352:	4694      	mov	ip, r2
 8005354:	44bc      	add	ip, r7
 8005356:	4463      	add	r3, ip
 8005358:	2201      	movs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800535c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800535e:	226a      	movs	r2, #106	; 0x6a
 8005360:	2101      	movs	r1, #1
 8005362:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005366:	2268      	movs	r2, #104	; 0x68
 8005368:	2101      	movs	r1, #1
 800536a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800536c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800536e:	2200      	movs	r2, #0
 8005370:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005374:	2200      	movs	r2, #0
 8005376:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005378:	231b      	movs	r3, #27
 800537a:	2258      	movs	r2, #88	; 0x58
 800537c:	4694      	mov	ip, r2
 800537e:	44bc      	add	ip, r7
 8005380:	4463      	add	r3, ip
 8005382:	781b      	ldrb	r3, [r3, #0]
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b021      	add	sp, #132	; 0x84
 800538a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538c:	00000aaa 	.word	0x00000aaa
 8005390:	00000ccc 	.word	0x00000ccc
 8005394:	00001555 	.word	0x00001555
 8005398:	0000ffff 	.word	0x0000ffff

0800539c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	2201      	movs	r2, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a4a      	ldr	r2, [pc, #296]	; (80054e0 <UART_AdvFeatureConfig+0x144>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	0019      	movs	r1, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ca:	2202      	movs	r2, #2
 80053cc:	4013      	ands	r3, r2
 80053ce:	d00b      	beq.n	80053e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	4a43      	ldr	r2, [pc, #268]	; (80054e4 <UART_AdvFeatureConfig+0x148>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	430a      	orrs	r2, r1
 80053e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ec:	2204      	movs	r2, #4
 80053ee:	4013      	ands	r3, r2
 80053f0:	d00b      	beq.n	800540a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	4a3b      	ldr	r2, [pc, #236]	; (80054e8 <UART_AdvFeatureConfig+0x14c>)
 80053fa:	4013      	ands	r3, r2
 80053fc:	0019      	movs	r1, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	430a      	orrs	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	2208      	movs	r2, #8
 8005410:	4013      	ands	r3, r2
 8005412:	d00b      	beq.n	800542c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4a34      	ldr	r2, [pc, #208]	; (80054ec <UART_AdvFeatureConfig+0x150>)
 800541c:	4013      	ands	r3, r2
 800541e:	0019      	movs	r1, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005430:	2210      	movs	r2, #16
 8005432:	4013      	ands	r3, r2
 8005434:	d00b      	beq.n	800544e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <UART_AdvFeatureConfig+0x154>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	430a      	orrs	r2, r1
 800544c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	2220      	movs	r2, #32
 8005454:	4013      	ands	r3, r2
 8005456:	d00b      	beq.n	8005470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	4a25      	ldr	r2, [pc, #148]	; (80054f4 <UART_AdvFeatureConfig+0x158>)
 8005460:	4013      	ands	r3, r2
 8005462:	0019      	movs	r1, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005474:	2240      	movs	r2, #64	; 0x40
 8005476:	4013      	ands	r3, r2
 8005478:	d01d      	beq.n	80054b6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <UART_AdvFeatureConfig+0x15c>)
 8005482:	4013      	ands	r3, r2
 8005484:	0019      	movs	r1, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	035b      	lsls	r3, r3, #13
 800549a:	429a      	cmp	r2, r3
 800549c:	d10b      	bne.n	80054b6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	4a15      	ldr	r2, [pc, #84]	; (80054fc <UART_AdvFeatureConfig+0x160>)
 80054a6:	4013      	ands	r3, r2
 80054a8:	0019      	movs	r1, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ba:	2280      	movs	r2, #128	; 0x80
 80054bc:	4013      	ands	r3, r2
 80054be:	d00b      	beq.n	80054d8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	4a0e      	ldr	r2, [pc, #56]	; (8005500 <UART_AdvFeatureConfig+0x164>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	0019      	movs	r1, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	430a      	orrs	r2, r1
 80054d6:	605a      	str	r2, [r3, #4]
  }
}
 80054d8:	46c0      	nop			; (mov r8, r8)
 80054da:	46bd      	mov	sp, r7
 80054dc:	b002      	add	sp, #8
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	fffdffff 	.word	0xfffdffff
 80054e4:	fffeffff 	.word	0xfffeffff
 80054e8:	fffbffff 	.word	0xfffbffff
 80054ec:	ffff7fff 	.word	0xffff7fff
 80054f0:	ffffefff 	.word	0xffffefff
 80054f4:	ffffdfff 	.word	0xffffdfff
 80054f8:	ffefffff 	.word	0xffefffff
 80054fc:	ff9fffff 	.word	0xff9fffff
 8005500:	fff7ffff 	.word	0xfff7ffff

08005504 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af02      	add	r7, sp, #8
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2288      	movs	r2, #136	; 0x88
 8005510:	2100      	movs	r1, #0
 8005512:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005514:	f7fc feb4 	bl	8002280 <HAL_GetTick>
 8005518:	0003      	movs	r3, r0
 800551a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2208      	movs	r2, #8
 8005524:	4013      	ands	r3, r2
 8005526:	2b08      	cmp	r3, #8
 8005528:	d10d      	bne.n	8005546 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	2380      	movs	r3, #128	; 0x80
 800552e:	0399      	lsls	r1, r3, #14
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	4b18      	ldr	r3, [pc, #96]	; (8005594 <UART_CheckIdleState+0x90>)
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	0013      	movs	r3, r2
 8005538:	2200      	movs	r2, #0
 800553a:	f000 f82d 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 800553e:	1e03      	subs	r3, r0, #0
 8005540:	d001      	beq.n	8005546 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e021      	b.n	800558a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2204      	movs	r2, #4
 800554e:	4013      	ands	r3, r2
 8005550:	2b04      	cmp	r3, #4
 8005552:	d10d      	bne.n	8005570 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	2380      	movs	r3, #128	; 0x80
 8005558:	03d9      	lsls	r1, r3, #15
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	4b0d      	ldr	r3, [pc, #52]	; (8005594 <UART_CheckIdleState+0x90>)
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	0013      	movs	r3, r2
 8005562:	2200      	movs	r2, #0
 8005564:	f000 f818 	bl	8005598 <UART_WaitOnFlagUntilTimeout>
 8005568:	1e03      	subs	r3, r0, #0
 800556a:	d001      	beq.n	8005570 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e00c      	b.n	800558a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2280      	movs	r2, #128	; 0x80
 8005574:	2120      	movs	r1, #32
 8005576:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2284      	movs	r2, #132	; 0x84
 800557c:	2120      	movs	r1, #32
 800557e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	227c      	movs	r2, #124	; 0x7c
 8005584:	2100      	movs	r1, #0
 8005586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	0018      	movs	r0, r3
 800558c:	46bd      	mov	sp, r7
 800558e:	b004      	add	sp, #16
 8005590:	bd80      	pop	{r7, pc}
 8005592:	46c0      	nop			; (mov r8, r8)
 8005594:	01ffffff 	.word	0x01ffffff

08005598 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	603b      	str	r3, [r7, #0]
 80055a4:	1dfb      	adds	r3, r7, #7
 80055a6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055a8:	e02b      	b.n	8005602 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	69bb      	ldr	r3, [r7, #24]
 80055ac:	3301      	adds	r3, #1
 80055ae:	d028      	beq.n	8005602 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b0:	f7fc fe66 	bl	8002280 <HAL_GetTick>
 80055b4:	0002      	movs	r2, r0
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d302      	bcc.n	80055c6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d11d      	bne.n	8005602 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4916      	ldr	r1, [pc, #88]	; (800562c <UART_WaitOnFlagUntilTimeout+0x94>)
 80055d2:	400a      	ands	r2, r1
 80055d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2101      	movs	r1, #1
 80055e2:	438a      	bics	r2, r1
 80055e4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2280      	movs	r2, #128	; 0x80
 80055ea:	2120      	movs	r1, #32
 80055ec:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2284      	movs	r2, #132	; 0x84
 80055f2:	2120      	movs	r1, #32
 80055f4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	227c      	movs	r2, #124	; 0x7c
 80055fa:	2100      	movs	r1, #0
 80055fc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e00f      	b.n	8005622 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	4013      	ands	r3, r2
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	425a      	negs	r2, r3
 8005612:	4153      	adcs	r3, r2
 8005614:	b2db      	uxtb	r3, r3
 8005616:	001a      	movs	r2, r3
 8005618:	1dfb      	adds	r3, r7, #7
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d0c4      	beq.n	80055aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	0018      	movs	r0, r3
 8005624:	46bd      	mov	sp, r7
 8005626:	b004      	add	sp, #16
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	fffffe5f 	.word	0xfffffe5f

08005630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	490b      	ldr	r1, [pc, #44]	; (8005670 <UART_EndRxTransfer+0x40>)
 8005644:	400a      	ands	r2, r1
 8005646:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4908      	ldr	r1, [pc, #32]	; (8005674 <UART_EndRxTransfer+0x44>)
 8005654:	400a      	ands	r2, r1
 8005656:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2284      	movs	r2, #132	; 0x84
 800565c:	2120      	movs	r1, #32
 800565e:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8005666:	46c0      	nop			; (mov r8, r8)
 8005668:	46bd      	mov	sp, r7
 800566a:	b002      	add	sp, #8
 800566c:	bd80      	pop	{r7, pc}
 800566e:	46c0      	nop			; (mov r8, r8)
 8005670:	fffffedf 	.word	0xfffffedf
 8005674:	effffffe 	.word	0xeffffffe

08005678 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005684:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	225e      	movs	r2, #94	; 0x5e
 800568a:	2100      	movs	r1, #0
 800568c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2256      	movs	r2, #86	; 0x56
 8005692:	2100      	movs	r1, #0
 8005694:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	0018      	movs	r0, r3
 800569a:	f7fe fdc9 	bl	8004230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	b004      	add	sp, #16
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	438a      	bics	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2280      	movs	r2, #128	; 0x80
 80056c2:	2120      	movs	r1, #32
 80056c4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	0018      	movs	r0, r3
 80056d0:	f7fe fd9e 	bl	8004210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d4:	46c0      	nop			; (mov r8, r8)
 80056d6:	46bd      	mov	sp, r7
 80056d8:	b002      	add	sp, #8
 80056da:	bd80      	pop	{r7, pc}

080056dc <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80056e4:	230e      	movs	r3, #14
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	2160      	movs	r1, #96	; 0x60
 80056ec:	5a52      	ldrh	r2, [r2, r1]
 80056ee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2284      	movs	r2, #132	; 0x84
 80056f4:	589b      	ldr	r3, [r3, r2]
 80056f6:	2b22      	cmp	r3, #34	; 0x22
 80056f8:	d141      	bne.n	800577e <UART_RxISR_8BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005700:	210c      	movs	r1, #12
 8005702:	187b      	adds	r3, r7, r1
 8005704:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005706:	187b      	adds	r3, r7, r1
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	230e      	movs	r3, #14
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b2d9      	uxtb	r1, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005718:	400a      	ands	r2, r1
 800571a:	b2d2      	uxtb	r2, r2
 800571c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	225e      	movs	r2, #94	; 0x5e
 800572c:	5a9b      	ldrh	r3, [r3, r2]
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b299      	uxth	r1, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	225e      	movs	r2, #94	; 0x5e
 8005738:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	225e      	movs	r2, #94	; 0x5e
 800573e:	5a9b      	ldrh	r3, [r3, r2]
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d123      	bne.n	800578e <UART_RxISR_8BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4911      	ldr	r1, [pc, #68]	; (8005798 <UART_RxISR_8BIT+0xbc>)
 8005752:	400a      	ands	r2, r1
 8005754:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2101      	movs	r1, #1
 8005762:	438a      	bics	r2, r1
 8005764:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2284      	movs	r2, #132	; 0x84
 800576a:	2120      	movs	r1, #32
 800576c:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	0018      	movs	r0, r3
 8005778:	f7fe fd52 	bl	8004220 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800577c:	e007      	b.n	800578e <UART_RxISR_8BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	699a      	ldr	r2, [r3, #24]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2108      	movs	r1, #8
 800578a:	430a      	orrs	r2, r1
 800578c:	619a      	str	r2, [r3, #24]
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b004      	add	sp, #16
 8005794:	bd80      	pop	{r7, pc}
 8005796:	46c0      	nop			; (mov r8, r8)
 8005798:	fffffedf 	.word	0xfffffedf

0800579c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057a4:	230e      	movs	r3, #14
 80057a6:	18fb      	adds	r3, r7, r3
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	2160      	movs	r1, #96	; 0x60
 80057ac:	5a52      	ldrh	r2, [r2, r1]
 80057ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2284      	movs	r2, #132	; 0x84
 80057b4:	589b      	ldr	r3, [r3, r2]
 80057b6:	2b22      	cmp	r3, #34	; 0x22
 80057b8:	d141      	bne.n	800583e <UART_RxISR_16BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c0:	210c      	movs	r1, #12
 80057c2:	187b      	adds	r3, r7, r1
 80057c4:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ca:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80057cc:	187b      	adds	r3, r7, r1
 80057ce:	220e      	movs	r2, #14
 80057d0:	18ba      	adds	r2, r7, r2
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	8812      	ldrh	r2, [r2, #0]
 80057d6:	4013      	ands	r3, r2
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	1c9a      	adds	r2, r3, #2
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	225e      	movs	r2, #94	; 0x5e
 80057ec:	5a9b      	ldrh	r3, [r3, r2]
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	3b01      	subs	r3, #1
 80057f2:	b299      	uxth	r1, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	225e      	movs	r2, #94	; 0x5e
 80057f8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	225e      	movs	r2, #94	; 0x5e
 80057fe:	5a9b      	ldrh	r3, [r3, r2]
 8005800:	b29b      	uxth	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d123      	bne.n	800584e <UART_RxISR_16BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4911      	ldr	r1, [pc, #68]	; (8005858 <UART_RxISR_16BIT+0xbc>)
 8005812:	400a      	ands	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2101      	movs	r1, #1
 8005822:	438a      	bics	r2, r1
 8005824:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2284      	movs	r2, #132	; 0x84
 800582a:	2120      	movs	r1, #32
 800582c:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	0018      	movs	r0, r3
 8005838:	f7fe fcf2 	bl	8004220 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800583c:	e007      	b.n	800584e <UART_RxISR_16BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2108      	movs	r1, #8
 800584a:	430a      	orrs	r2, r1
 800584c:	619a      	str	r2, [r3, #24]
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	b004      	add	sp, #16
 8005854:	bd80      	pop	{r7, pc}
 8005856:	46c0      	nop			; (mov r8, r8)
 8005858:	fffffedf 	.word	0xfffffedf

0800585c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005864:	230c      	movs	r3, #12
 8005866:	18fb      	adds	r3, r7, r3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	2160      	movs	r1, #96	; 0x60
 800586c:	5a52      	ldrh	r2, [r2, r1]
 800586e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2284      	movs	r2, #132	; 0x84
 8005874:	589b      	ldr	r3, [r3, r2]
 8005876:	2b22      	cmp	r3, #34	; 0x22
 8005878:	d000      	beq.n	800587c <UART_RxISR_8BIT_FIFOEN+0x20>
 800587a:	e078      	b.n	800596e <UART_RxISR_8BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800587c:	230e      	movs	r3, #14
 800587e:	18fb      	adds	r3, r7, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	2168      	movs	r1, #104	; 0x68
 8005884:	5a52      	ldrh	r2, [r2, r1]
 8005886:	801a      	strh	r2, [r3, #0]
 8005888:	e046      	b.n	8005918 <UART_RxISR_8BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005890:	2108      	movs	r1, #8
 8005892:	187b      	adds	r3, r7, r1
 8005894:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005896:	187b      	adds	r3, r7, r1
 8005898:	881b      	ldrh	r3, [r3, #0]
 800589a:	b2da      	uxtb	r2, r3
 800589c:	230c      	movs	r3, #12
 800589e:	18fb      	adds	r3, r7, r3
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	b2d9      	uxtb	r1, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a8:	400a      	ands	r2, r1
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	1c5a      	adds	r2, r3, #1
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	225e      	movs	r2, #94	; 0x5e
 80058bc:	5a9b      	ldrh	r3, [r3, r2]
 80058be:	b29b      	uxth	r3, r3
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b299      	uxth	r1, r3
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	225e      	movs	r2, #94	; 0x5e
 80058c8:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	225e      	movs	r2, #94	; 0x5e
 80058ce:	5a9b      	ldrh	r3, [r3, r2]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d11a      	bne.n	800590c <UART_RxISR_8BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4929      	ldr	r1, [pc, #164]	; (8005988 <UART_RxISR_8BIT_FIFOEN+0x12c>)
 80058e2:	400a      	ands	r2, r1
 80058e4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4926      	ldr	r1, [pc, #152]	; (800598c <UART_RxISR_8BIT_FIFOEN+0x130>)
 80058f2:	400a      	ands	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2284      	movs	r2, #132	; 0x84
 80058fa:	2120      	movs	r1, #32
 80058fc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	0018      	movs	r0, r3
 8005908:	f7fe fc8a 	bl	8004220 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800590c:	210e      	movs	r1, #14
 800590e:	187b      	adds	r3, r7, r1
 8005910:	881a      	ldrh	r2, [r3, #0]
 8005912:	187b      	adds	r3, r7, r1
 8005914:	3a01      	subs	r2, #1
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	230e      	movs	r3, #14
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	881b      	ldrh	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1b3      	bne.n	800588a <UART_RxISR_8BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005922:	200a      	movs	r0, #10
 8005924:	183b      	adds	r3, r7, r0
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	215e      	movs	r1, #94	; 0x5e
 800592a:	5a52      	ldrh	r2, [r2, r1]
 800592c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800592e:	183b      	adds	r3, r7, r0
 8005930:	881b      	ldrh	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d023      	beq.n	800597e <UART_RxISR_8BIT_FIFOEN+0x122>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2268      	movs	r2, #104	; 0x68
 800593a:	5a9b      	ldrh	r3, [r3, r2]
 800593c:	220a      	movs	r2, #10
 800593e:	18ba      	adds	r2, r7, r2
 8005940:	8812      	ldrh	r2, [r2, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d21b      	bcs.n	800597e <UART_RxISR_8BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	490f      	ldr	r1, [pc, #60]	; (8005990 <UART_RxISR_8BIT_FIFOEN+0x134>)
 8005952:	400a      	ands	r2, r1
 8005954:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a0e      	ldr	r2, [pc, #56]	; (8005994 <UART_RxISR_8BIT_FIFOEN+0x138>)
 800595a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2120      	movs	r1, #32
 8005968:	430a      	orrs	r2, r1
 800596a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800596c:	e007      	b.n	800597e <UART_RxISR_8BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	699a      	ldr	r2, [r3, #24]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2108      	movs	r1, #8
 800597a:	430a      	orrs	r2, r1
 800597c:	619a      	str	r2, [r3, #24]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b004      	add	sp, #16
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	fffffeff 	.word	0xfffffeff
 800598c:	effffffe 	.word	0xeffffffe
 8005990:	efffffff 	.word	0xefffffff
 8005994:	080056dd 	.word	0x080056dd

08005998 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b086      	sub	sp, #24
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80059a0:	2314      	movs	r3, #20
 80059a2:	18fb      	adds	r3, r7, r3
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	2160      	movs	r1, #96	; 0x60
 80059a8:	5a52      	ldrh	r2, [r2, r1]
 80059aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2284      	movs	r2, #132	; 0x84
 80059b0:	589b      	ldr	r3, [r3, r2]
 80059b2:	2b22      	cmp	r3, #34	; 0x22
 80059b4:	d000      	beq.n	80059b8 <UART_RxISR_16BIT_FIFOEN+0x20>
 80059b6:	e078      	b.n	8005aaa <UART_RxISR_16BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80059b8:	2316      	movs	r3, #22
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	2168      	movs	r1, #104	; 0x68
 80059c0:	5a52      	ldrh	r2, [r2, r1]
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e046      	b.n	8005a54 <UART_RxISR_16BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059cc:	2110      	movs	r1, #16
 80059ce:	187b      	adds	r3, r7, r1
 80059d0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d6:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 80059d8:	187b      	adds	r3, r7, r1
 80059da:	2214      	movs	r2, #20
 80059dc:	18ba      	adds	r2, r7, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	4013      	ands	r3, r2
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ee:	1c9a      	adds	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	225e      	movs	r2, #94	; 0x5e
 80059f8:	5a9b      	ldrh	r3, [r3, r2]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b299      	uxth	r1, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	225e      	movs	r2, #94	; 0x5e
 8005a04:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	225e      	movs	r2, #94	; 0x5e
 8005a0a:	5a9b      	ldrh	r3, [r3, r2]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d11a      	bne.n	8005a48 <UART_RxISR_16BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4929      	ldr	r1, [pc, #164]	; (8005ac4 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 8005a1e:	400a      	ands	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4926      	ldr	r1, [pc, #152]	; (8005ac8 <UART_RxISR_16BIT_FIFOEN+0x130>)
 8005a2e:	400a      	ands	r2, r1
 8005a30:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2284      	movs	r2, #132	; 0x84
 8005a36:	2120      	movs	r1, #32
 8005a38:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	0018      	movs	r0, r3
 8005a44:	f7fe fbec 	bl	8004220 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005a48:	2116      	movs	r1, #22
 8005a4a:	187b      	adds	r3, r7, r1
 8005a4c:	881a      	ldrh	r2, [r3, #0]
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	3a01      	subs	r2, #1
 8005a52:	801a      	strh	r2, [r3, #0]
 8005a54:	2316      	movs	r3, #22
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d1b3      	bne.n	80059c6 <UART_RxISR_16BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a5e:	2012      	movs	r0, #18
 8005a60:	183b      	adds	r3, r7, r0
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	215e      	movs	r1, #94	; 0x5e
 8005a66:	5a52      	ldrh	r2, [r2, r1]
 8005a68:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a6a:	183b      	adds	r3, r7, r0
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d023      	beq.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x122>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2268      	movs	r2, #104	; 0x68
 8005a76:	5a9b      	ldrh	r3, [r3, r2]
 8005a78:	2212      	movs	r2, #18
 8005a7a:	18ba      	adds	r2, r7, r2
 8005a7c:	8812      	ldrh	r2, [r2, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d21b      	bcs.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	490f      	ldr	r1, [pc, #60]	; (8005acc <UART_RxISR_16BIT_FIFOEN+0x134>)
 8005a8e:	400a      	ands	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <UART_RxISR_16BIT_FIFOEN+0x138>)
 8005a96:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2120      	movs	r1, #32
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005aa8:	e007      	b.n	8005aba <UART_RxISR_16BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	699a      	ldr	r2, [r3, #24]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2108      	movs	r1, #8
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	619a      	str	r2, [r3, #24]
}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	46bd      	mov	sp, r7
 8005abe:	b006      	add	sp, #24
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	fffffeff 	.word	0xfffffeff
 8005ac8:	effffffe 	.word	0xeffffffe
 8005acc:	efffffff 	.word	0xefffffff
 8005ad0:	0800579d 	.word	0x0800579d

08005ad4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005adc:	46c0      	nop			; (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005aec:	46c0      	nop			; (mov r8, r8)
 8005aee:	46bd      	mov	sp, r7
 8005af0:	b002      	add	sp, #8
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005afc:	46c0      	nop			; (mov r8, r8)
 8005afe:	46bd      	mov	sp, r7
 8005b00:	b002      	add	sp, #8
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	227c      	movs	r2, #124	; 0x7c
 8005b10:	5c9b      	ldrb	r3, [r3, r2]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_UARTEx_DisableFifoMode+0x16>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e027      	b.n	8005b6a <HAL_UARTEx_DisableFifoMode+0x66>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	227c      	movs	r2, #124	; 0x7c
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	2124      	movs	r1, #36	; 0x24
 8005b28:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2101      	movs	r1, #1
 8005b3e:	438a      	bics	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a0b      	ldr	r2, [pc, #44]	; (8005b74 <HAL_UARTEx_DisableFifoMode+0x70>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2280      	movs	r2, #128	; 0x80
 8005b5c:	2120      	movs	r1, #32
 8005b5e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	227c      	movs	r2, #124	; 0x7c
 8005b64:	2100      	movs	r1, #0
 8005b66:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	0018      	movs	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b004      	add	sp, #16
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	dfffffff 	.word	0xdfffffff

08005b78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	227c      	movs	r2, #124	; 0x7c
 8005b86:	5c9b      	ldrb	r3, [r3, r2]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e02e      	b.n	8005bee <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	227c      	movs	r2, #124	; 0x7c
 8005b94:	2101      	movs	r1, #1
 8005b96:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2280      	movs	r2, #128	; 0x80
 8005b9c:	2124      	movs	r1, #36	; 0x24
 8005b9e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	438a      	bics	r2, r1
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689b      	ldr	r3, [r3, #8]
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	08d9      	lsrs	r1, r3, #3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	0018      	movs	r0, r3
 8005bd0:	f000 f854 	bl	8005c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2280      	movs	r2, #128	; 0x80
 8005be0:	2120      	movs	r1, #32
 8005be2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	227c      	movs	r2, #124	; 0x7c
 8005be8:	2100      	movs	r1, #0
 8005bea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	0018      	movs	r0, r3
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	b004      	add	sp, #16
 8005bf4:	bd80      	pop	{r7, pc}
	...

08005bf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	227c      	movs	r2, #124	; 0x7c
 8005c06:	5c9b      	ldrb	r3, [r3, r2]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e02f      	b.n	8005c70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	227c      	movs	r2, #124	; 0x7c
 8005c14:	2101      	movs	r1, #1
 8005c16:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2280      	movs	r2, #128	; 0x80
 8005c1c:	2124      	movs	r1, #36	; 0x24
 8005c1e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2101      	movs	r1, #1
 8005c34:	438a      	bics	r2, r1
 8005c36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	4a0e      	ldr	r2, [pc, #56]	; (8005c78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	0019      	movs	r1, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	0018      	movs	r0, r3
 8005c52:	f000 f813 	bl	8005c7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2280      	movs	r2, #128	; 0x80
 8005c62:	2120      	movs	r1, #32
 8005c64:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	227c      	movs	r2, #124	; 0x7c
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	0018      	movs	r0, r3
 8005c72:	46bd      	mov	sp, r7
 8005c74:	b004      	add	sp, #16
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	f1ffffff 	.word	0xf1ffffff

08005c7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005c84:	2314      	movs	r3, #20
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	4a2f      	ldr	r2, [pc, #188]	; (8005d48 <UARTEx_SetNbDataToProcess+0xcc>)
 8005c8a:	ca03      	ldmia	r2!, {r0, r1}
 8005c8c:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005c8e:	230c      	movs	r3, #12
 8005c90:	18fb      	adds	r3, r7, r3
 8005c92:	4a2e      	ldr	r2, [pc, #184]	; (8005d4c <UARTEx_SetNbDataToProcess+0xd0>)
 8005c94:	ca03      	ldmia	r2!, {r0, r1}
 8005c96:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d108      	bne.n	8005cb2 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	226a      	movs	r2, #106	; 0x6a
 8005ca4:	2101      	movs	r1, #1
 8005ca6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2268      	movs	r2, #104	; 0x68
 8005cac:	2101      	movs	r1, #1
 8005cae:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cb0:	e046      	b.n	8005d40 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cb2:	261f      	movs	r6, #31
 8005cb4:	19bb      	adds	r3, r7, r6
 8005cb6:	2208      	movs	r2, #8
 8005cb8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005cba:	201e      	movs	r0, #30
 8005cbc:	183b      	adds	r3, r7, r0
 8005cbe:	2208      	movs	r2, #8
 8005cc0:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	0e5b      	lsrs	r3, r3, #25
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	241d      	movs	r4, #29
 8005cce:	193b      	adds	r3, r7, r4
 8005cd0:	2107      	movs	r1, #7
 8005cd2:	400a      	ands	r2, r1
 8005cd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0f5b      	lsrs	r3, r3, #29
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	251c      	movs	r5, #28
 8005ce2:	197b      	adds	r3, r7, r5
 8005ce4:	2107      	movs	r1, #7
 8005ce6:	400a      	ands	r2, r1
 8005ce8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005cea:	183b      	adds	r3, r7, r0
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	197a      	adds	r2, r7, r5
 8005cf0:	7812      	ldrb	r2, [r2, #0]
 8005cf2:	2114      	movs	r1, #20
 8005cf4:	1879      	adds	r1, r7, r1
 8005cf6:	5c8a      	ldrb	r2, [r1, r2]
 8005cf8:	435a      	muls	r2, r3
 8005cfa:	0010      	movs	r0, r2
 8005cfc:	197b      	adds	r3, r7, r5
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	250c      	movs	r5, #12
 8005d02:	197a      	adds	r2, r7, r5
 8005d04:	5cd3      	ldrb	r3, [r2, r3]
 8005d06:	0019      	movs	r1, r3
 8005d08:	f7fa fa98 	bl	800023c <__divsi3>
 8005d0c:	0003      	movs	r3, r0
 8005d0e:	b299      	uxth	r1, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	226a      	movs	r2, #106	; 0x6a
 8005d14:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005d16:	19bb      	adds	r3, r7, r6
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	193a      	adds	r2, r7, r4
 8005d1c:	7812      	ldrb	r2, [r2, #0]
 8005d1e:	2114      	movs	r1, #20
 8005d20:	1879      	adds	r1, r7, r1
 8005d22:	5c8a      	ldrb	r2, [r1, r2]
 8005d24:	435a      	muls	r2, r3
 8005d26:	0010      	movs	r0, r2
 8005d28:	193b      	adds	r3, r7, r4
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	197a      	adds	r2, r7, r5
 8005d2e:	5cd3      	ldrb	r3, [r2, r3]
 8005d30:	0019      	movs	r1, r3
 8005d32:	f7fa fa83 	bl	800023c <__divsi3>
 8005d36:	0003      	movs	r3, r0
 8005d38:	b299      	uxth	r1, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2268      	movs	r2, #104	; 0x68
 8005d3e:	5299      	strh	r1, [r3, r2]
}
 8005d40:	46c0      	nop			; (mov r8, r8)
 8005d42:	46bd      	mov	sp, r7
 8005d44:	b009      	add	sp, #36	; 0x24
 8005d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d48:	08009b68 	.word	0x08009b68
 8005d4c:	08009b70 	.word	0x08009b70

08005d50 <LL_PWR_EnableFlashPowerDownInStop>:
  * @brief  Enable Flash Power-down mode during stop mode
  * @rmtoll CR1          CFIPD_STOP    LL_PWR_EnableFlashPowerDownInStop
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableFlashPowerDownInStop(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_FPD_STOP);
 8005d54:	4b04      	ldr	r3, [pc, #16]	; (8005d68 <LL_PWR_EnableFlashPowerDownInStop+0x18>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <LL_PWR_EnableFlashPowerDownInStop+0x18>)
 8005d5a:	2108      	movs	r1, #8
 8005d5c:	430a      	orrs	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
}
 8005d60:	46c0      	nop			; (mov r8, r8)
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	46c0      	nop			; (mov r8, r8)
 8005d68:	40007000 	.word	0x40007000

08005d6c <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 8005d74:	4b06      	ldr	r3, [pc, #24]	; (8005d90 <LL_PWR_SetPowerMode+0x24>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2207      	movs	r2, #7
 8005d7a:	4393      	bics	r3, r2
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	4b04      	ldr	r3, [pc, #16]	; (8005d90 <LL_PWR_SetPowerMode+0x24>)
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	b002      	add	sp, #8
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	40007000 	.word	0x40007000

08005d94 <LL_PWR_EnableSRAMRetention>:
  * @brief  Enable SRAM content retention in Standby mode
  * @rmtoll CR3          RRS           LL_PWR_EnableSRAMRetention
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableSRAMRetention(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 8005d98:	4b04      	ldr	r3, [pc, #16]	; (8005dac <LL_PWR_EnableSRAMRetention+0x18>)
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	4b03      	ldr	r3, [pc, #12]	; (8005dac <LL_PWR_EnableSRAMRetention+0x18>)
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	0049      	lsls	r1, r1, #1
 8005da2:	430a      	orrs	r2, r1
 8005da4:	609a      	str	r2, [r3, #8]
}
 8005da6:	46c0      	nop			; (mov r8, r8)
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	40007000 	.word	0x40007000

08005db0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005db4:	4b04      	ldr	r3, [pc, #16]	; (8005dc8 <LL_LPM_EnableSleep+0x18>)
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	4b03      	ldr	r3, [pc, #12]	; (8005dc8 <LL_LPM_EnableSleep+0x18>)
 8005dba:	2104      	movs	r1, #4
 8005dbc:	438a      	bics	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	46c0      	nop			; (mov r8, r8)
 8005dc8:	e000ed00 	.word	0xe000ed00

08005dcc <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <LL_LPM_EnableDeepSleep+0x18>)
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	4b03      	ldr	r3, [pc, #12]	; (8005de4 <LL_LPM_EnableDeepSleep+0x18>)
 8005dd6:	2104      	movs	r1, #4
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	611a      	str	r2, [r3, #16]
}
 8005ddc:	46c0      	nop			; (mov r8, r8)
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	46c0      	nop			; (mov r8, r8)
 8005de4:	e000ed00 	.word	0xe000ed00

08005de8 <LL_LPM_DisableSleepOnExit>:
  * @brief  Do not sleep when returning to Thread mode.
  * @rmtoll SCB_SCR      SLEEPONEXIT   LL_LPM_DisableSleepOnExit
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8005dec:	4b04      	ldr	r3, [pc, #16]	; (8005e00 <LL_LPM_DisableSleepOnExit+0x18>)
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	4b03      	ldr	r3, [pc, #12]	; (8005e00 <LL_LPM_DisableSleepOnExit+0x18>)
 8005df2:	2102      	movs	r1, #2
 8005df4:	438a      	bics	r2, r1
 8005df6:	611a      	str	r2, [r3, #16]
}
 8005df8:	46c0      	nop			; (mov r8, r8)
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	46c0      	nop			; (mov r8, r8)
 8005e00:	e000ed00 	.word	0xe000ed00

08005e04 <LL_LPM_EnableEventOnPend>:
  *         processor.
  * @rmtoll SCB_SCR      SEVEONPEND    LL_LPM_EnableEventOnPend
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableEventOnPend(void)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	af00      	add	r7, sp, #0
  /* Set SEVEONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8005e08:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <LL_LPM_EnableEventOnPend+0x18>)
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <LL_LPM_EnableEventOnPend+0x18>)
 8005e0e:	2110      	movs	r1, #16
 8005e10:	430a      	orrs	r2, r1
 8005e12:	611a      	str	r2, [r3, #16]
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	e000ed00 	.word	0xe000ed00

08005e20 <eventWait>:

// Forwards
void eventSleep(uint32_t wakeEvents);

// Wait for any of these events to happen, with a high-granularity timeout (granularity defined by LPTIM1)
bool eventWait(uint32_t events, uint32_t timeoutMs) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]

    if (timeoutMs != 0) {
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00d      	beq.n	8005e4c <eventWait+0x2c>
#ifdef EVENT_TIMER
        eventClear(EVENT_TIMER);
 8005e30:	2001      	movs	r0, #1
 8005e32:	f000 f855 	bl	8005ee0 <eventClear>
        events |= EVENT_TIMER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	607b      	str	r3, [r7, #4]
        eventTimerExpiresMs = MY_TimerMs() + timeoutMs;
 8005e3e:	f000 fb4f 	bl	80064e0 <MY_TimerMs>
 8005e42:	0002      	movs	r2, r0
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	18d2      	adds	r2, r2, r3
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <eventWait+0x58>)
 8005e4a:	601a      	str	r2, [r3, #0]
        eventTimerExpiresMs = HAL_Ticks() + timeoutMs;
#endif
    }

    // Sleep until any of these events happens
    eventSleep(events);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	0018      	movs	r0, r3
 8005e50:	f000 f858 	bl	8005f04 <eventSleep>

    // Mask off anything except non-timer events that we're looking for
    events &= eventOccurred();
 8005e54:	f000 f83a 	bl	8005ecc <eventOccurred>
 8005e58:	0002      	movs	r2, r0
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	607b      	str	r3, [r7, #4]
#ifdef EVENT_TIMER
    events &= ~EVENT_TIMER;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	4393      	bics	r3, r2
 8005e66:	607b      	str	r3, [r7, #4]
#endif

    // Return TRUE if an event other than timeout occurred
    return (events != 0);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	1e5a      	subs	r2, r3, #1
 8005e6c:	4193      	sbcs	r3, r2
 8005e6e:	b2db      	uxtb	r3, r3

}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b002      	add	sp, #8
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000220 	.word	0x20000220

08005e7c <eventPollTimer>:

// Poll to see if any timer events transpired
#ifdef EVENT_TIMER
void eventPollTimer() {
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
    if (eventTimerExpiresMs != 0 && MY_TimerMs() >= eventTimerExpiresMs) {
 8005e80:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <eventPollTimer+0x2c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00c      	beq.n	8005ea2 <eventPollTimer+0x26>
 8005e88:	f000 fb2a 	bl	80064e0 <MY_TimerMs>
 8005e8c:	0002      	movs	r2, r0
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <eventPollTimer+0x2c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d305      	bcc.n	8005ea2 <eventPollTimer+0x26>
        eventTimerExpiresMs = 0;
 8005e96:	4b04      	ldr	r3, [pc, #16]	; (8005ea8 <eventPollTimer+0x2c>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
        event(EVENT_TIMER);
 8005e9c:	2001      	movs	r0, #1
 8005e9e:	f000 f805 	bl	8005eac <event>
    }
}
 8005ea2:	46c0      	nop			; (mov r8, r8)
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20000220 	.word	0x20000220

08005eac <event>:
#endif

// Mark that an event has transpired.  Note that this is safe to call from an ISR
void event(uint32_t event) {
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
    eventsThatHappened |= event;
 8005eb4:	4b04      	ldr	r3, [pc, #16]	; (8005ec8 <event+0x1c>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	4b02      	ldr	r3, [pc, #8]	; (8005ec8 <event+0x1c>)
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	2000021c 	.word	0x2000021c

08005ecc <eventOccurred>:

// Get the mask of events that have occurred
uint32_t eventOccurred() {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	af00      	add	r7, sp, #0
    return eventsThatHappened;
 8005ed0:	4b02      	ldr	r3, [pc, #8]	; (8005edc <eventOccurred+0x10>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	2000021c 	.word	0x2000021c

08005ee0 <eventClear>:

// Mark that we're no longer interested in an event
void eventClear(uint32_t event) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
    eventsThatHappened &= ~event;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	43da      	mvns	r2, r3
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <eventClear+0x20>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	401a      	ands	r2, r3
 8005ef2:	4b03      	ldr	r3, [pc, #12]	; (8005f00 <eventClear+0x20>)
 8005ef4:	601a      	str	r2, [r3, #0]
}
 8005ef6:	46c0      	nop			; (mov r8, r8)
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	b002      	add	sp, #8
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	2000021c 	.word	0x2000021c

08005f04 <eventSleep>:

// Go into a sleep state if it's appropriate to do so, else simply return
void eventSleep(uint32_t wakeEvents) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]

    // Exit immediately if the event already occurred
    if ((eventsThatHappened & wakeEvents) != 0)
 8005f0c:	4b24      	ldr	r3, [pc, #144]	; (8005fa0 <eventSleep+0x9c>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4013      	ands	r3, r2
 8005f14:	d13f      	bne.n	8005f96 <eventSleep+0x92>
    }

#else

    // If any of several conditions hold true, we will wait for events in a loop
    bool highPowerEventWait = false;
 8005f16:	230f      	movs	r3, #15
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	701a      	strb	r2, [r3, #0]

    // If we're debugging, don't sleep
    if (MY_Debug())
 8005f1e:	f000 fbce 	bl	80066be <MY_Debug>
 8005f22:	1e03      	subs	r3, r0, #0
 8005f24:	d031      	beq.n	8005f8a <eventSleep+0x86>
        highPowerEventWait = true;
 8005f26:	230f      	movs	r3, #15
 8005f28:	18fb      	adds	r3, r7, r3
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	701a      	strb	r2, [r3, #0]

    // Loop in here until an event happens
    while ((eventsThatHappened & wakeEvents) == 0) {
 8005f2e:	e02c      	b.n	8005f8a <eventSleep+0x86>

        // If we're doing an event wait in a high-power manner, spin
        if (highPowerEventWait) {
 8005f30:	230f      	movs	r3, #15
 8005f32:	18fb      	adds	r3, r7, r3
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <eventSleep+0x3e>

            HAL_Delay(1);
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	f7fc f9aa 	bl	8002294 <HAL_Delay>
 8005f40:	e023      	b.n	8005f8a <eventSleep+0x86>

        } else {

            // Deinitialize all perpherals
            MY_Sleep_DeInit();
 8005f42:	f000 fbc2 	bl	80066ca <MY_Sleep_DeInit>

            // Specify that we want flash to be powered down in STOP mode (huge savings)
            LL_PWR_EnableFlashPowerDownInStop();
 8005f46:	f7ff ff03 	bl	8005d50 <LL_PWR_EnableFlashPowerDownInStop>

            // Set Stop mode 2
            LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	f7ff ff0e 	bl	8005d6c <LL_PWR_SetPowerMode>

            // Enabled events and all interrupts, including disabled interrupts,
            // can wake up the processor
            LL_LPM_EnableEventOnPend();
 8005f50:	f7ff ff58 	bl	8005e04 <LL_LPM_EnableEventOnPend>

            // Make sure that we don't sleep on return from an interrupt
            LL_LPM_DisableSleepOnExit();
 8005f54:	f7ff ff48 	bl	8005de8 <LL_LPM_DisableSleepOnExit>

            // Enable content retention
            LL_PWR_EnableSRAMRetention();
 8005f58:	f7ff ff1c 	bl	8005d94 <LL_PWR_EnableSRAMRetention>

            // Set SLEEPDEEP bit of Cortex System Control Register
            LL_LPM_EnableDeepSleep();
 8005f5c:	f7ff ff36 	bl	8005dcc <LL_LPM_EnableDeepSleep>

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_RESET);
 8005f60:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <eventSleep+0xa0>)
 8005f62:	2200      	movs	r2, #0
 8005f64:	2140      	movs	r1, #64	; 0x40
 8005f66:	0018      	movs	r0, r3
 8005f68:	f7fc fd72 	bl	8002a50 <HAL_GPIO_WritePin>
  __ASM volatile ("dsb 0xF":::"memory");
 8005f6c:	f3bf 8f4f 	dsb	sy
#endif

            // Wait for interrupt
            __DSB();
            __WFI();
 8005f70:	bf30      	wfi
  __ASM volatile ("isb 0xF":::"memory");
 8005f72:	f3bf 8f6f 	isb	sy
            __ISB();

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8005f76:	4b0b      	ldr	r3, [pc, #44]	; (8005fa4 <eventSleep+0xa0>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2140      	movs	r1, #64	; 0x40
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f7fc fd67 	bl	8002a50 <HAL_GPIO_WritePin>
#endif

            // Reset SLEEPDEEP bit of Cortex System Control Register
            // so that we only sleep, not deep sleep, on another wfi
            LL_LPM_EnableSleep();
 8005f82:	f7ff ff15 	bl	8005db0 <LL_LPM_EnableSleep>

            // Reset clocks (BEFORE GetHCLKFreq() is called)
            SystemCoreClockUpdate();
 8005f86:	f000 fd8b 	bl	8006aa0 <SystemCoreClockUpdate>
    while ((eventsThatHappened & wakeEvents) == 0) {
 8005f8a:	4b05      	ldr	r3, [pc, #20]	; (8005fa0 <eventSleep+0x9c>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	4013      	ands	r3, r2
 8005f92:	d0cd      	beq.n	8005f30 <eventSleep+0x2c>
 8005f94:	e000      	b.n	8005f98 <eventSleep+0x94>
        return;
 8005f96:	46c0      	nop			; (mov r8, r8)

#endif  // EVENT_TIMER

    }   // loop until an event happens

}
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	b004      	add	sp, #16
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	46c0      	nop			; (mov r8, r8)
 8005fa0:	2000021c 	.word	0x2000021c
 8005fa4:	50000800 	.word	0x50000800

08005fa8 <setup>:
#else
#define EVENTS_TO_WAIT_FOR  0
#endif

// One-time initialization
void setup() {
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("service.set");
 8005fae:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <setup+0x3c>)
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	f003 fa13 	bl	80093dc <NoteNewRequest>
 8005fb6:	0003      	movs	r3, r0
 8005fb8:	607b      	str	r3, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8005fba:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <setup+0x40>)
 8005fbc:	490b      	ldr	r1, [pc, #44]	; (8005fec <setup+0x44>)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	0018      	movs	r0, r3
 8005fc2:	f002 fe27 	bl	8008c14 <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 8005fc6:	4a0a      	ldr	r2, [pc, #40]	; (8005ff0 <setup+0x48>)
 8005fc8:	490a      	ldr	r1, [pc, #40]	; (8005ff4 <setup+0x4c>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f002 fe21 	bl	8008c14 <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	0018      	movs	r0, r3
 8005fd6:	f003 fa19 	bl	800940c <NoteRequest>

}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b002      	add	sp, #8
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	46c0      	nop			; (mov r8, r8)
 8005fe4:	08009b78 	.word	0x08009b78
 8005fe8:	08009b84 	.word	0x08009b84
 8005fec:	08009bac 	.word	0x08009bac
 8005ff0:	08009bb4 	.word	0x08009bb4
 8005ff4:	08009bc0 	.word	0x08009bc0

08005ff8 <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 8005ffe:	4b48      	ldr	r3, [pc, #288]	; (8006120 <loop+0x128>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	4b46      	ldr	r3, [pc, #280]	; (8006120 <loop+0x128>)
 8006006:	601a      	str	r2, [r3, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	JNUMBER temperature = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 800600c:	4b45      	ldr	r3, [pc, #276]	; (8006124 <loop+0x12c>)
 800600e:	0018      	movs	r0, r3
 8006010:	f003 f9e4 	bl	80093dc <NoteNewRequest>
 8006014:	0003      	movs	r3, r0
 8006016:	0018      	movs	r0, r3
 8006018:	f003 fa2a 	bl	8009470 <NoteRequestResponse>
 800601c:	0003      	movs	r3, r0
 800601e:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <loop+0x46>
        temperature = JGetNumber(rsp, "value");
 8006026:	4a40      	ldr	r2, [pc, #256]	; (8006128 <loop+0x130>)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	0011      	movs	r1, r2
 800602c:	0018      	movs	r0, r3
 800602e:	f002 febf 	bl	8008db0 <JGetNumber>
 8006032:	1c03      	adds	r3, r0, #0
 8006034:	617b      	str	r3, [r7, #20]
        NoteDeleteResponse(rsp);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	0018      	movs	r0, r3
 800603a:	f000 fff5 	bl	8007028 <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	JNUMBER voltage = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	613b      	str	r3, [r7, #16]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 8006042:	4b3a      	ldr	r3, [pc, #232]	; (800612c <loop+0x134>)
 8006044:	0018      	movs	r0, r3
 8006046:	f003 f9c9 	bl	80093dc <NoteNewRequest>
 800604a:	0003      	movs	r3, r0
 800604c:	0018      	movs	r0, r3
 800604e:	f003 fa0f 	bl	8009470 <NoteRequestResponse>
 8006052:	0003      	movs	r3, r0
 8006054:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <loop+0x7c>
        voltage = JGetNumber(rsp, "value");
 800605c:	4a32      	ldr	r2, [pc, #200]	; (8006128 <loop+0x130>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	0011      	movs	r1, r2
 8006062:	0018      	movs	r0, r3
 8006064:	f002 fea4 	bl	8008db0 <JGetNumber>
 8006068:	1c03      	adds	r3, r0, #0
 800606a:	613b      	str	r3, [r7, #16]
        NoteDeleteResponse(rsp);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	0018      	movs	r0, r3
 8006070:	f000 ffda 	bl	8007028 <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8006074:	4b2e      	ldr	r3, [pc, #184]	; (8006130 <loop+0x138>)
 8006076:	0018      	movs	r0, r3
 8006078:	f003 f9b0 	bl	80093dc <NoteNewRequest>
 800607c:	0003      	movs	r3, r0
 800607e:	60bb      	str	r3, [r7, #8]
	if (req != NULL) {
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d042      	beq.n	800610c <loop+0x114>
	    JAddStringToObject(req, "file", "sensors.qo");
 8006086:	4a2b      	ldr	r2, [pc, #172]	; (8006134 <loop+0x13c>)
 8006088:	492b      	ldr	r1, [pc, #172]	; (8006138 <loop+0x140>)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	0018      	movs	r0, r3
 800608e:	f002 fdc1 	bl	8008c14 <JAddStringToObject>
#if myLiveDemo
	    JAddBoolToObject(req, "start", true);
 8006092:	492a      	ldr	r1, [pc, #168]	; (800613c <loop+0x144>)
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2201      	movs	r2, #1
 8006098:	0018      	movs	r0, r3
 800609a:	f002 fd7d 	bl	8008b98 <JAddBoolToObject>
#endif
		J *body = JCreateObject();
 800609e:	f002 fe4b 	bl	8008d38 <JCreateObject>
 80060a2:	0003      	movs	r3, r0
 80060a4:	607b      	str	r3, [r7, #4]
		if (body != NULL) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d02b      	beq.n	8006104 <loop+0x10c>
			JAddNumberToObject(body, "temp", temperature);
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	4924      	ldr	r1, [pc, #144]	; (8006140 <loop+0x148>)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	0018      	movs	r0, r3
 80060b4:	f002 fd8f 	bl	8008bd6 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4922      	ldr	r1, [pc, #136]	; (8006144 <loop+0x14c>)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	0018      	movs	r0, r3
 80060c0:	f002 fd89 	bl	8008bd6 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 80060c4:	4b16      	ldr	r3, [pc, #88]	; (8006120 <loop+0x128>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7fb f9a9 	bl	8001420 <__aeabi_ui2f>
 80060ce:	1c02      	adds	r2, r0, #0
 80060d0:	491d      	ldr	r1, [pc, #116]	; (8006148 <loop+0x150>)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f002 fd7e 	bl	8008bd6 <JAddNumberToObject>
#ifdef EVENT_BUTTON
            if ((eventOccurred() & EVENT_BUTTON) != 0) {
 80060da:	f7ff fef7 	bl	8005ecc <eventOccurred>
 80060de:	0002      	movs	r2, r0
 80060e0:	2302      	movs	r3, #2
 80060e2:	4013      	ands	r3, r2
 80060e4:	d008      	beq.n	80060f8 <loop+0x100>
                JAddBoolToObject(body, "button", true);
 80060e6:	4919      	ldr	r1, [pc, #100]	; (800614c <loop+0x154>)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	0018      	movs	r0, r3
 80060ee:	f002 fd53 	bl	8008b98 <JAddBoolToObject>
                eventClear(EVENT_BUTTON);
 80060f2:	2002      	movs	r0, #2
 80060f4:	f7ff fef4 	bl	8005ee0 <eventClear>
            }
#endif
		    JAddItemToObject(req, "body", body);
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	4915      	ldr	r1, [pc, #84]	; (8006150 <loop+0x158>)
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	0018      	movs	r0, r3
 8006100:	f002 fd3a 	bl	8008b78 <JAddItemToObject>
		}
	    NoteRequest(req);
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	0018      	movs	r0, r3
 8006108:	f003 f980 	bl	800940c <NoteRequest>
	}

	// Delay between measurements
#if EVENTS
    eventWait(EVENTS_TO_WAIT_FOR, DELAY_PERIOD);
 800610c:	4b11      	ldr	r3, [pc, #68]	; (8006154 <loop+0x15c>)
 800610e:	0019      	movs	r1, r3
 8006110:	2002      	movs	r0, #2
 8006112:	f7ff fe85 	bl	8005e20 <eventWait>
#else
	delay(DELAY_PERIOD);
#endif

}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	46bd      	mov	sp, r7
 800611a:	b006      	add	sp, #24
 800611c:	bd80      	pop	{r7, pc}
 800611e:	46c0      	nop			; (mov r8, r8)
 8006120:	20000224 	.word	0x20000224
 8006124:	08009bc8 	.word	0x08009bc8
 8006128:	08009bd4 	.word	0x08009bd4
 800612c:	08009bdc 	.word	0x08009bdc
 8006130:	08009bec 	.word	0x08009bec
 8006134:	08009bf8 	.word	0x08009bf8
 8006138:	08009c04 	.word	0x08009c04
 800613c:	08009c0c 	.word	0x08009c0c
 8006140:	08009c14 	.word	0x08009c14
 8006144:	08009c1c 	.word	0x08009c1c
 8006148:	08009c24 	.word	0x08009c24
 800614c:	08009c2c 	.word	0x08009c2c
 8006150:	08009c34 	.word	0x08009c34
 8006154:	00003a98 	.word	0x00003a98

08006158 <main>:
void noteI2CReset(void);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8006158:	b580      	push	{r7, lr}
 800615a:	af00      	add	r7, sp, #0

    // Initialize peripherals
    HAL_Init();
 800615c:	f7fc f816 	bl	800218c <HAL_Init>
    SystemClock_Config();
 8006160:	f000 f826 	bl	80061b0 <SystemClock_Config>
    MX_GPIO_Init();
 8006164:	f000 f9c6 	bl	80064f4 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
 8006168:	f000 f96c 	bl	8006444 <MX_LPTIM1_Init>
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 800616c:	4b08      	ldr	r3, [pc, #32]	; (8006190 <main+0x38>)
 800616e:	4a09      	ldr	r2, [pc, #36]	; (8006194 <main+0x3c>)
 8006170:	4909      	ldr	r1, [pc, #36]	; (8006198 <main+0x40>)
 8006172:	480a      	ldr	r0, [pc, #40]	; (800619c <main+0x44>)
 8006174:	f002 ffce 	bl	8009114 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 8006178:	4b09      	ldr	r3, [pc, #36]	; (80061a0 <main+0x48>)
 800617a:	4a0a      	ldr	r2, [pc, #40]	; (80061a4 <main+0x4c>)
 800617c:	490a      	ldr	r1, [pc, #40]	; (80061a8 <main+0x50>)
 800617e:	480b      	ldr	r0, [pc, #44]	; (80061ac <main+0x54>)
 8006180:	f002 ffe8 	bl	8009154 <NoteSetFnSerial>
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8006184:	f7ff ff10 	bl	8005fa8 <setup>
    while (true)
        loop();
 8006188:	f7ff ff36 	bl	8005ff8 <loop>
 800618c:	e7fc      	b.n	8006188 <main+0x30>
 800618e:	46c0      	nop			; (mov r8, r8)
 8006190:	080066af 	.word	0x080066af
 8006194:	08006697 	.word	0x08006697
 8006198:	08009925 	.word	0x08009925
 800619c:	08009911 	.word	0x08009911
 80061a0:	08006741 	.word	0x08006741
 80061a4:	0800671d 	.word	0x0800671d
 80061a8:	080066f1 	.word	0x080066f1
 80061ac:	080066dd 	.word	0x080066dd

080061b0 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b09d      	sub	sp, #116	; 0x74
 80061b4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80061b6:	2438      	movs	r4, #56	; 0x38
 80061b8:	193b      	adds	r3, r7, r4
 80061ba:	0018      	movs	r0, r3
 80061bc:	2338      	movs	r3, #56	; 0x38
 80061be:	001a      	movs	r2, r3
 80061c0:	2100      	movs	r1, #0
 80061c2:	f003 fbd4 	bl	800996e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061c6:	2328      	movs	r3, #40	; 0x28
 80061c8:	18fb      	adds	r3, r7, r3
 80061ca:	0018      	movs	r0, r3
 80061cc:	2310      	movs	r3, #16
 80061ce:	001a      	movs	r2, r3
 80061d0:	2100      	movs	r1, #0
 80061d2:	f003 fbcc 	bl	800996e <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80061d6:	003b      	movs	r3, r7
 80061d8:	0018      	movs	r0, r3
 80061da:	2328      	movs	r3, #40	; 0x28
 80061dc:	001a      	movs	r2, r3
 80061de:	2100      	movs	r1, #0
 80061e0:	f003 fbc5 	bl	800996e <memset>

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80061e4:	2380      	movs	r3, #128	; 0x80
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	0018      	movs	r0, r3
 80061ea:	f7fc fdf3 	bl	8002dd4 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80061ee:	193b      	adds	r3, r7, r4
 80061f0:	220a      	movs	r2, #10
 80061f2:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80061f4:	193b      	adds	r3, r7, r4
 80061f6:	2201      	movs	r2, #1
 80061f8:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061fa:	193b      	adds	r3, r7, r4
 80061fc:	2280      	movs	r2, #128	; 0x80
 80061fe:	0052      	lsls	r2, r2, #1
 8006200:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006202:	193b      	adds	r3, r7, r4
 8006204:	2200      	movs	r2, #0
 8006206:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006208:	193b      	adds	r3, r7, r4
 800620a:	2240      	movs	r2, #64	; 0x40
 800620c:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800620e:	193b      	adds	r3, r7, r4
 8006210:	2200      	movs	r2, #0
 8006212:	61da      	str	r2, [r3, #28]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006214:	193b      	adds	r3, r7, r4
 8006216:	0018      	movs	r0, r3
 8006218:	f7fc fe28 	bl	8002e6c <HAL_RCC_OscConfig>
 800621c:	1e03      	subs	r3, r0, #0
 800621e:	d001      	beq.n	8006224 <SystemClock_Config+0x74>
        Error_Handler();
 8006220:	f000 fa34 	bl	800668c <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8006224:	2128      	movs	r1, #40	; 0x28
 8006226:	187b      	adds	r3, r7, r1
 8006228:	2207      	movs	r2, #7
 800622a:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800622c:	187b      	adds	r3, r7, r1
 800622e:	2200      	movs	r2, #0
 8006230:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006232:	187b      	adds	r3, r7, r1
 8006234:	2200      	movs	r2, #0
 8006236:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006238:	187b      	adds	r3, r7, r1
 800623a:	2200      	movs	r2, #0
 800623c:	60da      	str	r2, [r3, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800623e:	187b      	adds	r3, r7, r1
 8006240:	2100      	movs	r1, #0
 8006242:	0018      	movs	r0, r3
 8006244:	f7fd f932 	bl	80034ac <HAL_RCC_ClockConfig>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d001      	beq.n	8006250 <SystemClock_Config+0xa0>
        Error_Handler();
 800624c:	f000 fa1e 	bl	800668c <Error_Handler>

    // Initializes the peripherals clocks
    PeriphClkInit.PeriphClockSelection = 0;
 8006250:	003b      	movs	r3, r7
 8006252:	2200      	movs	r2, #0
 8006254:	601a      	str	r2, [r3, #0]
#if USE_UART
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_USART1;
 8006256:	003b      	movs	r3, r7
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2201      	movs	r2, #1
 800625c:	431a      	orrs	r2, r3
 800625e:	003b      	movs	r3, r7
 8006260:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006262:	003b      	movs	r3, r7
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]
#if USE_I2C
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_I2C1;
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
#endif
#ifdef EVENT_TIMER
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_LPTIM1;
 8006268:	003b      	movs	r3, r7
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2280      	movs	r2, #128	; 0x80
 800626e:	0092      	lsls	r2, r2, #2
 8006270:	431a      	orrs	r2, r3
 8006272:	003b      	movs	r3, r7
 8006274:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8006276:	003b      	movs	r3, r7
 8006278:	2280      	movs	r2, #128	; 0x80
 800627a:	02d2      	lsls	r2, r2, #11
 800627c:	615a      	str	r2, [r3, #20]
#endif
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800627e:	003b      	movs	r3, r7
 8006280:	0018      	movs	r0, r3
 8006282:	f7fd fabd 	bl	8003800 <HAL_RCCEx_PeriphCLKConfig>
 8006286:	1e03      	subs	r3, r0, #0
 8006288:	d001      	beq.n	800628e <SystemClock_Config+0xde>
        Error_Handler();
 800628a:	f000 f9ff 	bl	800668c <Error_Handler>

}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	46bd      	mov	sp, r7
 8006292:	b01d      	add	sp, #116	; 0x74
 8006294:	bd90      	pop	{r4, r7, pc}
	...

08006298 <MX_USART1_UART_Init>:
#endif


// USART1 Initialization
#if USE_UART
void MX_USART1_UART_Init(void) {
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0

    // Exit if already done
    if (uart1Initialized)
 800629c:	4b2e      	ldr	r3, [pc, #184]	; (8006358 <MX_USART1_UART_Init+0xc0>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d155      	bne.n	8006350 <MX_USART1_UART_Init+0xb8>
        return;
    uart1Initialized = true;
 80062a4:	4b2c      	ldr	r3, [pc, #176]	; (8006358 <MX_USART1_UART_Init+0xc0>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    huart1.Instance = USART1;
 80062aa:	4b2c      	ldr	r3, [pc, #176]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062ac:	4a2c      	ldr	r2, [pc, #176]	; (8006360 <MX_USART1_UART_Init+0xc8>)
 80062ae:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 80062b0:	4b2a      	ldr	r3, [pc, #168]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062b2:	2296      	movs	r2, #150	; 0x96
 80062b4:	0192      	lsls	r2, r2, #6
 80062b6:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80062b8:	4b28      	ldr	r3, [pc, #160]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80062be:	4b27      	ldr	r3, [pc, #156]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80062c4:	4b25      	ldr	r3, [pc, #148]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062c6:	2200      	movs	r2, #0
 80062c8:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80062ca:	4b24      	ldr	r3, [pc, #144]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062cc:	220c      	movs	r2, #12
 80062ce:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062d8:	2200      	movs	r2, #0
 80062da:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062dc:	4b1f      	ldr	r3, [pc, #124]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062de:	2200      	movs	r2, #0
 80062e0:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062e2:	4b1e      	ldr	r3, [pc, #120]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062e4:	2200      	movs	r2, #0
 80062e6:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062e8:	4b1c      	ldr	r3, [pc, #112]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80062ee:	4b1b      	ldr	r3, [pc, #108]	; (800635c <MX_USART1_UART_Init+0xc4>)
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7fd fbff 	bl	8003af4 <HAL_UART_Init>
 80062f6:	1e03      	subs	r3, r0, #0
 80062f8:	d001      	beq.n	80062fe <MX_USART1_UART_Init+0x66>
        Error_Handler();
 80062fa:	f000 f9c7 	bl	800668c <Error_Handler>

    // FIFO mode configuration
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <MX_USART1_UART_Init+0xc4>)
 8006300:	2100      	movs	r1, #0
 8006302:	0018      	movs	r0, r3
 8006304:	f7ff fc38 	bl	8005b78 <HAL_UARTEx_SetTxFifoThreshold>
 8006308:	1e03      	subs	r3, r0, #0
 800630a:	d001      	beq.n	8006310 <MX_USART1_UART_Init+0x78>
        Error_Handler();
 800630c:	f000 f9be 	bl	800668c <Error_Handler>
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006310:	4b12      	ldr	r3, [pc, #72]	; (800635c <MX_USART1_UART_Init+0xc4>)
 8006312:	2100      	movs	r1, #0
 8006314:	0018      	movs	r0, r3
 8006316:	f7ff fc6f 	bl	8005bf8 <HAL_UARTEx_SetRxFifoThreshold>
 800631a:	1e03      	subs	r3, r0, #0
 800631c:	d001      	beq.n	8006322 <MX_USART1_UART_Init+0x8a>
        Error_Handler();
 800631e:	f000 f9b5 	bl	800668c <Error_Handler>
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006322:	4b0e      	ldr	r3, [pc, #56]	; (800635c <MX_USART1_UART_Init+0xc4>)
 8006324:	0018      	movs	r0, r3
 8006326:	f7ff fbed 	bl	8005b04 <HAL_UARTEx_DisableFifoMode>
 800632a:	1e03      	subs	r3, r0, #0
 800632c:	d001      	beq.n	8006332 <MX_USART1_UART_Init+0x9a>
        Error_Handler();
 800632e:	f000 f9ad 	bl	800668c <Error_Handler>

    // Reset our buffer management
    serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <MX_USART1_UART_Init+0xcc>)
 8006334:	2200      	movs	r2, #0
 8006336:	601a      	str	r2, [r3, #0]
 8006338:	2200      	movs	r2, #0
 800633a:	4b0b      	ldr	r3, [pc, #44]	; (8006368 <MX_USART1_UART_Init+0xd0>)
 800633c:	601a      	str	r2, [r3, #0]
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <MX_USART1_UART_Init+0xd4>)
 8006340:	601a      	str	r2, [r3, #0]

    // Unused, but included for documentation
    ((void)(serialOverruns));

    // Start the inbound receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8006342:	490b      	ldr	r1, [pc, #44]	; (8006370 <MX_USART1_UART_Init+0xd8>)
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <MX_USART1_UART_Init+0xc4>)
 8006346:	2201      	movs	r2, #1
 8006348:	0018      	movs	r0, r3
 800634a:	f7fd fd0f 	bl	8003d6c <HAL_UART_Receive_IT>
 800634e:	e000      	b.n	8006352 <MX_USART1_UART_Init+0xba>
        return;
 8006350:	46c0      	nop			; (mov r8, r8)

}
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	46c0      	nop			; (mov r8, r8)
 8006358:	20000228 	.word	0x20000228
 800635c:	20000288 	.word	0x20000288
 8006360:	40013800 	.word	0x40013800
 8006364:	20000238 	.word	0x20000238
 8006368:	20000234 	.word	0x20000234
 800636c:	20000230 	.word	0x20000230
 8006370:	2000054c 	.word	0x2000054c

08006374 <MY_UART_IRQHandler>:
#endif

// USART1 IRQ handler
#if USE_UART
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	225e      	movs	r2, #94	; 0x5e
 8006380:	5a9b      	ldrh	r3, [r3, r2]
 8006382:	b29b      	uxth	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d12c      	bne.n	80063e2 <MY_UART_IRQHandler+0x6e>
        if (serialFillIndex < sizeof(serialBuffer)) {
 8006388:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <MY_UART_IRQHandler+0x84>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a1b      	ldr	r2, [pc, #108]	; (80063fc <MY_UART_IRQHandler+0x88>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d816      	bhi.n	80063c0 <MY_UART_IRQHandler+0x4c>
            if (serialFillIndex+1 == serialDrainIndex)
 8006392:	4b19      	ldr	r3, [pc, #100]	; (80063f8 <MY_UART_IRQHandler+0x84>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	4b19      	ldr	r3, [pc, #100]	; (8006400 <MY_UART_IRQHandler+0x8c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d105      	bne.n	80063ac <MY_UART_IRQHandler+0x38>
                serialOverruns++;
 80063a0:	4b18      	ldr	r3, [pc, #96]	; (8006404 <MY_UART_IRQHandler+0x90>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <MY_UART_IRQHandler+0x90>)
 80063a8:	601a      	str	r2, [r3, #0]
 80063aa:	e01a      	b.n	80063e2 <MY_UART_IRQHandler+0x6e>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 80063ac:	4b12      	ldr	r3, [pc, #72]	; (80063f8 <MY_UART_IRQHandler+0x84>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	1c59      	adds	r1, r3, #1
 80063b2:	4a11      	ldr	r2, [pc, #68]	; (80063f8 <MY_UART_IRQHandler+0x84>)
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	4a14      	ldr	r2, [pc, #80]	; (8006408 <MY_UART_IRQHandler+0x94>)
 80063b8:	7811      	ldrb	r1, [r2, #0]
 80063ba:	4a14      	ldr	r2, [pc, #80]	; (800640c <MY_UART_IRQHandler+0x98>)
 80063bc:	54d1      	strb	r1, [r2, r3]
 80063be:	e010      	b.n	80063e2 <MY_UART_IRQHandler+0x6e>
        } else {
            if (serialDrainIndex == 1)
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <MY_UART_IRQHandler+0x8c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d105      	bne.n	80063d4 <MY_UART_IRQHandler+0x60>
                serialOverruns++;
 80063c8:	4b0e      	ldr	r3, [pc, #56]	; (8006404 <MY_UART_IRQHandler+0x90>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	4b0d      	ldr	r3, [pc, #52]	; (8006404 <MY_UART_IRQHandler+0x90>)
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e006      	b.n	80063e2 <MY_UART_IRQHandler+0x6e>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 80063d4:	4b0c      	ldr	r3, [pc, #48]	; (8006408 <MY_UART_IRQHandler+0x94>)
 80063d6:	781a      	ldrb	r2, [r3, #0]
 80063d8:	4b0c      	ldr	r3, [pc, #48]	; (800640c <MY_UART_IRQHandler+0x98>)
 80063da:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 80063dc:	4b06      	ldr	r3, [pc, #24]	; (80063f8 <MY_UART_IRQHandler+0x84>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 80063e2:	4909      	ldr	r1, [pc, #36]	; (8006408 <MY_UART_IRQHandler+0x94>)
 80063e4:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <MY_UART_IRQHandler+0x9c>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	0018      	movs	r0, r3
 80063ea:	f7fd fcbf 	bl	8003d6c <HAL_UART_Receive_IT>

}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	20000230 	.word	0x20000230
 80063fc:	000001ff 	.word	0x000001ff
 8006400:	20000234 	.word	0x20000234
 8006404:	20000238 	.word	0x20000238
 8006408:	2000054c 	.word	0x2000054c
 800640c:	2000034c 	.word	0x2000034c
 8006410:	20000288 	.word	0x20000288

08006414 <MX_USART1_UART_DeInit>:
#endif

// USART1 De-initialization
#if USE_UART
void MX_USART1_UART_DeInit(void) {
 8006414:	b580      	push	{r7, lr}
 8006416:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!uart1Initialized)
 8006418:	4b08      	ldr	r3, [pc, #32]	; (800643c <MX_USART1_UART_DeInit+0x28>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2201      	movs	r2, #1
 800641e:	4053      	eors	r3, r2
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <MX_USART1_UART_DeInit+0x22>
        return;
    uart1Initialized = false;
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <MX_USART1_UART_DeInit+0x28>)
 8006428:	2200      	movs	r2, #0
 800642a:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_UART_DeInit(&huart1);
 800642c:	4b04      	ldr	r3, [pc, #16]	; (8006440 <MX_USART1_UART_DeInit+0x2c>)
 800642e:	0018      	movs	r0, r3
 8006430:	f7fd fbb6 	bl	8003ba0 <HAL_UART_DeInit>
 8006434:	e000      	b.n	8006438 <MX_USART1_UART_DeInit+0x24>
        return;
 8006436:	46c0      	nop			; (mov r8, r8)

}
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000228 	.word	0x20000228
 8006440:	20000288 	.word	0x20000288

08006444 <MX_LPTIM1_Init>:
#endif

// LPTIM1 Initialization
#ifdef EVENT_TIMER
void MX_LPTIM1_Init(void) {
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0

    // Initialize clock
    hlptim1.Instance = LPTIM1;
 8006448:	4b17      	ldr	r3, [pc, #92]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 800644a:	4a18      	ldr	r2, [pc, #96]	; (80064ac <MX_LPTIM1_Init+0x68>)
 800644c:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800644e:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006450:	2200      	movs	r2, #0
 8006452:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8006454:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006456:	2200      	movs	r2, #0
 8006458:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800645a:	4b13      	ldr	r3, [pc, #76]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 800645c:	4a14      	ldr	r2, [pc, #80]	; (80064b0 <MX_LPTIM1_Init+0x6c>)
 800645e:	615a      	str	r2, [r3, #20]
    hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8006460:	4b11      	ldr	r3, [pc, #68]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006462:	2200      	movs	r2, #0
 8006464:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8006466:	4b10      	ldr	r3, [pc, #64]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006468:	2200      	movs	r2, #0
 800646a:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800646c:	4b0e      	ldr	r3, [pc, #56]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 800646e:	2200      	movs	r2, #0
 8006470:	629a      	str	r2, [r3, #40]	; 0x28
    hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8006472:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006474:	2200      	movs	r2, #0
 8006476:	62da      	str	r2, [r3, #44]	; 0x2c
    hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 800647a:	2200      	movs	r2, #0
 800647c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006480:	0018      	movs	r0, r3
 8006482:	f7fc fb03 	bl	8002a8c <HAL_LPTIM_Init>
 8006486:	1e03      	subs	r3, r0, #0
 8006488:	d001      	beq.n	800648e <MX_LPTIM1_Init+0x4a>
        Error_Handler();
 800648a:	f000 f8ff 	bl	800668c <Error_Handler>
    // Period is the maximum value of the auto-reload counter - can't go higher.
    // Timeout is the value to be placed into the compare register - this is max
#define Period      (uint32_t) 65535
#define Timeout     (uint32_t) 32767
#define LPTIM_MS    2000
    if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, Period, Timeout) != HAL_OK)
 800648e:	4a09      	ldr	r2, [pc, #36]	; (80064b4 <MX_LPTIM1_Init+0x70>)
 8006490:	4907      	ldr	r1, [pc, #28]	; (80064b0 <MX_LPTIM1_Init+0x6c>)
 8006492:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <MX_LPTIM1_Init+0x64>)
 8006494:	0018      	movs	r0, r3
 8006496:	f7fc fb8f 	bl	8002bb8 <HAL_LPTIM_TimeOut_Start_IT>
 800649a:	1e03      	subs	r3, r0, #0
 800649c:	d001      	beq.n	80064a2 <MX_LPTIM1_Init+0x5e>
        Error_Handler();
 800649e:	f000 f8f5 	bl	800668c <Error_Handler>

}
 80064a2:	46c0      	nop			; (mov r8, r8)
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}
 80064a8:	20000314 	.word	0x20000314
 80064ac:	40007c00 	.word	0x40007c00
 80064b0:	0000ffff 	.word	0x0000ffff
 80064b4:	00007fff 	.word	0x00007fff

080064b8 <HAL_LPTIM_CompareMatchCallback>:
#endif

// Compare match callback in non blocking mode
// NOTE: THIS IS CALLED ONCE PER TICK (EVERY 2 SECONDS AS LPTIM1 IS PROGRAMMED)
#ifdef EVENT_TIMER
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]

    // Add to the total milliseconds since boot
    totalTimerMs += LPTIM_MS;
 80064c0:	4b06      	ldr	r3, [pc, #24]	; (80064dc <HAL_LPTIM_CompareMatchCallback+0x24>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	22fa      	movs	r2, #250	; 0xfa
 80064c6:	00d2      	lsls	r2, r2, #3
 80064c8:	189a      	adds	r2, r3, r2
 80064ca:	4b04      	ldr	r3, [pc, #16]	; (80064dc <HAL_LPTIM_CompareMatchCallback+0x24>)
 80064cc:	601a      	str	r2, [r3, #0]

    // Poll the event poller to see if any events transpired
    eventPollTimer();
 80064ce:	f7ff fcd5 	bl	8005e7c <eventPollTimer>

}
 80064d2:	46c0      	nop			; (mov r8, r8)
 80064d4:	46bd      	mov	sp, r7
 80064d6:	b002      	add	sp, #8
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	2000022c 	.word	0x2000022c

080064e0 <MY_TimerMs>:
#endif

// This returns milliseconds since boot (which may wrap)
#ifdef EVENT_TIMER
uint32_t MY_TimerMs() {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	af00      	add	r7, sp, #0
    return totalTimerMs;
 80064e4:	4b02      	ldr	r3, [pc, #8]	; (80064f0 <MY_TimerMs+0x10>)
 80064e6:	681b      	ldr	r3, [r3, #0]
}
 80064e8:	0018      	movs	r0, r3
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	2000022c 	.word	0x2000022c

080064f4 <MX_GPIO_Init>:
#endif

// GPIO initialization
void MX_GPIO_Init(void) {
 80064f4:	b590      	push	{r4, r7, lr}
 80064f6:	b08d      	sub	sp, #52	; 0x34
 80064f8:	af00      	add	r7, sp, #0

    // GPIO Ports Clock Enable
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064fa:	241c      	movs	r4, #28
 80064fc:	193b      	adds	r3, r7, r4
 80064fe:	0018      	movs	r0, r3
 8006500:	2314      	movs	r3, #20
 8006502:	001a      	movs	r2, r3
 8006504:	2100      	movs	r1, #0
 8006506:	f003 fa32 	bl	800996e <memset>

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800650a:	4b52      	ldr	r3, [pc, #328]	; (8006654 <MX_GPIO_Init+0x160>)
 800650c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650e:	4b51      	ldr	r3, [pc, #324]	; (8006654 <MX_GPIO_Init+0x160>)
 8006510:	2104      	movs	r1, #4
 8006512:	430a      	orrs	r2, r1
 8006514:	635a      	str	r2, [r3, #52]	; 0x34
 8006516:	4b4f      	ldr	r3, [pc, #316]	; (8006654 <MX_GPIO_Init+0x160>)
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800651a:	2204      	movs	r2, #4
 800651c:	4013      	ands	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006522:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <MX_GPIO_Init+0x160>)
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	4b4b      	ldr	r3, [pc, #300]	; (8006654 <MX_GPIO_Init+0x160>)
 8006528:	2120      	movs	r1, #32
 800652a:	430a      	orrs	r2, r1
 800652c:	635a      	str	r2, [r3, #52]	; 0x34
 800652e:	4b49      	ldr	r3, [pc, #292]	; (8006654 <MX_GPIO_Init+0x160>)
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	2220      	movs	r2, #32
 8006534:	4013      	ands	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800653a:	4b46      	ldr	r3, [pc, #280]	; (8006654 <MX_GPIO_Init+0x160>)
 800653c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800653e:	4b45      	ldr	r3, [pc, #276]	; (8006654 <MX_GPIO_Init+0x160>)
 8006540:	2101      	movs	r1, #1
 8006542:	430a      	orrs	r2, r1
 8006544:	635a      	str	r2, [r3, #52]	; 0x34
 8006546:	4b43      	ldr	r3, [pc, #268]	; (8006654 <MX_GPIO_Init+0x160>)
 8006548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654a:	2201      	movs	r2, #1
 800654c:	4013      	ands	r3, r2
 800654e:	613b      	str	r3, [r7, #16]
 8006550:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006552:	4b40      	ldr	r3, [pc, #256]	; (8006654 <MX_GPIO_Init+0x160>)
 8006554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006556:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <MX_GPIO_Init+0x160>)
 8006558:	2102      	movs	r1, #2
 800655a:	430a      	orrs	r2, r1
 800655c:	635a      	str	r2, [r3, #52]	; 0x34
 800655e:	4b3d      	ldr	r3, [pc, #244]	; (8006654 <MX_GPIO_Init+0x160>)
 8006560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006562:	2202      	movs	r2, #2
 8006564:	4013      	ands	r3, r2
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]

    // Configure GPIO pin : T_NRST_Pin
    GPIO_InitStruct.Pin = T_NRST_Pin;
 800656a:	193b      	adds	r3, r7, r4
 800656c:	2204      	movs	r2, #4
 800656e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006570:	193b      	adds	r3, r7, r4
 8006572:	4a39      	ldr	r2, [pc, #228]	; (8006658 <MX_GPIO_Init+0x164>)
 8006574:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006576:	193b      	adds	r3, r7, r4
 8006578:	2200      	movs	r2, #0
 800657a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 800657c:	193b      	adds	r3, r7, r4
 800657e:	4a37      	ldr	r2, [pc, #220]	; (800665c <MX_GPIO_Init+0x168>)
 8006580:	0019      	movs	r1, r3
 8006582:	0010      	movs	r0, r2
 8006584:	f7fc f830 	bl	80025e8 <HAL_GPIO_Init>

    // Configure GPIO pins : T_VCP_TX_Pin T_VCP_RX_Pin
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8006588:	193b      	adds	r3, r7, r4
 800658a:	220c      	movs	r2, #12
 800658c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800658e:	193b      	adds	r3, r7, r4
 8006590:	2202      	movs	r2, #2
 8006592:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006594:	193b      	adds	r3, r7, r4
 8006596:	2200      	movs	r2, #0
 8006598:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800659a:	193b      	adds	r3, r7, r4
 800659c:	2200      	movs	r2, #0
 800659e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80065a0:	193b      	adds	r3, r7, r4
 80065a2:	2201      	movs	r2, #1
 80065a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065a6:	193a      	adds	r2, r7, r4
 80065a8:	23a0      	movs	r3, #160	; 0xa0
 80065aa:	05db      	lsls	r3, r3, #23
 80065ac:	0011      	movs	r1, r2
 80065ae:	0018      	movs	r0, r3
 80065b0:	f7fc f81a 	bl	80025e8 <HAL_GPIO_Init>

    // Configure LED GPIO pin : LD3_Pin
#if EVENT_SLEEP_LED
    GPIO_LED_ENABLE();
 80065b4:	4b27      	ldr	r3, [pc, #156]	; (8006654 <MX_GPIO_Init+0x160>)
 80065b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b8:	4b26      	ldr	r3, [pc, #152]	; (8006654 <MX_GPIO_Init+0x160>)
 80065ba:	2104      	movs	r1, #4
 80065bc:	430a      	orrs	r2, r1
 80065be:	635a      	str	r2, [r3, #52]	; 0x34
 80065c0:	4b24      	ldr	r3, [pc, #144]	; (8006654 <MX_GPIO_Init+0x160>)
 80065c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c4:	2204      	movs	r2, #4
 80065c6:	4013      	ands	r3, r2
 80065c8:	60bb      	str	r3, [r7, #8]
 80065ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_LED_PIN;
 80065cc:	193b      	adds	r3, r7, r4
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065d2:	193b      	adds	r3, r7, r4
 80065d4:	2201      	movs	r2, #1
 80065d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d8:	193b      	adds	r3, r7, r4
 80065da:	2200      	movs	r2, #0
 80065dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065de:	193b      	adds	r3, r7, r4
 80065e0:	2200      	movs	r2, #0
 80065e2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_LED_PORT, &GPIO_InitStruct);
 80065e4:	193b      	adds	r3, r7, r4
 80065e6:	4a1e      	ldr	r2, [pc, #120]	; (8006660 <MX_GPIO_Init+0x16c>)
 80065e8:	0019      	movs	r1, r3
 80065ea:	0010      	movs	r0, r2
 80065ec:	f7fb fffc 	bl	80025e8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 80065f0:	4b1b      	ldr	r3, [pc, #108]	; (8006660 <MX_GPIO_Init+0x16c>)
 80065f2:	2201      	movs	r2, #1
 80065f4:	2140      	movs	r1, #64	; 0x40
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7fc fa2a 	bl	8002a50 <HAL_GPIO_WritePin>
#endif

    // Initialize the simulated button, if present
#ifdef EVENT_BUTTON
    GPIO_BUTTON_CLOCK_ENABLE();
 80065fc:	4b15      	ldr	r3, [pc, #84]	; (8006654 <MX_GPIO_Init+0x160>)
 80065fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006600:	4b14      	ldr	r3, [pc, #80]	; (8006654 <MX_GPIO_Init+0x160>)
 8006602:	2104      	movs	r1, #4
 8006604:	430a      	orrs	r2, r1
 8006606:	635a      	str	r2, [r3, #52]	; 0x34
 8006608:	4b12      	ldr	r3, [pc, #72]	; (8006654 <MX_GPIO_Init+0x160>)
 800660a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660c:	2204      	movs	r2, #4
 800660e:	4013      	ands	r3, r2
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006614:	0021      	movs	r1, r4
 8006616:	187b      	adds	r3, r7, r1
 8006618:	2201      	movs	r2, #1
 800661a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = GPIO_BUTTON_PIN;
 800661c:	187b      	adds	r3, r7, r1
 800661e:	2210      	movs	r2, #16
 8006620:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006622:	187b      	adds	r3, r7, r1
 8006624:	4a0c      	ldr	r2, [pc, #48]	; (8006658 <MX_GPIO_Init+0x164>)
 8006626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006628:	187b      	adds	r3, r7, r1
 800662a:	2200      	movs	r2, #0
 800662c:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_BUTTON_PORT, &GPIO_InitStruct);
 800662e:	187b      	adds	r3, r7, r1
 8006630:	4a0c      	ldr	r2, [pc, #48]	; (8006664 <MX_GPIO_Init+0x170>)
 8006632:	0019      	movs	r1, r3
 8006634:	0010      	movs	r0, r2
 8006636:	f7fb ffd7 	bl	80025e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(GPIO_BUTTON_IRQ, 0, 0);
 800663a:	2200      	movs	r2, #0
 800663c:	2100      	movs	r1, #0
 800663e:	2007      	movs	r0, #7
 8006640:	f7fb ff16 	bl	8002470 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPIO_BUTTON_IRQ);
 8006644:	2007      	movs	r0, #7
 8006646:	f7fb ff28 	bl	800249a <HAL_NVIC_EnableIRQ>
#endif

}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	46bd      	mov	sp, r7
 800664e:	b00d      	add	sp, #52	; 0x34
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	46c0      	nop			; (mov r8, r8)
 8006654:	40021000 	.word	0x40021000
 8006658:	10110000 	.word	0x10110000
 800665c:	50001400 	.word	0x50001400
 8006660:	50000800 	.word	0x50000800
 8006664:	50000400 	.word	0x50000400

08006668 <HAL_GPIO_EXTI_Rising_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	0002      	movs	r2, r0
 8006670:	1dbb      	adds	r3, r7, #6
 8006672:	801a      	strh	r2, [r3, #0]

    // Handle the button
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
 8006674:	1dbb      	adds	r3, r7, #6
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	2210      	movs	r2, #16
 800667a:	4013      	ands	r3, r2
 800667c:	d002      	beq.n	8006684 <HAL_GPIO_EXTI_Rising_Callback+0x1c>
        event(EVENT_BUTTON);
 800667e:	2002      	movs	r0, #2
 8006680:	f7ff fc14 	bl	8005eac <event>
#endif

}
 8006684:	46c0      	nop			; (mov r8, r8)
 8006686:	46bd      	mov	sp, r7
 8006688:	b002      	add	sp, #8
 800668a:	bd80      	pop	{r7, pc}

0800668c <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	0018      	movs	r0, r3
 80066a2:	f7fb fdf7 	bl	8002294 <HAL_Delay>
}
 80066a6:	46c0      	nop			; (mov r8, r8)
 80066a8:	46bd      	mov	sp, r7
 80066aa:	b002      	add	sp, #8
 80066ac:	bd80      	pop	{r7, pc}

080066ae <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 80066ae:	b580      	push	{r7, lr}
 80066b0:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 80066b2:	f7fb fde5 	bl	8002280 <HAL_GetTick>
 80066b6:	0003      	movs	r3, r0
}
 80066b8:	0018      	movs	r0, r3
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}

080066be <MY_Debug>:

// Determine whether or not a debugger is actively connected.  We use
// this to suppress STOP2 mode so that code can be maintained/debugged.
bool MY_Debug() {
 80066be:	b580      	push	{r7, lr}
 80066c0:	af00      	add	r7, sp, #0
	return (DEBUGGING);
 80066c2:	2301      	movs	r3, #1
}
 80066c4:	0018      	movs	r0, r3
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <MY_Sleep_DeInit>:

// Deinitialize everything that might block a sleep from happening
void MY_Sleep_DeInit() {
 80066ca:	b580      	push	{r7, lr}
 80066cc:	af00      	add	r7, sp, #0
    // Deinitialize the peripherals
#if USE_I2C
    MX_I2C1_DeInit();
#endif
#if USE_UART
    MX_USART1_UART_DeInit();
 80066ce:	f7ff fea1 	bl	8006414 <MX_USART1_UART_DeInit>
#endif

    // Notify the Note subsystem that these will need to be reinitialized
    // on the next call to any of the Note I/O functions
    NoteResetRequired();
 80066d2:	f002 ff5b 	bl	800958c <NoteResetRequired>

}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <noteSerialReset>:

// Serial port reset procedure, called before any I/O and called again upon I/O error
#if NOTECARD_USE_UART
void noteSerialReset() {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
    MX_USART1_UART_DeInit();
 80066e0:	f7ff fe98 	bl	8006414 <MX_USART1_UART_DeInit>
    MX_USART1_UART_Init();
 80066e4:	f7ff fdd8 	bl	8006298 <MX_USART1_UART_Init>
}
 80066e8:	46c0      	nop			; (mov r8, r8)
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <noteSerialTransmit>:
#endif

// Serial write data function
#if NOTECARD_USE_UART
void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	1dfb      	adds	r3, r7, #7
 80066fc:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, text, len, 5000);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	b29a      	uxth	r2, r3
 8006702:	4b04      	ldr	r3, [pc, #16]	; (8006714 <noteSerialTransmit+0x24>)
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	4804      	ldr	r0, [pc, #16]	; (8006718 <noteSerialTransmit+0x28>)
 8006708:	f7fd fa84 	bl	8003c14 <HAL_UART_Transmit>
}
 800670c:	46c0      	nop			; (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b004      	add	sp, #16
 8006712:	bd80      	pop	{r7, pc}
 8006714:	00001388 	.word	0x00001388
 8006718:	20000288 	.word	0x20000288

0800671c <noteSerialAvailable>:
#endif

// Serial "is anything available" function, which does a read-ahead for data into a serial buffer
#if NOTECARD_USE_UART
bool noteSerialAvailable() {
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
    return (serialFillIndex != serialDrainIndex);
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <noteSerialAvailable+0x1c>)
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <noteSerialAvailable+0x20>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	1ad3      	subs	r3, r2, r3
 800672a:	1e5a      	subs	r2, r3, #1
 800672c:	4193      	sbcs	r3, r2
 800672e:	b2db      	uxtb	r3, r3
}
 8006730:	0018      	movs	r0, r3
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	20000230 	.word	0x20000230
 800673c:	20000234 	.word	0x20000234

08006740 <noteSerialReceive>:
#endif

// Blocking serial read a byte function (generally only called if known to be available)
#if NOTECARD_USE_UART
char noteSerialReceive() {
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
    char data;
    while (!noteSerialAvailable()) ;
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	f7ff ffe8 	bl	800671c <noteSerialAvailable>
 800674c:	0003      	movs	r3, r0
 800674e:	001a      	movs	r2, r3
 8006750:	2301      	movs	r3, #1
 8006752:	4053      	eors	r3, r2
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1f6      	bne.n	8006748 <noteSerialReceive+0x8>
    if (serialDrainIndex < sizeof(serialBuffer))
 800675a:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <noteSerialReceive+0x54>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <noteSerialReceive+0x58>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d809      	bhi.n	8006778 <noteSerialReceive+0x38>
        data = serialBuffer[serialDrainIndex++];
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <noteSerialReceive+0x54>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	4a0a      	ldr	r2, [pc, #40]	; (8006794 <noteSerialReceive+0x54>)
 800676c:	6011      	str	r1, [r2, #0]
 800676e:	1dfa      	adds	r2, r7, #7
 8006770:	490a      	ldr	r1, [pc, #40]	; (800679c <noteSerialReceive+0x5c>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	7013      	strb	r3, [r2, #0]
 8006776:	e006      	b.n	8006786 <noteSerialReceive+0x46>
    else {
        data = serialBuffer[0];
 8006778:	1dfb      	adds	r3, r7, #7
 800677a:	4a08      	ldr	r2, [pc, #32]	; (800679c <noteSerialReceive+0x5c>)
 800677c:	7812      	ldrb	r2, [r2, #0]
 800677e:	701a      	strb	r2, [r3, #0]
        serialDrainIndex = 1;
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <noteSerialReceive+0x54>)
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
    }
    return data;
 8006786:	1dfb      	adds	r3, r7, #7
 8006788:	781b      	ldrb	r3, [r3, #0]
}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b002      	add	sp, #8
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	20000234 	.word	0x20000234
 8006798:	000001ff 	.word	0x000001ff
 800679c:	2000034c 	.word	0x2000034c

080067a0 <HAL_MspInit>:

#include "main.h"
#include "event.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067a6:	4b0f      	ldr	r3, [pc, #60]	; (80067e4 <HAL_MspInit+0x44>)
 80067a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <HAL_MspInit+0x44>)
 80067ac:	2101      	movs	r1, #1
 80067ae:	430a      	orrs	r2, r1
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
 80067b2:	4b0c      	ldr	r3, [pc, #48]	; (80067e4 <HAL_MspInit+0x44>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	2201      	movs	r2, #1
 80067b8:	4013      	ands	r3, r2
 80067ba:	607b      	str	r3, [r7, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80067be:	4b09      	ldr	r3, [pc, #36]	; (80067e4 <HAL_MspInit+0x44>)
 80067c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c2:	4b08      	ldr	r3, [pc, #32]	; (80067e4 <HAL_MspInit+0x44>)
 80067c4:	2180      	movs	r1, #128	; 0x80
 80067c6:	0549      	lsls	r1, r1, #21
 80067c8:	430a      	orrs	r2, r1
 80067ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80067cc:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <HAL_MspInit+0x44>)
 80067ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d0:	2380      	movs	r3, #128	; 0x80
 80067d2:	055b      	lsls	r3, r3, #21
 80067d4:	4013      	ands	r3, r2
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	683b      	ldr	r3, [r7, #0]
}
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	46bd      	mov	sp, r7
 80067de:	b002      	add	sp, #8
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	46c0      	nop			; (mov r8, r8)
 80067e4:	40021000 	.word	0x40021000

080067e8 <HAL_UART_MspInit>:
}
#endif

// Initialize all UART ports
#if USE_UART
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80067e8:	b590      	push	{r4, r7, lr}
 80067ea:	b08b      	sub	sp, #44	; 0x2c
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <HAL_UART_MspInit+0x9c>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d13f      	bne.n	800687a <HAL_UART_MspInit+0x92>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067fa:	2414      	movs	r4, #20
 80067fc:	193b      	adds	r3, r7, r4
 80067fe:	0018      	movs	r0, r3
 8006800:	2314      	movs	r3, #20
 8006802:	001a      	movs	r2, r3
 8006804:	2100      	movs	r1, #0
 8006806:	f003 f8b2 	bl	800996e <memset>

        // Peripheral clock enable
        __HAL_RCC_USART1_CLK_ENABLE();
 800680a:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_UART_MspInit+0xa0>)
 800680c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800680e:	4b1e      	ldr	r3, [pc, #120]	; (8006888 <HAL_UART_MspInit+0xa0>)
 8006810:	2180      	movs	r1, #128	; 0x80
 8006812:	01c9      	lsls	r1, r1, #7
 8006814:	430a      	orrs	r2, r1
 8006816:	641a      	str	r2, [r3, #64]	; 0x40
 8006818:	4b1b      	ldr	r3, [pc, #108]	; (8006888 <HAL_UART_MspInit+0xa0>)
 800681a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800681c:	2380      	movs	r3, #128	; 0x80
 800681e:	01db      	lsls	r3, r3, #7
 8006820:	4013      	ands	r3, r2
 8006822:	613b      	str	r3, [r7, #16]
 8006824:	693b      	ldr	r3, [r7, #16]

        // USART1 GPIO Configuration
        // PB6     ------> USART1_TX
        // PB7     ------> USART1_RX
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8006826:	4b18      	ldr	r3, [pc, #96]	; (8006888 <HAL_UART_MspInit+0xa0>)
 8006828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682a:	4b17      	ldr	r3, [pc, #92]	; (8006888 <HAL_UART_MspInit+0xa0>)
 800682c:	2102      	movs	r1, #2
 800682e:	430a      	orrs	r2, r1
 8006830:	635a      	str	r2, [r3, #52]	; 0x34
 8006832:	4b15      	ldr	r3, [pc, #84]	; (8006888 <HAL_UART_MspInit+0xa0>)
 8006834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006836:	2202      	movs	r2, #2
 8006838:	4013      	ands	r3, r2
 800683a:	60fb      	str	r3, [r7, #12]
 800683c:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800683e:	0021      	movs	r1, r4
 8006840:	187b      	adds	r3, r7, r1
 8006842:	22c0      	movs	r2, #192	; 0xc0
 8006844:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006846:	187b      	adds	r3, r7, r1
 8006848:	2202      	movs	r2, #2
 800684a:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 800684c:	187b      	adds	r3, r7, r1
 800684e:	2200      	movs	r2, #0
 8006850:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006852:	187b      	adds	r3, r7, r1
 8006854:	2200      	movs	r2, #0
 8006856:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8006858:	187b      	adds	r3, r7, r1
 800685a:	2200      	movs	r2, #0
 800685c:	611a      	str	r2, [r3, #16]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800685e:	187b      	adds	r3, r7, r1
 8006860:	4a0a      	ldr	r2, [pc, #40]	; (800688c <HAL_UART_MspInit+0xa4>)
 8006862:	0019      	movs	r1, r3
 8006864:	0010      	movs	r0, r2
 8006866:	f7fb febf 	bl	80025e8 <HAL_GPIO_Init>

        // USART1 interrupt Init
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800686a:	2200      	movs	r2, #0
 800686c:	2100      	movs	r1, #0
 800686e:	201b      	movs	r0, #27
 8006870:	f7fb fdfe 	bl	8002470 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006874:	201b      	movs	r0, #27
 8006876:	f7fb fe10 	bl	800249a <HAL_NVIC_EnableIRQ>

    }

}
 800687a:	46c0      	nop			; (mov r8, r8)
 800687c:	46bd      	mov	sp, r7
 800687e:	b00b      	add	sp, #44	; 0x2c
 8006880:	bd90      	pop	{r4, r7, pc}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	40013800 	.word	0x40013800
 8006888:	40021000 	.word	0x40021000
 800688c:	50000400 	.word	0x50000400

08006890 <HAL_UART_MspDeInit>:
#endif

// Deinitialize all UARTs
#if USE_UART
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart) {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a0a      	ldr	r2, [pc, #40]	; (80068c8 <HAL_UART_MspDeInit+0x38>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d10d      	bne.n	80068be <HAL_UART_MspDeInit+0x2e>

        // Peripheral clock disable
        __HAL_RCC_USART1_CLK_DISABLE();
 80068a2:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_UART_MspDeInit+0x3c>)
 80068a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a6:	4b09      	ldr	r3, [pc, #36]	; (80068cc <HAL_UART_MspDeInit+0x3c>)
 80068a8:	4909      	ldr	r1, [pc, #36]	; (80068d0 <HAL_UART_MspDeInit+0x40>)
 80068aa:	400a      	ands	r2, r1
 80068ac:	641a      	str	r2, [r3, #64]	; 0x40

        // USART1 GPIO Configuration
        // PB6     ------> USART1_TX
        // PB7     ------> USART1_RX
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_UART_MspDeInit+0x44>)
 80068b0:	21c0      	movs	r1, #192	; 0xc0
 80068b2:	0018      	movs	r0, r3
 80068b4:	f7fb fffc 	bl	80028b0 <HAL_GPIO_DeInit>

        // Interrupt DeInit
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 80068b8:	201b      	movs	r0, #27
 80068ba:	f7fb fdfe 	bl	80024ba <HAL_NVIC_DisableIRQ>

    }

}
 80068be:	46c0      	nop			; (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	b002      	add	sp, #8
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	40013800 	.word	0x40013800
 80068cc:	40021000 	.word	0x40021000
 80068d0:	ffffbfff 	.word	0xffffbfff
 80068d4:	50000400 	.word	0x50000400

080068d8 <HAL_LPTIM_MspInit>:
#endif

// Initialize all low power timers
#ifdef EVENT_TIMER
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim) {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

    // Handle LPTIM1
    if (hlptim->Instance==LPTIM1) {
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_LPTIM_MspInit+0x44>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d114      	bne.n	8006914 <HAL_LPTIM_MspInit+0x3c>

        // Peripheral clock enable
        __HAL_RCC_LPTIM1_CLK_ENABLE();
 80068ea:	4b0d      	ldr	r3, [pc, #52]	; (8006920 <HAL_LPTIM_MspInit+0x48>)
 80068ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <HAL_LPTIM_MspInit+0x48>)
 80068f0:	2180      	movs	r1, #128	; 0x80
 80068f2:	0609      	lsls	r1, r1, #24
 80068f4:	430a      	orrs	r2, r1
 80068f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <HAL_LPTIM_MspInit+0x48>)
 80068fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068fc:	0fdb      	lsrs	r3, r3, #31
 80068fe:	07db      	lsls	r3, r3, #31
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]

        // LPTIM1 interrupt Init
        HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8006904:	2200      	movs	r2, #0
 8006906:	2100      	movs	r1, #0
 8006908:	2011      	movs	r0, #17
 800690a:	f7fb fdb1 	bl	8002470 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800690e:	2011      	movs	r0, #17
 8006910:	f7fb fdc3 	bl	800249a <HAL_NVIC_EnableIRQ>

    }

}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b004      	add	sp, #16
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40007c00 	.word	0x40007c00
 8006920:	40021000 	.word	0x40021000

08006924 <NMI_Handler>:
#ifdef EVENT_TIMER
extern LPTIM_HandleTypeDef hlptim1;
#endif

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 8006924:	b580      	push	{r7, lr}
 8006926:	af00      	add	r7, sp, #0
}
 8006928:	46c0      	nop			; (mov r8, r8)
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 800692e:	b580      	push	{r7, lr}
 8006930:	af00      	add	r7, sp, #0
    while (1) ;
 8006932:	e7fe      	b.n	8006932 <HardFault_Handler+0x4>

08006934 <SVC_Handler>:
void UsageFault_Handler(void) {
    while (1) ;
}

// System service call via SWI instruction
void SVC_Handler(void) {
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
}
 8006938:	46c0      	nop			; (mov r8, r8)
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <PendSV_Handler>:
// Debug monitor
void DebugMon_Handler(void) {
}

// Pendable request for system service.
void PendSV_Handler(void) {
 800693e:	b580      	push	{r7, lr}
 8006940:	af00      	add	r7, sp, #0
}
 8006942:	46c0      	nop			; (mov r8, r8)
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 800694c:	f7fb fc88 	bl	8002260 <HAL_IncTick>
}
 8006950:	46c0      	nop			; (mov r8, r8)
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
	...

08006958 <USART1_IRQHandler>:
}
#endif

// USART1 global interrupt
#if USE_UART
void USART1_IRQHandler(void) {
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <USART1_IRQHandler+0x1c>)
 800695e:	0018      	movs	r0, r3
 8006960:	f7fd faf8 	bl	8003f54 <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8006964:	4b03      	ldr	r3, [pc, #12]	; (8006974 <USART1_IRQHandler+0x1c>)
 8006966:	0018      	movs	r0, r3
 8006968:	f7ff fd04 	bl	8006374 <MY_UART_IRQHandler>
}
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	20000288 	.word	0x20000288

08006978 <MY_GPIO_EXTI_IRQHandler>:
#endif

// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	0002      	movs	r2, r0
 8006980:	1dbb      	adds	r3, r7, #6
 8006982:	801a      	strh	r2, [r3, #0]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8006984:	4b15      	ldr	r3, [pc, #84]	; (80069dc <MY_GPIO_EXTI_IRQHandler+0x64>)
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	1dba      	adds	r2, r7, #6
 800698a:	8812      	ldrh	r2, [r2, #0]
 800698c:	4013      	ands	r3, r2
 800698e:	d105      	bne.n	800699c <MY_GPIO_EXTI_IRQHandler+0x24>
 8006990:	4b12      	ldr	r3, [pc, #72]	; (80069dc <MY_GPIO_EXTI_IRQHandler+0x64>)
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	1dba      	adds	r2, r7, #6
 8006996:	8812      	ldrh	r2, [r2, #0]
 8006998:	4013      	ands	r3, r2
 800699a:	d001      	beq.n	80069a0 <MY_GPIO_EXTI_IRQHandler+0x28>
 800699c:	2301      	movs	r3, #1
 800699e:	e000      	b.n	80069a2 <MY_GPIO_EXTI_IRQHandler+0x2a>
 80069a0:	2300      	movs	r3, #0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d015      	beq.n	80069d2 <MY_GPIO_EXTI_IRQHandler+0x5a>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->RPR1;
 80069a6:	4b0d      	ldr	r3, [pc, #52]	; (80069dc <MY_GPIO_EXTI_IRQHandler+0x64>)
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	200e      	movs	r0, #14
 80069ae:	183b      	adds	r3, r7, r0
 80069b0:	1db9      	adds	r1, r7, #6
 80069b2:	8809      	ldrh	r1, [r1, #0]
 80069b4:	400a      	ands	r2, r1
 80069b6:	801a      	strh	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80069b8:	4b08      	ldr	r3, [pc, #32]	; (80069dc <MY_GPIO_EXTI_IRQHandler+0x64>)
 80069ba:	1dba      	adds	r2, r7, #6
 80069bc:	8812      	ldrh	r2, [r2, #0]
 80069be:	60da      	str	r2, [r3, #12]
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <MY_GPIO_EXTI_IRQHandler+0x64>)
 80069c2:	1dba      	adds	r2, r7, #6
 80069c4:	8812      	ldrh	r2, [r2, #0]
 80069c6:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_Rising_Callback(GPIO_Line);
 80069c8:	183b      	adds	r3, r7, r0
 80069ca:	881b      	ldrh	r3, [r3, #0]
 80069cc:	0018      	movs	r0, r3
 80069ce:	f7ff fe4b 	bl	8006668 <HAL_GPIO_EXTI_Rising_Callback>
    }
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	b004      	add	sp, #16
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	40021800 	.word	0x40021800

080069e0 <EXTI0_1_IRQHandler>:

// GPIO interrupts
void EXTI0_1_IRQHandler( void ) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_0|GPIO_PIN_1);
 80069e4:	2003      	movs	r0, #3
 80069e6:	f7ff ffc7 	bl	8006978 <MY_GPIO_EXTI_IRQHandler>
}
 80069ea:	46c0      	nop			; (mov r8, r8)
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler( void ) {
 80069f0:	b580      	push	{r7, lr}
 80069f2:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_2|GPIO_PIN_3);
 80069f4:	200c      	movs	r0, #12
 80069f6:	f7ff ffbf 	bl	8006978 <MY_GPIO_EXTI_IRQHandler>
}
 80069fa:	46c0      	nop			; (mov r8, r8)
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler( void ) {
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8006a04:	4b03      	ldr	r3, [pc, #12]	; (8006a14 <EXTI4_15_IRQHandler+0x14>)
 8006a06:	0018      	movs	r0, r3
 8006a08:	f7ff ffb6 	bl	8006978 <MY_GPIO_EXTI_IRQHandler>
}
 8006a0c:	46c0      	nop			; (mov r8, r8)
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			; (mov r8, r8)
 8006a14:	0000fff0 	.word	0x0000fff0

08006a18 <LPTIM1_IRQHandler>:

// LPTIM1 global interrupt
#ifdef EVENT_TIMER
void LPTIM1_IRQHandler(void) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8006a1c:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <LPTIM1_IRQHandler+0x14>)
 8006a1e:	0018      	movs	r0, r3
 8006a20:	f7fc f906 	bl	8002c30 <HAL_LPTIM_IRQHandler>
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	20000314 	.word	0x20000314

08006a30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <_sbrk+0x50>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <_sbrk+0x16>
		heap_end = &end;
 8006a40:	4b0f      	ldr	r3, [pc, #60]	; (8006a80 <_sbrk+0x50>)
 8006a42:	4a10      	ldr	r2, [pc, #64]	; (8006a84 <_sbrk+0x54>)
 8006a44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8006a46:	4b0e      	ldr	r3, [pc, #56]	; (8006a80 <_sbrk+0x50>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8006a4c:	4b0c      	ldr	r3, [pc, #48]	; (8006a80 <_sbrk+0x50>)
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	18d3      	adds	r3, r2, r3
 8006a54:	466a      	mov	r2, sp
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d907      	bls.n	8006a6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006a5a:	f002 ff21 	bl	80098a0 <__errno>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	220c      	movs	r2, #12
 8006a62:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8006a64:	2301      	movs	r3, #1
 8006a66:	425b      	negs	r3, r3
 8006a68:	e006      	b.n	8006a78 <_sbrk+0x48>
	}

	heap_end += incr;
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_sbrk+0x50>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	18d2      	adds	r2, r2, r3
 8006a72:	4b03      	ldr	r3, [pc, #12]	; (8006a80 <_sbrk+0x50>)
 8006a74:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	0018      	movs	r0, r3
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	b004      	add	sp, #16
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	2000023c 	.word	0x2000023c
 8006a84:	20000558 	.word	0x20000558

08006a88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a8c:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <SystemInit+0x14>)
 8006a8e:	2280      	movs	r2, #128	; 0x80
 8006a90:	0512      	lsls	r2, r2, #20
 8006a92:	609a      	str	r2, [r3, #8]
#endif
}
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	46c0      	nop			; (mov r8, r8)
 8006a9c:	e000ed00 	.word	0xe000ed00

08006aa0 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aa6:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	2238      	movs	r2, #56	; 0x38
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d016      	beq.n	8006ae0 <SystemCoreClockUpdate+0x40>
 8006ab2:	d802      	bhi.n	8006aba <SystemCoreClockUpdate+0x1a>
 8006ab4:	2b08      	cmp	r3, #8
 8006ab6:	d005      	beq.n	8006ac4 <SystemCoreClockUpdate+0x24>
 8006ab8:	e046      	b.n	8006b48 <SystemCoreClockUpdate+0xa8>
 8006aba:	2b18      	cmp	r3, #24
 8006abc:	d006      	beq.n	8006acc <SystemCoreClockUpdate+0x2c>
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d009      	beq.n	8006ad6 <SystemCoreClockUpdate+0x36>
 8006ac2:	e041      	b.n	8006b48 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8006ac4:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006ac6:	4a35      	ldr	r2, [pc, #212]	; (8006b9c <SystemCoreClockUpdate+0xfc>)
 8006ac8:	601a      	str	r2, [r3, #0]
      break;
 8006aca:	e04f      	b.n	8006b6c <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSI:  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 8006acc:	4b32      	ldr	r3, [pc, #200]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006ace:	22fa      	movs	r2, #250	; 0xfa
 8006ad0:	01d2      	lsls	r2, r2, #7
 8006ad2:	601a      	str	r2, [r3, #0]
      break;
 8006ad4:	e04a      	b.n	8006b6c <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSE:  /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 8006ad6:	4b30      	ldr	r3, [pc, #192]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006ad8:	2280      	movs	r2, #128	; 0x80
 8006ada:	0212      	lsls	r2, r2, #8
 8006adc:	601a      	str	r2, [r3, #0]
      break;
 8006ade:	e045      	b.n	8006b6c <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006ae0:	4b2c      	ldr	r3, [pc, #176]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	4013      	ands	r3, r2
 8006ae8:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 8006aea:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	2207      	movs	r2, #7
 8006af2:	4013      	ands	r3, r2
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	2b03      	cmp	r3, #3
 8006afc:	d106      	bne.n	8006b0c <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 8006afe:	68f9      	ldr	r1, [r7, #12]
 8006b00:	4826      	ldr	r0, [pc, #152]	; (8006b9c <SystemCoreClockUpdate+0xfc>)
 8006b02:	f7f9 fb11 	bl	8000128 <__udivsi3>
 8006b06:	0003      	movs	r3, r0
 8006b08:	617b      	str	r3, [r7, #20]
 8006b0a:	e005      	b.n	8006b18 <SystemCoreClockUpdate+0x78>
      }
      else /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8006b0c:	68f9      	ldr	r1, [r7, #12]
 8006b0e:	4824      	ldr	r0, [pc, #144]	; (8006ba0 <SystemCoreClockUpdate+0x100>)
 8006b10:	f7f9 fb0a 	bl	8000128 <__udivsi3>
 8006b14:	0003      	movs	r3, r0
 8006b16:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006b18:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	0a1b      	lsrs	r3, r3, #8
 8006b1e:	227f      	movs	r2, #127	; 0x7f
 8006b20:	401a      	ands	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	4353      	muls	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	0f5b      	lsrs	r3, r3, #29
 8006b2e:	2207      	movs	r2, #7
 8006b30:	4013      	ands	r3, r2
 8006b32:	3301      	adds	r3, #1
 8006b34:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	6978      	ldr	r0, [r7, #20]
 8006b3a:	f7f9 faf5 	bl	8000128 <__udivsi3>
 8006b3e:	0003      	movs	r3, r0
 8006b40:	001a      	movs	r2, r3
 8006b42:	4b15      	ldr	r3, [pc, #84]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006b44:	601a      	str	r2, [r3, #0]
      break;
 8006b46:	e011      	b.n	8006b6c <SystemCoreClockUpdate+0xcc>
      
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
    default:                /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8006b48:	4b12      	ldr	r3, [pc, #72]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	0adb      	lsrs	r3, r3, #11
 8006b4e:	2207      	movs	r2, #7
 8006b50:	4013      	ands	r3, r2
 8006b52:	2201      	movs	r2, #1
 8006b54:	409a      	lsls	r2, r3
 8006b56:	0013      	movs	r3, r2
 8006b58:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8006b5a:	6879      	ldr	r1, [r7, #4]
 8006b5c:	4810      	ldr	r0, [pc, #64]	; (8006ba0 <SystemCoreClockUpdate+0x100>)
 8006b5e:	f7f9 fae3 	bl	8000128 <__udivsi3>
 8006b62:	0003      	movs	r3, r0
 8006b64:	001a      	movs	r2, r3
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006b68:	601a      	str	r2, [r3, #0]
      break;
 8006b6a:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <SystemCoreClockUpdate+0xf4>)
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	0a1b      	lsrs	r3, r3, #8
 8006b72:	220f      	movs	r2, #15
 8006b74:	401a      	ands	r2, r3
 8006b76:	4b0b      	ldr	r3, [pc, #44]	; (8006ba4 <SystemCoreClockUpdate+0x104>)
 8006b78:	0092      	lsls	r2, r2, #2
 8006b7a:	58d3      	ldr	r3, [r2, r3]
 8006b7c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	40da      	lsrs	r2, r3
 8006b86:	4b04      	ldr	r3, [pc, #16]	; (8006b98 <SystemCoreClockUpdate+0xf8>)
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	b006      	add	sp, #24
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	46c0      	nop			; (mov r8, r8)
 8006b94:	40021000 	.word	0x40021000
 8006b98:	20000008 	.word	0x20000008
 8006b9c:	007a1200 	.word	0x007a1200
 8006ba0:	00f42400 	.word	0x00f42400
 8006ba4:	08009e34 	.word	0x08009e34

08006ba8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ba8:	480d      	ldr	r0, [pc, #52]	; (8006be0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006baa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006bac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006bae:	e003      	b.n	8006bb8 <LoopCopyDataInit>

08006bb0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006bb0:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8006bb2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006bb4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006bb6:	3104      	adds	r1, #4

08006bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006bb8:	480b      	ldr	r0, [pc, #44]	; (8006be8 <LoopForever+0xa>)
  ldr r3, =_edata
 8006bba:	4b0c      	ldr	r3, [pc, #48]	; (8006bec <LoopForever+0xe>)
  adds r2, r0, r1
 8006bbc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006bbe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006bc0:	d3f6      	bcc.n	8006bb0 <CopyDataInit>
  ldr r2, =_sbss
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <LoopForever+0x12>)
  b LoopFillZerobss
 8006bc4:	e002      	b.n	8006bcc <LoopFillZerobss>

08006bc6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006bc6:	2300      	movs	r3, #0
  str  r3, [r2]
 8006bc8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006bca:	3204      	adds	r2, #4

08006bcc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8006bcc:	4b09      	ldr	r3, [pc, #36]	; (8006bf4 <LoopForever+0x16>)
  cmp r2, r3
 8006bce:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006bd0:	d3f9      	bcc.n	8006bc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8006bd2:	f7ff ff59 	bl	8006a88 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006bd6:	f002 fe69 	bl	80098ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006bda:	f7ff fabd 	bl	8006158 <main>

08006bde <LoopForever>:

LoopForever:
    b LoopForever
 8006bde:	e7fe      	b.n	8006bde <LoopForever>
  ldr   r0, =_estack
 8006be0:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8006be4:	0800a21c 	.word	0x0800a21c
  ldr r0, =_sdata
 8006be8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006bec:	20000200 	.word	0x20000200
  ldr r2, =_sbss
 8006bf0:	20000200 	.word	0x20000200
  ldr r3, = _ebss
 8006bf4:	20000554 	.word	0x20000554

08006bf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006bf8:	e7fe      	b.n	8006bf8 <ADC1_IRQHandler>
	...

08006bfc <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8006bfc:	b5b0      	push	{r4, r5, r7, lr}
 8006bfe:	b08e      	sub	sp, #56	; 0x38
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
    int sign, expSign = FALSE;
 8006c06:	2300      	movs	r3, #0
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30
    JNUMBER fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	623b      	str	r3, [r7, #32]
    int fracExp = 0;            /* Exponent that derives from the fractional
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61fb      	str	r3, [r7, #28]

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 8006c12:	687c      	ldr	r4, [r7, #4]
    while (*p == ' ') {
 8006c14:	e000      	b.n	8006c18 <JAtoN+0x1c>
        p += 1;
 8006c16:	3401      	adds	r4, #1
    while (*p == ' ') {
 8006c18:	7823      	ldrb	r3, [r4, #0]
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	d0fb      	beq.n	8006c16 <JAtoN+0x1a>
    }
    if (*p == '-') {
 8006c1e:	7823      	ldrb	r3, [r4, #0]
 8006c20:	2b2d      	cmp	r3, #45	; 0x2d
 8006c22:	d103      	bne.n	8006c2c <JAtoN+0x30>
        sign = TRUE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
        p += 1;
 8006c28:	3401      	adds	r4, #1
 8006c2a:	e005      	b.n	8006c38 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 8006c2c:	7823      	ldrb	r3, [r4, #0]
 8006c2e:	2b2b      	cmp	r3, #43	; 0x2b
 8006c30:	d100      	bne.n	8006c34 <JAtoN+0x38>
            p += 1;
 8006c32:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	617b      	str	r3, [r7, #20]
    for (mantSize = 0; ; mantSize += 1)
 8006c3e:	2300      	movs	r3, #0
 8006c40:	61bb      	str	r3, [r7, #24]
    {
        c = *p;
 8006c42:	7823      	ldrb	r3, [r4, #0]
 8006c44:	001d      	movs	r5, r3
        if (c < '0' || c > '9') {
 8006c46:	2d2f      	cmp	r5, #47	; 0x2f
 8006c48:	dd01      	ble.n	8006c4e <JAtoN+0x52>
 8006c4a:	2d39      	cmp	r5, #57	; 0x39
 8006c4c:	dd06      	ble.n	8006c5c <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 8006c4e:	2d2e      	cmp	r5, #46	; 0x2e
 8006c50:	d109      	bne.n	8006c66 <JAtoN+0x6a>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	da06      	bge.n	8006c66 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	617b      	str	r3, [r7, #20]
        }
        p += 1;
 8006c5c:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	3301      	adds	r3, #1
 8006c62:	61bb      	str	r3, [r7, #24]
        c = *p;
 8006c64:	e7ed      	b.n	8006c42 <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 8006c66:	60bc      	str	r4, [r7, #8]
    p -= mantSize;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	425b      	negs	r3, r3
 8006c6c:	18e4      	adds	r4, r4, r3
    if (decPt < 0) {
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da02      	bge.n	8006c7a <JAtoN+0x7e>
        decPt = mantSize;
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e002      	b.n	8006c80 <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	61bb      	str	r3, [r7, #24]
    }
    if (mantSize > 18) {
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b12      	cmp	r3, #18
 8006c84:	dd05      	ble.n	8006c92 <JAtoN+0x96>
        fracExp = decPt - 18;
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	3b12      	subs	r3, #18
 8006c8a:	61fb      	str	r3, [r7, #28]
        mantSize = 18;
 8006c8c:	2312      	movs	r3, #18
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e003      	b.n	8006c9a <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	61fb      	str	r3, [r7, #28]
    }
    if (mantSize == 0) {
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d103      	bne.n	8006ca8 <JAtoN+0xac>
        fraction = 0.0;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        p = string;
 8006ca4:	687c      	ldr	r4, [r7, #4]
        goto done;
 8006ca6:	e0ca      	b.n	8006e3e <JAtoN+0x242>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	613b      	str	r3, [r7, #16]
        for ( ; mantSize > 9; mantSize -= 1)
 8006cac:	e014      	b.n	8006cd8 <JAtoN+0xdc>
        {
            c = *p;
 8006cae:	7823      	ldrb	r3, [r4, #0]
 8006cb0:	001d      	movs	r5, r3
            p += 1;
 8006cb2:	3401      	adds	r4, #1
            if (c == '.') {
 8006cb4:	2d2e      	cmp	r5, #46	; 0x2e
 8006cb6:	d102      	bne.n	8006cbe <JAtoN+0xc2>
                c = *p;
 8006cb8:	7823      	ldrb	r3, [r4, #0]
 8006cba:	001d      	movs	r5, r3
                p += 1;
 8006cbc:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	0013      	movs	r3, r2
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	001a      	movs	r2, r3
 8006cca:	002b      	movs	r3, r5
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	18d3      	adds	r3, r2, r3
 8006cd0:	613b      	str	r3, [r7, #16]
        for ( ; mantSize > 9; mantSize -= 1)
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	2b09      	cmp	r3, #9
 8006cdc:	dce7      	bgt.n	8006cae <JAtoN+0xb2>
        }
        frac2 = 0L;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60fb      	str	r3, [r7, #12]
        for (; mantSize > 0; mantSize -= 1)
 8006ce2:	e014      	b.n	8006d0e <JAtoN+0x112>
        {
            c = *p;
 8006ce4:	7823      	ldrb	r3, [r4, #0]
 8006ce6:	001d      	movs	r5, r3
            p += 1;
 8006ce8:	3401      	adds	r4, #1
            if (c == '.') {
 8006cea:	2d2e      	cmp	r5, #46	; 0x2e
 8006cec:	d102      	bne.n	8006cf4 <JAtoN+0xf8>
                c = *p;
 8006cee:	7823      	ldrb	r3, [r4, #0]
 8006cf0:	001d      	movs	r5, r3
                p += 1;
 8006cf2:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	0013      	movs	r3, r2
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	189b      	adds	r3, r3, r2
 8006cfc:	005b      	lsls	r3, r3, #1
 8006cfe:	001a      	movs	r2, r3
 8006d00:	002b      	movs	r3, r5
 8006d02:	3b30      	subs	r3, #48	; 0x30
 8006d04:	18d3      	adds	r3, r2, r3
 8006d06:	60fb      	str	r3, [r7, #12]
        for (; mantSize > 0; mantSize -= 1)
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	dce7      	bgt.n	8006ce4 <JAtoN+0xe8>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8006d14:	6938      	ldr	r0, [r7, #16]
 8006d16:	f7fb f951 	bl	8001fbc <__aeabi_i2d>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	4b51      	ldr	r3, [pc, #324]	; (8006e64 <JAtoN+0x268>)
 8006d1e:	f7fa fedb 	bl	8001ad8 <__aeabi_dmul>
 8006d22:	0003      	movs	r3, r0
 8006d24:	000c      	movs	r4, r1
 8006d26:	0025      	movs	r5, r4
 8006d28:	001c      	movs	r4, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7fb f946 	bl	8001fbc <__aeabi_i2d>
 8006d30:	0002      	movs	r2, r0
 8006d32:	000b      	movs	r3, r1
 8006d34:	0020      	movs	r0, r4
 8006d36:	0029      	movs	r1, r5
 8006d38:	f7fa fbb2 	bl	80014a0 <__aeabi_dadd>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	000c      	movs	r4, r1
 8006d40:	0018      	movs	r0, r3
 8006d42:	0021      	movs	r1, r4
 8006d44:	f7fb f974 	bl	8002030 <__aeabi_d2f>
 8006d48:	1c03      	adds	r3, r0, #0
 8006d4a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /*
     * Skim off the exponent.
     */

    p = pExp;
 8006d4c:	68bc      	ldr	r4, [r7, #8]
    if ((*p == 'E') || (*p == 'e')) {
 8006d4e:	7823      	ldrb	r3, [r4, #0]
 8006d50:	2b45      	cmp	r3, #69	; 0x45
 8006d52:	d002      	beq.n	8006d5a <JAtoN+0x15e>
 8006d54:	7823      	ldrb	r3, [r4, #0]
 8006d56:	2b65      	cmp	r3, #101	; 0x65
 8006d58:	d11f      	bne.n	8006d9a <JAtoN+0x19e>
        p += 1;
 8006d5a:	3401      	adds	r4, #1
        if (*p == '-') {
 8006d5c:	7823      	ldrb	r3, [r4, #0]
 8006d5e:	2b2d      	cmp	r3, #45	; 0x2d
 8006d60:	d103      	bne.n	8006d6a <JAtoN+0x16e>
            expSign = TRUE;
 8006d62:	2301      	movs	r3, #1
 8006d64:	633b      	str	r3, [r7, #48]	; 0x30
            p += 1;
 8006d66:	3401      	adds	r4, #1
 8006d68:	e011      	b.n	8006d8e <JAtoN+0x192>
        } else {
            if (*p == '+') {
 8006d6a:	7823      	ldrb	r3, [r4, #0]
 8006d6c:	2b2b      	cmp	r3, #43	; 0x2b
 8006d6e:	d100      	bne.n	8006d72 <JAtoN+0x176>
                p += 1;
 8006d70:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	633b      	str	r3, [r7, #48]	; 0x30
        }
        while (*p >= '0' && *p <= '9') {
 8006d76:	e00a      	b.n	8006d8e <JAtoN+0x192>
            exp = exp * 10 + (*p - '0');
 8006d78:	6a3a      	ldr	r2, [r7, #32]
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	189b      	adds	r3, r3, r2
 8006d80:	005b      	lsls	r3, r3, #1
 8006d82:	001a      	movs	r2, r3
 8006d84:	7823      	ldrb	r3, [r4, #0]
 8006d86:	3b30      	subs	r3, #48	; 0x30
 8006d88:	18d3      	adds	r3, r2, r3
 8006d8a:	623b      	str	r3, [r7, #32]
            p += 1;
 8006d8c:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 8006d8e:	7823      	ldrb	r3, [r4, #0]
 8006d90:	2b2f      	cmp	r3, #47	; 0x2f
 8006d92:	d902      	bls.n	8006d9a <JAtoN+0x19e>
 8006d94:	7823      	ldrb	r3, [r4, #0]
 8006d96:	2b39      	cmp	r3, #57	; 0x39
 8006d98:	d9ee      	bls.n	8006d78 <JAtoN+0x17c>
        }
    }
    if (expSign) {
 8006d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d004      	beq.n	8006daa <JAtoN+0x1ae>
        exp = fracExp - exp;
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	6a3b      	ldr	r3, [r7, #32]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	623b      	str	r3, [r7, #32]
 8006da8:	e003      	b.n	8006db2 <JAtoN+0x1b6>
    } else {
        exp = fracExp + exp;
 8006daa:	6a3a      	ldr	r2, [r7, #32]
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	18d3      	adds	r3, r2, r3
 8006db0:	623b      	str	r3, [r7, #32]
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da05      	bge.n	8006dc4 <JAtoN+0x1c8>
        expSign = TRUE;
 8006db8:	2301      	movs	r3, #1
 8006dba:	633b      	str	r3, [r7, #48]	; 0x30
        exp = -exp;
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	425b      	negs	r3, r3
 8006dc0:	623b      	str	r3, [r7, #32]
 8006dc2:	e001      	b.n	8006dc8 <JAtoN+0x1cc>
    } else {
        expSign = FALSE;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (exp > maxExponent) {
 8006dc8:	4b27      	ldr	r3, [pc, #156]	; (8006e68 <JAtoN+0x26c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6a3a      	ldr	r2, [r7, #32]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	dd02      	ble.n	8006dd8 <JAtoN+0x1dc>
        exp = maxExponent;
 8006dd2:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <JAtoN+0x26c>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	623b      	str	r3, [r7, #32]
    }
    dblExp = 1.0;
 8006dd8:	23fe      	movs	r3, #254	; 0xfe
 8006dda:	059b      	lsls	r3, r3, #22
 8006ddc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (d = powersOf10; *d != 0.0 && exp != 0; exp >>= 1, d += 1) {
 8006dde:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <JAtoN+0x270>)
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
 8006de2:	e011      	b.n	8006e08 <JAtoN+0x20c>
        if (exp & 01) {
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	2201      	movs	r2, #1
 8006de8:	4013      	ands	r3, r2
 8006dea:	d007      	beq.n	8006dfc <JAtoN+0x200>
            dblExp *= *d;
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	1c19      	adds	r1, r3, #0
 8006df2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006df4:	f7f9 ffb4 	bl	8000d60 <__aeabi_fmul>
 8006df8:	1c03      	adds	r3, r0, #0
 8006dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    for (d = powersOf10; *d != 0.0 && exp != 0; exp >>= 1, d += 1) {
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	105b      	asrs	r3, r3, #1
 8006e00:	623b      	str	r3, [r7, #32]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	3304      	adds	r3, #4
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	1c18      	adds	r0, r3, #0
 8006e10:	f7f9 fb0c 	bl	800042c <__aeabi_fcmpeq>
 8006e14:	1e03      	subs	r3, r0, #0
 8006e16:	d102      	bne.n	8006e1e <JAtoN+0x222>
 8006e18:	6a3b      	ldr	r3, [r7, #32]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e2      	bne.n	8006de4 <JAtoN+0x1e8>
        }
    }
    if (expSign) {
 8006e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <JAtoN+0x236>
        fraction /= dblExp;
 8006e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e28:	f7f9 fdc2 	bl	80009b0 <__aeabi_fdiv>
 8006e2c:	1c03      	adds	r3, r0, #0
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e30:	e005      	b.n	8006e3e <JAtoN+0x242>
    } else {
        fraction *= dblExp;
 8006e32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e36:	f7f9 ff93 	bl	8000d60 <__aeabi_fmul>
 8006e3a:	1c03      	adds	r3, r0, #0
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

done:
    if (endPtr != NULL) {
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <JAtoN+0x24c>
        *endPtr = (char *) p;
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8006e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d004      	beq.n	8006e58 <JAtoN+0x25c>
        return -fraction;
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	0612      	lsls	r2, r2, #24
 8006e54:	4053      	eors	r3, r2
 8006e56:	e000      	b.n	8006e5a <JAtoN+0x25e>
    }
    return fraction;
 8006e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006e5a:	1c18      	adds	r0, r3, #0
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	b00e      	add	sp, #56	; 0x38
 8006e60:	bdb0      	pop	{r4, r5, r7, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	41cdcd65 	.word	0x41cdcd65
 8006e68:	2000000c 	.word	0x2000000c
 8006e6c:	20000010 	.word	0x20000010

08006e70 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8006e70:	b5b0      	push	{r4, r5, r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <case_insensitive_strcmp+0x16>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d101      	bne.n	8006e8a <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e07e      	b.n	8006f88 <case_insensitive_strcmp+0x118>
    }

    if (string1 == string2)
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d10d      	bne.n	8006eae <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e078      	b.n	8006f88 <case_insensitive_strcmp+0x118>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d101      	bne.n	8006ea2 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	e072      	b.n	8006f88 <case_insensitive_strcmp+0x118>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	607b      	str	r3, [r7, #4]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	603b      	str	r3, [r7, #0]
 8006eae:	240f      	movs	r4, #15
 8006eb0:	193b      	adds	r3, r7, r4
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	f002 fd1c 	bl	80098f4 <__locale_ctype_ptr>
 8006ebc:	0002      	movs	r2, r0
 8006ebe:	193b      	adds	r3, r7, r4
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	18d3      	adds	r3, r2, r3
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	001a      	movs	r2, r3
 8006eca:	2303      	movs	r3, #3
 8006ecc:	4013      	ands	r3, r2
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <case_insensitive_strcmp+0x6e>
 8006ed2:	230f      	movs	r3, #15
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	3320      	adds	r3, #32
 8006eda:	001c      	movs	r4, r3
 8006edc:	e002      	b.n	8006ee4 <case_insensitive_strcmp+0x74>
 8006ede:	230f      	movs	r3, #15
 8006ee0:	18fb      	adds	r3, r7, r3
 8006ee2:	781c      	ldrb	r4, [r3, #0]
 8006ee4:	250e      	movs	r5, #14
 8006ee6:	197b      	adds	r3, r7, r5
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	f002 fd01 	bl	80098f4 <__locale_ctype_ptr>
 8006ef2:	0002      	movs	r2, r0
 8006ef4:	197b      	adds	r3, r7, r5
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	18d3      	adds	r3, r2, r3
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	001a      	movs	r2, r3
 8006f00:	2303      	movs	r3, #3
 8006f02:	4013      	ands	r3, r2
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d104      	bne.n	8006f12 <case_insensitive_strcmp+0xa2>
 8006f08:	230e      	movs	r3, #14
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	3320      	adds	r3, #32
 8006f10:	e002      	b.n	8006f18 <case_insensitive_strcmp+0xa8>
 8006f12:	230e      	movs	r3, #14
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d0bc      	beq.n	8006e96 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8006f1c:	240d      	movs	r4, #13
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	7812      	ldrb	r2, [r2, #0]
 8006f24:	701a      	strb	r2, [r3, #0]
 8006f26:	f002 fce5 	bl	80098f4 <__locale_ctype_ptr>
 8006f2a:	0002      	movs	r2, r0
 8006f2c:	193b      	adds	r3, r7, r4
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	3301      	adds	r3, #1
 8006f32:	18d3      	adds	r3, r2, r3
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	001a      	movs	r2, r3
 8006f38:	2303      	movs	r3, #3
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d105      	bne.n	8006f4c <case_insensitive_strcmp+0xdc>
 8006f40:	230d      	movs	r3, #13
 8006f42:	18fb      	adds	r3, r7, r3
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	3320      	adds	r3, #32
 8006f48:	001c      	movs	r4, r3
 8006f4a:	e002      	b.n	8006f52 <case_insensitive_strcmp+0xe2>
 8006f4c:	230d      	movs	r3, #13
 8006f4e:	18fb      	adds	r3, r7, r3
 8006f50:	781c      	ldrb	r4, [r3, #0]
 8006f52:	250c      	movs	r5, #12
 8006f54:	197b      	adds	r3, r7, r5
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	701a      	strb	r2, [r3, #0]
 8006f5c:	f002 fcca 	bl	80098f4 <__locale_ctype_ptr>
 8006f60:	0002      	movs	r2, r0
 8006f62:	197b      	adds	r3, r7, r5
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	3301      	adds	r3, #1
 8006f68:	18d3      	adds	r3, r2, r3
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	001a      	movs	r2, r3
 8006f6e:	2303      	movs	r3, #3
 8006f70:	4013      	ands	r3, r2
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d104      	bne.n	8006f80 <case_insensitive_strcmp+0x110>
 8006f76:	230c      	movs	r3, #12
 8006f78:	18fb      	adds	r3, r7, r3
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	3320      	adds	r3, #32
 8006f7e:	e002      	b.n	8006f86 <case_insensitive_strcmp+0x116>
 8006f80:	230c      	movs	r3, #12
 8006f82:	18fb      	adds	r3, r7, r3
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	1ae3      	subs	r3, r4, r3
}
 8006f88:	0018      	movs	r0, r3
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	b004      	add	sp, #16
 8006f8e:	bdb0      	pop	{r4, r5, r7, pc}

08006f90 <Jstrdup>:

static unsigned char* Jstrdup(const unsigned char* string)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
    size_t length = 0;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <Jstrdup+0x1a>
    {
        return NULL;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	e018      	b.n	8006fdc <Jstrdup+0x4c>
    }

    length = strlen((const char*)string) + sizeof("");
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	0018      	movs	r0, r3
 8006fae:	f7f9 f8b3 	bl	8000118 <strlen>
 8006fb2:	0003      	movs	r3, r0
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)_Malloc(length);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f002 f922 	bl	8009204 <NoteFnMalloc>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <Jstrdup+0x3e>
    {
        return NULL;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	e006      	b.n	8006fdc <Jstrdup+0x4c>
    }
    memcpy(copy, string, length);
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	0018      	movs	r0, r3
 8006fd6:	f002 fcc1 	bl	800995c <memcpy>

    return copy;
 8006fda:	68bb      	ldr	r3, [r7, #8]
}
 8006fdc:	0018      	movs	r0, r3
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	b004      	add	sp, #16
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <JFree>:

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return _Malloc(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
    _Free(p);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	0018      	movs	r0, r3
 8006ff0:	f002 f91e 	bl	8009230 <NoteFnFree>
}
 8006ff4:	46c0      	nop			; (mov r8, r8)
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	b002      	add	sp, #8
 8006ffa:	bd80      	pop	{r7, pc}

08006ffc <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item()
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
    J* node = (J*)_Malloc(sizeof(J));
 8007002:	2020      	movs	r0, #32
 8007004:	f002 f8fe 	bl	8009204 <NoteFnMalloc>
 8007008:	0003      	movs	r3, r0
 800700a:	607b      	str	r3, [r7, #4]
    if (node)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d005      	beq.n	800701e <JNew_Item+0x22>
    {
        memset(node, '\0', sizeof(J));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2220      	movs	r2, #32
 8007016:	2100      	movs	r1, #0
 8007018:	0018      	movs	r0, r3
 800701a:	f002 fca8 	bl	800996e <memset>
    }

    return node;
 800701e:	687b      	ldr	r3, [r7, #4]
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b002      	add	sp, #8
 8007026:	bd80      	pop	{r7, pc}

08007028 <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 8007030:	2300      	movs	r3, #0
 8007032:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8007034:	e035      	b.n	80070a2 <JDelete+0x7a>
    {
        next = item->next;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	2380      	movs	r3, #128	; 0x80
 8007042:	005b      	lsls	r3, r3, #1
 8007044:	4013      	ands	r3, r2
 8007046:	d108      	bne.n	800705a <JDelete+0x32>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d004      	beq.n	800705a <JDelete+0x32>
        {
            JDelete(item->child);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	0018      	movs	r0, r3
 8007056:	f7ff ffe7 	bl	8007028 <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68da      	ldr	r2, [r3, #12]
 800705e:	2380      	movs	r3, #128	; 0x80
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	4013      	ands	r3, r2
 8007064:	d108      	bne.n	8007078 <JDelete+0x50>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d004      	beq.n	8007078 <JDelete+0x50>
        {
            _Free(item->valuestring);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	0018      	movs	r0, r3
 8007074:	f002 f8dc 	bl	8009230 <NoteFnFree>
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	68da      	ldr	r2, [r3, #12]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4013      	ands	r3, r2
 8007082:	d108      	bne.n	8007096 <JDelete+0x6e>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <JDelete+0x6e>
        {
            _Free(item->string);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	0018      	movs	r0, r3
 8007092:	f002 f8cd 	bl	8009230 <NoteFnFree>
        }
        _Free(item);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f002 f8c9 	bl	8009230 <NoteFnFree>
        item = next;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1c6      	bne.n	8007036 <JDelete+0xe>
    }
}
 80070a8:	46c0      	nop			; (mov r8, r8)
 80070aa:	46bd      	mov	sp, r7
 80070ac:	b004      	add	sp, #16
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80070b4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80070b6:	0018      	movs	r0, r3
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 80070bc:	b590      	push	{r4, r7, lr}
 80070be:	b097      	sub	sp, #92	; 0x5c
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
    JNUMBER number = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 80070ca:	2300      	movs	r3, #0
 80070cc:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 80070ce:	234f      	movs	r3, #79	; 0x4f
 80070d0:	18fc      	adds	r4, r7, r3
 80070d2:	f7ff ffed 	bl	80070b0 <get_decimal_point>
 80070d6:	0003      	movs	r3, r0
 80070d8:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 80070da:	2300      	movs	r3, #0
 80070dc:	657b      	str	r3, [r7, #84]	; 0x54

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d003      	beq.n	80070ec <parse_number+0x30>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <parse_number+0x34>
    {
        return false;
 80070ec:	2300      	movs	r3, #0
 80070ee:	e084      	b.n	80071fa <parse_number+0x13e>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80070f0:	2300      	movs	r3, #0
 80070f2:	657b      	str	r3, [r7, #84]	; 0x54
 80070f4:	e02a      	b.n	800714c <parse_number+0x90>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6899      	ldr	r1, [r3, #8]
 80070fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007100:	18cb      	adds	r3, r1, r3
 8007102:	18d3      	adds	r3, r2, r3
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	3b2b      	subs	r3, #43	; 0x2b
 8007108:	2b3a      	cmp	r3, #58	; 0x3a
 800710a:	d82e      	bhi.n	800716a <parse_number+0xae>
 800710c:	009a      	lsls	r2, r3, #2
 800710e:	4b3d      	ldr	r3, [pc, #244]	; (8007204 <parse_number+0x148>)
 8007110:	18d3      	adds	r3, r2, r3
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	469f      	mov	pc, r3
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6899      	ldr	r1, [r3, #8]
 800711e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007120:	18cb      	adds	r3, r1, r3
 8007122:	18d3      	adds	r3, r2, r3
 8007124:	7819      	ldrb	r1, [r3, #0]
 8007126:	2308      	movs	r3, #8
 8007128:	18fa      	adds	r2, r7, r3
 800712a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800712c:	18d3      	adds	r3, r2, r3
 800712e:	1c0a      	adds	r2, r1, #0
 8007130:	701a      	strb	r2, [r3, #0]
                break;
 8007132:	e008      	b.n	8007146 <parse_number+0x8a>

            case '.':
                number_c_string[i] = decimal_point;
 8007134:	2308      	movs	r3, #8
 8007136:	18fa      	adds	r2, r7, r3
 8007138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713a:	18d3      	adds	r3, r2, r3
 800713c:	224f      	movs	r2, #79	; 0x4f
 800713e:	18ba      	adds	r2, r7, r2
 8007140:	7812      	ldrb	r2, [r2, #0]
 8007142:	701a      	strb	r2, [r3, #0]
                break;
 8007144:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8007146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007148:	3301      	adds	r3, #1
 800714a:	657b      	str	r3, [r7, #84]	; 0x54
 800714c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714e:	2b3e      	cmp	r3, #62	; 0x3e
 8007150:	d80d      	bhi.n	800716e <parse_number+0xb2>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00a      	beq.n	800716e <parse_number+0xb2>
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800715e:	18d2      	adds	r2, r2, r3
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d3c6      	bcc.n	80070f6 <parse_number+0x3a>

            default:
                goto loop_end;
        }
    }
loop_end:
 8007168:	e001      	b.n	800716e <parse_number+0xb2>
                goto loop_end;
 800716a:	46c0      	nop			; (mov r8, r8)
 800716c:	e000      	b.n	8007170 <parse_number+0xb4>
loop_end:
 800716e:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 8007170:	2108      	movs	r1, #8
 8007172:	187a      	adds	r2, r7, r1
 8007174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007176:	18d3      	adds	r3, r2, r3
 8007178:	2200      	movs	r2, #0
 800717a:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 800717c:	2348      	movs	r3, #72	; 0x48
 800717e:	18fa      	adds	r2, r7, r3
 8007180:	000c      	movs	r4, r1
 8007182:	187b      	adds	r3, r7, r1
 8007184:	0011      	movs	r1, r2
 8007186:	0018      	movs	r0, r3
 8007188:	f7ff fd38 	bl	8006bfc <JAtoN>
 800718c:	1c03      	adds	r3, r0, #0
 800718e:	653b      	str	r3, [r7, #80]	; 0x50
#endif
    if (number_c_string == after_end)
 8007190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007192:	0021      	movs	r1, r4
 8007194:	187b      	adds	r3, r7, r1
 8007196:	429a      	cmp	r2, r3
 8007198:	d101      	bne.n	800719e <parse_number+0xe2>
    {
        return false; /* parse_error */
 800719a:	2300      	movs	r3, #0
 800719c:	e02d      	b.n	80071fa <parse_number+0x13e>
    }

    item->valuenumber = number;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80071a2:	619a      	str	r2, [r3, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80071a4:	219e      	movs	r1, #158	; 0x9e
 80071a6:	05c9      	lsls	r1, r1, #23
 80071a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80071aa:	f7f9 f963 	bl	8000474 <__aeabi_fcmpge>
 80071ae:	1e03      	subs	r3, r0, #0
 80071b0:	d003      	beq.n	80071ba <parse_number+0xfe>
    {
        item->valueint = INT_MAX;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a14      	ldr	r2, [pc, #80]	; (8007208 <parse_number+0x14c>)
 80071b6:	615a      	str	r2, [r3, #20]
 80071b8:	e011      	b.n	80071de <parse_number+0x122>
    }
    else if (number <= INT_MIN)
 80071ba:	21cf      	movs	r1, #207	; 0xcf
 80071bc:	0609      	lsls	r1, r1, #24
 80071be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80071c0:	f7f9 f944 	bl	800044c <__aeabi_fcmple>
 80071c4:	1e03      	subs	r3, r0, #0
 80071c6:	d004      	beq.n	80071d2 <parse_number+0x116>
    {
        item->valueint = INT_MIN;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2280      	movs	r2, #128	; 0x80
 80071cc:	0612      	lsls	r2, r2, #24
 80071ce:	615a      	str	r2, [r3, #20]
 80071d0:	e005      	b.n	80071de <parse_number+0x122>
    }
    else
    {
        item->valueint = (int)number;
 80071d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80071d4:	f7fa f8ba 	bl	800134c <__aeabi_f2iz>
 80071d8:	0002      	movs	r2, r0
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2208      	movs	r2, #8
 80071e2:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071ea:	0011      	movs	r1, r2
 80071ec:	2208      	movs	r2, #8
 80071ee:	18ba      	adds	r2, r7, r2
 80071f0:	1a8a      	subs	r2, r1, r2
 80071f2:	189a      	adds	r2, r3, r2
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	609a      	str	r2, [r3, #8]
    return true;
 80071f8:	2301      	movs	r3, #1
}
 80071fa:	0018      	movs	r0, r3
 80071fc:	46bd      	mov	sp, r7
 80071fe:	b017      	add	sp, #92	; 0x5c
 8007200:	bd90      	pop	{r4, r7, pc}
 8007202:	46c0      	nop			; (mov r8, r8)
 8007204:	08009e94 	.word	0x08009e94
 8007208:	7fffffff 	.word	0x7fffffff

0800720c <ensure>:
    Jbool format; /* is this print a formatted print */
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8007216:	2300      	movs	r3, #0
 8007218:	60bb      	str	r3, [r7, #8]
    size_t newsize = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]

    if ((p == NULL) || (p->buffer == NULL))
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <ensure+0x20>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <ensure+0x24>
    {
        return NULL;
 800722c:	2300      	movs	r3, #0
 800722e:	e067      	b.n	8007300 <ensure+0xf4>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d007      	beq.n	8007248 <ensure+0x3c>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d301      	bcc.n	8007248 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	e05b      	b.n	8007300 <ensure+0xf4>
    }

    if (needed > INT_MAX)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	da01      	bge.n	8007252 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	e056      	b.n	8007300 <ensure+0xf4>
    }

    needed += p->offset + 1;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	18d3      	adds	r3, r2, r3
 800725a:	3301      	adds	r3, #1
 800725c:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d805      	bhi.n	8007274 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	18d3      	adds	r3, r2, r3
 8007272:	e045      	b.n	8007300 <ensure+0xf4>
    }

    if (p->noalloc) {
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d001      	beq.n	8007280 <ensure+0x74>
        return NULL;
 800727c:	2300      	movs	r3, #0
 800727e:	e03f      	b.n	8007300 <ensure+0xf4>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	4a21      	ldr	r2, [pc, #132]	; (8007308 <ensure+0xfc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d907      	bls.n	8007298 <ensure+0x8c>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	db02      	blt.n	8007294 <ensure+0x88>
        {
            newsize = INT_MAX;
 800728e:	4b1f      	ldr	r3, [pc, #124]	; (800730c <ensure+0x100>)
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e004      	b.n	800729e <ensure+0x92>
        }
        else
        {
            return NULL;
 8007294:	2300      	movs	r3, #0
 8007296:	e033      	b.n	8007300 <ensure+0xf4>
        }
    }
    else
    {
        newsize = needed * 2;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	005b      	lsls	r3, r3, #1
 800729c:	60fb      	str	r3, [r7, #12]
    }

    /* otherwise reallocate manually */
    newbuffer = (unsigned char*)_Malloc(newsize);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	0018      	movs	r0, r3
 80072a2:	f001 ffaf 	bl	8009204 <NoteFnMalloc>
 80072a6:	0003      	movs	r3, r0
 80072a8:	60bb      	str	r3, [r7, #8]
    if (!newbuffer)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10c      	bne.n	80072ca <ensure+0xbe>
    {
        _Free(p->buffer);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	0018      	movs	r0, r3
 80072b6:	f001 ffbb 	bl	8009230 <NoteFnFree>
        p->length = 0;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	605a      	str	r2, [r3, #4]
        p->buffer = NULL;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
        return NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	e01a      	b.n	8007300 <ensure+0xf4>
    }
    if (newbuffer)
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <ensure+0xd6>
    {
        memcpy(newbuffer, p->buffer, p->offset + 1);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6819      	ldr	r1, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	0018      	movs	r0, r3
 80072de:	f002 fb3d 	bl	800995c <memcpy>
    }
    _Free(p->buffer);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	0018      	movs	r0, r3
 80072e8:	f001 ffa2 	bl	8009230 <NoteFnFree>

    p->length = newsize;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	18d3      	adds	r3, r2, r3
}
 8007300:	0018      	movs	r0, r3
 8007302:	46bd      	mov	sp, r7
 8007304:	b004      	add	sp, #16
 8007306:	bd80      	pop	{r7, pc}
 8007308:	3fffffff 	.word	0x3fffffff
 800730c:	7fffffff 	.word	0x7fffffff

08007310 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8007310:	b590      	push	{r4, r7, lr}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d014      	beq.n	800734c <update_offset+0x3c>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d010      	beq.n	800734c <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	18d3      	adds	r3, r2, r3
 8007334:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689c      	ldr	r4, [r3, #8]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	0018      	movs	r0, r3
 800733e:	f7f8 feeb 	bl	8000118 <strlen>
 8007342:	0003      	movs	r3, r0
 8007344:	18e2      	adds	r2, r4, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	609a      	str	r2, [r3, #8]
 800734a:	e000      	b.n	800734e <update_offset+0x3e>
        return;
 800734c:	46c0      	nop			; (mov r8, r8)
}
 800734e:	46bd      	mov	sp, r7
 8007350:	b005      	add	sp, #20
 8007352:	bd90      	pop	{r4, r7, pc}

08007354 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b091      	sub	sp, #68	; 0x44
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800735e:	2300      	movs	r3, #0
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
    JNUMBER d = item->valuenumber;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	633b      	str	r3, [r7, #48]	; 0x30
    int length = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	63fb      	str	r3, [r7, #60]	; 0x3c
    size_t i = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	63bb      	str	r3, [r7, #56]	; 0x38
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8007370:	232f      	movs	r3, #47	; 0x2f
 8007372:	18fc      	adds	r4, r7, r3
 8007374:	f7ff fe9c 	bl	80070b0 <get_decimal_point>
 8007378:	0003      	movs	r3, r0
 800737a:	7023      	strb	r3, [r4, #0]

    if (output_buffer == NULL)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d101      	bne.n	8007386 <print_number+0x32>
    {
        return false;
 8007382:	2300      	movs	r3, #0
 8007384:	e071      	b.n	800746a <print_number+0x116>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8007386:	2100      	movs	r1, #0
 8007388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738a:	f7f9 fce9 	bl	8000d60 <__aeabi_fmul>
 800738e:	1c03      	adds	r3, r0, #0
 8007390:	2100      	movs	r1, #0
 8007392:	1c18      	adds	r0, r3, #0
 8007394:	f7f9 f84a 	bl	800042c <__aeabi_fcmpeq>
 8007398:	1e03      	subs	r3, r0, #0
 800739a:	d111      	bne.n	80073c0 <print_number+0x6c>
    {
        char *nbuf = (char *) number_buffer;
 800739c:	2308      	movs	r3, #8
 800739e:	18fb      	adds	r3, r7, r3
 80073a0:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 80073a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a4:	4b33      	ldr	r3, [pc, #204]	; (8007474 <print_number+0x120>)
 80073a6:	0010      	movs	r0, r2
 80073a8:	0019      	movs	r1, r3
 80073aa:	2305      	movs	r3, #5
 80073ac:	001a      	movs	r2, r3
 80073ae:	f002 fad5 	bl	800995c <memcpy>
        length = strlen(nbuf);
 80073b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b4:	0018      	movs	r0, r3
 80073b6:	f7f8 feaf 	bl	8000118 <strlen>
 80073ba:	0003      	movs	r3, r0
 80073bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073be:	e00f      	b.n	80073e0 <print_number+0x8c>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 80073c0:	2308      	movs	r3, #8
 80073c2:	18fb      	adds	r3, r7, r3
 80073c4:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 80073c6:	2301      	movs	r3, #1
 80073c8:	425a      	negs	r2, r3
 80073ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ce:	1c18      	adds	r0, r3, #0
 80073d0:	f001 fd44 	bl	8008e5c <JNtoA>
        length = strlen(nbuf);
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	0018      	movs	r0, r3
 80073d8:	f7f8 fe9e 	bl	8000118 <strlen>
 80073dc:	0003      	movs	r3, r0
 80073de:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80073e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	db02      	blt.n	80073ec <print_number+0x98>
 80073e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e8:	2b19      	cmp	r3, #25
 80073ea:	dd01      	ble.n	80073f0 <print_number+0x9c>
    {
        return false;
 80073ec:	2300      	movs	r3, #0
 80073ee:	e03c      	b.n	800746a <print_number+0x116>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80073f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	0011      	movs	r1, r2
 80073f8:	0018      	movs	r0, r3
 80073fa:	f7ff ff07 	bl	800720c <ensure>
 80073fe:	0003      	movs	r3, r0
 8007400:	637b      	str	r3, [r7, #52]	; 0x34
    if (output_pointer == NULL)
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <print_number+0xb8>
    {
        return false;
 8007408:	2300      	movs	r3, #0
 800740a:	e02e      	b.n	800746a <print_number+0x116>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 800740c:	2300      	movs	r3, #0
 800740e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007410:	e01b      	b.n	800744a <print_number+0xf6>
    {
        if (number_buffer[i] == decimal_point)
 8007412:	2308      	movs	r3, #8
 8007414:	18fa      	adds	r2, r7, r3
 8007416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007418:	18d3      	adds	r3, r2, r3
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	222f      	movs	r2, #47	; 0x2f
 800741e:	18ba      	adds	r2, r7, r2
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	429a      	cmp	r2, r3
 8007424:	d105      	bne.n	8007432 <print_number+0xde>
        {
            output_pointer[i] = '.';
 8007426:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742a:	18d3      	adds	r3, r2, r3
 800742c:	222e      	movs	r2, #46	; 0x2e
 800742e:	701a      	strb	r2, [r3, #0]
            continue;
 8007430:	e008      	b.n	8007444 <print_number+0xf0>
        }

        output_pointer[i] = number_buffer[i];
 8007432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007436:	18d3      	adds	r3, r2, r3
 8007438:	2208      	movs	r2, #8
 800743a:	18b9      	adds	r1, r7, r2
 800743c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800743e:	188a      	adds	r2, r1, r2
 8007440:	7812      	ldrb	r2, [r2, #0]
 8007442:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8007444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007446:	3301      	adds	r3, #1
 8007448:	63bb      	str	r3, [r7, #56]	; 0x38
 800744a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800744e:	429a      	cmp	r2, r3
 8007450:	d3df      	bcc.n	8007412 <print_number+0xbe>
    }
    output_pointer[i] = '\0';
 8007452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007456:	18d3      	adds	r3, r2, r3
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	689a      	ldr	r2, [r3, #8]
 8007460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007462:	18d2      	adds	r2, r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	609a      	str	r2, [r3, #8]

    return true;
 8007468:	2301      	movs	r3, #1
}
 800746a:	0018      	movs	r0, r3
 800746c:	46bd      	mov	sp, r7
 800746e:	b011      	add	sp, #68	; 0x44
 8007470:	bd90      	pop	{r4, r7, pc}
 8007472:	46c0      	nop			; (mov r8, r8)
 8007474:	08009c44 	.word	0x08009c44

08007478 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8007480:	2300      	movs	r3, #0
 8007482:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
 800748c:	e04c      	b.n	8007528 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	18d3      	adds	r3, r2, r3
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b2f      	cmp	r3, #47	; 0x2f
 8007498:	d90f      	bls.n	80074ba <parse_hex4+0x42>
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	18d3      	adds	r3, r2, r3
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b39      	cmp	r3, #57	; 0x39
 80074a4:	d809      	bhi.n	80074ba <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	18d3      	adds	r3, r2, r3
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	001a      	movs	r2, r3
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	18d3      	adds	r3, r2, r3
 80074b4:	3b30      	subs	r3, #48	; 0x30
 80074b6:	60fb      	str	r3, [r7, #12]
 80074b8:	e02d      	b.n	8007516 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	18d3      	adds	r3, r2, r3
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	2b40      	cmp	r3, #64	; 0x40
 80074c4:	d90f      	bls.n	80074e6 <parse_hex4+0x6e>
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	18d3      	adds	r3, r2, r3
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b46      	cmp	r3, #70	; 0x46
 80074d0:	d809      	bhi.n	80074e6 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	18d3      	adds	r3, r2, r3
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	001a      	movs	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	18d3      	adds	r3, r2, r3
 80074e0:	3b37      	subs	r3, #55	; 0x37
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e017      	b.n	8007516 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	18d3      	adds	r3, r2, r3
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b60      	cmp	r3, #96	; 0x60
 80074f0:	d90f      	bls.n	8007512 <parse_hex4+0x9a>
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	18d3      	adds	r3, r2, r3
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2b66      	cmp	r3, #102	; 0x66
 80074fc:	d809      	bhi.n	8007512 <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	18d3      	adds	r3, r2, r3
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	001a      	movs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	3b57      	subs	r3, #87	; 0x57
 800750e:	60fb      	str	r3, [r7, #12]
 8007510:	e001      	b.n	8007516 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8007512:	2300      	movs	r3, #0
 8007514:	e00c      	b.n	8007530 <parse_hex4+0xb8>
        }

        if (i < 3)
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b02      	cmp	r3, #2
 800751a:	d802      	bhi.n	8007522 <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	3301      	adds	r3, #1
 8007526:	60bb      	str	r3, [r7, #8]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b03      	cmp	r3, #3
 800752c:	d9af      	bls.n	800748e <parse_hex4+0x16>
        }
    }

    return h;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	0018      	movs	r0, r3
 8007532:	46bd      	mov	sp, r7
 8007534:	b004      	add	sp, #16
 8007536:	bd80      	pop	{r7, pc}

08007538 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8007544:	2300      	movs	r3, #0
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8007550:	2323      	movs	r3, #35	; 0x23
 8007552:	18fb      	adds	r3, r7, r3
 8007554:	2200      	movs	r2, #0
 8007556:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 8007558:	2322      	movs	r3, #34	; 0x22
 800755a:	18fb      	adds	r3, r7, r3
 800755c:	2200      	movs	r2, #0
 800755e:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 8007560:	2321      	movs	r3, #33	; 0x21
 8007562:	18fb      	adds	r3, r7, r3
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 8007568:	2320      	movs	r3, #32
 800756a:	18fb      	adds	r3, r7, r3
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	69bb      	ldr	r3, [r7, #24]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b05      	cmp	r3, #5
 8007578:	dc00      	bgt.n	800757c <utf16_literal_to_utf8+0x44>
 800757a:	e0cd      	b.n	8007718 <utf16_literal_to_utf8+0x1e0>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	3302      	adds	r3, #2
 8007580:	0018      	movs	r0, r3
 8007582:	f7ff ff79 	bl	8007478 <parse_hex4>
 8007586:	0003      	movs	r3, r0
 8007588:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4a69      	ldr	r2, [pc, #420]	; (8007734 <utf16_literal_to_utf8+0x1fc>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d904      	bls.n	800759c <utf16_literal_to_utf8+0x64>
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4a68      	ldr	r2, [pc, #416]	; (8007738 <utf16_literal_to_utf8+0x200>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d800      	bhi.n	800759c <utf16_literal_to_utf8+0x64>
 800759a:	e0bf      	b.n	800771c <utf16_literal_to_utf8+0x1e4>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	4a67      	ldr	r2, [pc, #412]	; (800773c <utf16_literal_to_utf8+0x204>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d93c      	bls.n	800761e <utf16_literal_to_utf8+0xe6>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	4a63      	ldr	r2, [pc, #396]	; (8007734 <utf16_literal_to_utf8+0x1fc>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d838      	bhi.n	800761e <utf16_literal_to_utf8+0xe6>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	3306      	adds	r3, #6
 80075b0:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 80075b2:	2300      	movs	r3, #0
 80075b4:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 80075b6:	2321      	movs	r3, #33	; 0x21
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	220c      	movs	r2, #12
 80075bc:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 80075be:	68ba      	ldr	r2, [r7, #8]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	2b05      	cmp	r3, #5
 80075c6:	dc00      	bgt.n	80075ca <utf16_literal_to_utf8+0x92>
 80075c8:	e0aa      	b.n	8007720 <utf16_literal_to_utf8+0x1e8>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b5c      	cmp	r3, #92	; 0x5c
 80075d0:	d000      	beq.n	80075d4 <utf16_literal_to_utf8+0x9c>
 80075d2:	e0a7      	b.n	8007724 <utf16_literal_to_utf8+0x1ec>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	3301      	adds	r3, #1
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b75      	cmp	r3, #117	; 0x75
 80075dc:	d000      	beq.n	80075e0 <utf16_literal_to_utf8+0xa8>
 80075de:	e0a1      	b.n	8007724 <utf16_literal_to_utf8+0x1ec>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	3302      	adds	r3, #2
 80075e4:	0018      	movs	r0, r3
 80075e6:	f7ff ff47 	bl	8007478 <parse_hex4>
 80075ea:	0003      	movs	r3, r0
 80075ec:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	4a50      	ldr	r2, [pc, #320]	; (8007734 <utf16_literal_to_utf8+0x1fc>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d800      	bhi.n	80075f8 <utf16_literal_to_utf8+0xc0>
 80075f6:	e095      	b.n	8007724 <utf16_literal_to_utf8+0x1ec>
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	4a4f      	ldr	r2, [pc, #316]	; (8007738 <utf16_literal_to_utf8+0x200>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d900      	bls.n	8007602 <utf16_literal_to_utf8+0xca>
 8007600:	e090      	b.n	8007724 <utf16_literal_to_utf8+0x1ec>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	029b      	lsls	r3, r3, #10
 8007606:	4a4e      	ldr	r2, [pc, #312]	; (8007740 <utf16_literal_to_utf8+0x208>)
 8007608:	401a      	ands	r2, r3
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	059b      	lsls	r3, r3, #22
 800760e:	0d9b      	lsrs	r3, r3, #22
 8007610:	4313      	orrs	r3, r2
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	0252      	lsls	r2, r2, #9
 8007616:	4694      	mov	ip, r2
 8007618:	4463      	add	r3, ip
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
    {
 800761c:	e005      	b.n	800762a <utf16_literal_to_utf8+0xf2>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 800761e:	2321      	movs	r3, #33	; 0x21
 8007620:	18fb      	adds	r3, r7, r3
 8007622:	2206      	movs	r2, #6
 8007624:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	2b7f      	cmp	r3, #127	; 0x7f
 800762e:	d804      	bhi.n	800763a <utf16_literal_to_utf8+0x102>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8007630:	2323      	movs	r3, #35	; 0x23
 8007632:	18fb      	adds	r3, r7, r3
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e025      	b.n	8007686 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x800)
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	4a41      	ldr	r2, [pc, #260]	; (8007744 <utf16_literal_to_utf8+0x20c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d808      	bhi.n	8007654 <utf16_literal_to_utf8+0x11c>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8007642:	2323      	movs	r3, #35	; 0x23
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	2202      	movs	r2, #2
 8007648:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 800764a:	2320      	movs	r3, #32
 800764c:	18fb      	adds	r3, r7, r3
 800764e:	22c0      	movs	r2, #192	; 0xc0
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	e018      	b.n	8007686 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x10000)
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	4a3c      	ldr	r2, [pc, #240]	; (8007748 <utf16_literal_to_utf8+0x210>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d808      	bhi.n	800766e <utf16_literal_to_utf8+0x136>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 800765c:	2323      	movs	r3, #35	; 0x23
 800765e:	18fb      	adds	r3, r7, r3
 8007660:	2203      	movs	r2, #3
 8007662:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8007664:	2320      	movs	r3, #32
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	22e0      	movs	r2, #224	; 0xe0
 800766a:	701a      	strb	r2, [r3, #0]
 800766c:	e00b      	b.n	8007686 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint <= 0x10FFFF)
 800766e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007670:	4a36      	ldr	r2, [pc, #216]	; (800774c <utf16_literal_to_utf8+0x214>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d858      	bhi.n	8007728 <utf16_literal_to_utf8+0x1f0>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8007676:	2323      	movs	r3, #35	; 0x23
 8007678:	18fb      	adds	r3, r7, r3
 800767a:	2204      	movs	r2, #4
 800767c:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 800767e:	2320      	movs	r3, #32
 8007680:	18fb      	adds	r3, r7, r3
 8007682:	22f0      	movs	r2, #240	; 0xf0
 8007684:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8007686:	2322      	movs	r3, #34	; 0x22
 8007688:	18fb      	adds	r3, r7, r3
 800768a:	2223      	movs	r2, #35	; 0x23
 800768c:	18ba      	adds	r2, r7, r2
 800768e:	7812      	ldrb	r2, [r2, #0]
 8007690:	3a01      	subs	r2, #1
 8007692:	701a      	strb	r2, [r3, #0]
 8007694:	e017      	b.n	80076c6 <utf16_literal_to_utf8+0x18e>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8007696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007698:	b2db      	uxtb	r3, r3
 800769a:	223f      	movs	r2, #63	; 0x3f
 800769c:	4013      	ands	r3, r2
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6819      	ldr	r1, [r3, #0]
 80076a4:	2022      	movs	r0, #34	; 0x22
 80076a6:	183b      	adds	r3, r7, r0
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	18cb      	adds	r3, r1, r3
 80076ac:	2180      	movs	r1, #128	; 0x80
 80076ae:	4249      	negs	r1, r1
 80076b0:	430a      	orrs	r2, r1
 80076b2:	b2d2      	uxtb	r2, r2
 80076b4:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	099b      	lsrs	r3, r3, #6
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80076bc:	183b      	adds	r3, r7, r0
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	183b      	adds	r3, r7, r0
 80076c2:	3a01      	subs	r2, #1
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	2322      	movs	r3, #34	; 0x22
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e2      	bne.n	8007696 <utf16_literal_to_utf8+0x15e>
    }
    /* encode first byte */
    if (utf8_length > 1)
 80076d0:	2323      	movs	r3, #35	; 0x23
 80076d2:	18fb      	adds	r3, r7, r3
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d90a      	bls.n	80076f0 <utf16_literal_to_utf8+0x1b8>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	b2d9      	uxtb	r1, r3
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2220      	movs	r2, #32
 80076e4:	18ba      	adds	r2, r7, r2
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	430a      	orrs	r2, r1
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	701a      	strb	r2, [r3, #0]
 80076ee:	e007      	b.n	8007700 <utf16_literal_to_utf8+0x1c8>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	b2da      	uxtb	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	217f      	movs	r1, #127	; 0x7f
 80076fa:	400a      	ands	r2, r1
 80076fc:	b2d2      	uxtb	r2, r2
 80076fe:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	2323      	movs	r3, #35	; 0x23
 8007706:	18fb      	adds	r3, r7, r3
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	18d2      	adds	r2, r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8007710:	2321      	movs	r3, #33	; 0x21
 8007712:	18fb      	adds	r3, r7, r3
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	e009      	b.n	800772c <utf16_literal_to_utf8+0x1f4>
        goto fail;
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	e006      	b.n	800772a <utf16_literal_to_utf8+0x1f2>
        goto fail;
 800771c:	46c0      	nop			; (mov r8, r8)
 800771e:	e004      	b.n	800772a <utf16_literal_to_utf8+0x1f2>
            goto fail;
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	e002      	b.n	800772a <utf16_literal_to_utf8+0x1f2>

fail:
 8007724:	46c0      	nop			; (mov r8, r8)
 8007726:	e000      	b.n	800772a <utf16_literal_to_utf8+0x1f2>
        goto fail;
 8007728:	46c0      	nop			; (mov r8, r8)
    return 0;
 800772a:	2300      	movs	r3, #0
}
 800772c:	0018      	movs	r0, r3
 800772e:	46bd      	mov	sp, r7
 8007730:	b00a      	add	sp, #40	; 0x28
 8007732:	bd80      	pop	{r7, pc}
 8007734:	0000dbff 	.word	0x0000dbff
 8007738:	0000dfff 	.word	0x0000dfff
 800773c:	0000d7ff 	.word	0x0000d7ff
 8007740:	000ffc00 	.word	0x000ffc00
 8007744:	000007ff 	.word	0x000007ff
 8007748:	0000ffff 	.word	0x0000ffff
 800774c:	0010ffff 	.word	0x0010ffff

08007750 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b08a      	sub	sp, #40	; 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	3301      	adds	r3, #1
 8007764:	18d3      	adds	r3, r2, r3
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	3301      	adds	r3, #1
 8007772:	18d3      	adds	r3, r2, r3
 8007774:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	18d3      	adds	r3, r2, r3
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b22      	cmp	r3, #34	; 0x22
 800778c:	d000      	beq.n	8007790 <parse_string+0x40>
 800778e:	e0c9      	b.n	8007924 <parse_string+0x1d4>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8007790:	2300      	movs	r3, #0
 8007792:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8007794:	2300      	movs	r3, #0
 8007796:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8007798:	e018      	b.n	80077cc <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b5c      	cmp	r3, #92	; 0x5c
 80077a0:	d111      	bne.n	80077c6 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	3301      	adds	r3, #1
 80077a6:	001a      	movs	r2, r3
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	001a      	movs	r2, r3
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d300      	bcc.n	80077ba <parse_string+0x6a>
 80077b8:	e0b6      	b.n	8007928 <parse_string+0x1d8>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	3301      	adds	r3, #1
 80077be:	61bb      	str	r3, [r7, #24]
                input_end++;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	3301      	adds	r3, #1
 80077c4:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	3301      	adds	r3, #1
 80077ca:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80077cc:	6a3a      	ldr	r2, [r7, #32]
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	001a      	movs	r2, r3
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d203      	bcs.n	80077e6 <parse_string+0x96>
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	2b22      	cmp	r3, #34	; 0x22
 80077e4:	d1d9      	bne.n	800779a <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 80077e6:	6a3a      	ldr	r2, [r7, #32]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	001a      	movs	r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d300      	bcc.n	80077fa <parse_string+0xaa>
 80077f8:	e098      	b.n	800792c <parse_string+0x1dc>
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b22      	cmp	r3, #34	; 0x22
 8007800:	d000      	beq.n	8007804 <parse_string+0xb4>
 8007802:	e093      	b.n	800792c <parse_string+0x1dc>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8007804:	6a3a      	ldr	r2, [r7, #32]
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	18cb      	adds	r3, r1, r3
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	001a      	movs	r2, r3
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)_Malloc(allocation_length + sizeof(""));
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	0018      	movs	r0, r3
 8007820:	f001 fcf0 	bl	8009204 <NoteFnMalloc>
 8007824:	0003      	movs	r3, r0
 8007826:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d100      	bne.n	8007830 <parse_string+0xe0>
 800782e:	e07f      	b.n	8007930 <parse_string+0x1e0>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8007834:	e05b      	b.n	80078ee <parse_string+0x19e>
    {
        if (*input_pointer != '\\')
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b5c      	cmp	r3, #92	; 0x5c
 800783c:	d008      	beq.n	8007850 <parse_string+0x100>
        {
            *output_pointer++ = *input_pointer++;
 800783e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007840:	1c53      	adds	r3, r2, #1
 8007842:	627b      	str	r3, [r7, #36]	; 0x24
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	1c59      	adds	r1, r3, #1
 8007848:	60f9      	str	r1, [r7, #12]
 800784a:	7812      	ldrb	r2, [r2, #0]
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e04e      	b.n	80078ee <parse_string+0x19e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8007850:	2317      	movs	r3, #23
 8007852:	18fb      	adds	r3, r7, r3
 8007854:	2202      	movs	r2, #2
 8007856:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 8007858:	6a3a      	ldr	r2, [r7, #32]
 800785a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd68      	ble.n	8007934 <parse_string+0x1e4>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8007862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007864:	3301      	adds	r3, #1
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	3b22      	subs	r3, #34	; 0x22
 800786a:	2b53      	cmp	r3, #83	; 0x53
 800786c:	d864      	bhi.n	8007938 <parse_string+0x1e8>
 800786e:	009a      	lsls	r2, r3, #2
 8007870:	4b3e      	ldr	r3, [pc, #248]	; (800796c <parse_string+0x21c>)
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	469f      	mov	pc, r3
            {
                case 'b':
                    *output_pointer++ = '\b';
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	60fa      	str	r2, [r7, #12]
 800787e:	2208      	movs	r2, #8
 8007880:	701a      	strb	r2, [r3, #0]
                    break;
 8007882:	e02e      	b.n	80078e2 <parse_string+0x192>
                case 'f':
                    *output_pointer++ = '\f';
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	60fa      	str	r2, [r7, #12]
 800788a:	220c      	movs	r2, #12
 800788c:	701a      	strb	r2, [r3, #0]
                    break;
 800788e:	e028      	b.n	80078e2 <parse_string+0x192>
                case 'n':
                    *output_pointer++ = '\n';
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	1c5a      	adds	r2, r3, #1
 8007894:	60fa      	str	r2, [r7, #12]
 8007896:	220a      	movs	r2, #10
 8007898:	701a      	strb	r2, [r3, #0]
                    break;
 800789a:	e022      	b.n	80078e2 <parse_string+0x192>
                case 'r':
                    *output_pointer++ = '\r';
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	60fa      	str	r2, [r7, #12]
 80078a2:	220d      	movs	r2, #13
 80078a4:	701a      	strb	r2, [r3, #0]
                    break;
 80078a6:	e01c      	b.n	80078e2 <parse_string+0x192>
                case 't':
                    *output_pointer++ = '\t';
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	1c5a      	adds	r2, r3, #1
 80078ac:	60fa      	str	r2, [r7, #12]
 80078ae:	2209      	movs	r2, #9
 80078b0:	701a      	strb	r2, [r3, #0]
                    break;
 80078b2:	e016      	b.n	80078e2 <parse_string+0x192>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	60fa      	str	r2, [r7, #12]
 80078ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078bc:	7852      	ldrb	r2, [r2, #1]
 80078be:	701a      	strb	r2, [r3, #0]
                    break;
 80078c0:	e00f      	b.n	80078e2 <parse_string+0x192>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80078c2:	2517      	movs	r5, #23
 80078c4:	197c      	adds	r4, r7, r5
 80078c6:	230c      	movs	r3, #12
 80078c8:	18fa      	adds	r2, r7, r3
 80078ca:	6a39      	ldr	r1, [r7, #32]
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	0018      	movs	r0, r3
 80078d0:	f7ff fe32 	bl	8007538 <utf16_literal_to_utf8>
 80078d4:	0003      	movs	r3, r0
 80078d6:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 80078d8:	197b      	adds	r3, r7, r5
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d02d      	beq.n	800793c <parse_string+0x1ec>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 80078e0:	46c0      	nop			; (mov r8, r8)

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 80078e2:	2317      	movs	r3, #23
 80078e4:	18fb      	adds	r3, r7, r3
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ea:	18d3      	adds	r3, r2, r3
 80078ec:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80078ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d39f      	bcc.n	8007836 <parse_string+0xe6>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2210      	movs	r2, #16
 8007900:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	69fa      	ldr	r2, [r7, #28]
 8007906:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8007908:	6a3a      	ldr	r2, [r7, #32]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	1ad3      	subs	r3, r2, r3
 8007910:	001a      	movs	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	609a      	str	r2, [r3, #8]

    return true;
 8007920:	2301      	movs	r3, #1
 8007922:	e01e      	b.n	8007962 <parse_string+0x212>
        goto fail;
 8007924:	46c0      	nop			; (mov r8, r8)
 8007926:	e00a      	b.n	800793e <parse_string+0x1ee>
                    goto fail;
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	e008      	b.n	800793e <parse_string+0x1ee>

fail:
 800792c:	46c0      	nop			; (mov r8, r8)
 800792e:	e006      	b.n	800793e <parse_string+0x1ee>
            goto fail; /* allocation failure */
 8007930:	46c0      	nop			; (mov r8, r8)
 8007932:	e004      	b.n	800793e <parse_string+0x1ee>
                goto fail;
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	e002      	b.n	800793e <parse_string+0x1ee>
                    goto fail;
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	e000      	b.n	800793e <parse_string+0x1ee>
                        goto fail;
 800793c:	46c0      	nop			; (mov r8, r8)
    if (output != NULL)
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d003      	beq.n	800794c <parse_string+0x1fc>
    {
        _Free(output);
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	0018      	movs	r0, r3
 8007948:	f001 fc72 	bl	8009230 <NoteFnFree>
    }

    if (input_pointer != NULL)
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	2b00      	cmp	r3, #0
 8007950:	d006      	beq.n	8007960 <parse_string+0x210>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	1ad3      	subs	r3, r2, r3
 800795a:	001a      	movs	r2, r3
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8007960:	2300      	movs	r3, #0
}
 8007962:	0018      	movs	r0, r3
 8007964:	46bd      	mov	sp, r7
 8007966:	b00a      	add	sp, #40	; 0x28
 8007968:	bdb0      	pop	{r4, r5, r7, pc}
 800796a:	46c0      	nop			; (mov r8, r8)
 800796c:	08009f80 	.word	0x08009f80

08007970 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	0002      	movs	r2, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	1dbb      	adds	r3, r7, #6
 800797c:	801a      	strh	r2, [r3, #0]
    int i;
    for (i=0; i<4; i++)
 800797e:	2300      	movs	r3, #0
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	e026      	b.n	80079d2 <htoa16+0x62>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 8007984:	210a      	movs	r1, #10
 8007986:	187b      	adds	r3, r7, r1
 8007988:	1dba      	adds	r2, r7, #6
 800798a:	8812      	ldrh	r2, [r2, #0]
 800798c:	0b12      	lsrs	r2, r2, #12
 800798e:	801a      	strh	r2, [r3, #0]
        n = n << 4;
 8007990:	1dbb      	adds	r3, r7, #6
 8007992:	1dba      	adds	r2, r7, #6
 8007994:	8812      	ldrh	r2, [r2, #0]
 8007996:	0112      	lsls	r2, r2, #4
 8007998:	801a      	strh	r2, [r3, #0]
        if (nibble >= 10)
 800799a:	187b      	adds	r3, r7, r1
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d90a      	bls.n	80079b8 <htoa16+0x48>
            *p++ = 'A' + (nibble-10);
 80079a2:	230a      	movs	r3, #10
 80079a4:	18fb      	adds	r3, r7, r3
 80079a6:	881b      	ldrh	r3, [r3, #0]
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	1c59      	adds	r1, r3, #1
 80079ae:	6039      	str	r1, [r7, #0]
 80079b0:	3237      	adds	r2, #55	; 0x37
 80079b2:	b2d2      	uxtb	r2, r2
 80079b4:	701a      	strb	r2, [r3, #0]
 80079b6:	e009      	b.n	80079cc <htoa16+0x5c>
        else
            *p++ = '0' + nibble;
 80079b8:	230a      	movs	r3, #10
 80079ba:	18fb      	adds	r3, r7, r3
 80079bc:	881b      	ldrh	r3, [r3, #0]
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	1c59      	adds	r1, r3, #1
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	3230      	adds	r2, #48	; 0x30
 80079c8:	b2d2      	uxtb	r2, r2
 80079ca:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	ddd5      	ble.n	8007984 <htoa16+0x14>
    }
    *p = '\0';
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2200      	movs	r2, #0
 80079dc:	701a      	strb	r2, [r3, #0]
}
 80079de:	46c0      	nop			; (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b004      	add	sp, #16
 80079e4:	bd80      	pop	{r7, pc}
	...

080079e8 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 80079f6:	2300      	movs	r3, #0
 80079f8:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8007a02:	2300      	movs	r3, #0
 8007a04:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <print_string_ptr+0x28>
    {
        return false;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e0e2      	b.n	8007bd6 <print_string_ptr+0x1ee>
    }

    /* empty string */
    if (input == NULL)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d115      	bne.n	8007a42 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	2103      	movs	r1, #3
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f7ff fbf6 	bl	800720c <ensure>
 8007a20:	0003      	movs	r3, r0
 8007a22:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <print_string_ptr+0x46>
        {
            return false;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e0d3      	b.n	8007bd6 <print_string_ptr+0x1ee>
        }
        strcpy((char*)output, "\"\"");
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	4b6b      	ldr	r3, [pc, #428]	; (8007be0 <print_string_ptr+0x1f8>)
 8007a32:	0010      	movs	r0, r2
 8007a34:	0019      	movs	r1, r3
 8007a36:	2303      	movs	r3, #3
 8007a38:	001a      	movs	r2, r3
 8007a3a:	f001 ff8f 	bl	800995c <memcpy>

        return true;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e0c9      	b.n	8007bd6 <print_string_ptr+0x1ee>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	61fb      	str	r3, [r7, #28]
 8007a46:	e01c      	b.n	8007a82 <print_string_ptr+0x9a>
    {
        switch (*input_pointer)
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	2b0d      	cmp	r3, #13
 8007a4e:	dc05      	bgt.n	8007a5c <print_string_ptr+0x74>
 8007a50:	2b0c      	cmp	r3, #12
 8007a52:	da07      	bge.n	8007a64 <print_string_ptr+0x7c>
 8007a54:	3b08      	subs	r3, #8
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	d808      	bhi.n	8007a6c <print_string_ptr+0x84>
 8007a5a:	e003      	b.n	8007a64 <print_string_ptr+0x7c>
 8007a5c:	2b22      	cmp	r3, #34	; 0x22
 8007a5e:	d001      	beq.n	8007a64 <print_string_ptr+0x7c>
 8007a60:	2b5c      	cmp	r3, #92	; 0x5c
 8007a62:	d103      	bne.n	8007a6c <print_string_ptr+0x84>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	3301      	adds	r3, #1
 8007a68:	617b      	str	r3, [r7, #20]
                break;
 8007a6a:	e007      	b.n	8007a7c <print_string_ptr+0x94>
            default:
                if (*input_pointer < 32)
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	781b      	ldrb	r3, [r3, #0]
 8007a70:	2b1f      	cmp	r3, #31
 8007a72:	d802      	bhi.n	8007a7a <print_string_ptr+0x92>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	3305      	adds	r3, #5
 8007a78:	617b      	str	r3, [r7, #20]
                }
                break;
 8007a7a:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1de      	bne.n	8007a48 <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8007a8a:	69fa      	ldr	r2, [r7, #28]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	001a      	movs	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	189b      	adds	r3, r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	1cda      	adds	r2, r3, #3
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	0011      	movs	r1, r2
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f7ff fbb3 	bl	800720c <ensure>
 8007aa6:	0003      	movs	r3, r0
 8007aa8:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <print_string_ptr+0xcc>
    {
        return false;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	e090      	b.n	8007bd6 <print_string_ptr+0x1ee>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d117      	bne.n	8007aea <print_string_ptr+0x102>
    {
        output[0] = '\"';
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	2222      	movs	r2, #34	; 0x22
 8007abe:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	68fa      	ldr	r2, [r7, #12]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	0018      	movs	r0, r3
 8007aca:	f001 ff47 	bl	800995c <memcpy>
        output[output_length + 1] = '\"';
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	18d3      	adds	r3, r2, r3
 8007ad6:	2222      	movs	r2, #34	; 0x22
 8007ad8:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3302      	adds	r3, #2
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	18d3      	adds	r3, r2, r3
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]

        return true;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	e075      	b.n	8007bd6 <print_string_ptr+0x1ee>
    }

    output[0] = '\"';
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2222      	movs	r2, #34	; 0x22
 8007aee:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	3301      	adds	r3, #1
 8007af4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	61fb      	str	r3, [r7, #28]
 8007afa:	e05b      	b.n	8007bb4 <print_string_ptr+0x1cc>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b1f      	cmp	r3, #31
 8007b02:	d90c      	bls.n	8007b1e <print_string_ptr+0x136>
 8007b04:	69fb      	ldr	r3, [r7, #28]
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	2b22      	cmp	r3, #34	; 0x22
 8007b0a:	d008      	beq.n	8007b1e <print_string_ptr+0x136>
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b5c      	cmp	r3, #92	; 0x5c
 8007b12:	d004      	beq.n	8007b1e <print_string_ptr+0x136>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	69bb      	ldr	r3, [r7, #24]
 8007b1a:	701a      	strb	r2, [r3, #0]
 8007b1c:	e044      	b.n	8007ba8 <print_string_ptr+0x1c0>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	1c5a      	adds	r2, r3, #1
 8007b22:	61ba      	str	r2, [r7, #24]
 8007b24:	225c      	movs	r2, #92	; 0x5c
 8007b26:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8007b28:	69fb      	ldr	r3, [r7, #28]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	2b0c      	cmp	r3, #12
 8007b2e:	d01a      	beq.n	8007b66 <print_string_ptr+0x17e>
 8007b30:	dc06      	bgt.n	8007b40 <print_string_ptr+0x158>
 8007b32:	2b09      	cmp	r3, #9
 8007b34:	d023      	beq.n	8007b7e <print_string_ptr+0x196>
 8007b36:	2b0a      	cmp	r3, #10
 8007b38:	d019      	beq.n	8007b6e <print_string_ptr+0x186>
 8007b3a:	2b08      	cmp	r3, #8
 8007b3c:	d00f      	beq.n	8007b5e <print_string_ptr+0x176>
 8007b3e:	e022      	b.n	8007b86 <print_string_ptr+0x19e>
 8007b40:	2b22      	cmp	r3, #34	; 0x22
 8007b42:	d008      	beq.n	8007b56 <print_string_ptr+0x16e>
 8007b44:	2b5c      	cmp	r3, #92	; 0x5c
 8007b46:	d002      	beq.n	8007b4e <print_string_ptr+0x166>
 8007b48:	2b0d      	cmp	r3, #13
 8007b4a:	d014      	beq.n	8007b76 <print_string_ptr+0x18e>
 8007b4c:	e01b      	b.n	8007b86 <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	225c      	movs	r2, #92	; 0x5c
 8007b52:	701a      	strb	r2, [r3, #0]
                    break;
 8007b54:	e028      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\"':
                    *output_pointer = '\"';
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2222      	movs	r2, #34	; 0x22
 8007b5a:	701a      	strb	r2, [r3, #0]
                    break;
 8007b5c:	e024      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\b':
                    *output_pointer = 'b';
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2262      	movs	r2, #98	; 0x62
 8007b62:	701a      	strb	r2, [r3, #0]
                    break;
 8007b64:	e020      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\f':
                    *output_pointer = 'f';
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2266      	movs	r2, #102	; 0x66
 8007b6a:	701a      	strb	r2, [r3, #0]
                    break;
 8007b6c:	e01c      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\n':
                    *output_pointer = 'n';
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	226e      	movs	r2, #110	; 0x6e
 8007b72:	701a      	strb	r2, [r3, #0]
                    break;
 8007b74:	e018      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\r':
                    *output_pointer = 'r';
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	2272      	movs	r2, #114	; 0x72
 8007b7a:	701a      	strb	r2, [r3, #0]
                    break;
 8007b7c:	e014      	b.n	8007ba8 <print_string_ptr+0x1c0>
                case '\t':
                    *output_pointer = 't';
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2274      	movs	r2, #116	; 0x74
 8007b82:	701a      	strb	r2, [r3, #0]
                    break;
 8007b84:	e010      	b.n	8007ba8 <print_string_ptr+0x1c0>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	61ba      	str	r2, [r7, #24]
 8007b8c:	2275      	movs	r2, #117	; 0x75
 8007b8e:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	0011      	movs	r1, r2
 8007b9a:	0018      	movs	r0, r3
 8007b9c:	f7ff fee8 	bl	8007970 <htoa16>
                    output_pointer += 4;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	61bb      	str	r3, [r7, #24]
                    break;
 8007ba6:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8007ba8:	69fb      	ldr	r3, [r7, #28]
 8007baa:	3301      	adds	r3, #1
 8007bac:	61fb      	str	r3, [r7, #28]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	61bb      	str	r3, [r7, #24]
 8007bb4:	69fb      	ldr	r3, [r7, #28]
 8007bb6:	781b      	ldrb	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d19f      	bne.n	8007afc <print_string_ptr+0x114>
            }
        }
    }
    output[output_length + 1] = '\"';
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	693a      	ldr	r2, [r7, #16]
 8007bc2:	18d3      	adds	r3, r2, r3
 8007bc4:	2222      	movs	r2, #34	; 0x22
 8007bc6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	3302      	adds	r3, #2
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	18d3      	adds	r3, r2, r3
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	701a      	strb	r2, [r3, #0]

    return true;
 8007bd4:	2301      	movs	r3, #1
}
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	b008      	add	sp, #32
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	46c0      	nop			; (mov r8, r8)
 8007be0:	08009c4c 	.word	0x08009c4c

08007be4 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	683a      	ldr	r2, [r7, #0]
 8007bf4:	0011      	movs	r1, r2
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7ff fef6 	bl	80079e8 <print_string_ptr>
 8007bfc:	0003      	movs	r3, r0
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b002      	add	sp, #8
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <buffer_skip_whitespace+0x16>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d106      	bne.n	8007c2a <buffer_skip_whitespace+0x24>
    {
        return NULL;
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	e021      	b.n	8007c64 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d00d      	beq.n	8007c4c <buffer_skip_whitespace+0x46>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d207      	bcs.n	8007c4c <buffer_skip_whitespace+0x46>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681a      	ldr	r2, [r3, #0]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	18d3      	adds	r3, r2, r3
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b20      	cmp	r3, #32
 8007c4a:	d9e9      	bls.n	8007c20 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d104      	bne.n	8007c62 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	1e5a      	subs	r2, r3, #1
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007c62:	687b      	ldr	r3, [r7, #4]
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b002      	add	sp, #8
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <skip_utf8_bom+0x1e>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d003      	beq.n	8007c8a <skip_utf8_bom+0x1e>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <skip_utf8_bom+0x22>
    {
        return NULL;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e01b      	b.n	8007cc6 <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d017      	beq.n	8007cc4 <skip_utf8_bom+0x58>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	1d1a      	adds	r2, r3, #4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d210      	bcs.n	8007cc4 <skip_utf8_bom+0x58>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	18d3      	adds	r3, r2, r3
 8007cac:	4908      	ldr	r1, [pc, #32]	; (8007cd0 <skip_utf8_bom+0x64>)
 8007cae:	2203      	movs	r2, #3
 8007cb0:	0018      	movs	r0, r3
 8007cb2:	f001 ff2d 	bl	8009b10 <strncmp>
 8007cb6:	1e03      	subs	r3, r0, #0
 8007cb8:	d104      	bne.n	8007cc4 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	1cda      	adds	r2, r3, #3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8007cc4:	687b      	ldr	r3, [r7, #4]
}
 8007cc6:	0018      	movs	r0, r3
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	08009c50 	.word	0x08009c50

08007cd4 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8007cd4:	b590      	push	{r4, r7, lr}
 8007cd6:	b08d      	sub	sp, #52	; 0x34
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0 };
 8007ce0:	231c      	movs	r3, #28
 8007ce2:	18fb      	adds	r3, r7, r3
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	2310      	movs	r3, #16
 8007ce8:	001a      	movs	r2, r3
 8007cea:	2100      	movs	r1, #0
 8007cec:	f001 fe3f 	bl	800996e <memset>
    J *item = NULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* reset error position */
    global_error.json = NULL;
 8007cf4:	4b4e      	ldr	r3, [pc, #312]	; (8007e30 <JParseWithOpts+0x15c>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8007cfa:	4b4d      	ldr	r3, [pc, #308]	; (8007e30 <JParseWithOpts+0x15c>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d04c      	beq.n	8007da0 <JParseWithOpts+0xcc>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8007d06:	241c      	movs	r4, #28
 8007d08:	193b      	adds	r3, r7, r4
 8007d0a:	68fa      	ldr	r2, [r7, #12]
 8007d0c:	601a      	str	r2, [r3, #0]
    buffer.length = strlen((const char*)value) + sizeof("");
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	0018      	movs	r0, r3
 8007d12:	f7f8 fa01 	bl	8000118 <strlen>
 8007d16:	0003      	movs	r3, r0
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	193b      	adds	r3, r7, r4
 8007d1c:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 8007d1e:	193b      	adds	r3, r7, r4
 8007d20:	2200      	movs	r2, #0
 8007d22:	609a      	str	r2, [r3, #8]

    item = JNew_Item();
 8007d24:	f7ff f96a 	bl	8006ffc <JNew_Item>
 8007d28:	0003      	movs	r3, r0
 8007d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (item == NULL) /* memory fail */
 8007d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d038      	beq.n	8007da4 <JParseWithOpts+0xd0>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8007d32:	231c      	movs	r3, #28
 8007d34:	18fb      	adds	r3, r7, r3
 8007d36:	0018      	movs	r0, r3
 8007d38:	f7ff ff98 	bl	8007c6c <skip_utf8_bom>
 8007d3c:	0003      	movs	r3, r0
 8007d3e:	0018      	movs	r0, r3
 8007d40:	f7ff ff61 	bl	8007c06 <buffer_skip_whitespace>
 8007d44:	0002      	movs	r2, r0
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	0011      	movs	r1, r2
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	f000 f906 	bl	8007f5c <parse_value>
 8007d50:	1e03      	subs	r3, r0, #0
 8007d52:	d029      	beq.n	8007da8 <JParseWithOpts+0xd4>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d015      	beq.n	8007d86 <JParseWithOpts+0xb2>
    {
        buffer_skip_whitespace(&buffer);
 8007d5a:	211c      	movs	r1, #28
 8007d5c:	000c      	movs	r4, r1
 8007d5e:	187b      	adds	r3, r7, r1
 8007d60:	0018      	movs	r0, r3
 8007d62:	f7ff ff50 	bl	8007c06 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8007d66:	0021      	movs	r1, r4
 8007d68:	187b      	adds	r3, r7, r1
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	187b      	adds	r3, r7, r1
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d21b      	bcs.n	8007dac <JParseWithOpts+0xd8>
 8007d74:	211c      	movs	r1, #28
 8007d76:	187b      	adds	r3, r7, r1
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	187b      	adds	r3, r7, r1
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	18d3      	adds	r3, r2, r3
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d112      	bne.n	8007dac <JParseWithOpts+0xd8>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d007      	beq.n	8007d9c <JParseWithOpts+0xc8>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8007d8c:	211c      	movs	r1, #28
 8007d8e:	187b      	adds	r3, r7, r1
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	187b      	adds	r3, r7, r1
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	18d2      	adds	r2, r2, r3
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	601a      	str	r2, [r3, #0]
    }

    return item;
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	e042      	b.n	8007e26 <JParseWithOpts+0x152>
        goto fail;
 8007da0:	46c0      	nop			; (mov r8, r8)
 8007da2:	e004      	b.n	8007dae <JParseWithOpts+0xda>
        goto fail;
 8007da4:	46c0      	nop			; (mov r8, r8)
 8007da6:	e002      	b.n	8007dae <JParseWithOpts+0xda>
        goto fail;
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	e000      	b.n	8007dae <JParseWithOpts+0xda>

fail:
 8007dac:	46c0      	nop			; (mov r8, r8)
    if (item != NULL)
 8007dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <JParseWithOpts+0xe8>
    {
        JDelete(item);
 8007db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db6:	0018      	movs	r0, r3
 8007db8:	f7ff f936 	bl	8007028 <JDelete>
    }

    if (value != NULL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d030      	beq.n	8007e24 <JParseWithOpts+0x150>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8007dc2:	2114      	movs	r1, #20
 8007dc4:	187b      	adds	r3, r7, r1
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8007dca:	187b      	adds	r3, r7, r1
 8007dcc:	2200      	movs	r2, #0
 8007dce:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8007dd0:	211c      	movs	r1, #28
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	187b      	adds	r3, r7, r1
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d206      	bcs.n	8007dec <JParseWithOpts+0x118>
        {
            local_error.position = buffer.offset;
 8007dde:	231c      	movs	r3, #28
 8007de0:	18fb      	adds	r3, r7, r3
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	2314      	movs	r3, #20
 8007de6:	18fb      	adds	r3, r7, r3
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	e00b      	b.n	8007e04 <JParseWithOpts+0x130>
        }
        else if (buffer.length > 0)
 8007dec:	231c      	movs	r3, #28
 8007dee:	18fb      	adds	r3, r7, r3
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d006      	beq.n	8007e04 <JParseWithOpts+0x130>
        {
            local_error.position = buffer.length - 1;
 8007df6:	231c      	movs	r3, #28
 8007df8:	18fb      	adds	r3, r7, r3
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	1e5a      	subs	r2, r3, #1
 8007dfe:	2314      	movs	r3, #20
 8007e00:	18fb      	adds	r3, r7, r3
 8007e02:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d007      	beq.n	8007e1a <JParseWithOpts+0x146>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8007e0a:	2114      	movs	r1, #20
 8007e0c:	187b      	adds	r3, r7, r1
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	187b      	adds	r3, r7, r1
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	18d2      	adds	r2, r2, r3
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8007e1a:	4b05      	ldr	r3, [pc, #20]	; (8007e30 <JParseWithOpts+0x15c>)
 8007e1c:	2214      	movs	r2, #20
 8007e1e:	18ba      	adds	r2, r7, r2
 8007e20:	ca03      	ldmia	r2!, {r0, r1}
 8007e22:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	0018      	movs	r0, r3
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	b00d      	add	sp, #52	; 0x34
 8007e2c:	bd90      	pop	{r4, r7, pc}
 8007e2e:	46c0      	nop			; (mov r8, r8)
 8007e30:	20000240 	.word	0x20000240

08007e34 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	0018      	movs	r0, r3
 8007e44:	f7ff ff46 	bl	8007cd4 <JParseWithOpts>
 8007e48:	0003      	movs	r3, r0
}
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	b002      	add	sp, #8
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format)
{
 8007e54:	b590      	push	{r4, r7, lr}
 8007e56:	b08b      	sub	sp, #44	; 0x2c
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	627b      	str	r3, [r7, #36]	; 0x24

    memset(buffer, 0, sizeof(buffer));
 8007e62:	240c      	movs	r4, #12
 8007e64:	193b      	adds	r3, r7, r4
 8007e66:	2218      	movs	r2, #24
 8007e68:	2100      	movs	r1, #0
 8007e6a:	0018      	movs	r0, r3
 8007e6c:	f001 fd7f 	bl	800996e <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) _Malloc(default_buffer_size);
 8007e70:	4b32      	ldr	r3, [pc, #200]	; (8007f3c <print+0xe8>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	0018      	movs	r0, r3
 8007e76:	f001 f9c5 	bl	8009204 <NoteFnMalloc>
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	193b      	adds	r3, r7, r4
 8007e7e:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8007e80:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <print+0xe8>)
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	193b      	adds	r3, r7, r4
 8007e86:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8007e88:	193b      	adds	r3, r7, r4
 8007e8a:	683a      	ldr	r2, [r7, #0]
 8007e8c:	615a      	str	r2, [r3, #20]
    if (buffer->buffer == NULL)
 8007e8e:	193b      	adds	r3, r7, r4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d035      	beq.n	8007f02 <print+0xae>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8007e96:	230c      	movs	r3, #12
 8007e98:	18fa      	adds	r2, r7, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	0011      	movs	r1, r2
 8007e9e:	0018      	movs	r0, r3
 8007ea0:	f000 f94c 	bl	800813c <print_value>
 8007ea4:	1e03      	subs	r3, r0, #0
 8007ea6:	d02e      	beq.n	8007f06 <print+0xb2>
    {
        goto fail;
    }
    update_offset(buffer);
 8007ea8:	240c      	movs	r4, #12
 8007eaa:	193b      	adds	r3, r7, r4
 8007eac:	0018      	movs	r0, r3
 8007eae:	f7ff fa2f 	bl	8007310 <update_offset>

    /* copy the JSON over to a new buffer */
    printed = (unsigned char*) _Malloc(buffer->offset + 1);
 8007eb2:	193b      	adds	r3, r7, r4
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	0018      	movs	r0, r3
 8007eba:	f001 f9a3 	bl	8009204 <NoteFnMalloc>
 8007ebe:	0003      	movs	r3, r0
 8007ec0:	627b      	str	r3, [r7, #36]	; 0x24
    if (printed == NULL)
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d020      	beq.n	8007f0a <print+0xb6>
    {
        goto fail;
    }
    memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8007ec8:	200c      	movs	r0, #12
 8007eca:	183b      	adds	r3, r7, r0
 8007ecc:	6819      	ldr	r1, [r3, #0]
 8007ece:	183b      	adds	r3, r7, r0
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	183b      	adds	r3, r7, r0
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d900      	bls.n	8007ede <print+0x8a>
 8007edc:	001a      	movs	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f001 fd3b 	bl	800995c <memcpy>
    printed[buffer->offset] = '\0'; /* just to be sure */
 8007ee6:	210c      	movs	r1, #12
 8007ee8:	187b      	adds	r3, r7, r1
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eee:	18d3      	adds	r3, r2, r3
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	701a      	strb	r2, [r3, #0]

    /* free the buffer */
    _Free(buffer->buffer);
 8007ef4:	187b      	adds	r3, r7, r1
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	0018      	movs	r0, r3
 8007efa:	f001 f999 	bl	8009230 <NoteFnFree>

    return printed;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	e017      	b.n	8007f32 <print+0xde>
        goto fail;
 8007f02:	46c0      	nop			; (mov r8, r8)
 8007f04:	e002      	b.n	8007f0c <print+0xb8>
        goto fail;
 8007f06:	46c0      	nop			; (mov r8, r8)
 8007f08:	e000      	b.n	8007f0c <print+0xb8>
        goto fail;
 8007f0a:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8007f0c:	230c      	movs	r3, #12
 8007f0e:	18fb      	adds	r3, r7, r3
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <print+0xce>
    {
        _Free(buffer->buffer);
 8007f16:	230c      	movs	r3, #12
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	0018      	movs	r0, r3
 8007f1e:	f001 f987 	bl	8009230 <NoteFnFree>
    }

    if (printed != NULL)
 8007f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d003      	beq.n	8007f30 <print+0xdc>
    {
        _Free(printed);
 8007f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f001 f980 	bl	8009230 <NoteFnFree>
    }

    return NULL;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	0018      	movs	r0, r3
 8007f34:	46bd      	mov	sp, r7
 8007f36:	b00b      	add	sp, #44	; 0x2c
 8007f38:	bd90      	pop	{r4, r7, pc}
 8007f3a:	46c0      	nop			; (mov r8, r8)
 8007f3c:	0800a0d0 	.word	0x0800a0d0

08007f40 <JPrintUnformatted>:
{
    return (char*)print(item, true);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	0018      	movs	r0, r3
 8007f4e:	f7ff ff81 	bl	8007e54 <print>
 8007f52:	0003      	movs	r3, r0
}
 8007f54:	0018      	movs	r0, r3
 8007f56:	46bd      	mov	sp, r7
 8007f58:	b002      	add	sp, #8
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <parse_value+0x18>
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <parse_value+0x1c>
    {
        return false; /* no input */
 8007f74:	2300      	movs	r3, #0
 8007f76:	e0d7      	b.n	8008128 <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01c      	beq.n	8007fb8 <parse_value+0x5c>
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	1d1a      	adds	r2, r3, #4
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d815      	bhi.n	8007fb8 <parse_value+0x5c>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	18d3      	adds	r3, r2, r3
 8007f96:	4966      	ldr	r1, [pc, #408]	; (8008130 <parse_value+0x1d4>)
 8007f98:	2204      	movs	r2, #4
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f001 fdb8 	bl	8009b10 <strncmp>
 8007fa0:	1e03      	subs	r3, r0, #0
 8007fa2:	d109      	bne.n	8007fb8 <parse_value+0x5c>
    {
        item->type = JNULL;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	1d1a      	adds	r2, r3, #4
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	609a      	str	r2, [r3, #8]
        return true;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0b7      	b.n	8008128 <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01c      	beq.n	8007ff8 <parse_value+0x9c>
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	1d5a      	adds	r2, r3, #5
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d815      	bhi.n	8007ff8 <parse_value+0x9c>
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	18d3      	adds	r3, r2, r3
 8007fd6:	4957      	ldr	r1, [pc, #348]	; (8008134 <parse_value+0x1d8>)
 8007fd8:	2205      	movs	r2, #5
 8007fda:	0018      	movs	r0, r3
 8007fdc:	f001 fd98 	bl	8009b10 <strncmp>
 8007fe0:	1e03      	subs	r3, r0, #0
 8007fe2:	d109      	bne.n	8007ff8 <parse_value+0x9c>
    {
        item->type = JFalse;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	1d5a      	adds	r2, r3, #5
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	609a      	str	r2, [r3, #8]
        return true;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e097      	b.n	8008128 <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d01f      	beq.n	800803e <parse_value+0xe2>
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	689b      	ldr	r3, [r3, #8]
 8008002:	1d1a      	adds	r2, r3, #4
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	429a      	cmp	r2, r3
 800800a:	d818      	bhi.n	800803e <parse_value+0xe2>
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	18d3      	adds	r3, r2, r3
 8008016:	4948      	ldr	r1, [pc, #288]	; (8008138 <parse_value+0x1dc>)
 8008018:	2204      	movs	r2, #4
 800801a:	0018      	movs	r0, r3
 800801c:	f001 fd78 	bl	8009b10 <strncmp>
 8008020:	1e03      	subs	r3, r0, #0
 8008022:	d10c      	bne.n	800803e <parse_value+0xe2>
    {
        item->type = JTrue;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	1d1a      	adds	r2, r3, #4
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	609a      	str	r2, [r3, #8]
        return true;
 800803a:	2301      	movs	r3, #1
 800803c:	e074      	b.n	8008128 <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d015      	beq.n	8008070 <parse_value+0x114>
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	689a      	ldr	r2, [r3, #8]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	429a      	cmp	r2, r3
 800804e:	d20f      	bcs.n	8008070 <parse_value+0x114>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	18d3      	adds	r3, r2, r3
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b22      	cmp	r3, #34	; 0x22
 800805e:	d107      	bne.n	8008070 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	0011      	movs	r1, r2
 8008066:	0018      	movs	r0, r3
 8008068:	f7ff fb72 	bl	8007750 <parse_string>
 800806c:	0003      	movs	r3, r0
 800806e:	e05b      	b.n	8008128 <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d025      	beq.n	80080c2 <parse_value+0x166>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	689a      	ldr	r2, [r3, #8]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	429a      	cmp	r2, r3
 8008080:	d21f      	bcs.n	80080c2 <parse_value+0x166>
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	18d3      	adds	r3, r2, r3
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b2d      	cmp	r3, #45	; 0x2d
 8008090:	d00f      	beq.n	80080b2 <parse_value+0x156>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	18d3      	adds	r3, r2, r3
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	2b2f      	cmp	r3, #47	; 0x2f
 80080a0:	d90f      	bls.n	80080c2 <parse_value+0x166>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	18d3      	adds	r3, r2, r3
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b39      	cmp	r3, #57	; 0x39
 80080b0:	d807      	bhi.n	80080c2 <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 80080b2:	683a      	ldr	r2, [r7, #0]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0011      	movs	r1, r2
 80080b8:	0018      	movs	r0, r3
 80080ba:	f7fe ffff 	bl	80070bc <parse_number>
 80080be:	0003      	movs	r3, r0
 80080c0:	e032      	b.n	8008128 <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d015      	beq.n	80080f4 <parse_value+0x198>
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d20f      	bcs.n	80080f4 <parse_value+0x198>
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	18d3      	adds	r3, r2, r3
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b5b      	cmp	r3, #91	; 0x5b
 80080e2:	d107      	bne.n	80080f4 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	0011      	movs	r1, r2
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 f8e4 	bl	80082b8 <parse_array>
 80080f0:	0003      	movs	r3, r0
 80080f2:	e019      	b.n	8008128 <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d015      	beq.n	8008126 <parse_value+0x1ca>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	689a      	ldr	r2, [r3, #8]
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	429a      	cmp	r2, r3
 8008104:	d20f      	bcs.n	8008126 <parse_value+0x1ca>
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	18d3      	adds	r3, r2, r3
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b7b      	cmp	r3, #123	; 0x7b
 8008114:	d107      	bne.n	8008126 <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	0011      	movs	r1, r2
 800811c:	0018      	movs	r0, r3
 800811e:	f000 fa1d 	bl	800855c <parse_object>
 8008122:	0003      	movs	r3, r0
 8008124:	e000      	b.n	8008128 <parse_value+0x1cc>
    }

    return false;
 8008126:	2300      	movs	r3, #0
}
 8008128:	0018      	movs	r0, r3
 800812a:	46bd      	mov	sp, r7
 800812c:	b002      	add	sp, #8
 800812e:	bd80      	pop	{r7, pc}
 8008130:	08009c44 	.word	0x08009c44
 8008134:	08009c54 	.word	0x08009c54
 8008138:	08009c5c 	.word	0x08009c5c

0800813c <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b084      	sub	sp, #16
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d002      	beq.n	8008156 <print_value+0x1a>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <print_value+0x1e>
    {
        return false;
 8008156:	2300      	movs	r3, #0
 8008158:	e0a4      	b.n	80082a4 <print_value+0x168>
    }

    switch ((item->type) & 0xFF)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	22ff      	movs	r2, #255	; 0xff
 8008160:	4013      	ands	r3, r2
 8008162:	2b08      	cmp	r3, #8
 8008164:	d057      	beq.n	8008216 <print_value+0xda>
 8008166:	dc06      	bgt.n	8008176 <print_value+0x3a>
 8008168:	2b02      	cmp	r3, #2
 800816a:	d03e      	beq.n	80081ea <print_value+0xae>
 800816c:	2b04      	cmp	r3, #4
 800816e:	d010      	beq.n	8008192 <print_value+0x56>
 8008170:	2b01      	cmp	r3, #1
 8008172:	d024      	beq.n	80081be <print_value+0x82>
 8008174:	e095      	b.n	80082a2 <print_value+0x166>
 8008176:	2b20      	cmp	r3, #32
 8008178:	d100      	bne.n	800817c <print_value+0x40>
 800817a:	e082      	b.n	8008282 <print_value+0x146>
 800817c:	dc03      	bgt.n	8008186 <print_value+0x4a>
 800817e:	2b10      	cmp	r3, #16
 8008180:	d100      	bne.n	8008184 <print_value+0x48>
 8008182:	e076      	b.n	8008272 <print_value+0x136>
 8008184:	e08d      	b.n	80082a2 <print_value+0x166>
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d100      	bne.n	800818c <print_value+0x50>
 800818a:	e082      	b.n	8008292 <print_value+0x156>
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d04a      	beq.n	8008226 <print_value+0xea>
 8008190:	e087      	b.n	80082a2 <print_value+0x166>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2105      	movs	r1, #5
 8008196:	0018      	movs	r0, r3
 8008198:	f7ff f838 	bl	800720c <ensure>
 800819c:	0003      	movs	r3, r0
 800819e:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <print_value+0x6e>
            {
                return false;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e07c      	b.n	80082a4 <print_value+0x168>
            }
            strcpy((char*)output, "null");
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4b3f      	ldr	r3, [pc, #252]	; (80082ac <print_value+0x170>)
 80081ae:	0010      	movs	r0, r2
 80081b0:	0019      	movs	r1, r3
 80081b2:	2305      	movs	r3, #5
 80081b4:	001a      	movs	r2, r3
 80081b6:	f001 fbd1 	bl	800995c <memcpy>
            return true;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e072      	b.n	80082a4 <print_value+0x168>

        case JFalse:
            output = ensure(output_buffer, 6);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2106      	movs	r1, #6
 80081c2:	0018      	movs	r0, r3
 80081c4:	f7ff f822 	bl	800720c <ensure>
 80081c8:	0003      	movs	r3, r0
 80081ca:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <print_value+0x9a>
            {
                return false;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e066      	b.n	80082a4 <print_value+0x168>
            }
            strcpy((char*)output, "false");
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	4b35      	ldr	r3, [pc, #212]	; (80082b0 <print_value+0x174>)
 80081da:	0010      	movs	r0, r2
 80081dc:	0019      	movs	r1, r3
 80081de:	2306      	movs	r3, #6
 80081e0:	001a      	movs	r2, r3
 80081e2:	f001 fbbb 	bl	800995c <memcpy>
            return true;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e05c      	b.n	80082a4 <print_value+0x168>

        case JTrue:
            output = ensure(output_buffer, 5);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2105      	movs	r1, #5
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7ff f80c 	bl	800720c <ensure>
 80081f4:	0003      	movs	r3, r0
 80081f6:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <print_value+0xc6>
            {
                return false;
 80081fe:	2300      	movs	r3, #0
 8008200:	e050      	b.n	80082a4 <print_value+0x168>
            }
            strcpy((char*)output, "true");
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4b2b      	ldr	r3, [pc, #172]	; (80082b4 <print_value+0x178>)
 8008206:	0010      	movs	r0, r2
 8008208:	0019      	movs	r1, r3
 800820a:	2305      	movs	r3, #5
 800820c:	001a      	movs	r2, r3
 800820e:	f001 fba5 	bl	800995c <memcpy>
            return true;
 8008212:	2301      	movs	r3, #1
 8008214:	e046      	b.n	80082a4 <print_value+0x168>

        case JNumber:
            return print_number(item, output_buffer);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	0011      	movs	r1, r2
 800821c:	0018      	movs	r0, r3
 800821e:	f7ff f899 	bl	8007354 <print_number>
 8008222:	0003      	movs	r3, r0
 8008224:	e03e      	b.n	80082a4 <print_value+0x168>

        case JRaw:
        {
            size_t raw_length = 0;
 8008226:	2300      	movs	r3, #0
 8008228:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	691b      	ldr	r3, [r3, #16]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <print_value+0xfa>
            {
                return false;
 8008232:	2300      	movs	r3, #0
 8008234:	e036      	b.n	80082a4 <print_value+0x168>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	0018      	movs	r0, r3
 800823c:	f7f7 ff6c 	bl	8000118 <strlen>
 8008240:	0003      	movs	r3, r0
 8008242:	3301      	adds	r3, #1
 8008244:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	0011      	movs	r1, r2
 800824c:	0018      	movs	r0, r3
 800824e:	f7fe ffdd 	bl	800720c <ensure>
 8008252:	0003      	movs	r3, r0
 8008254:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <print_value+0x124>
            {
                return false;
 800825c:	2300      	movs	r3, #0
 800825e:	e021      	b.n	80082a4 <print_value+0x168>
            }
            memcpy(output, item->valuestring, raw_length);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6919      	ldr	r1, [r3, #16]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0018      	movs	r0, r3
 800826a:	f001 fb77 	bl	800995c <memcpy>
            return true;
 800826e:	2301      	movs	r3, #1
 8008270:	e018      	b.n	80082a4 <print_value+0x168>
        }

        case JString:
            return print_string(item, output_buffer);
 8008272:	683a      	ldr	r2, [r7, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	0011      	movs	r1, r2
 8008278:	0018      	movs	r0, r3
 800827a:	f7ff fcb3 	bl	8007be4 <print_string>
 800827e:	0003      	movs	r3, r0
 8008280:	e010      	b.n	80082a4 <print_value+0x168>

        case JArray:
            return print_array(item, output_buffer);
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	0011      	movs	r1, r2
 8008288:	0018      	movs	r0, r3
 800828a:	f000 f8d9 	bl	8008440 <print_array>
 800828e:	0003      	movs	r3, r0
 8008290:	e008      	b.n	80082a4 <print_value+0x168>

        case JObject:
            return print_object(item, output_buffer);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	0011      	movs	r1, r2
 8008298:	0018      	movs	r0, r3
 800829a:	f000 fa5d 	bl	8008758 <print_object>
 800829e:	0003      	movs	r3, r0
 80082a0:	e000      	b.n	80082a4 <print_value+0x168>

        default:
            return false;
 80082a2:	2300      	movs	r3, #0
    }
}
 80082a4:	0018      	movs	r0, r3
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b004      	add	sp, #16
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	08009c44 	.word	0x08009c44
 80082b0:	08009c54 	.word	0x08009c54
 80082b4:	08009c5c 	.word	0x08009c5c

080082b8 <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	4a5b      	ldr	r2, [pc, #364]	; (800843c <parse_array+0x184>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d901      	bls.n	80082d8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80082d4:	2300      	movs	r3, #0
 80082d6:	e0ac      	b.n	8008432 <parse_array+0x17a>
    }
    input_buffer->depth++;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	18d3      	adds	r3, r2, r3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b5b      	cmp	r3, #91	; 0x5b
 80082f0:	d000      	beq.n	80082f4 <parse_array+0x3c>
 80082f2:	e08f      	b.n	8008414 <parse_array+0x15c>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	1c5a      	adds	r2, r3, #1
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	0018      	movs	r0, r3
 8008302:	f7ff fc80 	bl	8007c06 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00d      	beq.n	8008328 <parse_array+0x70>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	429a      	cmp	r2, r3
 8008316:	d207      	bcs.n	8008328 <parse_array+0x70>
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	18d3      	adds	r3, r2, r3
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	2b5d      	cmp	r3, #93	; 0x5d
 8008326:	d062      	beq.n	80083ee <parse_array+0x136>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d005      	beq.n	800833a <parse_array+0x82>
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	429a      	cmp	r2, r3
 8008338:	d305      	bcc.n	8008346 <parse_array+0x8e>
    {
        input_buffer->offset--;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	1e5a      	subs	r2, r3, #1
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	609a      	str	r2, [r3, #8]
        goto fail;
 8008344:	e06d      	b.n	8008422 <parse_array+0x16a>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	1e5a      	subs	r2, r3, #1
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 8008350:	f7fe fe54 	bl	8006ffc <JNew_Item>
 8008354:	0003      	movs	r3, r0
 8008356:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d05c      	beq.n	8008418 <parse_array+0x160>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d104      	bne.n	800836e <parse_array+0xb6>
        {
            /* start the linked list */
            current_item = head = new_item;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	e007      	b.n	800837e <parse_array+0xc6>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	693a      	ldr	r2, [r7, #16]
 8008378:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	1c5a      	adds	r2, r3, #1
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	0018      	movs	r0, r3
 800838c:	f7ff fc3b 	bl	8007c06 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	0011      	movs	r1, r2
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff fde0 	bl	8007f5c <parse_value>
 800839c:	1e03      	subs	r3, r0, #0
 800839e:	d03d      	beq.n	800841c <parse_array+0x164>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	0018      	movs	r0, r3
 80083a4:	f7ff fc2f 	bl	8007c06 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00d      	beq.n	80083ca <parse_array+0x112>
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d207      	bcs.n	80083ca <parse_array+0x112>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	18d3      	adds	r3, r2, r3
 80083c4:	781b      	ldrb	r3, [r3, #0]
 80083c6:	2b2c      	cmp	r3, #44	; 0x2c
 80083c8:	d0c2      	beq.n	8008350 <parse_array+0x98>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d027      	beq.n	8008420 <parse_array+0x168>
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d221      	bcs.n	8008420 <parse_array+0x168>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	18d3      	adds	r3, r2, r3
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b5d      	cmp	r3, #93	; 0x5d
 80083ea:	d119      	bne.n	8008420 <parse_array+0x168>
    {
        goto fail; /* expected end of array */
    }

success:
 80083ec:	e000      	b.n	80083f0 <parse_array+0x138>
        goto success;
 80083ee:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	1e5a      	subs	r2, r3, #1
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2220      	movs	r2, #32
 80083fe:	60da      	str	r2, [r3, #12]
    item->child = head;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	697a      	ldr	r2, [r7, #20]
 8008404:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	1c5a      	adds	r2, r3, #1
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	609a      	str	r2, [r3, #8]

    return true;
 8008410:	2301      	movs	r3, #1
 8008412:	e00e      	b.n	8008432 <parse_array+0x17a>
        goto fail;
 8008414:	46c0      	nop			; (mov r8, r8)
 8008416:	e004      	b.n	8008422 <parse_array+0x16a>
            goto fail; /* allocation failure */
 8008418:	46c0      	nop			; (mov r8, r8)
 800841a:	e002      	b.n	8008422 <parse_array+0x16a>
            goto fail; /* failed to parse value */
 800841c:	46c0      	nop			; (mov r8, r8)
 800841e:	e000      	b.n	8008422 <parse_array+0x16a>

fail:
 8008420:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <parse_array+0x178>
    {
        JDelete(head);
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	0018      	movs	r0, r3
 800842c:	f7fe fdfc 	bl	8007028 <JDelete>
    }

    return false;
 8008430:	2300      	movs	r3, #0
}
 8008432:	0018      	movs	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	b006      	add	sp, #24
 8008438:	bd80      	pop	{r7, pc}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	000003e7 	.word	0x000003e7

08008440 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800844a:	2300      	movs	r3, #0
 800844c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800844e:	2300      	movs	r3, #0
 8008450:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	689b      	ldr	r3, [r3, #8]
 8008456:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <print_array+0x22>
    {
        return false;
 800845e:	2300      	movs	r3, #0
 8008460:	e078      	b.n	8008554 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	2101      	movs	r1, #1
 8008466:	0018      	movs	r0, r3
 8008468:	f7fe fed0 	bl	800720c <ensure>
 800846c:	0003      	movs	r3, r0
 800846e:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <print_array+0x3a>
    {
        return false;
 8008476:	2300      	movs	r3, #0
 8008478:	e06c      	b.n	8008554 <print_array+0x114>
    }

    *output_pointer = '[';
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	225b      	movs	r2, #91	; 0x5b
 800847e:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	1c5a      	adds	r2, r3, #1
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8008494:	e041      	b.n	800851a <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 8008496:	683a      	ldr	r2, [r7, #0]
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f7ff fe4d 	bl	800813c <print_value>
 80084a2:	1e03      	subs	r3, r0, #0
 80084a4:	d101      	bne.n	80084aa <print_array+0x6a>
        {
            return false;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e054      	b.n	8008554 <print_array+0x114>
        }
        update_offset(output_buffer);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	0018      	movs	r0, r3
 80084ae:	f7fe ff2f 	bl	8007310 <update_offset>
        if (current_element->next)
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02c      	beq.n	8008514 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	695b      	ldr	r3, [r3, #20]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <print_array+0x86>
 80084c2:	2302      	movs	r3, #2
 80084c4:	e000      	b.n	80084c8 <print_array+0x88>
 80084c6:	2301      	movs	r3, #1
 80084c8:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	1c5a      	adds	r2, r3, #1
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	0011      	movs	r1, r2
 80084d2:	0018      	movs	r0, r3
 80084d4:	f7fe fe9a 	bl	800720c <ensure>
 80084d8:	0003      	movs	r3, r0
 80084da:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d101      	bne.n	80084e6 <print_array+0xa6>
            {
                return false;
 80084e2:	2300      	movs	r3, #0
 80084e4:	e036      	b.n	8008554 <print_array+0x114>
            }
            *output_pointer++ = ',';
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	1c5a      	adds	r2, r3, #1
 80084ea:	617a      	str	r2, [r7, #20]
 80084ec:	222c      	movs	r2, #44	; 0x2c
 80084ee:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d004      	beq.n	8008502 <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	1c5a      	adds	r2, r3, #1
 80084fc:	617a      	str	r2, [r7, #20]
 80084fe:	2220      	movs	r2, #32
 8008500:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	18d2      	adds	r2, r2, r3
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1ba      	bne.n	8008496 <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2102      	movs	r1, #2
 8008524:	0018      	movs	r0, r3
 8008526:	f7fe fe71 	bl	800720c <ensure>
 800852a:	0003      	movs	r3, r0
 800852c:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d101      	bne.n	8008538 <print_array+0xf8>
    {
        return false;
 8008534:	2300      	movs	r3, #0
 8008536:	e00d      	b.n	8008554 <print_array+0x114>
    }
    *output_pointer++ = ']';
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	1c5a      	adds	r2, r3, #1
 800853c:	617a      	str	r2, [r7, #20]
 800853e:	225d      	movs	r2, #93	; 0x5d
 8008540:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2200      	movs	r2, #0
 8008546:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	1e5a      	subs	r2, r3, #1
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	60da      	str	r2, [r3, #12]

    return true;
 8008552:	2301      	movs	r3, #1
}
 8008554:	0018      	movs	r0, r3
 8008556:	46bd      	mov	sp, r7
 8008558:	b006      	add	sp, #24
 800855a:	bd80      	pop	{r7, pc}

0800855c <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b086      	sub	sp, #24
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	4a78      	ldr	r2, [pc, #480]	; (8008754 <parse_object+0x1f8>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d901      	bls.n	800857c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8008578:	2300      	movs	r3, #0
 800857a:	e0e7      	b.n	800874c <parse_object+0x1f0>
    }
    input_buffer->depth++;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	68db      	ldr	r3, [r3, #12]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d100      	bne.n	800858e <parse_object+0x32>
 800858c:	e0cf      	b.n	800872e <parse_object+0x1d2>
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	689a      	ldr	r2, [r3, #8]
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	429a      	cmp	r2, r3
 8008598:	d300      	bcc.n	800859c <parse_object+0x40>
 800859a:	e0c8      	b.n	800872e <parse_object+0x1d2>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	18d3      	adds	r3, r2, r3
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	2b7b      	cmp	r3, #123	; 0x7b
 80085aa:	d000      	beq.n	80085ae <parse_object+0x52>
 80085ac:	e0bf      	b.n	800872e <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	1c5a      	adds	r2, r3, #1
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	0018      	movs	r0, r3
 80085bc:	f7ff fb23 	bl	8007c06 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00e      	beq.n	80085e4 <parse_object+0x88>
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d208      	bcs.n	80085e4 <parse_object+0x88>
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	18d3      	adds	r3, r2, r3
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b7d      	cmp	r3, #125	; 0x7d
 80085e0:	d100      	bne.n	80085e4 <parse_object+0x88>
 80085e2:	e091      	b.n	8008708 <parse_object+0x1ac>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d005      	beq.n	80085f6 <parse_object+0x9a>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689a      	ldr	r2, [r3, #8]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d305      	bcc.n	8008602 <parse_object+0xa6>
    {
        input_buffer->offset--;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	1e5a      	subs	r2, r3, #1
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	609a      	str	r2, [r3, #8]
        goto fail;
 8008600:	e09c      	b.n	800873c <parse_object+0x1e0>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	1e5a      	subs	r2, r3, #1
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item();
 800860c:	f7fe fcf6 	bl	8006ffc <JNew_Item>
 8008610:	0003      	movs	r3, r0
 8008612:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d100      	bne.n	800861c <parse_object+0xc0>
 800861a:	e08a      	b.n	8008732 <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d104      	bne.n	800862c <parse_object+0xd0>
        {
            /* start the linked list */
            current_item = head = new_item;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	617b      	str	r3, [r7, #20]
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	613b      	str	r3, [r7, #16]
 800862a:	e007      	b.n	800863c <parse_object+0xe0>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	693a      	ldr	r2, [r7, #16]
 8008636:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	1c5a      	adds	r2, r3, #1
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	0018      	movs	r0, r3
 800864a:	f7ff fadc 	bl	8007c06 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	0011      	movs	r1, r2
 8008654:	0018      	movs	r0, r3
 8008656:	f7ff f87b 	bl	8007750 <parse_string>
 800865a:	1e03      	subs	r3, r0, #0
 800865c:	d100      	bne.n	8008660 <parse_object+0x104>
 800865e:	e06a      	b.n	8008736 <parse_object+0x1da>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	0018      	movs	r0, r3
 8008664:	f7ff facf 	bl	8007c06 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	61da      	str	r2, [r3, #28]
        current_item->valuestring = NULL;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2200      	movs	r2, #0
 8008674:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d058      	beq.n	800872e <parse_object+0x1d2>
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d252      	bcs.n	800872e <parse_object+0x1d2>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	18d3      	adds	r3, r2, r3
 8008692:	781b      	ldrb	r3, [r3, #0]
 8008694:	2b3a      	cmp	r3, #58	; 0x3a
 8008696:	d14a      	bne.n	800872e <parse_object+0x1d2>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff faae 	bl	8007c06 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	0011      	movs	r1, r2
 80086b0:	0018      	movs	r0, r3
 80086b2:	f7ff fc53 	bl	8007f5c <parse_value>
 80086b6:	1e03      	subs	r3, r0, #0
 80086b8:	d03f      	beq.n	800873a <parse_object+0x1de>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	0018      	movs	r0, r3
 80086be:	f7ff faa2 	bl	8007c06 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00d      	beq.n	80086e4 <parse_object+0x188>
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d207      	bcs.n	80086e4 <parse_object+0x188>
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	18d3      	adds	r3, r2, r3
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b2c      	cmp	r3, #44	; 0x2c
 80086e2:	d093      	beq.n	800860c <parse_object+0xb0>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d021      	beq.n	800872e <parse_object+0x1d2>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689a      	ldr	r2, [r3, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d21b      	bcs.n	800872e <parse_object+0x1d2>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	18d3      	adds	r3, r2, r3
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	2b7d      	cmp	r3, #125	; 0x7d
 8008704:	d113      	bne.n	800872e <parse_object+0x1d2>
    {
        goto fail; /* expected end of object */
    }

success:
 8008706:	e000      	b.n	800870a <parse_object+0x1ae>
        goto success; /* empty object */
 8008708:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	1e5a      	subs	r2, r3, #1
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2240      	movs	r2, #64	; 0x40
 8008718:	60da      	str	r2, [r3, #12]
    item->child = head;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	1c5a      	adds	r2, r3, #1
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	609a      	str	r2, [r3, #8]
    return true;
 800872a:	2301      	movs	r3, #1
 800872c:	e00e      	b.n	800874c <parse_object+0x1f0>

fail:
 800872e:	46c0      	nop			; (mov r8, r8)
 8008730:	e004      	b.n	800873c <parse_object+0x1e0>
            goto fail; /* allocation failure */
 8008732:	46c0      	nop			; (mov r8, r8)
 8008734:	e002      	b.n	800873c <parse_object+0x1e0>
            goto fail; /* faile to parse name */
 8008736:	46c0      	nop			; (mov r8, r8)
 8008738:	e000      	b.n	800873c <parse_object+0x1e0>
            goto fail; /* failed to parse value */
 800873a:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <parse_object+0x1ee>
    {
        JDelete(head);
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	0018      	movs	r0, r3
 8008746:	f7fe fc6f 	bl	8007028 <JDelete>
    }

    return false;
 800874a:	2300      	movs	r3, #0
}
 800874c:	0018      	movs	r0, r3
 800874e:	46bd      	mov	sp, r7
 8008750:	b006      	add	sp, #24
 8008752:	bd80      	pop	{r7, pc}
 8008754:	000003e7 	.word	0x000003e7

08008758 <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8008762:	2300      	movs	r3, #0
 8008764:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <print_object+0x22>
    {
        return false;
 8008776:	2300      	movs	r3, #0
 8008778:	e113      	b.n	80089a2 <print_object+0x24a>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <print_object+0x2e>
 8008782:	2302      	movs	r3, #2
 8008784:	e000      	b.n	8008788 <print_object+0x30>
 8008786:	2301      	movs	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1c5a      	adds	r2, r3, #1
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	0011      	movs	r1, r2
 8008792:	0018      	movs	r0, r3
 8008794:	f7fe fd3a 	bl	800720c <ensure>
 8008798:	0003      	movs	r3, r0
 800879a:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d101      	bne.n	80087a6 <print_object+0x4e>
    {
        return false;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e0fd      	b.n	80089a2 <print_object+0x24a>
    }

    *output_pointer++ = '{';
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	1c5a      	adds	r2, r3, #1
 80087aa:	61fa      	str	r2, [r7, #28]
 80087ac:	227b      	movs	r2, #123	; 0x7b
 80087ae:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	1c5a      	adds	r2, r3, #1
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	695b      	ldr	r3, [r3, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d004      	beq.n	80087cc <print_object+0x74>
    {
        *output_pointer++ = '\n';
 80087c2:	69fb      	ldr	r3, [r7, #28]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	61fa      	str	r2, [r7, #28]
 80087c8:	220a      	movs	r2, #10
 80087ca:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	689a      	ldr	r2, [r3, #8]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	18d2      	adds	r2, r2, r3
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	609a      	str	r2, [r3, #8]

    while (current_item)
 80087d8:	e0a7      	b.n	800892a <print_object+0x1d2>
    {
        if (output_buffer->format)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d024      	beq.n	800882c <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	0011      	movs	r1, r2
 80087ea:	0018      	movs	r0, r3
 80087ec:	f7fe fd0e 	bl	800720c <ensure>
 80087f0:	0003      	movs	r3, r0
 80087f2:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <print_object+0xa6>
            {
                return false;
 80087fa:	2300      	movs	r3, #0
 80087fc:	e0d1      	b.n	80089a2 <print_object+0x24a>
            }
            for (i = 0; i < output_buffer->depth; i++)
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
 8008802:	e007      	b.n	8008814 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	61fa      	str	r2, [r7, #28]
 800880a:	2209      	movs	r2, #9
 800880c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	3301      	adds	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	429a      	cmp	r2, r3
 800881c:	d3f2      	bcc.n	8008804 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	689a      	ldr	r2, [r3, #8]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	18d2      	adds	r2, r2, r3
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	683a      	ldr	r2, [r7, #0]
 8008832:	0011      	movs	r1, r2
 8008834:	0018      	movs	r0, r3
 8008836:	f7ff f8d7 	bl	80079e8 <print_string_ptr>
 800883a:	1e03      	subs	r3, r0, #0
 800883c:	d101      	bne.n	8008842 <print_object+0xea>
        {
            return false;
 800883e:	2300      	movs	r3, #0
 8008840:	e0af      	b.n	80089a2 <print_object+0x24a>
        }
        update_offset(output_buffer);
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	0018      	movs	r0, r3
 8008846:	f7fe fd63 	bl	8007310 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <print_object+0xfe>
 8008852:	2302      	movs	r3, #2
 8008854:	e000      	b.n	8008858 <print_object+0x100>
 8008856:	2301      	movs	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	0011      	movs	r1, r2
 8008860:	0018      	movs	r0, r3
 8008862:	f7fe fcd3 	bl	800720c <ensure>
 8008866:	0003      	movs	r3, r0
 8008868:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <print_object+0x11c>
        {
            return false;
 8008870:	2300      	movs	r3, #0
 8008872:	e096      	b.n	80089a2 <print_object+0x24a>
        }
        *output_pointer++ = ':';
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	1c5a      	adds	r2, r3, #1
 8008878:	61fa      	str	r2, [r7, #28]
 800887a:	223a      	movs	r2, #58	; 0x3a
 800887c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d004      	beq.n	8008890 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	61fa      	str	r2, [r7, #28]
 800888c:	2209      	movs	r2, #9
 800888e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	18d2      	adds	r2, r2, r3
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800889c:	683a      	ldr	r2, [r7, #0]
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	0011      	movs	r1, r2
 80088a2:	0018      	movs	r0, r3
 80088a4:	f7ff fc4a 	bl	800813c <print_value>
 80088a8:	1e03      	subs	r3, r0, #0
 80088aa:	d101      	bne.n	80088b0 <print_object+0x158>
        {
            return false;
 80088ac:	2300      	movs	r3, #0
 80088ae:	e078      	b.n	80089a2 <print_object+0x24a>
        }
        update_offset(output_buffer);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	0018      	movs	r0, r3
 80088b4:	f7fe fd2c 	bl	8007310 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	695b      	ldr	r3, [r3, #20]
 80088bc:	1e5a      	subs	r2, r3, #1
 80088be:	4193      	sbcs	r3, r2
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	001a      	movs	r2, r3
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	1e59      	subs	r1, r3, #1
 80088ca:	418b      	sbcs	r3, r1
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	18d3      	adds	r3, r2, r3
 80088d0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	1c5a      	adds	r2, r3, #1
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	0011      	movs	r1, r2
 80088da:	0018      	movs	r0, r3
 80088dc:	f7fe fc96 	bl	800720c <ensure>
 80088e0:	0003      	movs	r3, r0
 80088e2:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d101      	bne.n	80088ee <print_object+0x196>
        {
            return false;
 80088ea:	2300      	movs	r3, #0
 80088ec:	e059      	b.n	80089a2 <print_object+0x24a>
        }
        if (current_item->next)
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d004      	beq.n	8008900 <print_object+0x1a8>
        {
            *output_pointer++ = ',';
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	61fa      	str	r2, [r7, #28]
 80088fc:	222c      	movs	r2, #44	; 0x2c
 80088fe:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	695b      	ldr	r3, [r3, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d004      	beq.n	8008912 <print_object+0x1ba>
        {
            *output_pointer++ = '\n';
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	61fa      	str	r2, [r7, #28]
 800890e:	220a      	movs	r2, #10
 8008910:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2200      	movs	r2, #0
 8008916:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	689a      	ldr	r2, [r3, #8]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	18d2      	adds	r2, r2, r3
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8008924:	69bb      	ldr	r3, [r7, #24]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d000      	beq.n	8008932 <print_object+0x1da>
 8008930:	e753      	b.n	80087da <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <print_object+0x1ea>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	e000      	b.n	8008944 <print_object+0x1ec>
 8008942:	2302      	movs	r3, #2
 8008944:	683a      	ldr	r2, [r7, #0]
 8008946:	0019      	movs	r1, r3
 8008948:	0010      	movs	r0, r2
 800894a:	f7fe fc5f 	bl	800720c <ensure>
 800894e:	0003      	movs	r3, r0
 8008950:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <print_object+0x204>
    {
        return false;
 8008958:	2300      	movs	r3, #0
 800895a:	e022      	b.n	80089a2 <print_object+0x24a>
    }
    if (output_buffer->format)
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d010      	beq.n	8008986 <print_object+0x22e>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8008964:	2300      	movs	r3, #0
 8008966:	613b      	str	r3, [r7, #16]
 8008968:	e007      	b.n	800897a <print_object+0x222>
        {
            *output_pointer++ = '\t';
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	1c5a      	adds	r2, r3, #1
 800896e:	61fa      	str	r2, [r7, #28]
 8008970:	2209      	movs	r2, #9
 8008972:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	3301      	adds	r3, #1
 8008978:	613b      	str	r3, [r7, #16]
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	3b01      	subs	r3, #1
 8008980:	693a      	ldr	r2, [r7, #16]
 8008982:	429a      	cmp	r2, r3
 8008984:	d3f1      	bcc.n	800896a <print_object+0x212>
        }
    }
    *output_pointer++ = '}';
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	61fa      	str	r2, [r7, #28]
 800898c:	227d      	movs	r2, #125	; 0x7d
 800898e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	2200      	movs	r2, #0
 8008994:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	1e5a      	subs	r2, r3, #1
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	60da      	str	r2, [r3, #12]

    return true;
 80089a0:	2301      	movs	r3, #1
}
 80089a2:	0018      	movs	r0, r3
 80089a4:	46bd      	mov	sp, r7
 80089a6:	b008      	add	sp, #32
 80089a8:	bd80      	pop	{r7, pc}

080089aa <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b086      	sub	sp, #24
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	60f8      	str	r0, [r7, #12]
 80089b2:	60b9      	str	r1, [r7, #8]
 80089b4:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d002      	beq.n	80089c6 <get_object_item+0x1c>
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <get_object_item+0x20>
    {
        return NULL;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e026      	b.n	8008a18 <get_object_item+0x6e>
    }

    current_element = object->child;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d013      	beq.n	80089fe <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80089d6:	e002      	b.n	80089de <get_object_item+0x34>
        {
            current_element = current_element->next;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d018      	beq.n	8008a16 <get_object_item+0x6c>
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	0011      	movs	r1, r2
 80089ec:	0018      	movs	r0, r3
 80089ee:	f7f7 fb89 	bl	8000104 <strcmp>
 80089f2:	1e03      	subs	r3, r0, #0
 80089f4:	d1f0      	bne.n	80089d8 <get_object_item+0x2e>
 80089f6:	e00e      	b.n	8008a16 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d008      	beq.n	8008a16 <get_object_item+0x6c>
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	69da      	ldr	r2, [r3, #28]
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	0011      	movs	r1, r2
 8008a0c:	0018      	movs	r0, r3
 8008a0e:	f7fe fa2f 	bl	8006e70 <case_insensitive_strcmp>
 8008a12:	1e03      	subs	r3, r0, #0
 8008a14:	d1f0      	bne.n	80089f8 <get_object_item+0x4e>
        }
    }

    return current_element;
 8008a16:	697b      	ldr	r3, [r7, #20]
}
 8008a18:	0018      	movs	r0, r3
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	b006      	add	sp, #24
 8008a1e:	bd80      	pop	{r7, pc}

08008a20 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	0018      	movs	r0, r3
 8008a32:	f7ff ffba 	bl	80089aa <get_object_item>
 8008a36:	0003      	movs	r3, r0
}
 8008a38:	0018      	movs	r0, r3
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	b002      	add	sp, #8
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	605a      	str	r2, [r3, #4]
}
 8008a56:	46c0      	nop			; (mov r8, r8)
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	b002      	add	sp, #8
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <add_item_to_array+0x1a>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d101      	bne.n	8008a7c <add_item_to_array+0x1e>
    {
        return false;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e017      	b.n	8008aac <add_item_to_array+0x4e>
    }

    child = array->child;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d106      	bne.n	8008a96 <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	683a      	ldr	r2, [r7, #0]
 8008a8c:	609a      	str	r2, [r3, #8]
 8008a8e:	e00c      	b.n	8008aaa <add_item_to_array+0x4c>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	60fb      	str	r3, [r7, #12]
        while (child->next)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d1f8      	bne.n	8008a90 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	0011      	movs	r1, r2
 8008aa4:	0018      	movs	r0, r3
 8008aa6:	f7ff ffcb 	bl	8008a40 <suffix_object>
    }

    return true;
 8008aaa:	2301      	movs	r3, #1
}
 8008aac:	0018      	movs	r0, r3
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	b004      	add	sp, #16
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8008abc:	687b      	ldr	r3, [r7, #4]
}
 8008abe:	0018      	movs	r0, r3
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	b002      	add	sp, #8
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const Jbool constant_key)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b086      	sub	sp, #24
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
 8008ad4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 8008ada:	2300      	movs	r3, #0
 8008adc:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d005      	beq.n	8008af0 <add_item_to_object+0x28>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <add_item_to_object+0x28>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <add_item_to_object+0x2c>
    {
        return false;
 8008af0:	2300      	movs	r3, #0
 8008af2:	e03b      	b.n	8008b6c <add_item_to_object+0xa4>
    }

    if (constant_key)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00c      	beq.n	8008b14 <add_item_to_object+0x4c>
    {
        new_key = (char*)cast_away_const(string);
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	0018      	movs	r0, r3
 8008afe:	f7ff ffd9 	bl	8008ab4 <cast_away_const>
 8008b02:	0003      	movs	r3, r0
 8008b04:	617b      	str	r3, [r7, #20]
        new_type = item->type | JStringIsConst;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	68db      	ldr	r3, [r3, #12]
 8008b0a:	2280      	movs	r2, #128	; 0x80
 8008b0c:	0092      	lsls	r2, r2, #2
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	613b      	str	r3, [r7, #16]
 8008b12:	e00f      	b.n	8008b34 <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	0018      	movs	r0, r3
 8008b18:	f7fe fa3a 	bl	8006f90 <Jstrdup>
 8008b1c:	0003      	movs	r3, r0
 8008b1e:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d101      	bne.n	8008b2a <add_item_to_object+0x62>
        {
            return false;
 8008b26:	2300      	movs	r3, #0
 8008b28:	e020      	b.n	8008b6c <add_item_to_object+0xa4>
        }

        new_type = item->type & ~JStringIsConst;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	4a11      	ldr	r2, [pc, #68]	; (8008b74 <add_item_to_object+0xac>)
 8008b30:	4013      	ands	r3, r2
 8008b32:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	68da      	ldr	r2, [r3, #12]
 8008b38:	2380      	movs	r3, #128	; 0x80
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	d108      	bne.n	8008b52 <add_item_to_object+0x8a>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d004      	beq.n	8008b52 <add_item_to_object+0x8a>
    {
        _Free(item->string);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f000 fb6f 	bl	8009230 <NoteFnFree>
    }

    item->string = new_key;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	61da      	str	r2, [r3, #28]
    item->type = new_type;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0011      	movs	r1, r2
 8008b64:	0018      	movs	r0, r3
 8008b66:	f7ff ff7a 	bl	8008a5e <add_item_to_array>
 8008b6a:	0003      	movs	r3, r0
}
 8008b6c:	0018      	movs	r0, r3
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	b006      	add	sp, #24
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	fffffdff 	.word	0xfffffdff

08008b78 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b084      	sub	sp, #16
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, false);
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	68b9      	ldr	r1, [r7, #8]
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f7ff ff9c 	bl	8008ac8 <add_item_to_object>
}
 8008b90:	46c0      	nop			; (mov r8, r8)
 8008b92:	46bd      	mov	sp, r7
 8008b94:	b004      	add	sp, #16
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b086      	sub	sp, #24
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	0018      	movs	r0, r3
 8008ba8:	f000 f853 	bl	8008c52 <JCreateBool>
 8008bac:	0003      	movs	r3, r0
 8008bae:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, bool_item, false))
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	68b9      	ldr	r1, [r7, #8]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f7ff ff86 	bl	8008ac8 <add_item_to_object>
 8008bbc:	1e03      	subs	r3, r0, #0
 8008bbe:	d001      	beq.n	8008bc4 <JAddBoolToObject+0x2c>
    {
        return bool_item;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	e004      	b.n	8008bce <JAddBoolToObject+0x36>
    }

    JDelete(bool_item);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f7fe fa2e 	bl	8007028 <JDelete>
    return NULL;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	0018      	movs	r0, r3
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	b006      	add	sp, #24
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const JNUMBER number)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	b086      	sub	sp, #24
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	60f8      	str	r0, [r7, #12]
 8008bde:	60b9      	str	r1, [r7, #8]
 8008be0:	607a      	str	r2, [r7, #4]
    J *number_item = JCreateNumber(number);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	1c18      	adds	r0, r3, #0
 8008be6:	f000 f84d 	bl	8008c84 <JCreateNumber>
 8008bea:	0003      	movs	r3, r0
 8008bec:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, false))
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f7ff ff67 	bl	8008ac8 <add_item_to_object>
 8008bfa:	1e03      	subs	r3, r0, #0
 8008bfc:	d001      	beq.n	8008c02 <JAddNumberToObject+0x2c>
    {
        return number_item;
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	e004      	b.n	8008c0c <JAddNumberToObject+0x36>
    }

    JDelete(number_item);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7fe fa0f 	bl	8007028 <JDelete>
    return NULL;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	b006      	add	sp, #24
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	60f8      	str	r0, [r7, #12]
 8008c1c:	60b9      	str	r1, [r7, #8]
 8008c1e:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	0018      	movs	r0, r3
 8008c24:	f000 f864 	bl	8008cf0 <JCreateString>
 8008c28:	0003      	movs	r3, r0
 8008c2a:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, string_item, false))
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	68b9      	ldr	r1, [r7, #8]
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	2300      	movs	r3, #0
 8008c34:	f7ff ff48 	bl	8008ac8 <add_item_to_object>
 8008c38:	1e03      	subs	r3, r0, #0
 8008c3a:	d001      	beq.n	8008c40 <JAddStringToObject+0x2c>
    {
        return string_item;
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	e004      	b.n	8008c4a <JAddStringToObject+0x36>
    }

    JDelete(string_item);
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	0018      	movs	r0, r3
 8008c44:	f7fe f9f0 	bl	8007028 <JDelete>
    return NULL;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	0018      	movs	r0, r3
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	b006      	add	sp, #24
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008c5a:	f7fe f9cf 	bl	8006ffc <JNew_Item>
 8008c5e:	0003      	movs	r3, r0
 8008c60:	60fb      	str	r3, [r7, #12]
    if(item)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d007      	beq.n	8008c78 <JCreateBool+0x26>
    {
        item->type = b ? JTrue : JFalse;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <JCreateBool+0x20>
 8008c6e:	2202      	movs	r2, #2
 8008c70:	e000      	b.n	8008c74 <JCreateBool+0x22>
 8008c72:	2201      	movs	r2, #1
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	60da      	str	r2, [r3, #12]
    }

    return item;
 8008c78:	68fb      	ldr	r3, [r7, #12]
}
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	b004      	add	sp, #16
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(JNUMBER num)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008c8c:	f7fe f9b6 	bl	8006ffc <JNew_Item>
 8008c90:	0003      	movs	r3, r0
 8008c92:	60fb      	str	r3, [r7, #12]
    if(item)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d022      	beq.n	8008ce0 <JCreateNumber+0x5c>
    {
        item->type = JNumber;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2208      	movs	r2, #8
 8008c9e:	60da      	str	r2, [r3, #12]
        item->valuenumber = num;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	619a      	str	r2, [r3, #24]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8008ca6:	219e      	movs	r1, #158	; 0x9e
 8008ca8:	05c9      	lsls	r1, r1, #23
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f7f7 fbe2 	bl	8000474 <__aeabi_fcmpge>
 8008cb0:	1e03      	subs	r3, r0, #0
 8008cb2:	d003      	beq.n	8008cbc <JCreateNumber+0x38>
        {
            item->valueint = INT_MAX;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a0d      	ldr	r2, [pc, #52]	; (8008cec <JCreateNumber+0x68>)
 8008cb8:	615a      	str	r2, [r3, #20]
 8008cba:	e011      	b.n	8008ce0 <JCreateNumber+0x5c>
        }
        else if (num <= INT_MIN)
 8008cbc:	21cf      	movs	r1, #207	; 0xcf
 8008cbe:	0609      	lsls	r1, r1, #24
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f7f7 fbc3 	bl	800044c <__aeabi_fcmple>
 8008cc6:	1e03      	subs	r3, r0, #0
 8008cc8:	d004      	beq.n	8008cd4 <JCreateNumber+0x50>
        {
            item->valueint = INT_MIN;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2280      	movs	r2, #128	; 0x80
 8008cce:	0612      	lsls	r2, r2, #24
 8008cd0:	615a      	str	r2, [r3, #20]
 8008cd2:	e005      	b.n	8008ce0 <JCreateNumber+0x5c>
        }
        else
        {
            item->valueint = (int)num;
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f7f8 fb39 	bl	800134c <__aeabi_f2iz>
 8008cda:	0002      	movs	r2, r0
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
}
 8008ce2:	0018      	movs	r0, r3
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	b004      	add	sp, #16
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	7fffffff 	.word	0x7fffffff

08008cf0 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item();
 8008cf8:	f7fe f980 	bl	8006ffc <JNew_Item>
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	60fb      	str	r3, [r7, #12]
    if(item)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d013      	beq.n	8008d2e <JCreateString+0x3e>
    {
        item->type = JString;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2210      	movs	r2, #16
 8008d0a:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	0018      	movs	r0, r3
 8008d10:	f7fe f93e 	bl	8006f90 <Jstrdup>
 8008d14:	0002      	movs	r2, r0
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d105      	bne.n	8008d2e <JCreateString+0x3e>
        {
            JDelete(item);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	0018      	movs	r0, r3
 8008d26:	f7fe f97f 	bl	8007028 <JDelete>
            return NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	e000      	b.n	8008d30 <JCreateString+0x40>
        }
    }

    return item;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b004      	add	sp, #16
 8008d36:	bd80      	pop	{r7, pc}

08008d38 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
    J *item = JNew_Item();
 8008d3e:	f7fe f95d 	bl	8006ffc <JNew_Item>
 8008d42:	0003      	movs	r3, r0
 8008d44:	607b      	str	r3, [r7, #4]
    if (item)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <JCreateObject+0x1a>
    {
        item->type = JObject;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2240      	movs	r2, #64	; 0x40
 8008d50:	60da      	str	r2, [r3, #12]
    }

    return item;
 8008d52:	687b      	ldr	r3, [r7, #4]
}
 8008d54:	0018      	movs	r0, r3
 8008d56:	46bd      	mov	sp, r7
 8008d58:	b002      	add	sp, #8
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <JIsNumber+0x12>
    {
        return false;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	e007      	b.n	8008d7e <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	68db      	ldr	r3, [r3, #12]
 8008d72:	22ff      	movs	r2, #255	; 0xff
 8008d74:	4013      	ands	r3, r2
 8008d76:	3b08      	subs	r3, #8
 8008d78:	425a      	negs	r2, r3
 8008d7a:	4153      	adcs	r3, r2
 8008d7c:	b2db      	uxtb	r3, r3
}
 8008d7e:	0018      	movs	r0, r3
 8008d80:	46bd      	mov	sp, r7
 8008d82:	b002      	add	sp, #8
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b082      	sub	sp, #8
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <JIsString+0x12>
    {
        return false;
 8008d94:	2300      	movs	r3, #0
 8008d96:	e007      	b.n	8008da8 <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68db      	ldr	r3, [r3, #12]
 8008d9c:	22ff      	movs	r2, #255	; 0xff
 8008d9e:	4013      	ands	r3, r2
 8008da0:	3b10      	subs	r3, #16
 8008da2:	425a      	negs	r2, r3
 8008da4:	4153      	adcs	r3, r2
 8008da6:	b2db      	uxtb	r3, r3
}
 8008da8:	0018      	movs	r0, r3
 8008daa:	46bd      	mov	sp, r7
 8008dac:	b002      	add	sp, #8
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
JNUMBER JGetNumber(J *rsp, const char *field) {
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d101      	bne.n	8008dc4 <JGetNumber+0x14>
        return 0.0;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	e016      	b.n	8008df2 <JGetNumber+0x42>
    J *item = JGetObjectItem(rsp, field);
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	0011      	movs	r1, r2
 8008dca:	0018      	movs	r0, r3
 8008dcc:	f7ff fe28 	bl	8008a20 <JGetObjectItem>
 8008dd0:	0003      	movs	r3, r0
 8008dd2:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <JGetNumber+0x2e>
        return 0.0;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	e009      	b.n	8008df2 <JGetNumber+0x42>
    if (!JIsNumber(item))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	0018      	movs	r0, r3
 8008de2:	f7ff ffbb 	bl	8008d5c <JIsNumber>
 8008de6:	1e03      	subs	r3, r0, #0
 8008de8:	d101      	bne.n	8008dee <JGetNumber+0x3e>
        return 0.0;
 8008dea:	2300      	movs	r3, #0
 8008dec:	e001      	b.n	8008df2 <JGetNumber+0x42>
    return item->valuenumber;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	699b      	ldr	r3, [r3, #24]
}
 8008df2:	1c18      	adds	r0, r3, #0
 8008df4:	46bd      	mov	sp, r7
 8008df6:	b004      	add	sp, #16
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <JIsNullString+0x14>
        return false;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	e022      	b.n	8008e54 <JIsNullString+0x5a>
    J *item = JGetObjectItem(rsp, field);
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	0011      	movs	r1, r2
 8008e14:	0018      	movs	r0, r3
 8008e16:	f7ff fe03 	bl	8008a20 <JGetObjectItem>
 8008e1a:	0003      	movs	r3, r0
 8008e1c:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <JIsNullString+0x2e>
        return true;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e015      	b.n	8008e54 <JIsNullString+0x5a>
    if (!JIsString(item))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	0018      	movs	r0, r3
 8008e2c:	f7ff ffab 	bl	8008d86 <JIsString>
 8008e30:	1e03      	subs	r3, r0, #0
 8008e32:	d101      	bne.n	8008e38 <JIsNullString+0x3e>
        return false;
 8008e34:	2300      	movs	r3, #0
 8008e36:	e00d      	b.n	8008e54 <JIsNullString+0x5a>
    if (item->valuestring == NULL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d101      	bne.n	8008e44 <JIsNullString+0x4a>
        return true;
 8008e40:	2301      	movs	r3, #1
 8008e42:	e007      	b.n	8008e54 <JIsNullString+0x5a>
    if (item->valuestring[0] == '\0')
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	691b      	ldr	r3, [r3, #16]
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <JIsNullString+0x58>
        return true;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <JIsNullString+0x5a>
    return false;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	0018      	movs	r0, r3
 8008e56:	46bd      	mov	sp, r7
 8008e58:	b004      	add	sp, #16
 8008e5a:	bd80      	pop	{r7, pc}

08008e5c <JNtoA>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * JNtoA(JNUMBER f, char * buf, int original_precision)
{
 8008e5c:	b5b0      	push	{r4, r5, r7, lr}
 8008e5e:	b08e      	sub	sp, #56	; 0x38
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
	char * ptr = buf;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	637b      	str	r3, [r7, #52]	; 0x34
	char * p = ptr;
 8008e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6e:	633b      	str	r3, [r7, #48]	; 0x30
	char c;
	long intPart;

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8008e70:	2310      	movs	r3, #16
 8008e72:	18fb      	adds	r3, r7, r3
 8008e74:	220c      	movs	r2, #12
 8008e76:	18ba      	adds	r2, r7, r2
 8008e78:	ca03      	ldmia	r2!, {r0, r1}
 8008e7a:	c303      	stmia	r3!, {r0, r1}
	bool wasFF = true;
 8008e7c:	2327      	movs	r3, #39	; 0x27
 8008e7e:	18fb      	adds	r3, r7, r3
 8008e80:	2201      	movs	r2, #1
 8008e82:	701a      	strb	r2, [r3, #0]
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	623b      	str	r3, [r7, #32]
 8008e88:	e00d      	b.n	8008ea6 <JNtoA+0x4a>
		if (fbytes[i] != 0xff) wasFF = false;
 8008e8a:	2310      	movs	r3, #16
 8008e8c:	18fa      	adds	r2, r7, r3
 8008e8e:	6a3b      	ldr	r3, [r7, #32]
 8008e90:	18d3      	adds	r3, r2, r3
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	2bff      	cmp	r3, #255	; 0xff
 8008e96:	d003      	beq.n	8008ea0 <JNtoA+0x44>
 8008e98:	2327      	movs	r3, #39	; 0x27
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(int)sizeof(fbytes); i++)
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	623b      	str	r3, [r7, #32]
 8008ea6:	6a3b      	ldr	r3, [r7, #32]
 8008ea8:	2b07      	cmp	r3, #7
 8008eaa:	ddee      	ble.n	8008e8a <JNtoA+0x2e>
	if (wasFF)
 8008eac:	2327      	movs	r3, #39	; 0x27
 8008eae:	18fb      	adds	r3, r7, r3
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <JNtoA+0x5e>
		f = 0.0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]

	// check precision bounds
	int precision = original_precision;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	61fb      	str	r3, [r7, #28]
	if (precision < 0 || precision > JNTOA_PRECISION)
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	db02      	blt.n	8008eca <JNtoA+0x6e>
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	2b0a      	cmp	r3, #10
 8008ec8:	dd01      	ble.n	8008ece <JNtoA+0x72>
		precision = JNTOA_PRECISION;
 8008eca:	230a      	movs	r3, #10
 8008ecc:	61fb      	str	r3, [r7, #28]

	// sign stuff
	if (f < 0)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	1c18      	adds	r0, r3, #0
 8008ed4:	f7f7 fab0 	bl	8000438 <__aeabi_fcmplt>
 8008ed8:	1e03      	subs	r3, r0, #0
 8008eda:	d009      	beq.n	8008ef0 <JNtoA+0x94>
	{
		f = -f;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2280      	movs	r2, #128	; 0x80
 8008ee0:	0612      	lsls	r2, r2, #24
 8008ee2:	4053      	eors	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]
		*ptr++ = '-';
 8008ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ee8:	1c5a      	adds	r2, r3, #1
 8008eea:	637a      	str	r2, [r7, #52]	; 0x34
 8008eec:	222d      	movs	r2, #45	; 0x2d
 8008eee:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da3e      	bge.n	8008f74 <JNtoA+0x118>
	{
		if (f < 1.0) precision = 6;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	21fe      	movs	r1, #254	; 0xfe
 8008efa:	0589      	lsls	r1, r1, #22
 8008efc:	1c18      	adds	r0, r3, #0
 8008efe:	f7f7 fa9b 	bl	8000438 <__aeabi_fcmplt>
 8008f02:	1e03      	subs	r3, r0, #0
 8008f04:	d002      	beq.n	8008f0c <JNtoA+0xb0>
 8008f06:	2306      	movs	r3, #6
 8008f08:	61fb      	str	r3, [r7, #28]
 8008f0a:	e033      	b.n	8008f74 <JNtoA+0x118>
		else if (f < 10.0) precision = 5;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	497b      	ldr	r1, [pc, #492]	; (80090fc <JNtoA+0x2a0>)
 8008f10:	1c18      	adds	r0, r3, #0
 8008f12:	f7f7 fa91 	bl	8000438 <__aeabi_fcmplt>
 8008f16:	1e03      	subs	r3, r0, #0
 8008f18:	d002      	beq.n	8008f20 <JNtoA+0xc4>
 8008f1a:	2305      	movs	r3, #5
 8008f1c:	61fb      	str	r3, [r7, #28]
 8008f1e:	e029      	b.n	8008f74 <JNtoA+0x118>
		else if (f < 100.0) precision = 4;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	4977      	ldr	r1, [pc, #476]	; (8009100 <JNtoA+0x2a4>)
 8008f24:	1c18      	adds	r0, r3, #0
 8008f26:	f7f7 fa87 	bl	8000438 <__aeabi_fcmplt>
 8008f2a:	1e03      	subs	r3, r0, #0
 8008f2c:	d002      	beq.n	8008f34 <JNtoA+0xd8>
 8008f2e:	2304      	movs	r3, #4
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	e01f      	b.n	8008f74 <JNtoA+0x118>
		else if (f < 1000.0) precision = 3;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4973      	ldr	r1, [pc, #460]	; (8009104 <JNtoA+0x2a8>)
 8008f38:	1c18      	adds	r0, r3, #0
 8008f3a:	f7f7 fa7d 	bl	8000438 <__aeabi_fcmplt>
 8008f3e:	1e03      	subs	r3, r0, #0
 8008f40:	d002      	beq.n	8008f48 <JNtoA+0xec>
 8008f42:	2303      	movs	r3, #3
 8008f44:	61fb      	str	r3, [r7, #28]
 8008f46:	e015      	b.n	8008f74 <JNtoA+0x118>
		else if (f < 10000.0) precision = 2;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	496f      	ldr	r1, [pc, #444]	; (8009108 <JNtoA+0x2ac>)
 8008f4c:	1c18      	adds	r0, r3, #0
 8008f4e:	f7f7 fa73 	bl	8000438 <__aeabi_fcmplt>
 8008f52:	1e03      	subs	r3, r0, #0
 8008f54:	d002      	beq.n	8008f5c <JNtoA+0x100>
 8008f56:	2302      	movs	r3, #2
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	e00b      	b.n	8008f74 <JNtoA+0x118>
		else if (f < 100000.0) precision = 1;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	496b      	ldr	r1, [pc, #428]	; (800910c <JNtoA+0x2b0>)
 8008f60:	1c18      	adds	r0, r3, #0
 8008f62:	f7f7 fa69 	bl	8000438 <__aeabi_fcmplt>
 8008f66:	1e03      	subs	r3, r0, #0
 8008f68:	d002      	beq.n	8008f70 <JNtoA+0x114>
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	61fb      	str	r3, [r7, #28]
 8008f6e:	e001      	b.n	8008f74 <JNtoA+0x118>
		else precision = 0;
 8008f70:	2300      	movs	r3, #0
 8008f72:	61fb      	str	r3, [r7, #28]
	}

	// round value according the precision
	if (precision)
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <JNtoA+0x134>
		f += rounders[precision];
 8008f7a:	4b65      	ldr	r3, [pc, #404]	; (8009110 <JNtoA+0x2b4>)
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	0092      	lsls	r2, r2, #2
 8008f80:	58d3      	ldr	r3, [r2, r3]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	1c11      	adds	r1, r2, #0
 8008f86:	1c18      	adds	r0, r3, #0
 8008f88:	f7f7 fb78 	bl	800067c <__aeabi_fadd>
 8008f8c:	1c03      	adds	r3, r0, #0
 8008f8e:	60fb      	str	r3, [r7, #12]

	// integer part...
	intPart = f;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	1c18      	adds	r0, r3, #0
 8008f94:	f7f8 f9da 	bl	800134c <__aeabi_f2iz>
 8008f98:	0003      	movs	r3, r0
 8008f9a:	62bb      	str	r3, [r7, #40]	; 0x28
	f -= intPart;
 8008f9c:	68fc      	ldr	r4, [r7, #12]
 8008f9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008fa0:	f7f8 f9f4 	bl	800138c <__aeabi_i2f>
 8008fa4:	1c03      	adds	r3, r0, #0
 8008fa6:	1c19      	adds	r1, r3, #0
 8008fa8:	1c20      	adds	r0, r4, #0
 8008faa:	f7f8 f80b 	bl	8000fc4 <__aeabi_fsub>
 8008fae:	1c03      	adds	r3, r0, #0
 8008fb0:	60fb      	str	r3, [r7, #12]

	if (!intPart)
 8008fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d105      	bne.n	8008fc4 <JNtoA+0x168>
		*ptr++ = '0';
 8008fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fba:	1c5a      	adds	r2, r3, #1
 8008fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8008fbe:	2230      	movs	r2, #48	; 0x30
 8008fc0:	701a      	strb	r2, [r3, #0]
 8008fc2:	e034      	b.n	800902e <JNtoA+0x1d2>
	else
	{
		// save start pointer
		p = ptr;
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc6:	633b      	str	r3, [r7, #48]	; 0x30

		// convert (reverse order)
		while (intPart)
 8008fc8:	e013      	b.n	8008ff2 <JNtoA+0x196>
		{
			*p++ = '0' + intPart % 10;
 8008fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fcc:	210a      	movs	r1, #10
 8008fce:	0018      	movs	r0, r3
 8008fd0:	f7f7 fa1a 	bl	8000408 <__aeabi_idivmod>
 8008fd4:	000b      	movs	r3, r1
 8008fd6:	b2da      	uxtb	r2, r3
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	1c59      	adds	r1, r3, #1
 8008fdc:	6339      	str	r1, [r7, #48]	; 0x30
 8008fde:	3230      	adds	r2, #48	; 0x30
 8008fe0:	b2d2      	uxtb	r2, r2
 8008fe2:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8008fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fe6:	210a      	movs	r1, #10
 8008fe8:	0018      	movs	r0, r3
 8008fea:	f7f7 f927 	bl	800023c <__divsi3>
 8008fee:	0003      	movs	r3, r0
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
		while (intPart)
 8008ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1e8      	bne.n	8008fca <JNtoA+0x16e>
		}

		// save end pos
		p1 = p;
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8008ffc:	e011      	b.n	8009022 <JNtoA+0x1c6>
		{
			c = *--p;
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	3b01      	subs	r3, #1
 8009002:	633b      	str	r3, [r7, #48]	; 0x30
 8009004:	212f      	movs	r1, #47	; 0x2f
 8009006:	187b      	adds	r3, r7, r1
 8009008:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	701a      	strb	r2, [r3, #0]
			*p = *ptr;
 800900e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009014:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	1c5a      	adds	r2, r3, #1
 800901a:	637a      	str	r2, [r7, #52]	; 0x34
 800901c:	187a      	adds	r2, r7, r1
 800901e:	7812      	ldrb	r2, [r2, #0]
 8009020:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8009022:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009026:	429a      	cmp	r2, r3
 8009028:	d8e9      	bhi.n	8008ffe <JNtoA+0x1a2>
		}

		// restore end pos
		ptr = p1;
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// decimal part
	if (precision)
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d037      	beq.n	80090a4 <JNtoA+0x248>
	{

		// place decimal point
		*ptr++ = '.';
 8009034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009036:	1c5a      	adds	r2, r3, #1
 8009038:	637a      	str	r2, [r7, #52]	; 0x34
 800903a:	222e      	movs	r2, #46	; 0x2e
 800903c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800903e:	e02c      	b.n	800909a <JNtoA+0x23e>
		{
			f *= 10.0;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	492e      	ldr	r1, [pc, #184]	; (80090fc <JNtoA+0x2a0>)
 8009044:	1c18      	adds	r0, r3, #0
 8009046:	f7f7 fe8b 	bl	8000d60 <__aeabi_fmul>
 800904a:	1c03      	adds	r3, r0, #0
 800904c:	60fb      	str	r3, [r7, #12]
			c = f;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	252f      	movs	r5, #47	; 0x2f
 8009052:	197c      	adds	r4, r7, r5
 8009054:	1c18      	adds	r0, r3, #0
 8009056:	f7f7 fa37 	bl	80004c8 <__aeabi_f2uiz>
 800905a:	0003      	movs	r3, r0
 800905c:	7023      	strb	r3, [r4, #0]

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 800905e:	197b      	adds	r3, r7, r5
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	2b09      	cmp	r3, #9
 8009064:	d903      	bls.n	800906e <JNtoA+0x212>
 8009066:	232f      	movs	r3, #47	; 0x2f
 8009068:	18fb      	adds	r3, r7, r3
 800906a:	2200      	movs	r2, #0
 800906c:	701a      	strb	r2, [r3, #0]

			*ptr++ = '0' + c;
 800906e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	637a      	str	r2, [r7, #52]	; 0x34
 8009074:	212f      	movs	r1, #47	; 0x2f
 8009076:	187a      	adds	r2, r7, r1
 8009078:	7812      	ldrb	r2, [r2, #0]
 800907a:	3230      	adds	r2, #48	; 0x30
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8009080:	68fc      	ldr	r4, [r7, #12]
 8009082:	187b      	adds	r3, r7, r1
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	0018      	movs	r0, r3
 8009088:	f7f8 f980 	bl	800138c <__aeabi_i2f>
 800908c:	1c03      	adds	r3, r0, #0
 800908e:	1c19      	adds	r1, r3, #0
 8009090:	1c20      	adds	r0, r4, #0
 8009092:	f7f7 ff97 	bl	8000fc4 <__aeabi_fsub>
 8009096:	1c03      	adds	r3, r0, #0
 8009098:	60fb      	str	r3, [r7, #12]
		while (precision--)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	61fa      	str	r2, [r7, #28]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1cd      	bne.n	8009040 <JNtoA+0x1e4>
		}
	}

	// terminating zero
	*ptr = 0;
 80090a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	212e      	movs	r1, #46	; 0x2e
 80090ae:	0018      	movs	r0, r3
 80090b0:	f000 fd20 	bl	8009af4 <strchr>
 80090b4:	1e03      	subs	r3, r0, #0
 80090b6:	d01b      	beq.n	80090f0 <JNtoA+0x294>
		if (original_precision < 0) {
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	da18      	bge.n	80090f0 <JNtoA+0x294>
			--ptr;
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	3b01      	subs	r3, #1
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
			while (ptr > (buf+1) && *ptr == '0')
 80090c4:	e004      	b.n	80090d0 <JNtoA+0x274>
				*ptr-- = 0;
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	1e5a      	subs	r2, r3, #1
 80090ca:	637a      	str	r2, [r7, #52]	; 0x34
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	3301      	adds	r3, #1
 80090d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d903      	bls.n	80090e2 <JNtoA+0x286>
 80090da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	2b30      	cmp	r3, #48	; 0x30
 80090e0:	d0f1      	beq.n	80090c6 <JNtoA+0x26a>
			if (*ptr == '.')
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	2b2e      	cmp	r3, #46	; 0x2e
 80090e8:	d102      	bne.n	80090f0 <JNtoA+0x294>
				*ptr = 0;
 80090ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ec:	2200      	movs	r2, #0
 80090ee:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 80090f0:	68bb      	ldr	r3, [r7, #8]
}
 80090f2:	0018      	movs	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	b00e      	add	sp, #56	; 0x38
 80090f8:	bdb0      	pop	{r4, r5, r7, pc}
 80090fa:	46c0      	nop			; (mov r8, r8)
 80090fc:	41200000 	.word	0x41200000
 8009100:	42c80000 	.word	0x42c80000
 8009104:	447a0000 	.word	0x447a0000
 8009108:	461c4000 	.word	0x461c4000
 800910c:	47c35000 	.word	0x47c35000
 8009110:	0800a0d4 	.word	0x0800a0d4

08009114 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8009122:	4b08      	ldr	r3, [pc, #32]	; (8009144 <NoteSetFn+0x30>)
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	601a      	str	r2, [r3, #0]
    hookFree = freefn;
 8009128:	4b07      	ldr	r3, [pc, #28]	; (8009148 <NoteSetFn+0x34>)
 800912a:	68ba      	ldr	r2, [r7, #8]
 800912c:	601a      	str	r2, [r3, #0]
    hookDelayMs = delayfn;
 800912e:	4b07      	ldr	r3, [pc, #28]	; (800914c <NoteSetFn+0x38>)
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	601a      	str	r2, [r3, #0]
    hookGetMs = millisfn;
 8009134:	4b06      	ldr	r3, [pc, #24]	; (8009150 <NoteSetFn+0x3c>)
 8009136:	683a      	ldr	r2, [r7, #0]
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	46bd      	mov	sp, r7
 800913e:	b004      	add	sp, #16
 8009140:	bd80      	pop	{r7, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	20000250 	.word	0x20000250
 8009148:	20000254 	.word	0x20000254
 800914c:	20000258 	.word	0x20000258
 8009150:	2000025c 	.word	0x2000025c

08009154 <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <NoteSetFnSerial+0x40>)
 8009164:	2201      	movs	r2, #1
 8009166:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 8009168:	4b0b      	ldr	r3, [pc, #44]	; (8009198 <NoteSetFnSerial+0x44>)
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	601a      	str	r2, [r3, #0]
    hookSerialTransmit = transmitfn;
 800916e:	4b0b      	ldr	r3, [pc, #44]	; (800919c <NoteSetFnSerial+0x48>)
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	601a      	str	r2, [r3, #0]
    hookSerialAvailable = availfn;
 8009174:	4b0a      	ldr	r3, [pc, #40]	; (80091a0 <NoteSetFnSerial+0x4c>)
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	601a      	str	r2, [r3, #0]
    hookSerialReceive = receivefn;
 800917a:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <NoteSetFnSerial+0x50>)
 800917c:	683a      	ldr	r2, [r7, #0]
 800917e:	601a      	str	r2, [r3, #0]

    notecardReset = serialNoteReset;
 8009180:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <NoteSetFnSerial+0x54>)
 8009182:	4a0a      	ldr	r2, [pc, #40]	; (80091ac <NoteSetFnSerial+0x58>)
 8009184:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 8009186:	4b0a      	ldr	r3, [pc, #40]	; (80091b0 <NoteSetFnSerial+0x5c>)
 8009188:	4a0a      	ldr	r2, [pc, #40]	; (80091b4 <NoteSetFnSerial+0x60>)
 800918a:	601a      	str	r2, [r3, #0]
}
 800918c:	46c0      	nop			; (mov r8, r8)
 800918e:	46bd      	mov	sp, r7
 8009190:	b004      	add	sp, #16
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20000260 	.word	0x20000260
 8009198:	20000264 	.word	0x20000264
 800919c:	20000268 	.word	0x20000268
 80091a0:	2000026c 	.word	0x2000026c
 80091a4:	20000270 	.word	0x20000270
 80091a8:	20000274 	.word	0x20000274
 80091ac:	080097d5 	.word	0x080097d5
 80091b0:	20000278 	.word	0x20000278
 80091b4:	080095ed 	.word	0x080095ed

080091b8 <NoteFnGetMs>:
        va_end(args);
        hookDebugOutput(line);
    }
#endif
}
long unsigned int NoteFnGetMs() {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 80091bc:	4b06      	ldr	r3, [pc, #24]	; (80091d8 <NoteFnGetMs+0x20>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <NoteFnGetMs+0x10>
        return 0;
 80091c4:	2300      	movs	r3, #0
 80091c6:	e003      	b.n	80091d0 <NoteFnGetMs+0x18>
    return hookGetMs();
 80091c8:	4b03      	ldr	r3, [pc, #12]	; (80091d8 <NoteFnGetMs+0x20>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4798      	blx	r3
 80091ce:	0003      	movs	r3, r0
}
 80091d0:	0018      	movs	r0, r3
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	46c0      	nop			; (mov r8, r8)
 80091d8:	2000025c 	.word	0x2000025c

080091dc <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 80091e4:	4b06      	ldr	r3, [pc, #24]	; (8009200 <NoteFnDelayMs+0x24>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d004      	beq.n	80091f6 <NoteFnDelayMs+0x1a>
        hookDelayMs(ms);
 80091ec:	4b04      	ldr	r3, [pc, #16]	; (8009200 <NoteFnDelayMs+0x24>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	0010      	movs	r0, r2
 80091f4:	4798      	blx	r3
}
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	46bd      	mov	sp, r7
 80091fa:	b002      	add	sp, #8
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	46c0      	nop			; (mov r8, r8)
 8009200:	20000258 	.word	0x20000258

08009204 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 800920c:	4b07      	ldr	r3, [pc, #28]	; (800922c <NoteFnMalloc+0x28>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <NoteFnMalloc+0x14>
        return NULL;
 8009214:	2300      	movs	r3, #0
 8009216:	e005      	b.n	8009224 <NoteFnMalloc+0x20>
    return hookMalloc(size);
 8009218:	4b04      	ldr	r3, [pc, #16]	; (800922c <NoteFnMalloc+0x28>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	687a      	ldr	r2, [r7, #4]
 800921e:	0010      	movs	r0, r2
 8009220:	4798      	blx	r3
 8009222:	0003      	movs	r3, r0
}
 8009224:	0018      	movs	r0, r3
 8009226:	46bd      	mov	sp, r7
 8009228:	b002      	add	sp, #8
 800922a:	bd80      	pop	{r7, pc}
 800922c:	20000250 	.word	0x20000250

08009230 <NoteFnFree>:
void NoteFnFree(void *p) {
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8009238:	4b06      	ldr	r3, [pc, #24]	; (8009254 <NoteFnFree+0x24>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <NoteFnFree+0x1a>
        hookFree(p);
 8009240:	4b04      	ldr	r3, [pc, #16]	; (8009254 <NoteFnFree+0x24>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	0010      	movs	r0, r2
 8009248:	4798      	blx	r3
}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	46bd      	mov	sp, r7
 800924e:	b002      	add	sp, #8
 8009250:	bd80      	pop	{r7, pc}
 8009252:	46c0      	nop			; (mov r8, r8)
 8009254:	20000254 	.word	0x20000254

08009258 <NoteFnLockNote>:
}
void NoteFnUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteFnLockNote() {
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <NoteFnLockNote+0x18>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d002      	beq.n	800926a <NoteFnLockNote+0x12>
        hookLockNote();
 8009264:	4b02      	ldr	r3, [pc, #8]	; (8009270 <NoteFnLockNote+0x18>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4798      	blx	r3
}
 800926a:	46c0      	nop			; (mov r8, r8)
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20000248 	.word	0x20000248

08009274 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 8009274:	b580      	push	{r7, lr}
 8009276:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 8009278:	4b04      	ldr	r3, [pc, #16]	; (800928c <NoteFnUnlockNote+0x18>)
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d002      	beq.n	8009286 <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <NoteFnUnlockNote+0x18>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4798      	blx	r3
}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	2000024c 	.word	0x2000024c

08009290 <NoteFnSerialReset>:
void NoteFnSerialReset() {
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 8009294:	4b06      	ldr	r3, [pc, #24]	; (80092b0 <NoteFnSerialReset+0x20>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <NoteFnSerialReset+0x1a>
 800929c:	4b05      	ldr	r3, [pc, #20]	; (80092b4 <NoteFnSerialReset+0x24>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d002      	beq.n	80092aa <NoteFnSerialReset+0x1a>
        hookSerialReset();
 80092a4:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <NoteFnSerialReset+0x24>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4798      	blx	r3
}
 80092aa:	46c0      	nop			; (mov r8, r8)
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20000260 	.word	0x20000260
 80092b4:	20000264 	.word	0x20000264

080092b8 <NoteFnSerialTransmit>:
void NoteFnSerialTransmit(uint8_t *text, size_t len, bool flush) {
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	1dfb      	adds	r3, r7, #7
 80092c4:	701a      	strb	r2, [r3, #0]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <NoteFnSerialTransmit+0x34>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d10a      	bne.n	80092e4 <NoteFnSerialTransmit+0x2c>
 80092ce:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <NoteFnSerialTransmit+0x38>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d006      	beq.n	80092e4 <NoteFnSerialTransmit+0x2c>
        hookSerialTransmit(text, len, flush);
 80092d6:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <NoteFnSerialTransmit+0x38>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	1dfa      	adds	r2, r7, #7
 80092dc:	7812      	ldrb	r2, [r2, #0]
 80092de:	68b9      	ldr	r1, [r7, #8]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	4798      	blx	r3
}
 80092e4:	46c0      	nop			; (mov r8, r8)
 80092e6:	46bd      	mov	sp, r7
 80092e8:	b004      	add	sp, #16
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000260 	.word	0x20000260
 80092f0:	20000268 	.word	0x20000268

080092f4 <NoteFnSerialAvailable>:
bool NoteFnSerialAvailable() {
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 80092f8:	4b08      	ldr	r3, [pc, #32]	; (800931c <NoteFnSerialAvailable+0x28>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d108      	bne.n	8009312 <NoteFnSerialAvailable+0x1e>
 8009300:	4b07      	ldr	r3, [pc, #28]	; (8009320 <NoteFnSerialAvailable+0x2c>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <NoteFnSerialAvailable+0x1e>
        return hookSerialAvailable();
 8009308:	4b05      	ldr	r3, [pc, #20]	; (8009320 <NoteFnSerialAvailable+0x2c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4798      	blx	r3
 800930e:	0003      	movs	r3, r0
 8009310:	e000      	b.n	8009314 <NoteFnSerialAvailable+0x20>
    return false;
 8009312:	2300      	movs	r3, #0
}
 8009314:	0018      	movs	r0, r3
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	46c0      	nop			; (mov r8, r8)
 800931c:	20000260 	.word	0x20000260
 8009320:	2000026c 	.word	0x2000026c

08009324 <NoteFnSerialReceive>:
char NoteFnSerialReceive() {
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 8009328:	4b08      	ldr	r3, [pc, #32]	; (800934c <NoteFnSerialReceive+0x28>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d108      	bne.n	8009342 <NoteFnSerialReceive+0x1e>
 8009330:	4b07      	ldr	r3, [pc, #28]	; (8009350 <NoteFnSerialReceive+0x2c>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <NoteFnSerialReceive+0x1e>
        return hookSerialReceive();
 8009338:	4b05      	ldr	r3, [pc, #20]	; (8009350 <NoteFnSerialReceive+0x2c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4798      	blx	r3
 800933e:	0003      	movs	r3, r0
 8009340:	e000      	b.n	8009344 <NoteFnSerialReceive+0x20>
    return 0;
 8009342:	2300      	movs	r3, #0
}
 8009344:	0018      	movs	r0, r3
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	20000260 	.word	0x20000260
 8009350:	20000270 	.word	0x20000270

08009354 <NoteFnNoteReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteFnNoteReset() {
 8009354:	b580      	push	{r7, lr}
 8009356:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 8009358:	4b06      	ldr	r3, [pc, #24]	; (8009374 <NoteFnNoteReset+0x20>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 8009360:	2301      	movs	r3, #1
 8009362:	e003      	b.n	800936c <NoteFnNoteReset+0x18>
    return notecardReset();
 8009364:	4b03      	ldr	r3, [pc, #12]	; (8009374 <NoteFnNoteReset+0x20>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4798      	blx	r3
 800936a:	0003      	movs	r3, r0
}
 800936c:	0018      	movs	r0, r3
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	20000274 	.word	0x20000274

08009378 <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 8009382:	4b08      	ldr	r3, [pc, #32]	; (80093a4 <NoteFnTransaction+0x2c>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <NoteFnTransaction+0x16>
        return "notecard not initialized";
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <NoteFnTransaction+0x30>)
 800938c:	e006      	b.n	800939c <NoteFnTransaction+0x24>
    return notecardTransaction(json, jsonResponse);
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <NoteFnTransaction+0x2c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	0010      	movs	r0, r2
 8009398:	4798      	blx	r3
 800939a:	0003      	movs	r3, r0
}
 800939c:	0018      	movs	r0, r3
 800939e:	46bd      	mov	sp, r7
 80093a0:	b002      	add	sp, #8
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20000278 	.word	0x20000278
 80093a8:	08009c74 	.word	0x08009c74

080093ac <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 80093b4:	f7ff fcc0 	bl	8008d38 <JCreateObject>
 80093b8:	0003      	movs	r3, r0
 80093ba:	60fb      	str	r3, [r7, #12]
    if (rspdoc != NULL)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d005      	beq.n	80093ce <errDoc+0x22>
        JAddStringToObject(rspdoc, "err", errmsg);
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4904      	ldr	r1, [pc, #16]	; (80093d8 <errDoc+0x2c>)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	0018      	movs	r0, r3
 80093ca:	f7ff fc23 	bl	8008c14 <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"");
	_Debug(errmsg);
	_Debug("\"}\n");
#endif
    return rspdoc;
 80093ce:	68fb      	ldr	r3, [r7, #12]
}
 80093d0:	0018      	movs	r0, r3
 80093d2:	46bd      	mov	sp, r7
 80093d4:	b004      	add	sp, #16
 80093d6:	bd80      	pop	{r7, pc}
 80093d8:	08009c90 	.word	0x08009c90

080093dc <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 80093e4:	f7ff fca8 	bl	8008d38 <JCreateObject>
 80093e8:	0003      	movs	r3, r0
 80093ea:	60fb      	str	r3, [r7, #12]
    if (reqdoc != NULL)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, "req", request);
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4904      	ldr	r1, [pc, #16]	; (8009408 <NoteNewRequest+0x2c>)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	0018      	movs	r0, r3
 80093fa:	f7ff fc0b 	bl	8008c14 <JAddStringToObject>
    return reqdoc;
 80093fe:	68fb      	ldr	r3, [r7, #12]
}
 8009400:	0018      	movs	r0, r3
 8009402:	46bd      	mov	sp, r7
 8009404:	b004      	add	sp, #16
 8009406:	bd80      	pop	{r7, pc}
 8009408:	08009c94 	.word	0x08009c94

0800940c <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 800940c:	b5b0      	push	{r4, r5, r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <NoteRequest+0x12>
        return false;
 800941a:	2300      	movs	r3, #0
 800941c:	e022      	b.n	8009464 <NoteRequest+0x58>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	0018      	movs	r0, r3
 8009422:	f000 f847 	bl	80094b4 <NoteTransaction>
 8009426:	0003      	movs	r3, r0
 8009428:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d105      	bne.n	800943c <NoteRequest+0x30>
        JDelete(req);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	0018      	movs	r0, r3
 8009434:	f7fd fdf8 	bl	8007028 <JDelete>
        return false;
 8009438:	2300      	movs	r3, #0
 800943a:	e013      	b.n	8009464 <NoteRequest+0x58>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 800943c:	250b      	movs	r5, #11
 800943e:	197c      	adds	r4, r7, r5
 8009440:	4a0a      	ldr	r2, [pc, #40]	; (800946c <NoteRequest+0x60>)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	0011      	movs	r1, r2
 8009446:	0018      	movs	r0, r3
 8009448:	f7ff fcd7 	bl	8008dfa <JIsNullString>
 800944c:	0003      	movs	r3, r0
 800944e:	7023      	strb	r3, [r4, #0]
    JDelete(req);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	0018      	movs	r0, r3
 8009454:	f7fd fde8 	bl	8007028 <JDelete>
    JDelete(rsp);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	0018      	movs	r0, r3
 800945c:	f7fd fde4 	bl	8007028 <JDelete>
    return success;
 8009460:	197b      	adds	r3, r7, r5
 8009462:	781b      	ldrb	r3, [r3, #0]
}
 8009464:	0018      	movs	r0, r3
 8009466:	46bd      	mov	sp, r7
 8009468:	b004      	add	sp, #16
 800946a:	bdb0      	pop	{r4, r5, r7, pc}
 800946c:	08009c90 	.word	0x08009c90

08009470 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d101      	bne.n	8009482 <NoteRequestResponse+0x12>
        return NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	e013      	b.n	80094aa <NoteRequestResponse+0x3a>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	0018      	movs	r0, r3
 8009486:	f000 f815 	bl	80094b4 <NoteTransaction>
 800948a:	0003      	movs	r3, r0
 800948c:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d105      	bne.n	80094a0 <NoteRequestResponse+0x30>
        JDelete(req);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	0018      	movs	r0, r3
 8009498:	f7fd fdc6 	bl	8007028 <JDelete>
        return NULL;
 800949c:	2300      	movs	r3, #0
 800949e:	e004      	b.n	80094aa <NoteRequestResponse+0x3a>
    }
    // Free the request and exit
    JDelete(req);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	0018      	movs	r0, r3
 80094a4:	f7fd fdc0 	bl	8007028 <JDelete>
    return rsp;
 80094a8:	68fb      	ldr	r3, [r7, #12]
}
 80094aa:	0018      	movs	r0, r3
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b004      	add	sp, #16
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b08a      	sub	sp, #40	; 0x28
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 80094bc:	4b30      	ldr	r3, [pc, #192]	; (8009580 <NoteTransaction+0xcc>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d00a      	beq.n	80094da <NoteTransaction+0x26>
        if (!NoteReset())
 80094c4:	f000 f86c 	bl	80095a0 <NoteReset>
 80094c8:	0003      	movs	r3, r0
 80094ca:	001a      	movs	r2, r3
 80094cc:	2301      	movs	r3, #1
 80094ce:	4053      	eors	r3, r2
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d001      	beq.n	80094da <NoteTransaction+0x26>
            return NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	e04e      	b.n	8009578 <NoteTransaction+0xc4>
    }

    // Lock
    _LockNote();
 80094da:	f7ff febd 	bl	8009258 <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	0018      	movs	r0, r3
 80094e2:	f7fe fd2d 	bl	8007f40 <JPrintUnformatted>
 80094e6:	0003      	movs	r3, r0
 80094e8:	627b      	str	r3, [r7, #36]	; 0x24
    if (json == NULL) {
 80094ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d109      	bne.n	8009504 <NoteTransaction+0x50>
        J *rsp = errDoc("can't convert to JSON");
 80094f0:	4b24      	ldr	r3, [pc, #144]	; (8009584 <NoteTransaction+0xd0>)
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7ff ff5a 	bl	80093ac <errDoc>
 80094f8:	0003      	movs	r3, r0
 80094fa:	613b      	str	r3, [r7, #16]
        _UnlockNote();
 80094fc:	f7ff feba 	bl	8009274 <NoteFnUnlockNote>
        return rsp;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	e039      	b.n	8009578 <NoteTransaction+0xc4>
    _Debug(json);
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 8009504:	230c      	movs	r3, #12
 8009506:	18fa      	adds	r2, r7, r3
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	0011      	movs	r1, r2
 800950c:	0018      	movs	r0, r3
 800950e:	f7ff ff33 	bl	8009378 <NoteFnTransaction>
 8009512:	0003      	movs	r3, r0
 8009514:	623b      	str	r3, [r7, #32]

    // Free the json
    JFree(json);
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	0018      	movs	r0, r3
 800951a:	f7fd fd63 	bl	8006fe4 <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <NoteTransaction+0x88>
		NoteResetRequired();
 8009524:	f000 f832 	bl	800958c <NoteResetRequired>
        J *rsp = errDoc(errStr);
 8009528:	6a3b      	ldr	r3, [r7, #32]
 800952a:	0018      	movs	r0, r3
 800952c:	f7ff ff3e 	bl	80093ac <errDoc>
 8009530:	0003      	movs	r3, r0
 8009532:	617b      	str	r3, [r7, #20]
        _UnlockNote();
 8009534:	f7ff fe9e 	bl	8009274 <NoteFnUnlockNote>
        return rsp;
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	e01d      	b.n	8009578 <NoteTransaction+0xc4>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	0018      	movs	r0, r3
 8009540:	f7fe fc78 	bl	8007e34 <JParse>
 8009544:	0003      	movs	r3, r0
 8009546:	61fb      	str	r3, [r7, #28]
    if (rspdoc == NULL) {
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10d      	bne.n	800956a <NoteTransaction+0xb6>
        _Free(responseJSON);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	0018      	movs	r0, r3
 8009552:	f7ff fe6d 	bl	8009230 <NoteFnFree>
        _Debug("unable to parse response JSON:\n");
		_Debug(responseJSON);
        J *rsp = errDoc("unrecognized response from card");
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <NoteTransaction+0xd4>)
 8009558:	0018      	movs	r0, r3
 800955a:	f7ff ff27 	bl	80093ac <errDoc>
 800955e:	0003      	movs	r3, r0
 8009560:	61bb      	str	r3, [r7, #24]
        _UnlockNote();
 8009562:	f7ff fe87 	bl	8009274 <NoteFnUnlockNote>
        return rsp;
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	e006      	b.n	8009578 <NoteTransaction+0xc4>
    _Debug(responseJSON);
	_Debug("\n");
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	0018      	movs	r0, r3
 800956e:	f7ff fe5f 	bl	8009230 <NoteFnFree>

    // Unlock
    _UnlockNote();
 8009572:	f7ff fe7f 	bl	8009274 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 8009576:	69fb      	ldr	r3, [r7, #28]
    
}
 8009578:	0018      	movs	r0, r3
 800957a:	46bd      	mov	sp, r7
 800957c:	b00a      	add	sp, #40	; 0x28
 800957e:	bd80      	pop	{r7, pc}
 8009580:	2000002c 	.word	0x2000002c
 8009584:	08009c98 	.word	0x08009c98
 8009588:	08009cb0 	.word	0x08009cb0

0800958c <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
    resetRequired = true;
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <NoteResetRequired+0x10>)
 8009592:	2201      	movs	r2, #1
 8009594:	701a      	strb	r2, [r3, #0]
}
 8009596:	46c0      	nop			; (mov r8, r8)
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}
 800959c:	2000002c 	.word	0x2000002c

080095a0 <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 80095a0:	b580      	push	{r7, lr}
 80095a2:	af00      	add	r7, sp, #0
    _LockNote();
 80095a4:	f7ff fe58 	bl	8009258 <NoteFnLockNote>
    resetRequired = !_NoteReset();
 80095a8:	f7ff fed4 	bl	8009354 <NoteFnNoteReset>
 80095ac:	0003      	movs	r3, r0
 80095ae:	1e5a      	subs	r2, r3, #1
 80095b0:	4193      	sbcs	r3, r2
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	2201      	movs	r2, #1
 80095b6:	4053      	eors	r3, r2
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	1c1a      	adds	r2, r3, #0
 80095bc:	2301      	movs	r3, #1
 80095be:	4013      	ands	r3, r2
 80095c0:	b2da      	uxtb	r2, r3
 80095c2:	4b09      	ldr	r3, [pc, #36]	; (80095e8 <NoteReset+0x48>)
 80095c4:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 80095c6:	f7ff fe55 	bl	8009274 <NoteFnUnlockNote>
    return !resetRequired;
 80095ca:	4b07      	ldr	r3, [pc, #28]	; (80095e8 <NoteReset+0x48>)
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	1e5a      	subs	r2, r3, #1
 80095d0:	4193      	sbcs	r3, r2
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	2201      	movs	r2, #1
 80095d6:	4053      	eors	r3, r2
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	1c1a      	adds	r2, r3, #0
 80095dc:	2301      	movs	r3, #1
 80095de:	4013      	ands	r3, r2
 80095e0:	b2db      	uxtb	r3, r3
}
 80095e2:	0018      	movs	r0, r3
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}
 80095e8:	2000002c 	.word	0x2000002c

080095ec <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 80095ec:	b5b0      	push	{r4, r5, r7, lr}
 80095ee:	b08c      	sub	sp, #48	; 0x30
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
 80095f4:	6039      	str	r1, [r7, #0]

	// Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
	uint32_t segOff = 0;
 80095f6:	2300      	movs	r3, #0
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t segLeft = strlen(json);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f7f6 fd8b 	bl	8000118 <strlen>
 8009602:	0003      	movs	r3, r0
 8009604:	62bb      	str	r3, [r7, #40]	; 0x28
	while (true) {
		size_t segLen = segLeft;
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	627b      	str	r3, [r7, #36]	; 0x24
		if (segLen > CARD_REQUEST_SEGMENT_MAX_LEN)
 800960a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960c:	23fa      	movs	r3, #250	; 0xfa
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	429a      	cmp	r2, r3
 8009612:	d902      	bls.n	800961a <serialNoteTransaction+0x2e>
			segLen = CARD_REQUEST_SEGMENT_MAX_LEN;
 8009614:	23fa      	movs	r3, #250	; 0xfa
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
		segLeft -= segLen;
 800961a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	62bb      	str	r3, [r7, #40]	; 0x28
		_SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009626:	18d3      	adds	r3, r2, r3
 8009628:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800962a:	2200      	movs	r2, #0
 800962c:	0018      	movs	r0, r3
 800962e:	f7ff fe43 	bl	80092b8 <NoteFnSerialTransmit>
		if (segLeft == 0) {
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <serialNoteTransaction+0x64>
			_SerialTransmit((uint8_t *)"\n", 1, true);
 8009638:	4b60      	ldr	r3, [pc, #384]	; (80097bc <serialNoteTransaction+0x1d0>)
 800963a:	2201      	movs	r2, #1
 800963c:	2101      	movs	r1, #1
 800963e:	0018      	movs	r0, r3
 8009640:	f7ff fe3a 	bl	80092b8 <NoteFnSerialTransmit>
			break;
 8009644:	46c0      	nop			; (mov r8, r8)
	// Wait for something to become available, processing timeout errors up-front
	// because the json parse operation immediately following is subject to the
	// serial port timeout. We'd like more flexibility in max timeout and ultimately
	// in our error handling.
	uint32_t start;
	for (start = _GetMs(); !_SerialAvailable(); ) {
 8009646:	f7ff fdb7 	bl	80091b8 <NoteFnGetMs>
 800964a:	0003      	movs	r3, r0
 800964c:	613b      	str	r3, [r7, #16]
 800964e:	e015      	b.n	800967c <serialNoteTransaction+0x90>
		segOff += segLen;
 8009650:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	18d3      	adds	r3, r2, r3
 8009656:	62fb      	str	r3, [r7, #44]	; 0x2c
		_DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8009658:	20fa      	movs	r0, #250	; 0xfa
 800965a:	f7ff fdbf 	bl	80091dc <NoteFnDelayMs>
	while (true) {
 800965e:	e7d2      	b.n	8009606 <serialNoteTransaction+0x1a>
		if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 8009660:	f7ff fdaa 	bl	80091b8 <NoteFnGetMs>
 8009664:	0002      	movs	r2, r0
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	4955      	ldr	r1, [pc, #340]	; (80097c0 <serialNoteTransaction+0x1d4>)
 800966a:	468c      	mov	ip, r1
 800966c:	4463      	add	r3, ip
 800966e:	429a      	cmp	r2, r3
 8009670:	d301      	bcc.n	8009676 <serialNoteTransaction+0x8a>
			_Debug("reply to request didn't arrive from module in time\n");
			return "transaction timeout";
 8009672:	4b54      	ldr	r3, [pc, #336]	; (80097c4 <serialNoteTransaction+0x1d8>)
 8009674:	e09e      	b.n	80097b4 <serialNoteTransaction+0x1c8>
		}
		_DelayMs(10);
 8009676:	200a      	movs	r0, #10
 8009678:	f7ff fdb0 	bl	80091dc <NoteFnDelayMs>
	for (start = _GetMs(); !_SerialAvailable(); ) {
 800967c:	f7ff fe3a 	bl	80092f4 <NoteFnSerialAvailable>
 8009680:	0003      	movs	r3, r0
 8009682:	001a      	movs	r2, r3
 8009684:	2301      	movs	r3, #1
 8009686:	4053      	eors	r3, r2
 8009688:	b2db      	uxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e8      	bne.n	8009660 <serialNoteTransaction+0x74>
	}

	// Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
	// that it can be null-terminated.	This must be the case because json parsing requires a
	// null-terminated string.
	int jsonbufAllocLen = 1024;
 800968e:	2380      	movs	r3, #128	; 0x80
 8009690:	00db      	lsls	r3, r3, #3
 8009692:	623b      	str	r3, [r7, #32]
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	3301      	adds	r3, #1
 8009698:	0018      	movs	r0, r3
 800969a:	f7ff fdb3 	bl	8009204 <NoteFnMalloc>
 800969e:	0003      	movs	r3, r0
 80096a0:	61fb      	str	r3, [r7, #28]
	if (jsonbuf == NULL) {
 80096a2:	69fb      	ldr	r3, [r7, #28]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <serialNoteTransaction+0xc0>
		_Debug("transaction: jsonbuf malloc failed\n");
		return "insufficient memory";
 80096a8:	4b47      	ldr	r3, [pc, #284]	; (80097c8 <serialNoteTransaction+0x1dc>)
 80096aa:	e083      	b.n	80097b4 <serialNoteTransaction+0x1c8>
	}
	int jsonbufLen = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61bb      	str	r3, [r7, #24]
	char ch = 0;
 80096b0:	2317      	movs	r3, #23
 80096b2:	18fb      	adds	r3, r7, r3
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
	start = _GetMs();
 80096b8:	f7ff fd7e 	bl	80091b8 <NoteFnGetMs>
 80096bc:	0003      	movs	r3, r0
 80096be:	613b      	str	r3, [r7, #16]
	while (ch != '\n') {
 80096c0:	e06a      	b.n	8009798 <serialNoteTransaction+0x1ac>
		if (!_SerialAvailable()) {
 80096c2:	f7ff fe17 	bl	80092f4 <NoteFnSerialAvailable>
 80096c6:	0003      	movs	r3, r0
 80096c8:	001a      	movs	r2, r3
 80096ca:	2301      	movs	r3, #1
 80096cc:	4053      	eors	r3, r2
 80096ce:	b2db      	uxtb	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d01b      	beq.n	800970c <serialNoteTransaction+0x120>
			ch = 0;
 80096d4:	2317      	movs	r3, #23
 80096d6:	18fb      	adds	r3, r7, r3
 80096d8:	2200      	movs	r2, #0
 80096da:	701a      	strb	r2, [r3, #0]
			if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 80096dc:	f7ff fd6c 	bl	80091b8 <NoteFnGetMs>
 80096e0:	0002      	movs	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	4936      	ldr	r1, [pc, #216]	; (80097c0 <serialNoteTransaction+0x1d4>)
 80096e6:	468c      	mov	ip, r1
 80096e8:	4463      	add	r3, ip
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d30a      	bcc.n	8009704 <serialNoteTransaction+0x118>
				jsonbuf[jsonbufLen] = '\0';
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	69fa      	ldr	r2, [r7, #28]
 80096f2:	18d3      	adds	r3, r2, r3
 80096f4:	2200      	movs	r2, #0
 80096f6:	701a      	strb	r2, [r3, #0]
				_Debug("received only partial reply after timeout:\n");
				_Debug(jsonbuf);
				_Debug("\n");
				_Free(jsonbuf);
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	0018      	movs	r0, r3
 80096fc:	f7ff fd98 	bl	8009230 <NoteFnFree>
				return "transaction incomplete";
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <serialNoteTransaction+0x1e0>)
 8009702:	e057      	b.n	80097b4 <serialNoteTransaction+0x1c8>
			}
			_DelayMs(1);
 8009704:	2001      	movs	r0, #1
 8009706:	f7ff fd69 	bl	80091dc <NoteFnDelayMs>
			continue;
 800970a:	e045      	b.n	8009798 <serialNoteTransaction+0x1ac>
		}
		ch = _SerialReceive();
 800970c:	2517      	movs	r5, #23
 800970e:	197c      	adds	r4, r7, r5
 8009710:	f7ff fe08 	bl	8009324 <NoteFnSerialReceive>
 8009714:	0003      	movs	r3, r0
 8009716:	7023      	strb	r3, [r4, #0]

		// Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
		if (ch == 0 || (ch & 0x80) != 0) {
 8009718:	197b      	adds	r3, r7, r5
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d005      	beq.n	800972c <serialNoteTransaction+0x140>
 8009720:	2317      	movs	r3, #23
 8009722:	18fb      	adds	r3, r7, r3
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	b25b      	sxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	da05      	bge.n	8009738 <serialNoteTransaction+0x14c>
			_Debug("invalid data received on serial port from notecard\n");
			_Free(jsonbuf);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	0018      	movs	r0, r3
 8009730:	f7ff fd7e 	bl	8009230 <NoteFnFree>
			return "serial communications error";
 8009734:	4b26      	ldr	r3, [pc, #152]	; (80097d0 <serialNoteTransaction+0x1e4>)
 8009736:	e03d      	b.n	80097b4 <serialNoteTransaction+0x1c8>
		}

		// Append into the json buffer
		jsonbuf[jsonbufLen++] = ch;
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	1c5a      	adds	r2, r3, #1
 800973c:	61ba      	str	r2, [r7, #24]
 800973e:	001a      	movs	r2, r3
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	189b      	adds	r3, r3, r2
 8009744:	2217      	movs	r2, #23
 8009746:	18ba      	adds	r2, r7, r2
 8009748:	7812      	ldrb	r2, [r2, #0]
 800974a:	701a      	strb	r2, [r3, #0]
		if (jsonbufLen >= jsonbufAllocLen) {
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	6a3b      	ldr	r3, [r7, #32]
 8009750:	429a      	cmp	r2, r3
 8009752:	db21      	blt.n	8009798 <serialNoteTransaction+0x1ac>
			jsonbufAllocLen += 512;
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	2280      	movs	r2, #128	; 0x80
 8009758:	0092      	lsls	r2, r2, #2
 800975a:	4694      	mov	ip, r2
 800975c:	4463      	add	r3, ip
 800975e:	623b      	str	r3, [r7, #32]
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8009760:	6a3b      	ldr	r3, [r7, #32]
 8009762:	3301      	adds	r3, #1
 8009764:	0018      	movs	r0, r3
 8009766:	f7ff fd4d 	bl	8009204 <NoteFnMalloc>
 800976a:	0003      	movs	r3, r0
 800976c:	60fb      	str	r3, [r7, #12]
			if (jsonbufNew == NULL) {
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d105      	bne.n	8009780 <serialNoteTransaction+0x194>
				_Debug("transaction: jsonbuf malloc grow failed\n");
				_Free(jsonbuf);
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	0018      	movs	r0, r3
 8009778:	f7ff fd5a 	bl	8009230 <NoteFnFree>
				return "insufficient memory";
 800977c:	4b12      	ldr	r3, [pc, #72]	; (80097c8 <serialNoteTransaction+0x1dc>)
 800977e:	e019      	b.n	80097b4 <serialNoteTransaction+0x1c8>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8009780:	69ba      	ldr	r2, [r7, #24]
 8009782:	69f9      	ldr	r1, [r7, #28]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	0018      	movs	r0, r3
 8009788:	f000 f8e8 	bl	800995c <memcpy>
			_Free(jsonbuf);
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	0018      	movs	r0, r3
 8009790:	f7ff fd4e 	bl	8009230 <NoteFnFree>
			jsonbuf = jsonbufNew;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	61fb      	str	r3, [r7, #28]
	while (ch != '\n') {
 8009798:	2317      	movs	r3, #23
 800979a:	18fb      	adds	r3, r7, r3
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	2b0a      	cmp	r3, #10
 80097a0:	d18f      	bne.n	80096c2 <serialNoteTransaction+0xd6>
		}
	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	18d3      	adds	r3, r2, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	601a      	str	r2, [r3, #0]
	return NULL;
 80097b2:	2300      	movs	r3, #0

}
 80097b4:	0018      	movs	r0, r3
 80097b6:	46bd      	mov	sp, r7
 80097b8:	b00c      	add	sp, #48	; 0x30
 80097ba:	bdb0      	pop	{r4, r5, r7, pc}
 80097bc:	08009cd0 	.word	0x08009cd0
 80097c0:	00002710 	.word	0x00002710
 80097c4:	08009cd4 	.word	0x08009cd4
 80097c8:	08009ce8 	.word	0x08009ce8
 80097cc:	08009cfc 	.word	0x08009cfc
 80097d0:	08009d14 	.word	0x08009d14

080097d4 <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0

	// Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
	_DelayMs(250);
 80097da:	20fa      	movs	r0, #250	; 0xfa
 80097dc:	f7ff fcfe 	bl	80091dc <NoteFnDelayMs>
	_SerialReset();
 80097e0:	f7ff fd56 	bl	8009290 <NoteFnSerialReset>

	// The guaranteed behavior for robust resyncing is to send two newlines
	// and	wait for two echoed blank lines in return.
	bool notecardReady = false;
 80097e4:	230f      	movs	r3, #15
 80097e6:	18fb      	adds	r3, r7, r3
 80097e8:	2200      	movs	r2, #0
 80097ea:	701a      	strb	r2, [r3, #0]
	int retries;
	for (retries=0; retries<10; retries++) {
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]
 80097f0:	e049      	b.n	8009886 <serialNoteReset+0xb2>

		_Debug("notecard serial reset\n");

		// Send a few newlines to the module to clean out request/response processing
		_SerialTransmit((uint8_t *)"\n\n", 2, true);
 80097f2:	4b2a      	ldr	r3, [pc, #168]	; (800989c <serialNoteReset+0xc8>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	2102      	movs	r1, #2
 80097f8:	0018      	movs	r0, r3
 80097fa:	f7ff fd5d 	bl	80092b8 <NoteFnSerialTransmit>

		// Drain all serial for 500ms
		bool somethingFound = false;
 80097fe:	1dfb      	adds	r3, r7, #7
 8009800:	2200      	movs	r2, #0
 8009802:	701a      	strb	r2, [r3, #0]
		bool nonControlCharFound = false;
 8009804:	1dbb      	adds	r3, r7, #6
 8009806:	2200      	movs	r2, #0
 8009808:	701a      	strb	r2, [r3, #0]
		uint32_t start = _GetMs();
 800980a:	f7ff fcd5 	bl	80091b8 <NoteFnGetMs>
 800980e:	0003      	movs	r3, r0
 8009810:	603b      	str	r3, [r7, #0]
		while (_GetMs() < start+500) {
 8009812:	e016      	b.n	8009842 <serialNoteReset+0x6e>
			while (_SerialAvailable()) {
				somethingFound = true;
 8009814:	1dfb      	adds	r3, r7, #7
 8009816:	2201      	movs	r2, #1
 8009818:	701a      	strb	r2, [r3, #0]
				if (_SerialReceive() >= ' ')
 800981a:	f7ff fd83 	bl	8009324 <NoteFnSerialReceive>
 800981e:	0003      	movs	r3, r0
 8009820:	0019      	movs	r1, r3
 8009822:	1dbb      	adds	r3, r7, #6
 8009824:	1dba      	adds	r2, r7, #6
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	701a      	strb	r2, [r3, #0]
 800982a:	291f      	cmp	r1, #31
 800982c:	d902      	bls.n	8009834 <serialNoteReset+0x60>
					nonControlCharFound = true;
 800982e:	1dbb      	adds	r3, r7, #6
 8009830:	2201      	movs	r2, #1
 8009832:	701a      	strb	r2, [r3, #0]
			while (_SerialAvailable()) {
 8009834:	f7ff fd5e 	bl	80092f4 <NoteFnSerialAvailable>
 8009838:	1e03      	subs	r3, r0, #0
 800983a:	d1eb      	bne.n	8009814 <serialNoteReset+0x40>
			}
			_DelayMs(1);
 800983c:	2001      	movs	r0, #1
 800983e:	f7ff fccd 	bl	80091dc <NoteFnDelayMs>
		while (_GetMs() < start+500) {
 8009842:	f7ff fcb9 	bl	80091b8 <NoteFnGetMs>
 8009846:	0002      	movs	r2, r0
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	33f5      	adds	r3, #245	; 0xf5
 800984c:	33ff      	adds	r3, #255	; 0xff
 800984e:	429a      	cmp	r2, r3
 8009850:	d3f0      	bcc.n	8009834 <serialNoteReset+0x60>
		}

		// If all we got back is newlines, we're ready
		if (somethingFound && !nonControlCharFound) {
 8009852:	1dfb      	adds	r3, r7, #7
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d00b      	beq.n	8009872 <serialNoteReset+0x9e>
 800985a:	1dbb      	adds	r3, r7, #6
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	2201      	movs	r2, #1
 8009860:	4053      	eors	r3, r2
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <serialNoteReset+0x9e>
			notecardReady = true;
 8009868:	230f      	movs	r3, #15
 800986a:	18fb      	adds	r3, r7, r3
 800986c:	2201      	movs	r2, #1
 800986e:	701a      	strb	r2, [r3, #0]
			break;
 8009870:	e00c      	b.n	800988c <serialNoteReset+0xb8>
		}

		_Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
		_DelayMs(500);
 8009872:	23fa      	movs	r3, #250	; 0xfa
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	0018      	movs	r0, r3
 8009878:	f7ff fcb0 	bl	80091dc <NoteFnDelayMs>
		_SerialReset();
 800987c:	f7ff fd08 	bl	8009290 <NoteFnSerialReset>
	for (retries=0; retries<10; retries++) {
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	3301      	adds	r3, #1
 8009884:	60bb      	str	r3, [r7, #8]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	2b09      	cmp	r3, #9
 800988a:	ddb2      	ble.n	80097f2 <serialNoteReset+0x1e>

	}

	// Done
	return notecardReady;
 800988c:	230f      	movs	r3, #15
 800988e:	18fb      	adds	r3, r7, r3
 8009890:	781b      	ldrb	r3, [r3, #0]
}
 8009892:	0018      	movs	r0, r3
 8009894:	46bd      	mov	sp, r7
 8009896:	b004      	add	sp, #16
 8009898:	bd80      	pop	{r7, pc}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	08009d30 	.word	0x08009d30

080098a0 <__errno>:
 80098a0:	4b01      	ldr	r3, [pc, #4]	; (80098a8 <__errno+0x8>)
 80098a2:	6818      	ldr	r0, [r3, #0]
 80098a4:	4770      	bx	lr
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	20000030 	.word	0x20000030

080098ac <__libc_init_array>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	2600      	movs	r6, #0
 80098b0:	4d0c      	ldr	r5, [pc, #48]	; (80098e4 <__libc_init_array+0x38>)
 80098b2:	4c0d      	ldr	r4, [pc, #52]	; (80098e8 <__libc_init_array+0x3c>)
 80098b4:	1b64      	subs	r4, r4, r5
 80098b6:	10a4      	asrs	r4, r4, #2
 80098b8:	42a6      	cmp	r6, r4
 80098ba:	d109      	bne.n	80098d0 <__libc_init_array+0x24>
 80098bc:	2600      	movs	r6, #0
 80098be:	f000 f947 	bl	8009b50 <_init>
 80098c2:	4d0a      	ldr	r5, [pc, #40]	; (80098ec <__libc_init_array+0x40>)
 80098c4:	4c0a      	ldr	r4, [pc, #40]	; (80098f0 <__libc_init_array+0x44>)
 80098c6:	1b64      	subs	r4, r4, r5
 80098c8:	10a4      	asrs	r4, r4, #2
 80098ca:	42a6      	cmp	r6, r4
 80098cc:	d105      	bne.n	80098da <__libc_init_array+0x2e>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	00b3      	lsls	r3, r6, #2
 80098d2:	58eb      	ldr	r3, [r5, r3]
 80098d4:	4798      	blx	r3
 80098d6:	3601      	adds	r6, #1
 80098d8:	e7ee      	b.n	80098b8 <__libc_init_array+0xc>
 80098da:	00b3      	lsls	r3, r6, #2
 80098dc:	58eb      	ldr	r3, [r5, r3]
 80098de:	4798      	blx	r3
 80098e0:	3601      	adds	r6, #1
 80098e2:	e7f2      	b.n	80098ca <__libc_init_array+0x1e>
 80098e4:	0800a214 	.word	0x0800a214
 80098e8:	0800a214 	.word	0x0800a214
 80098ec:	0800a214 	.word	0x0800a214
 80098f0:	0800a218 	.word	0x0800a218

080098f4 <__locale_ctype_ptr>:
 80098f4:	4b04      	ldr	r3, [pc, #16]	; (8009908 <__locale_ctype_ptr+0x14>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d100      	bne.n	8009900 <__locale_ctype_ptr+0xc>
 80098fe:	4b03      	ldr	r3, [pc, #12]	; (800990c <__locale_ctype_ptr+0x18>)
 8009900:	33ec      	adds	r3, #236	; 0xec
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	4770      	bx	lr
 8009906:	46c0      	nop			; (mov r8, r8)
 8009908:	20000030 	.word	0x20000030
 800990c:	20000094 	.word	0x20000094

08009910 <malloc>:
 8009910:	b510      	push	{r4, lr}
 8009912:	4b03      	ldr	r3, [pc, #12]	; (8009920 <malloc+0x10>)
 8009914:	0001      	movs	r1, r0
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	f000 f87c 	bl	8009a14 <_malloc_r>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	20000030 	.word	0x20000030

08009924 <free>:
 8009924:	b510      	push	{r4, lr}
 8009926:	4b03      	ldr	r3, [pc, #12]	; (8009934 <free+0x10>)
 8009928:	0001      	movs	r1, r0
 800992a:	6818      	ldr	r0, [r3, #0]
 800992c:	f000 f828 	bl	8009980 <_free_r>
 8009930:	bd10      	pop	{r4, pc}
 8009932:	46c0      	nop			; (mov r8, r8)
 8009934:	20000030 	.word	0x20000030

08009938 <__ascii_mbtowc>:
 8009938:	b082      	sub	sp, #8
 800993a:	2900      	cmp	r1, #0
 800993c:	d100      	bne.n	8009940 <__ascii_mbtowc+0x8>
 800993e:	a901      	add	r1, sp, #4
 8009940:	1e10      	subs	r0, r2, #0
 8009942:	d006      	beq.n	8009952 <__ascii_mbtowc+0x1a>
 8009944:	2b00      	cmp	r3, #0
 8009946:	d006      	beq.n	8009956 <__ascii_mbtowc+0x1e>
 8009948:	7813      	ldrb	r3, [r2, #0]
 800994a:	600b      	str	r3, [r1, #0]
 800994c:	7810      	ldrb	r0, [r2, #0]
 800994e:	1e43      	subs	r3, r0, #1
 8009950:	4198      	sbcs	r0, r3
 8009952:	b002      	add	sp, #8
 8009954:	4770      	bx	lr
 8009956:	2002      	movs	r0, #2
 8009958:	4240      	negs	r0, r0
 800995a:	e7fa      	b.n	8009952 <__ascii_mbtowc+0x1a>

0800995c <memcpy>:
 800995c:	2300      	movs	r3, #0
 800995e:	b510      	push	{r4, lr}
 8009960:	429a      	cmp	r2, r3
 8009962:	d100      	bne.n	8009966 <memcpy+0xa>
 8009964:	bd10      	pop	{r4, pc}
 8009966:	5ccc      	ldrb	r4, [r1, r3]
 8009968:	54c4      	strb	r4, [r0, r3]
 800996a:	3301      	adds	r3, #1
 800996c:	e7f8      	b.n	8009960 <memcpy+0x4>

0800996e <memset>:
 800996e:	0003      	movs	r3, r0
 8009970:	1812      	adds	r2, r2, r0
 8009972:	4293      	cmp	r3, r2
 8009974:	d100      	bne.n	8009978 <memset+0xa>
 8009976:	4770      	bx	lr
 8009978:	7019      	strb	r1, [r3, #0]
 800997a:	3301      	adds	r3, #1
 800997c:	e7f9      	b.n	8009972 <memset+0x4>
	...

08009980 <_free_r>:
 8009980:	b570      	push	{r4, r5, r6, lr}
 8009982:	0005      	movs	r5, r0
 8009984:	2900      	cmp	r1, #0
 8009986:	d010      	beq.n	80099aa <_free_r+0x2a>
 8009988:	1f0c      	subs	r4, r1, #4
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	da00      	bge.n	8009992 <_free_r+0x12>
 8009990:	18e4      	adds	r4, r4, r3
 8009992:	0028      	movs	r0, r5
 8009994:	f000 f8d9 	bl	8009b4a <__malloc_lock>
 8009998:	4a1d      	ldr	r2, [pc, #116]	; (8009a10 <_free_r+0x90>)
 800999a:	6813      	ldr	r3, [r2, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d105      	bne.n	80099ac <_free_r+0x2c>
 80099a0:	6063      	str	r3, [r4, #4]
 80099a2:	6014      	str	r4, [r2, #0]
 80099a4:	0028      	movs	r0, r5
 80099a6:	f000 f8d1 	bl	8009b4c <__malloc_unlock>
 80099aa:	bd70      	pop	{r4, r5, r6, pc}
 80099ac:	42a3      	cmp	r3, r4
 80099ae:	d909      	bls.n	80099c4 <_free_r+0x44>
 80099b0:	6821      	ldr	r1, [r4, #0]
 80099b2:	1860      	adds	r0, r4, r1
 80099b4:	4283      	cmp	r3, r0
 80099b6:	d1f3      	bne.n	80099a0 <_free_r+0x20>
 80099b8:	6818      	ldr	r0, [r3, #0]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	1841      	adds	r1, r0, r1
 80099be:	6021      	str	r1, [r4, #0]
 80099c0:	e7ee      	b.n	80099a0 <_free_r+0x20>
 80099c2:	0013      	movs	r3, r2
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	2a00      	cmp	r2, #0
 80099c8:	d001      	beq.n	80099ce <_free_r+0x4e>
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	d9f9      	bls.n	80099c2 <_free_r+0x42>
 80099ce:	6819      	ldr	r1, [r3, #0]
 80099d0:	1858      	adds	r0, r3, r1
 80099d2:	42a0      	cmp	r0, r4
 80099d4:	d10b      	bne.n	80099ee <_free_r+0x6e>
 80099d6:	6820      	ldr	r0, [r4, #0]
 80099d8:	1809      	adds	r1, r1, r0
 80099da:	1858      	adds	r0, r3, r1
 80099dc:	6019      	str	r1, [r3, #0]
 80099de:	4282      	cmp	r2, r0
 80099e0:	d1e0      	bne.n	80099a4 <_free_r+0x24>
 80099e2:	6810      	ldr	r0, [r2, #0]
 80099e4:	6852      	ldr	r2, [r2, #4]
 80099e6:	1841      	adds	r1, r0, r1
 80099e8:	6019      	str	r1, [r3, #0]
 80099ea:	605a      	str	r2, [r3, #4]
 80099ec:	e7da      	b.n	80099a4 <_free_r+0x24>
 80099ee:	42a0      	cmp	r0, r4
 80099f0:	d902      	bls.n	80099f8 <_free_r+0x78>
 80099f2:	230c      	movs	r3, #12
 80099f4:	602b      	str	r3, [r5, #0]
 80099f6:	e7d5      	b.n	80099a4 <_free_r+0x24>
 80099f8:	6821      	ldr	r1, [r4, #0]
 80099fa:	1860      	adds	r0, r4, r1
 80099fc:	4282      	cmp	r2, r0
 80099fe:	d103      	bne.n	8009a08 <_free_r+0x88>
 8009a00:	6810      	ldr	r0, [r2, #0]
 8009a02:	6852      	ldr	r2, [r2, #4]
 8009a04:	1841      	adds	r1, r0, r1
 8009a06:	6021      	str	r1, [r4, #0]
 8009a08:	6062      	str	r2, [r4, #4]
 8009a0a:	605c      	str	r4, [r3, #4]
 8009a0c:	e7ca      	b.n	80099a4 <_free_r+0x24>
 8009a0e:	46c0      	nop			; (mov r8, r8)
 8009a10:	2000027c 	.word	0x2000027c

08009a14 <_malloc_r>:
 8009a14:	2303      	movs	r3, #3
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	1ccd      	adds	r5, r1, #3
 8009a1a:	439d      	bics	r5, r3
 8009a1c:	3508      	adds	r5, #8
 8009a1e:	0006      	movs	r6, r0
 8009a20:	2d0c      	cmp	r5, #12
 8009a22:	d21e      	bcs.n	8009a62 <_malloc_r+0x4e>
 8009a24:	250c      	movs	r5, #12
 8009a26:	42a9      	cmp	r1, r5
 8009a28:	d81d      	bhi.n	8009a66 <_malloc_r+0x52>
 8009a2a:	0030      	movs	r0, r6
 8009a2c:	f000 f88d 	bl	8009b4a <__malloc_lock>
 8009a30:	4a25      	ldr	r2, [pc, #148]	; (8009ac8 <_malloc_r+0xb4>)
 8009a32:	6814      	ldr	r4, [r2, #0]
 8009a34:	0021      	movs	r1, r4
 8009a36:	2900      	cmp	r1, #0
 8009a38:	d119      	bne.n	8009a6e <_malloc_r+0x5a>
 8009a3a:	4c24      	ldr	r4, [pc, #144]	; (8009acc <_malloc_r+0xb8>)
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d103      	bne.n	8009a4a <_malloc_r+0x36>
 8009a42:	0030      	movs	r0, r6
 8009a44:	f000 f844 	bl	8009ad0 <_sbrk_r>
 8009a48:	6020      	str	r0, [r4, #0]
 8009a4a:	0029      	movs	r1, r5
 8009a4c:	0030      	movs	r0, r6
 8009a4e:	f000 f83f 	bl	8009ad0 <_sbrk_r>
 8009a52:	1c43      	adds	r3, r0, #1
 8009a54:	d12b      	bne.n	8009aae <_malloc_r+0x9a>
 8009a56:	230c      	movs	r3, #12
 8009a58:	0030      	movs	r0, r6
 8009a5a:	6033      	str	r3, [r6, #0]
 8009a5c:	f000 f876 	bl	8009b4c <__malloc_unlock>
 8009a60:	e003      	b.n	8009a6a <_malloc_r+0x56>
 8009a62:	2d00      	cmp	r5, #0
 8009a64:	dadf      	bge.n	8009a26 <_malloc_r+0x12>
 8009a66:	230c      	movs	r3, #12
 8009a68:	6033      	str	r3, [r6, #0]
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	bd70      	pop	{r4, r5, r6, pc}
 8009a6e:	680b      	ldr	r3, [r1, #0]
 8009a70:	1b5b      	subs	r3, r3, r5
 8009a72:	d419      	bmi.n	8009aa8 <_malloc_r+0x94>
 8009a74:	2b0b      	cmp	r3, #11
 8009a76:	d903      	bls.n	8009a80 <_malloc_r+0x6c>
 8009a78:	600b      	str	r3, [r1, #0]
 8009a7a:	18cc      	adds	r4, r1, r3
 8009a7c:	6025      	str	r5, [r4, #0]
 8009a7e:	e003      	b.n	8009a88 <_malloc_r+0x74>
 8009a80:	684b      	ldr	r3, [r1, #4]
 8009a82:	428c      	cmp	r4, r1
 8009a84:	d10d      	bne.n	8009aa2 <_malloc_r+0x8e>
 8009a86:	6013      	str	r3, [r2, #0]
 8009a88:	0030      	movs	r0, r6
 8009a8a:	f000 f85f 	bl	8009b4c <__malloc_unlock>
 8009a8e:	0020      	movs	r0, r4
 8009a90:	2207      	movs	r2, #7
 8009a92:	300b      	adds	r0, #11
 8009a94:	1d23      	adds	r3, r4, #4
 8009a96:	4390      	bics	r0, r2
 8009a98:	1ac3      	subs	r3, r0, r3
 8009a9a:	d0e7      	beq.n	8009a6c <_malloc_r+0x58>
 8009a9c:	425a      	negs	r2, r3
 8009a9e:	50e2      	str	r2, [r4, r3]
 8009aa0:	e7e4      	b.n	8009a6c <_malloc_r+0x58>
 8009aa2:	6063      	str	r3, [r4, #4]
 8009aa4:	000c      	movs	r4, r1
 8009aa6:	e7ef      	b.n	8009a88 <_malloc_r+0x74>
 8009aa8:	000c      	movs	r4, r1
 8009aaa:	6849      	ldr	r1, [r1, #4]
 8009aac:	e7c3      	b.n	8009a36 <_malloc_r+0x22>
 8009aae:	2303      	movs	r3, #3
 8009ab0:	1cc4      	adds	r4, r0, #3
 8009ab2:	439c      	bics	r4, r3
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d0e1      	beq.n	8009a7c <_malloc_r+0x68>
 8009ab8:	1a21      	subs	r1, r4, r0
 8009aba:	0030      	movs	r0, r6
 8009abc:	f000 f808 	bl	8009ad0 <_sbrk_r>
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	d1db      	bne.n	8009a7c <_malloc_r+0x68>
 8009ac4:	e7c7      	b.n	8009a56 <_malloc_r+0x42>
 8009ac6:	46c0      	nop			; (mov r8, r8)
 8009ac8:	2000027c 	.word	0x2000027c
 8009acc:	20000280 	.word	0x20000280

08009ad0 <_sbrk_r>:
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	4c06      	ldr	r4, [pc, #24]	; (8009af0 <_sbrk_r+0x20>)
 8009ad6:	0005      	movs	r5, r0
 8009ad8:	0008      	movs	r0, r1
 8009ada:	6023      	str	r3, [r4, #0]
 8009adc:	f7fc ffa8 	bl	8006a30 <_sbrk>
 8009ae0:	1c43      	adds	r3, r0, #1
 8009ae2:	d103      	bne.n	8009aec <_sbrk_r+0x1c>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d000      	beq.n	8009aec <_sbrk_r+0x1c>
 8009aea:	602b      	str	r3, [r5, #0]
 8009aec:	bd70      	pop	{r4, r5, r6, pc}
 8009aee:	46c0      	nop			; (mov r8, r8)
 8009af0:	20000550 	.word	0x20000550

08009af4 <strchr>:
 8009af4:	b2c9      	uxtb	r1, r1
 8009af6:	7803      	ldrb	r3, [r0, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <strchr+0x12>
 8009afc:	428b      	cmp	r3, r1
 8009afe:	d100      	bne.n	8009b02 <strchr+0xe>
 8009b00:	4770      	bx	lr
 8009b02:	3001      	adds	r0, #1
 8009b04:	e7f7      	b.n	8009af6 <strchr+0x2>
 8009b06:	424b      	negs	r3, r1
 8009b08:	4159      	adcs	r1, r3
 8009b0a:	4249      	negs	r1, r1
 8009b0c:	4008      	ands	r0, r1
 8009b0e:	e7f7      	b.n	8009b00 <strchr+0xc>

08009b10 <strncmp>:
 8009b10:	2300      	movs	r3, #0
 8009b12:	b530      	push	{r4, r5, lr}
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d00a      	beq.n	8009b2e <strncmp+0x1e>
 8009b18:	3a01      	subs	r2, #1
 8009b1a:	5cc4      	ldrb	r4, [r0, r3]
 8009b1c:	5ccd      	ldrb	r5, [r1, r3]
 8009b1e:	42ac      	cmp	r4, r5
 8009b20:	d104      	bne.n	8009b2c <strncmp+0x1c>
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d002      	beq.n	8009b2c <strncmp+0x1c>
 8009b26:	3301      	adds	r3, #1
 8009b28:	2c00      	cmp	r4, #0
 8009b2a:	d1f6      	bne.n	8009b1a <strncmp+0xa>
 8009b2c:	1b63      	subs	r3, r4, r5
 8009b2e:	0018      	movs	r0, r3
 8009b30:	bd30      	pop	{r4, r5, pc}

08009b32 <__ascii_wctomb>:
 8009b32:	1e0b      	subs	r3, r1, #0
 8009b34:	d004      	beq.n	8009b40 <__ascii_wctomb+0xe>
 8009b36:	2aff      	cmp	r2, #255	; 0xff
 8009b38:	d904      	bls.n	8009b44 <__ascii_wctomb+0x12>
 8009b3a:	238a      	movs	r3, #138	; 0x8a
 8009b3c:	6003      	str	r3, [r0, #0]
 8009b3e:	3b8b      	subs	r3, #139	; 0x8b
 8009b40:	0018      	movs	r0, r3
 8009b42:	4770      	bx	lr
 8009b44:	700a      	strb	r2, [r1, #0]
 8009b46:	2301      	movs	r3, #1
 8009b48:	e7fa      	b.n	8009b40 <__ascii_wctomb+0xe>

08009b4a <__malloc_lock>:
 8009b4a:	4770      	bx	lr

08009b4c <__malloc_unlock>:
 8009b4c:	4770      	bx	lr
	...

08009b50 <_init>:
 8009b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b52:	46c0      	nop			; (mov r8, r8)
 8009b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b56:	bc08      	pop	{r3}
 8009b58:	469e      	mov	lr, r3
 8009b5a:	4770      	bx	lr

08009b5c <_fini>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	46c0      	nop			; (mov r8, r8)
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr
