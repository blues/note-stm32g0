
note-stm32g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b164  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000820  0800b220  0800b220  0001b220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba40  0800ba40  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba40  0800ba40  0001ba40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba48  0800ba48  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba48  0800ba48  0001ba48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba4c  0800ba4c  0001ba4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800ba50  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20000238  0800bc88  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  0800bc88  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016460  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034a7  00000000  00000000  000366c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00039b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  0003af28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017c84  00000000  00000000  0003c1f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010834  00000000  00000000  00053e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d631  00000000  00000000  000646a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f1cd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cac  00000000  00000000  000f1d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000238 	.word	0x20000238
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800b208 	.word	0x0800b208

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000023c 	.word	0x2000023c
 8000100:	0800b208 	.word	0x0800b208

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 fff1 	bl	800140c <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 ff49 	bl	80012cc <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ffe3 	bl	800140c <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffd9 	bl	800140c <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ff6b 	bl	8001344 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff61 	bl	8001344 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_uldivmod>:
 8000490:	2b00      	cmp	r3, #0
 8000492:	d111      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000494:	2a00      	cmp	r2, #0
 8000496:	d10f      	bne.n	80004b8 <__aeabi_uldivmod+0x28>
 8000498:	2900      	cmp	r1, #0
 800049a:	d100      	bne.n	800049e <__aeabi_uldivmod+0xe>
 800049c:	2800      	cmp	r0, #0
 800049e:	d002      	beq.n	80004a6 <__aeabi_uldivmod+0x16>
 80004a0:	2100      	movs	r1, #0
 80004a2:	43c9      	mvns	r1, r1
 80004a4:	1c08      	adds	r0, r1, #0
 80004a6:	b407      	push	{r0, r1, r2}
 80004a8:	4802      	ldr	r0, [pc, #8]	; (80004b4 <__aeabi_uldivmod+0x24>)
 80004aa:	a102      	add	r1, pc, #8	; (adr r1, 80004b4 <__aeabi_uldivmod+0x24>)
 80004ac:	1840      	adds	r0, r0, r1
 80004ae:	9002      	str	r0, [sp, #8]
 80004b0:	bd03      	pop	{r0, r1, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	ffffff5d 	.word	0xffffff5d
 80004b8:	b403      	push	{r0, r1}
 80004ba:	4668      	mov	r0, sp
 80004bc:	b501      	push	{r0, lr}
 80004be:	9802      	ldr	r0, [sp, #8]
 80004c0:	f000 f824 	bl	800050c <__udivmoddi4>
 80004c4:	9b01      	ldr	r3, [sp, #4]
 80004c6:	469e      	mov	lr, r3
 80004c8:	b002      	add	sp, #8
 80004ca:	bc0c      	pop	{r2, r3}
 80004cc:	4770      	bx	lr
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_d2uiz>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	2200      	movs	r2, #0
 80004d4:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <__aeabi_d2uiz+0x38>)
 80004d6:	0004      	movs	r4, r0
 80004d8:	000d      	movs	r5, r1
 80004da:	f7ff ffcf 	bl	800047c <__aeabi_dcmpge>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d104      	bne.n	80004ec <__aeabi_d2uiz+0x1c>
 80004e2:	0020      	movs	r0, r4
 80004e4:	0029      	movs	r1, r5
 80004e6:	f001 fdb3 	bl	8002050 <__aeabi_d2iz>
 80004ea:	bd70      	pop	{r4, r5, r6, pc}
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <__aeabi_d2uiz+0x38>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	0020      	movs	r0, r4
 80004f2:	0029      	movs	r1, r5
 80004f4:	f001 fa64 	bl	80019c0 <__aeabi_dsub>
 80004f8:	f001 fdaa 	bl	8002050 <__aeabi_d2iz>
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	061b      	lsls	r3, r3, #24
 8000500:	469c      	mov	ip, r3
 8000502:	4460      	add	r0, ip
 8000504:	e7f1      	b.n	80004ea <__aeabi_d2uiz+0x1a>
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	41e00000 	.word	0x41e00000

0800050c <__udivmoddi4>:
 800050c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050e:	464f      	mov	r7, r9
 8000510:	4646      	mov	r6, r8
 8000512:	46d6      	mov	lr, sl
 8000514:	b5c0      	push	{r6, r7, lr}
 8000516:	0004      	movs	r4, r0
 8000518:	b082      	sub	sp, #8
 800051a:	000d      	movs	r5, r1
 800051c:	4691      	mov	r9, r2
 800051e:	4698      	mov	r8, r3
 8000520:	428b      	cmp	r3, r1
 8000522:	d82f      	bhi.n	8000584 <__udivmoddi4+0x78>
 8000524:	d02c      	beq.n	8000580 <__udivmoddi4+0x74>
 8000526:	4641      	mov	r1, r8
 8000528:	4648      	mov	r0, r9
 800052a:	f001 fe51 	bl	80021d0 <__clzdi2>
 800052e:	0029      	movs	r1, r5
 8000530:	0006      	movs	r6, r0
 8000532:	0020      	movs	r0, r4
 8000534:	f001 fe4c 	bl	80021d0 <__clzdi2>
 8000538:	1a33      	subs	r3, r6, r0
 800053a:	469c      	mov	ip, r3
 800053c:	3b20      	subs	r3, #32
 800053e:	469a      	mov	sl, r3
 8000540:	d500      	bpl.n	8000544 <__udivmoddi4+0x38>
 8000542:	e076      	b.n	8000632 <__udivmoddi4+0x126>
 8000544:	464b      	mov	r3, r9
 8000546:	4652      	mov	r2, sl
 8000548:	4093      	lsls	r3, r2
 800054a:	001f      	movs	r7, r3
 800054c:	464b      	mov	r3, r9
 800054e:	4662      	mov	r2, ip
 8000550:	4093      	lsls	r3, r2
 8000552:	001e      	movs	r6, r3
 8000554:	42af      	cmp	r7, r5
 8000556:	d828      	bhi.n	80005aa <__udivmoddi4+0x9e>
 8000558:	d025      	beq.n	80005a6 <__udivmoddi4+0x9a>
 800055a:	4653      	mov	r3, sl
 800055c:	1ba4      	subs	r4, r4, r6
 800055e:	41bd      	sbcs	r5, r7
 8000560:	2b00      	cmp	r3, #0
 8000562:	da00      	bge.n	8000566 <__udivmoddi4+0x5a>
 8000564:	e07b      	b.n	800065e <__udivmoddi4+0x152>
 8000566:	2200      	movs	r2, #0
 8000568:	2300      	movs	r3, #0
 800056a:	9200      	str	r2, [sp, #0]
 800056c:	9301      	str	r3, [sp, #4]
 800056e:	2301      	movs	r3, #1
 8000570:	4652      	mov	r2, sl
 8000572:	4093      	lsls	r3, r2
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	2301      	movs	r3, #1
 8000578:	4662      	mov	r2, ip
 800057a:	4093      	lsls	r3, r2
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	e018      	b.n	80005b2 <__udivmoddi4+0xa6>
 8000580:	4282      	cmp	r2, r0
 8000582:	d9d0      	bls.n	8000526 <__udivmoddi4+0x1a>
 8000584:	2200      	movs	r2, #0
 8000586:	2300      	movs	r3, #0
 8000588:	9200      	str	r2, [sp, #0]
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <__udivmoddi4+0x8a>
 8000592:	601c      	str	r4, [r3, #0]
 8000594:	605d      	str	r5, [r3, #4]
 8000596:	9800      	ldr	r0, [sp, #0]
 8000598:	9901      	ldr	r1, [sp, #4]
 800059a:	b002      	add	sp, #8
 800059c:	bc1c      	pop	{r2, r3, r4}
 800059e:	4690      	mov	r8, r2
 80005a0:	4699      	mov	r9, r3
 80005a2:	46a2      	mov	sl, r4
 80005a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005a6:	42a3      	cmp	r3, r4
 80005a8:	d9d7      	bls.n	800055a <__udivmoddi4+0x4e>
 80005aa:	2200      	movs	r2, #0
 80005ac:	2300      	movs	r3, #0
 80005ae:	9200      	str	r2, [sp, #0]
 80005b0:	9301      	str	r3, [sp, #4]
 80005b2:	4663      	mov	r3, ip
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0e9      	beq.n	800058c <__udivmoddi4+0x80>
 80005b8:	07fb      	lsls	r3, r7, #31
 80005ba:	4698      	mov	r8, r3
 80005bc:	4641      	mov	r1, r8
 80005be:	0872      	lsrs	r2, r6, #1
 80005c0:	430a      	orrs	r2, r1
 80005c2:	087b      	lsrs	r3, r7, #1
 80005c4:	4666      	mov	r6, ip
 80005c6:	e00e      	b.n	80005e6 <__udivmoddi4+0xda>
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d101      	bne.n	80005d0 <__udivmoddi4+0xc4>
 80005cc:	42a2      	cmp	r2, r4
 80005ce:	d80c      	bhi.n	80005ea <__udivmoddi4+0xde>
 80005d0:	1aa4      	subs	r4, r4, r2
 80005d2:	419d      	sbcs	r5, r3
 80005d4:	2001      	movs	r0, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2100      	movs	r1, #0
 80005dc:	3e01      	subs	r6, #1
 80005de:	1824      	adds	r4, r4, r0
 80005e0:	414d      	adcs	r5, r1
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d006      	beq.n	80005f4 <__udivmoddi4+0xe8>
 80005e6:	42ab      	cmp	r3, r5
 80005e8:	d9ee      	bls.n	80005c8 <__udivmoddi4+0xbc>
 80005ea:	3e01      	subs	r6, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d1f8      	bne.n	80005e6 <__udivmoddi4+0xda>
 80005f4:	9800      	ldr	r0, [sp, #0]
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	4653      	mov	r3, sl
 80005fa:	1900      	adds	r0, r0, r4
 80005fc:	4169      	adcs	r1, r5
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db23      	blt.n	800064a <__udivmoddi4+0x13e>
 8000602:	002b      	movs	r3, r5
 8000604:	4652      	mov	r2, sl
 8000606:	40d3      	lsrs	r3, r2
 8000608:	002a      	movs	r2, r5
 800060a:	4664      	mov	r4, ip
 800060c:	40e2      	lsrs	r2, r4
 800060e:	001c      	movs	r4, r3
 8000610:	4653      	mov	r3, sl
 8000612:	0015      	movs	r5, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	db2d      	blt.n	8000674 <__udivmoddi4+0x168>
 8000618:	0026      	movs	r6, r4
 800061a:	4657      	mov	r7, sl
 800061c:	40be      	lsls	r6, r7
 800061e:	0033      	movs	r3, r6
 8000620:	0026      	movs	r6, r4
 8000622:	4667      	mov	r7, ip
 8000624:	40be      	lsls	r6, r7
 8000626:	0032      	movs	r2, r6
 8000628:	1a80      	subs	r0, r0, r2
 800062a:	4199      	sbcs	r1, r3
 800062c:	9000      	str	r0, [sp, #0]
 800062e:	9101      	str	r1, [sp, #4]
 8000630:	e7ac      	b.n	800058c <__udivmoddi4+0x80>
 8000632:	4662      	mov	r2, ip
 8000634:	2320      	movs	r3, #32
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	464a      	mov	r2, r9
 800063a:	40da      	lsrs	r2, r3
 800063c:	4661      	mov	r1, ip
 800063e:	0013      	movs	r3, r2
 8000640:	4642      	mov	r2, r8
 8000642:	408a      	lsls	r2, r1
 8000644:	0017      	movs	r7, r2
 8000646:	431f      	orrs	r7, r3
 8000648:	e780      	b.n	800054c <__udivmoddi4+0x40>
 800064a:	4662      	mov	r2, ip
 800064c:	2320      	movs	r3, #32
 800064e:	1a9b      	subs	r3, r3, r2
 8000650:	002a      	movs	r2, r5
 8000652:	4666      	mov	r6, ip
 8000654:	409a      	lsls	r2, r3
 8000656:	0023      	movs	r3, r4
 8000658:	40f3      	lsrs	r3, r6
 800065a:	4313      	orrs	r3, r2
 800065c:	e7d4      	b.n	8000608 <__udivmoddi4+0xfc>
 800065e:	4662      	mov	r2, ip
 8000660:	2320      	movs	r3, #32
 8000662:	2100      	movs	r1, #0
 8000664:	1a9b      	subs	r3, r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	9100      	str	r1, [sp, #0]
 800066a:	9201      	str	r2, [sp, #4]
 800066c:	2201      	movs	r2, #1
 800066e:	40da      	lsrs	r2, r3
 8000670:	9201      	str	r2, [sp, #4]
 8000672:	e780      	b.n	8000576 <__udivmoddi4+0x6a>
 8000674:	2320      	movs	r3, #32
 8000676:	4662      	mov	r2, ip
 8000678:	0026      	movs	r6, r4
 800067a:	1a9b      	subs	r3, r3, r2
 800067c:	40de      	lsrs	r6, r3
 800067e:	002f      	movs	r7, r5
 8000680:	46b0      	mov	r8, r6
 8000682:	4666      	mov	r6, ip
 8000684:	40b7      	lsls	r7, r6
 8000686:	4646      	mov	r6, r8
 8000688:	003b      	movs	r3, r7
 800068a:	4333      	orrs	r3, r6
 800068c:	e7c8      	b.n	8000620 <__udivmoddi4+0x114>
 800068e:	46c0      	nop			; (mov r8, r8)

08000690 <__aeabi_dadd>:
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	464f      	mov	r7, r9
 8000694:	4646      	mov	r6, r8
 8000696:	46d6      	mov	lr, sl
 8000698:	000c      	movs	r4, r1
 800069a:	0309      	lsls	r1, r1, #12
 800069c:	b5c0      	push	{r6, r7, lr}
 800069e:	0a49      	lsrs	r1, r1, #9
 80006a0:	0f47      	lsrs	r7, r0, #29
 80006a2:	005e      	lsls	r6, r3, #1
 80006a4:	4339      	orrs	r1, r7
 80006a6:	031f      	lsls	r7, r3, #12
 80006a8:	0fdb      	lsrs	r3, r3, #31
 80006aa:	469c      	mov	ip, r3
 80006ac:	0065      	lsls	r5, r4, #1
 80006ae:	0a7b      	lsrs	r3, r7, #9
 80006b0:	0f57      	lsrs	r7, r2, #29
 80006b2:	431f      	orrs	r7, r3
 80006b4:	0d6d      	lsrs	r5, r5, #21
 80006b6:	0fe4      	lsrs	r4, r4, #31
 80006b8:	0d76      	lsrs	r6, r6, #21
 80006ba:	46a1      	mov	r9, r4
 80006bc:	00c0      	lsls	r0, r0, #3
 80006be:	46b8      	mov	r8, r7
 80006c0:	00d2      	lsls	r2, r2, #3
 80006c2:	1bab      	subs	r3, r5, r6
 80006c4:	4564      	cmp	r4, ip
 80006c6:	d07b      	beq.n	80007c0 <__aeabi_dadd+0x130>
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	dd5f      	ble.n	800078c <__aeabi_dadd+0xfc>
 80006cc:	2e00      	cmp	r6, #0
 80006ce:	d000      	beq.n	80006d2 <__aeabi_dadd+0x42>
 80006d0:	e0a4      	b.n	800081c <__aeabi_dadd+0x18c>
 80006d2:	003e      	movs	r6, r7
 80006d4:	4316      	orrs	r6, r2
 80006d6:	d100      	bne.n	80006da <__aeabi_dadd+0x4a>
 80006d8:	e112      	b.n	8000900 <__aeabi_dadd+0x270>
 80006da:	1e5e      	subs	r6, r3, #1
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x52>
 80006e0:	e19e      	b.n	8000a20 <__aeabi_dadd+0x390>
 80006e2:	1a87      	subs	r7, r0, r2
 80006e4:	4643      	mov	r3, r8
 80006e6:	42b8      	cmp	r0, r7
 80006e8:	4180      	sbcs	r0, r0
 80006ea:	2501      	movs	r5, #1
 80006ec:	1ac9      	subs	r1, r1, r3
 80006ee:	4240      	negs	r0, r0
 80006f0:	1a09      	subs	r1, r1, r0
 80006f2:	020b      	lsls	r3, r1, #8
 80006f4:	d400      	bmi.n	80006f8 <__aeabi_dadd+0x68>
 80006f6:	e131      	b.n	800095c <__aeabi_dadd+0x2cc>
 80006f8:	0249      	lsls	r1, r1, #9
 80006fa:	0a4e      	lsrs	r6, r1, #9
 80006fc:	2e00      	cmp	r6, #0
 80006fe:	d100      	bne.n	8000702 <__aeabi_dadd+0x72>
 8000700:	e16e      	b.n	80009e0 <__aeabi_dadd+0x350>
 8000702:	0030      	movs	r0, r6
 8000704:	f001 fd46 	bl	8002194 <__clzsi2>
 8000708:	0003      	movs	r3, r0
 800070a:	3b08      	subs	r3, #8
 800070c:	2b1f      	cmp	r3, #31
 800070e:	dd00      	ble.n	8000712 <__aeabi_dadd+0x82>
 8000710:	e161      	b.n	80009d6 <__aeabi_dadd+0x346>
 8000712:	2220      	movs	r2, #32
 8000714:	0039      	movs	r1, r7
 8000716:	1ad2      	subs	r2, r2, r3
 8000718:	409e      	lsls	r6, r3
 800071a:	40d1      	lsrs	r1, r2
 800071c:	409f      	lsls	r7, r3
 800071e:	430e      	orrs	r6, r1
 8000720:	429d      	cmp	r5, r3
 8000722:	dd00      	ble.n	8000726 <__aeabi_dadd+0x96>
 8000724:	e151      	b.n	80009ca <__aeabi_dadd+0x33a>
 8000726:	1b5d      	subs	r5, r3, r5
 8000728:	1c6b      	adds	r3, r5, #1
 800072a:	2b1f      	cmp	r3, #31
 800072c:	dd00      	ble.n	8000730 <__aeabi_dadd+0xa0>
 800072e:	e17c      	b.n	8000a2a <__aeabi_dadd+0x39a>
 8000730:	2120      	movs	r1, #32
 8000732:	1ac9      	subs	r1, r1, r3
 8000734:	003d      	movs	r5, r7
 8000736:	0030      	movs	r0, r6
 8000738:	408f      	lsls	r7, r1
 800073a:	4088      	lsls	r0, r1
 800073c:	40dd      	lsrs	r5, r3
 800073e:	1e79      	subs	r1, r7, #1
 8000740:	418f      	sbcs	r7, r1
 8000742:	0031      	movs	r1, r6
 8000744:	2207      	movs	r2, #7
 8000746:	4328      	orrs	r0, r5
 8000748:	40d9      	lsrs	r1, r3
 800074a:	2500      	movs	r5, #0
 800074c:	4307      	orrs	r7, r0
 800074e:	403a      	ands	r2, r7
 8000750:	2a00      	cmp	r2, #0
 8000752:	d009      	beq.n	8000768 <__aeabi_dadd+0xd8>
 8000754:	230f      	movs	r3, #15
 8000756:	403b      	ands	r3, r7
 8000758:	2b04      	cmp	r3, #4
 800075a:	d005      	beq.n	8000768 <__aeabi_dadd+0xd8>
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	42bb      	cmp	r3, r7
 8000760:	41bf      	sbcs	r7, r7
 8000762:	427f      	negs	r7, r7
 8000764:	19c9      	adds	r1, r1, r7
 8000766:	001f      	movs	r7, r3
 8000768:	020b      	lsls	r3, r1, #8
 800076a:	d400      	bmi.n	800076e <__aeabi_dadd+0xde>
 800076c:	e226      	b.n	8000bbc <__aeabi_dadd+0x52c>
 800076e:	1c6a      	adds	r2, r5, #1
 8000770:	4bc6      	ldr	r3, [pc, #792]	; (8000a8c <__aeabi_dadd+0x3fc>)
 8000772:	0555      	lsls	r5, r2, #21
 8000774:	0d6d      	lsrs	r5, r5, #21
 8000776:	429a      	cmp	r2, r3
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0xec>
 800077a:	e106      	b.n	800098a <__aeabi_dadd+0x2fa>
 800077c:	4ac4      	ldr	r2, [pc, #784]	; (8000a90 <__aeabi_dadd+0x400>)
 800077e:	08ff      	lsrs	r7, r7, #3
 8000780:	400a      	ands	r2, r1
 8000782:	0753      	lsls	r3, r2, #29
 8000784:	0252      	lsls	r2, r2, #9
 8000786:	433b      	orrs	r3, r7
 8000788:	0b12      	lsrs	r2, r2, #12
 800078a:	e08e      	b.n	80008aa <__aeabi_dadd+0x21a>
 800078c:	2b00      	cmp	r3, #0
 800078e:	d000      	beq.n	8000792 <__aeabi_dadd+0x102>
 8000790:	e0b8      	b.n	8000904 <__aeabi_dadd+0x274>
 8000792:	1c6b      	adds	r3, r5, #1
 8000794:	055b      	lsls	r3, r3, #21
 8000796:	0d5b      	lsrs	r3, r3, #21
 8000798:	2b01      	cmp	r3, #1
 800079a:	dc00      	bgt.n	800079e <__aeabi_dadd+0x10e>
 800079c:	e130      	b.n	8000a00 <__aeabi_dadd+0x370>
 800079e:	1a87      	subs	r7, r0, r2
 80007a0:	4643      	mov	r3, r8
 80007a2:	42b8      	cmp	r0, r7
 80007a4:	41b6      	sbcs	r6, r6
 80007a6:	1acb      	subs	r3, r1, r3
 80007a8:	4276      	negs	r6, r6
 80007aa:	1b9e      	subs	r6, r3, r6
 80007ac:	0233      	lsls	r3, r6, #8
 80007ae:	d500      	bpl.n	80007b2 <__aeabi_dadd+0x122>
 80007b0:	e14c      	b.n	8000a4c <__aeabi_dadd+0x3bc>
 80007b2:	003b      	movs	r3, r7
 80007b4:	4333      	orrs	r3, r6
 80007b6:	d1a1      	bne.n	80006fc <__aeabi_dadd+0x6c>
 80007b8:	2200      	movs	r2, #0
 80007ba:	2400      	movs	r4, #0
 80007bc:	2500      	movs	r5, #0
 80007be:	e070      	b.n	80008a2 <__aeabi_dadd+0x212>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dc00      	bgt.n	80007c6 <__aeabi_dadd+0x136>
 80007c4:	e0e5      	b.n	8000992 <__aeabi_dadd+0x302>
 80007c6:	2e00      	cmp	r6, #0
 80007c8:	d100      	bne.n	80007cc <__aeabi_dadd+0x13c>
 80007ca:	e083      	b.n	80008d4 <__aeabi_dadd+0x244>
 80007cc:	4eaf      	ldr	r6, [pc, #700]	; (8000a8c <__aeabi_dadd+0x3fc>)
 80007ce:	42b5      	cmp	r5, r6
 80007d0:	d060      	beq.n	8000894 <__aeabi_dadd+0x204>
 80007d2:	2680      	movs	r6, #128	; 0x80
 80007d4:	0436      	lsls	r6, r6, #16
 80007d6:	4337      	orrs	r7, r6
 80007d8:	46b8      	mov	r8, r7
 80007da:	2b38      	cmp	r3, #56	; 0x38
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_dadd+0x150>
 80007de:	e13e      	b.n	8000a5e <__aeabi_dadd+0x3ce>
 80007e0:	4643      	mov	r3, r8
 80007e2:	4313      	orrs	r3, r2
 80007e4:	001f      	movs	r7, r3
 80007e6:	1e7a      	subs	r2, r7, #1
 80007e8:	4197      	sbcs	r7, r2
 80007ea:	183f      	adds	r7, r7, r0
 80007ec:	4287      	cmp	r7, r0
 80007ee:	4180      	sbcs	r0, r0
 80007f0:	4240      	negs	r0, r0
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	020b      	lsls	r3, r1, #8
 80007f6:	d400      	bmi.n	80007fa <__aeabi_dadd+0x16a>
 80007f8:	e0b0      	b.n	800095c <__aeabi_dadd+0x2cc>
 80007fa:	4ba4      	ldr	r3, [pc, #656]	; (8000a8c <__aeabi_dadd+0x3fc>)
 80007fc:	3501      	adds	r5, #1
 80007fe:	429d      	cmp	r5, r3
 8000800:	d100      	bne.n	8000804 <__aeabi_dadd+0x174>
 8000802:	e0c3      	b.n	800098c <__aeabi_dadd+0x2fc>
 8000804:	4aa2      	ldr	r2, [pc, #648]	; (8000a90 <__aeabi_dadd+0x400>)
 8000806:	087b      	lsrs	r3, r7, #1
 8000808:	400a      	ands	r2, r1
 800080a:	2101      	movs	r1, #1
 800080c:	400f      	ands	r7, r1
 800080e:	431f      	orrs	r7, r3
 8000810:	0851      	lsrs	r1, r2, #1
 8000812:	07d3      	lsls	r3, r2, #31
 8000814:	2207      	movs	r2, #7
 8000816:	431f      	orrs	r7, r3
 8000818:	403a      	ands	r2, r7
 800081a:	e799      	b.n	8000750 <__aeabi_dadd+0xc0>
 800081c:	4e9b      	ldr	r6, [pc, #620]	; (8000a8c <__aeabi_dadd+0x3fc>)
 800081e:	42b5      	cmp	r5, r6
 8000820:	d038      	beq.n	8000894 <__aeabi_dadd+0x204>
 8000822:	2680      	movs	r6, #128	; 0x80
 8000824:	0436      	lsls	r6, r6, #16
 8000826:	4337      	orrs	r7, r6
 8000828:	46b8      	mov	r8, r7
 800082a:	2b38      	cmp	r3, #56	; 0x38
 800082c:	dd00      	ble.n	8000830 <__aeabi_dadd+0x1a0>
 800082e:	e0dc      	b.n	80009ea <__aeabi_dadd+0x35a>
 8000830:	2b1f      	cmp	r3, #31
 8000832:	dc00      	bgt.n	8000836 <__aeabi_dadd+0x1a6>
 8000834:	e130      	b.n	8000a98 <__aeabi_dadd+0x408>
 8000836:	001e      	movs	r6, r3
 8000838:	4647      	mov	r7, r8
 800083a:	3e20      	subs	r6, #32
 800083c:	40f7      	lsrs	r7, r6
 800083e:	46bc      	mov	ip, r7
 8000840:	2b20      	cmp	r3, #32
 8000842:	d004      	beq.n	800084e <__aeabi_dadd+0x1be>
 8000844:	2640      	movs	r6, #64	; 0x40
 8000846:	1af3      	subs	r3, r6, r3
 8000848:	4646      	mov	r6, r8
 800084a:	409e      	lsls	r6, r3
 800084c:	4332      	orrs	r2, r6
 800084e:	0017      	movs	r7, r2
 8000850:	4663      	mov	r3, ip
 8000852:	1e7a      	subs	r2, r7, #1
 8000854:	4197      	sbcs	r7, r2
 8000856:	431f      	orrs	r7, r3
 8000858:	e0cc      	b.n	80009f4 <__aeabi_dadd+0x364>
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <__aeabi_dadd+0x1d0>
 800085e:	e204      	b.n	8000c6a <__aeabi_dadd+0x5da>
 8000860:	4643      	mov	r3, r8
 8000862:	4313      	orrs	r3, r2
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x1d8>
 8000866:	e159      	b.n	8000b1c <__aeabi_dadd+0x48c>
 8000868:	074b      	lsls	r3, r1, #29
 800086a:	08c0      	lsrs	r0, r0, #3
 800086c:	4318      	orrs	r0, r3
 800086e:	2380      	movs	r3, #128	; 0x80
 8000870:	08c9      	lsrs	r1, r1, #3
 8000872:	031b      	lsls	r3, r3, #12
 8000874:	4219      	tst	r1, r3
 8000876:	d008      	beq.n	800088a <__aeabi_dadd+0x1fa>
 8000878:	4645      	mov	r5, r8
 800087a:	08ed      	lsrs	r5, r5, #3
 800087c:	421d      	tst	r5, r3
 800087e:	d104      	bne.n	800088a <__aeabi_dadd+0x1fa>
 8000880:	4643      	mov	r3, r8
 8000882:	08d0      	lsrs	r0, r2, #3
 8000884:	0759      	lsls	r1, r3, #29
 8000886:	4308      	orrs	r0, r1
 8000888:	0029      	movs	r1, r5
 800088a:	0f42      	lsrs	r2, r0, #29
 800088c:	00c9      	lsls	r1, r1, #3
 800088e:	4d7f      	ldr	r5, [pc, #508]	; (8000a8c <__aeabi_dadd+0x3fc>)
 8000890:	4311      	orrs	r1, r2
 8000892:	00c0      	lsls	r0, r0, #3
 8000894:	074b      	lsls	r3, r1, #29
 8000896:	08ca      	lsrs	r2, r1, #3
 8000898:	497c      	ldr	r1, [pc, #496]	; (8000a8c <__aeabi_dadd+0x3fc>)
 800089a:	08c0      	lsrs	r0, r0, #3
 800089c:	4303      	orrs	r3, r0
 800089e:	428d      	cmp	r5, r1
 80008a0:	d068      	beq.n	8000974 <__aeabi_dadd+0x2e4>
 80008a2:	0312      	lsls	r2, r2, #12
 80008a4:	056d      	lsls	r5, r5, #21
 80008a6:	0b12      	lsrs	r2, r2, #12
 80008a8:	0d6d      	lsrs	r5, r5, #21
 80008aa:	2100      	movs	r1, #0
 80008ac:	0312      	lsls	r2, r2, #12
 80008ae:	0018      	movs	r0, r3
 80008b0:	0b13      	lsrs	r3, r2, #12
 80008b2:	0d0a      	lsrs	r2, r1, #20
 80008b4:	0512      	lsls	r2, r2, #20
 80008b6:	431a      	orrs	r2, r3
 80008b8:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <__aeabi_dadd+0x404>)
 80008ba:	052d      	lsls	r5, r5, #20
 80008bc:	4013      	ands	r3, r2
 80008be:	432b      	orrs	r3, r5
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	07e4      	lsls	r4, r4, #31
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	4323      	orrs	r3, r4
 80008c8:	0019      	movs	r1, r3
 80008ca:	bc1c      	pop	{r2, r3, r4}
 80008cc:	4690      	mov	r8, r2
 80008ce:	4699      	mov	r9, r3
 80008d0:	46a2      	mov	sl, r4
 80008d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008d4:	003e      	movs	r6, r7
 80008d6:	4316      	orrs	r6, r2
 80008d8:	d012      	beq.n	8000900 <__aeabi_dadd+0x270>
 80008da:	1e5e      	subs	r6, r3, #1
 80008dc:	2e00      	cmp	r6, #0
 80008de:	d000      	beq.n	80008e2 <__aeabi_dadd+0x252>
 80008e0:	e100      	b.n	8000ae4 <__aeabi_dadd+0x454>
 80008e2:	1887      	adds	r7, r0, r2
 80008e4:	4287      	cmp	r7, r0
 80008e6:	4180      	sbcs	r0, r0
 80008e8:	4441      	add	r1, r8
 80008ea:	4240      	negs	r0, r0
 80008ec:	1809      	adds	r1, r1, r0
 80008ee:	2501      	movs	r5, #1
 80008f0:	020b      	lsls	r3, r1, #8
 80008f2:	d533      	bpl.n	800095c <__aeabi_dadd+0x2cc>
 80008f4:	2502      	movs	r5, #2
 80008f6:	e785      	b.n	8000804 <__aeabi_dadd+0x174>
 80008f8:	4664      	mov	r4, ip
 80008fa:	0033      	movs	r3, r6
 80008fc:	4641      	mov	r1, r8
 80008fe:	0010      	movs	r0, r2
 8000900:	001d      	movs	r5, r3
 8000902:	e7c7      	b.n	8000894 <__aeabi_dadd+0x204>
 8000904:	2d00      	cmp	r5, #0
 8000906:	d000      	beq.n	800090a <__aeabi_dadd+0x27a>
 8000908:	e0da      	b.n	8000ac0 <__aeabi_dadd+0x430>
 800090a:	000c      	movs	r4, r1
 800090c:	4304      	orrs	r4, r0
 800090e:	d0f3      	beq.n	80008f8 <__aeabi_dadd+0x268>
 8000910:	1c5c      	adds	r4, r3, #1
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x286>
 8000914:	e19f      	b.n	8000c56 <__aeabi_dadd+0x5c6>
 8000916:	4c5d      	ldr	r4, [pc, #372]	; (8000a8c <__aeabi_dadd+0x3fc>)
 8000918:	42a6      	cmp	r6, r4
 800091a:	d100      	bne.n	800091e <__aeabi_dadd+0x28e>
 800091c:	e12f      	b.n	8000b7e <__aeabi_dadd+0x4ee>
 800091e:	43db      	mvns	r3, r3
 8000920:	2b38      	cmp	r3, #56	; 0x38
 8000922:	dd00      	ble.n	8000926 <__aeabi_dadd+0x296>
 8000924:	e166      	b.n	8000bf4 <__aeabi_dadd+0x564>
 8000926:	2b1f      	cmp	r3, #31
 8000928:	dd00      	ble.n	800092c <__aeabi_dadd+0x29c>
 800092a:	e183      	b.n	8000c34 <__aeabi_dadd+0x5a4>
 800092c:	2420      	movs	r4, #32
 800092e:	0005      	movs	r5, r0
 8000930:	1ae4      	subs	r4, r4, r3
 8000932:	000f      	movs	r7, r1
 8000934:	40dd      	lsrs	r5, r3
 8000936:	40d9      	lsrs	r1, r3
 8000938:	40a0      	lsls	r0, r4
 800093a:	4643      	mov	r3, r8
 800093c:	40a7      	lsls	r7, r4
 800093e:	1a5b      	subs	r3, r3, r1
 8000940:	1e44      	subs	r4, r0, #1
 8000942:	41a0      	sbcs	r0, r4
 8000944:	4698      	mov	r8, r3
 8000946:	432f      	orrs	r7, r5
 8000948:	4338      	orrs	r0, r7
 800094a:	1a17      	subs	r7, r2, r0
 800094c:	42ba      	cmp	r2, r7
 800094e:	4192      	sbcs	r2, r2
 8000950:	4643      	mov	r3, r8
 8000952:	4252      	negs	r2, r2
 8000954:	1a99      	subs	r1, r3, r2
 8000956:	4664      	mov	r4, ip
 8000958:	0035      	movs	r5, r6
 800095a:	e6ca      	b.n	80006f2 <__aeabi_dadd+0x62>
 800095c:	2207      	movs	r2, #7
 800095e:	403a      	ands	r2, r7
 8000960:	2a00      	cmp	r2, #0
 8000962:	d000      	beq.n	8000966 <__aeabi_dadd+0x2d6>
 8000964:	e6f6      	b.n	8000754 <__aeabi_dadd+0xc4>
 8000966:	074b      	lsls	r3, r1, #29
 8000968:	08ca      	lsrs	r2, r1, #3
 800096a:	4948      	ldr	r1, [pc, #288]	; (8000a8c <__aeabi_dadd+0x3fc>)
 800096c:	08ff      	lsrs	r7, r7, #3
 800096e:	433b      	orrs	r3, r7
 8000970:	428d      	cmp	r5, r1
 8000972:	d196      	bne.n	80008a2 <__aeabi_dadd+0x212>
 8000974:	0019      	movs	r1, r3
 8000976:	4311      	orrs	r1, r2
 8000978:	d100      	bne.n	800097c <__aeabi_dadd+0x2ec>
 800097a:	e19e      	b.n	8000cba <__aeabi_dadd+0x62a>
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0309      	lsls	r1, r1, #12
 8000980:	430a      	orrs	r2, r1
 8000982:	0312      	lsls	r2, r2, #12
 8000984:	0b12      	lsrs	r2, r2, #12
 8000986:	4d41      	ldr	r5, [pc, #260]	; (8000a8c <__aeabi_dadd+0x3fc>)
 8000988:	e78f      	b.n	80008aa <__aeabi_dadd+0x21a>
 800098a:	0015      	movs	r5, r2
 800098c:	2200      	movs	r2, #0
 800098e:	2300      	movs	r3, #0
 8000990:	e78b      	b.n	80008aa <__aeabi_dadd+0x21a>
 8000992:	2b00      	cmp	r3, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x308>
 8000996:	e0c7      	b.n	8000b28 <__aeabi_dadd+0x498>
 8000998:	1c6b      	adds	r3, r5, #1
 800099a:	055f      	lsls	r7, r3, #21
 800099c:	0d7f      	lsrs	r7, r7, #21
 800099e:	2f01      	cmp	r7, #1
 80009a0:	dc00      	bgt.n	80009a4 <__aeabi_dadd+0x314>
 80009a2:	e0f1      	b.n	8000b88 <__aeabi_dadd+0x4f8>
 80009a4:	4d39      	ldr	r5, [pc, #228]	; (8000a8c <__aeabi_dadd+0x3fc>)
 80009a6:	42ab      	cmp	r3, r5
 80009a8:	d100      	bne.n	80009ac <__aeabi_dadd+0x31c>
 80009aa:	e0b9      	b.n	8000b20 <__aeabi_dadd+0x490>
 80009ac:	1885      	adds	r5, r0, r2
 80009ae:	000a      	movs	r2, r1
 80009b0:	4285      	cmp	r5, r0
 80009b2:	4189      	sbcs	r1, r1
 80009b4:	4442      	add	r2, r8
 80009b6:	4249      	negs	r1, r1
 80009b8:	1851      	adds	r1, r2, r1
 80009ba:	2207      	movs	r2, #7
 80009bc:	07cf      	lsls	r7, r1, #31
 80009be:	086d      	lsrs	r5, r5, #1
 80009c0:	432f      	orrs	r7, r5
 80009c2:	0849      	lsrs	r1, r1, #1
 80009c4:	403a      	ands	r2, r7
 80009c6:	001d      	movs	r5, r3
 80009c8:	e6c2      	b.n	8000750 <__aeabi_dadd+0xc0>
 80009ca:	2207      	movs	r2, #7
 80009cc:	4930      	ldr	r1, [pc, #192]	; (8000a90 <__aeabi_dadd+0x400>)
 80009ce:	1aed      	subs	r5, r5, r3
 80009d0:	4031      	ands	r1, r6
 80009d2:	403a      	ands	r2, r7
 80009d4:	e6bc      	b.n	8000750 <__aeabi_dadd+0xc0>
 80009d6:	003e      	movs	r6, r7
 80009d8:	3828      	subs	r0, #40	; 0x28
 80009da:	4086      	lsls	r6, r0
 80009dc:	2700      	movs	r7, #0
 80009de:	e69f      	b.n	8000720 <__aeabi_dadd+0x90>
 80009e0:	0038      	movs	r0, r7
 80009e2:	f001 fbd7 	bl	8002194 <__clzsi2>
 80009e6:	3020      	adds	r0, #32
 80009e8:	e68e      	b.n	8000708 <__aeabi_dadd+0x78>
 80009ea:	4643      	mov	r3, r8
 80009ec:	4313      	orrs	r3, r2
 80009ee:	001f      	movs	r7, r3
 80009f0:	1e7a      	subs	r2, r7, #1
 80009f2:	4197      	sbcs	r7, r2
 80009f4:	1bc7      	subs	r7, r0, r7
 80009f6:	42b8      	cmp	r0, r7
 80009f8:	4180      	sbcs	r0, r0
 80009fa:	4240      	negs	r0, r0
 80009fc:	1a09      	subs	r1, r1, r0
 80009fe:	e678      	b.n	80006f2 <__aeabi_dadd+0x62>
 8000a00:	000e      	movs	r6, r1
 8000a02:	003b      	movs	r3, r7
 8000a04:	4306      	orrs	r6, r0
 8000a06:	4313      	orrs	r3, r2
 8000a08:	2d00      	cmp	r5, #0
 8000a0a:	d161      	bne.n	8000ad0 <__aeabi_dadd+0x440>
 8000a0c:	2e00      	cmp	r6, #0
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x382>
 8000a10:	e0f4      	b.n	8000bfc <__aeabi_dadd+0x56c>
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dadd+0x388>
 8000a16:	e11b      	b.n	8000c50 <__aeabi_dadd+0x5c0>
 8000a18:	4664      	mov	r4, ip
 8000a1a:	0039      	movs	r1, r7
 8000a1c:	0010      	movs	r0, r2
 8000a1e:	e739      	b.n	8000894 <__aeabi_dadd+0x204>
 8000a20:	4f1a      	ldr	r7, [pc, #104]	; (8000a8c <__aeabi_dadd+0x3fc>)
 8000a22:	42bb      	cmp	r3, r7
 8000a24:	d07a      	beq.n	8000b1c <__aeabi_dadd+0x48c>
 8000a26:	0033      	movs	r3, r6
 8000a28:	e6ff      	b.n	800082a <__aeabi_dadd+0x19a>
 8000a2a:	0030      	movs	r0, r6
 8000a2c:	3d1f      	subs	r5, #31
 8000a2e:	40e8      	lsrs	r0, r5
 8000a30:	2b20      	cmp	r3, #32
 8000a32:	d003      	beq.n	8000a3c <__aeabi_dadd+0x3ac>
 8000a34:	2140      	movs	r1, #64	; 0x40
 8000a36:	1acb      	subs	r3, r1, r3
 8000a38:	409e      	lsls	r6, r3
 8000a3a:	4337      	orrs	r7, r6
 8000a3c:	1e7b      	subs	r3, r7, #1
 8000a3e:	419f      	sbcs	r7, r3
 8000a40:	2207      	movs	r2, #7
 8000a42:	4307      	orrs	r7, r0
 8000a44:	403a      	ands	r2, r7
 8000a46:	2100      	movs	r1, #0
 8000a48:	2500      	movs	r5, #0
 8000a4a:	e789      	b.n	8000960 <__aeabi_dadd+0x2d0>
 8000a4c:	1a17      	subs	r7, r2, r0
 8000a4e:	4643      	mov	r3, r8
 8000a50:	42ba      	cmp	r2, r7
 8000a52:	41b6      	sbcs	r6, r6
 8000a54:	1a59      	subs	r1, r3, r1
 8000a56:	4276      	negs	r6, r6
 8000a58:	1b8e      	subs	r6, r1, r6
 8000a5a:	4664      	mov	r4, ip
 8000a5c:	e64e      	b.n	80006fc <__aeabi_dadd+0x6c>
 8000a5e:	2b1f      	cmp	r3, #31
 8000a60:	dd00      	ble.n	8000a64 <__aeabi_dadd+0x3d4>
 8000a62:	e0ad      	b.n	8000bc0 <__aeabi_dadd+0x530>
 8000a64:	2620      	movs	r6, #32
 8000a66:	4647      	mov	r7, r8
 8000a68:	1af6      	subs	r6, r6, r3
 8000a6a:	40b7      	lsls	r7, r6
 8000a6c:	46b9      	mov	r9, r7
 8000a6e:	0017      	movs	r7, r2
 8000a70:	46b2      	mov	sl, r6
 8000a72:	40df      	lsrs	r7, r3
 8000a74:	464e      	mov	r6, r9
 8000a76:	433e      	orrs	r6, r7
 8000a78:	0037      	movs	r7, r6
 8000a7a:	4656      	mov	r6, sl
 8000a7c:	40b2      	lsls	r2, r6
 8000a7e:	1e56      	subs	r6, r2, #1
 8000a80:	41b2      	sbcs	r2, r6
 8000a82:	4317      	orrs	r7, r2
 8000a84:	4642      	mov	r2, r8
 8000a86:	40da      	lsrs	r2, r3
 8000a88:	1889      	adds	r1, r1, r2
 8000a8a:	e6ae      	b.n	80007ea <__aeabi_dadd+0x15a>
 8000a8c:	000007ff 	.word	0x000007ff
 8000a90:	ff7fffff 	.word	0xff7fffff
 8000a94:	800fffff 	.word	0x800fffff
 8000a98:	2620      	movs	r6, #32
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	1af6      	subs	r6, r6, r3
 8000a9e:	40b7      	lsls	r7, r6
 8000aa0:	46b9      	mov	r9, r7
 8000aa2:	0017      	movs	r7, r2
 8000aa4:	46b2      	mov	sl, r6
 8000aa6:	40df      	lsrs	r7, r3
 8000aa8:	464e      	mov	r6, r9
 8000aaa:	433e      	orrs	r6, r7
 8000aac:	0037      	movs	r7, r6
 8000aae:	4656      	mov	r6, sl
 8000ab0:	40b2      	lsls	r2, r6
 8000ab2:	1e56      	subs	r6, r2, #1
 8000ab4:	41b2      	sbcs	r2, r6
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	4642      	mov	r2, r8
 8000aba:	40da      	lsrs	r2, r3
 8000abc:	1a89      	subs	r1, r1, r2
 8000abe:	e799      	b.n	80009f4 <__aeabi_dadd+0x364>
 8000ac0:	4c7f      	ldr	r4, [pc, #508]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000ac2:	42a6      	cmp	r6, r4
 8000ac4:	d05b      	beq.n	8000b7e <__aeabi_dadd+0x4ee>
 8000ac6:	2480      	movs	r4, #128	; 0x80
 8000ac8:	0424      	lsls	r4, r4, #16
 8000aca:	425b      	negs	r3, r3
 8000acc:	4321      	orrs	r1, r4
 8000ace:	e727      	b.n	8000920 <__aeabi_dadd+0x290>
 8000ad0:	2e00      	cmp	r6, #0
 8000ad2:	d10c      	bne.n	8000aee <__aeabi_dadd+0x45e>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dadd+0x44a>
 8000ad8:	e0cb      	b.n	8000c72 <__aeabi_dadd+0x5e2>
 8000ada:	4664      	mov	r4, ip
 8000adc:	0039      	movs	r1, r7
 8000ade:	0010      	movs	r0, r2
 8000ae0:	4d77      	ldr	r5, [pc, #476]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000ae2:	e6d7      	b.n	8000894 <__aeabi_dadd+0x204>
 8000ae4:	4f76      	ldr	r7, [pc, #472]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000ae6:	42bb      	cmp	r3, r7
 8000ae8:	d018      	beq.n	8000b1c <__aeabi_dadd+0x48c>
 8000aea:	0033      	movs	r3, r6
 8000aec:	e675      	b.n	80007da <__aeabi_dadd+0x14a>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d014      	beq.n	8000b1c <__aeabi_dadd+0x48c>
 8000af2:	074b      	lsls	r3, r1, #29
 8000af4:	08c0      	lsrs	r0, r0, #3
 8000af6:	4318      	orrs	r0, r3
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	08c9      	lsrs	r1, r1, #3
 8000afc:	031b      	lsls	r3, r3, #12
 8000afe:	4219      	tst	r1, r3
 8000b00:	d007      	beq.n	8000b12 <__aeabi_dadd+0x482>
 8000b02:	08fc      	lsrs	r4, r7, #3
 8000b04:	421c      	tst	r4, r3
 8000b06:	d104      	bne.n	8000b12 <__aeabi_dadd+0x482>
 8000b08:	0779      	lsls	r1, r7, #29
 8000b0a:	08d0      	lsrs	r0, r2, #3
 8000b0c:	4308      	orrs	r0, r1
 8000b0e:	46e1      	mov	r9, ip
 8000b10:	0021      	movs	r1, r4
 8000b12:	464c      	mov	r4, r9
 8000b14:	0f42      	lsrs	r2, r0, #29
 8000b16:	00c9      	lsls	r1, r1, #3
 8000b18:	4311      	orrs	r1, r2
 8000b1a:	00c0      	lsls	r0, r0, #3
 8000b1c:	4d68      	ldr	r5, [pc, #416]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000b1e:	e6b9      	b.n	8000894 <__aeabi_dadd+0x204>
 8000b20:	001d      	movs	r5, r3
 8000b22:	2200      	movs	r2, #0
 8000b24:	2300      	movs	r3, #0
 8000b26:	e6c0      	b.n	80008aa <__aeabi_dadd+0x21a>
 8000b28:	2d00      	cmp	r5, #0
 8000b2a:	d15b      	bne.n	8000be4 <__aeabi_dadd+0x554>
 8000b2c:	000d      	movs	r5, r1
 8000b2e:	4305      	orrs	r5, r0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x4a4>
 8000b32:	e6e2      	b.n	80008fa <__aeabi_dadd+0x26a>
 8000b34:	1c5d      	adds	r5, r3, #1
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x4aa>
 8000b38:	e0b0      	b.n	8000c9c <__aeabi_dadd+0x60c>
 8000b3a:	4d61      	ldr	r5, [pc, #388]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000b3c:	42ae      	cmp	r6, r5
 8000b3e:	d01f      	beq.n	8000b80 <__aeabi_dadd+0x4f0>
 8000b40:	43db      	mvns	r3, r3
 8000b42:	2b38      	cmp	r3, #56	; 0x38
 8000b44:	dc71      	bgt.n	8000c2a <__aeabi_dadd+0x59a>
 8000b46:	2b1f      	cmp	r3, #31
 8000b48:	dd00      	ble.n	8000b4c <__aeabi_dadd+0x4bc>
 8000b4a:	e096      	b.n	8000c7a <__aeabi_dadd+0x5ea>
 8000b4c:	2520      	movs	r5, #32
 8000b4e:	000f      	movs	r7, r1
 8000b50:	1aed      	subs	r5, r5, r3
 8000b52:	40af      	lsls	r7, r5
 8000b54:	46b9      	mov	r9, r7
 8000b56:	0007      	movs	r7, r0
 8000b58:	46aa      	mov	sl, r5
 8000b5a:	40df      	lsrs	r7, r3
 8000b5c:	464d      	mov	r5, r9
 8000b5e:	433d      	orrs	r5, r7
 8000b60:	002f      	movs	r7, r5
 8000b62:	4655      	mov	r5, sl
 8000b64:	40a8      	lsls	r0, r5
 8000b66:	40d9      	lsrs	r1, r3
 8000b68:	1e45      	subs	r5, r0, #1
 8000b6a:	41a8      	sbcs	r0, r5
 8000b6c:	4488      	add	r8, r1
 8000b6e:	4307      	orrs	r7, r0
 8000b70:	18bf      	adds	r7, r7, r2
 8000b72:	4297      	cmp	r7, r2
 8000b74:	4192      	sbcs	r2, r2
 8000b76:	4251      	negs	r1, r2
 8000b78:	4441      	add	r1, r8
 8000b7a:	0035      	movs	r5, r6
 8000b7c:	e63a      	b.n	80007f4 <__aeabi_dadd+0x164>
 8000b7e:	4664      	mov	r4, ip
 8000b80:	0035      	movs	r5, r6
 8000b82:	4641      	mov	r1, r8
 8000b84:	0010      	movs	r0, r2
 8000b86:	e685      	b.n	8000894 <__aeabi_dadd+0x204>
 8000b88:	000b      	movs	r3, r1
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	2d00      	cmp	r5, #0
 8000b8e:	d000      	beq.n	8000b92 <__aeabi_dadd+0x502>
 8000b90:	e663      	b.n	800085a <__aeabi_dadd+0x1ca>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f5      	beq.n	8000b82 <__aeabi_dadd+0x4f2>
 8000b96:	4643      	mov	r3, r8
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_dadd+0x50e>
 8000b9c:	e67a      	b.n	8000894 <__aeabi_dadd+0x204>
 8000b9e:	1887      	adds	r7, r0, r2
 8000ba0:	4287      	cmp	r7, r0
 8000ba2:	4180      	sbcs	r0, r0
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	4441      	add	r1, r8
 8000ba8:	4240      	negs	r0, r0
 8000baa:	1809      	adds	r1, r1, r0
 8000bac:	403a      	ands	r2, r7
 8000bae:	020b      	lsls	r3, r1, #8
 8000bb0:	d400      	bmi.n	8000bb4 <__aeabi_dadd+0x524>
 8000bb2:	e6d5      	b.n	8000960 <__aeabi_dadd+0x2d0>
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <__aeabi_dadd+0x634>)
 8000bb6:	3501      	adds	r5, #1
 8000bb8:	4019      	ands	r1, r3
 8000bba:	e5c9      	b.n	8000750 <__aeabi_dadd+0xc0>
 8000bbc:	0038      	movs	r0, r7
 8000bbe:	e669      	b.n	8000894 <__aeabi_dadd+0x204>
 8000bc0:	001e      	movs	r6, r3
 8000bc2:	4647      	mov	r7, r8
 8000bc4:	3e20      	subs	r6, #32
 8000bc6:	40f7      	lsrs	r7, r6
 8000bc8:	46bc      	mov	ip, r7
 8000bca:	2b20      	cmp	r3, #32
 8000bcc:	d004      	beq.n	8000bd8 <__aeabi_dadd+0x548>
 8000bce:	2640      	movs	r6, #64	; 0x40
 8000bd0:	1af3      	subs	r3, r6, r3
 8000bd2:	4646      	mov	r6, r8
 8000bd4:	409e      	lsls	r6, r3
 8000bd6:	4332      	orrs	r2, r6
 8000bd8:	0017      	movs	r7, r2
 8000bda:	4663      	mov	r3, ip
 8000bdc:	1e7a      	subs	r2, r7, #1
 8000bde:	4197      	sbcs	r7, r2
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e602      	b.n	80007ea <__aeabi_dadd+0x15a>
 8000be4:	4d36      	ldr	r5, [pc, #216]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000be6:	42ae      	cmp	r6, r5
 8000be8:	d0ca      	beq.n	8000b80 <__aeabi_dadd+0x4f0>
 8000bea:	2580      	movs	r5, #128	; 0x80
 8000bec:	042d      	lsls	r5, r5, #16
 8000bee:	425b      	negs	r3, r3
 8000bf0:	4329      	orrs	r1, r5
 8000bf2:	e7a6      	b.n	8000b42 <__aeabi_dadd+0x4b2>
 8000bf4:	4308      	orrs	r0, r1
 8000bf6:	1e41      	subs	r1, r0, #1
 8000bf8:	4188      	sbcs	r0, r1
 8000bfa:	e6a6      	b.n	800094a <__aeabi_dadd+0x2ba>
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_dadd+0x572>
 8000c00:	e648      	b.n	8000894 <__aeabi_dadd+0x204>
 8000c02:	1a87      	subs	r7, r0, r2
 8000c04:	4643      	mov	r3, r8
 8000c06:	42b8      	cmp	r0, r7
 8000c08:	41b6      	sbcs	r6, r6
 8000c0a:	1acb      	subs	r3, r1, r3
 8000c0c:	4276      	negs	r6, r6
 8000c0e:	1b9e      	subs	r6, r3, r6
 8000c10:	0233      	lsls	r3, r6, #8
 8000c12:	d54b      	bpl.n	8000cac <__aeabi_dadd+0x61c>
 8000c14:	1a17      	subs	r7, r2, r0
 8000c16:	4643      	mov	r3, r8
 8000c18:	42ba      	cmp	r2, r7
 8000c1a:	4192      	sbcs	r2, r2
 8000c1c:	1a59      	subs	r1, r3, r1
 8000c1e:	4252      	negs	r2, r2
 8000c20:	1a89      	subs	r1, r1, r2
 8000c22:	2207      	movs	r2, #7
 8000c24:	4664      	mov	r4, ip
 8000c26:	403a      	ands	r2, r7
 8000c28:	e592      	b.n	8000750 <__aeabi_dadd+0xc0>
 8000c2a:	4301      	orrs	r1, r0
 8000c2c:	000f      	movs	r7, r1
 8000c2e:	1e79      	subs	r1, r7, #1
 8000c30:	418f      	sbcs	r7, r1
 8000c32:	e79d      	b.n	8000b70 <__aeabi_dadd+0x4e0>
 8000c34:	001c      	movs	r4, r3
 8000c36:	000f      	movs	r7, r1
 8000c38:	3c20      	subs	r4, #32
 8000c3a:	40e7      	lsrs	r7, r4
 8000c3c:	2b20      	cmp	r3, #32
 8000c3e:	d003      	beq.n	8000c48 <__aeabi_dadd+0x5b8>
 8000c40:	2440      	movs	r4, #64	; 0x40
 8000c42:	1ae3      	subs	r3, r4, r3
 8000c44:	4099      	lsls	r1, r3
 8000c46:	4308      	orrs	r0, r1
 8000c48:	1e41      	subs	r1, r0, #1
 8000c4a:	4188      	sbcs	r0, r1
 8000c4c:	4338      	orrs	r0, r7
 8000c4e:	e67c      	b.n	800094a <__aeabi_dadd+0x2ba>
 8000c50:	2200      	movs	r2, #0
 8000c52:	2400      	movs	r4, #0
 8000c54:	e625      	b.n	80008a2 <__aeabi_dadd+0x212>
 8000c56:	1a17      	subs	r7, r2, r0
 8000c58:	4643      	mov	r3, r8
 8000c5a:	42ba      	cmp	r2, r7
 8000c5c:	4192      	sbcs	r2, r2
 8000c5e:	1a59      	subs	r1, r3, r1
 8000c60:	4252      	negs	r2, r2
 8000c62:	1a89      	subs	r1, r1, r2
 8000c64:	4664      	mov	r4, ip
 8000c66:	0035      	movs	r5, r6
 8000c68:	e543      	b.n	80006f2 <__aeabi_dadd+0x62>
 8000c6a:	4641      	mov	r1, r8
 8000c6c:	0010      	movs	r0, r2
 8000c6e:	4d14      	ldr	r5, [pc, #80]	; (8000cc0 <__aeabi_dadd+0x630>)
 8000c70:	e610      	b.n	8000894 <__aeabi_dadd+0x204>
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	2400      	movs	r4, #0
 8000c76:	0312      	lsls	r2, r2, #12
 8000c78:	e680      	b.n	800097c <__aeabi_dadd+0x2ec>
 8000c7a:	001d      	movs	r5, r3
 8000c7c:	000f      	movs	r7, r1
 8000c7e:	3d20      	subs	r5, #32
 8000c80:	40ef      	lsrs	r7, r5
 8000c82:	46bc      	mov	ip, r7
 8000c84:	2b20      	cmp	r3, #32
 8000c86:	d003      	beq.n	8000c90 <__aeabi_dadd+0x600>
 8000c88:	2540      	movs	r5, #64	; 0x40
 8000c8a:	1aeb      	subs	r3, r5, r3
 8000c8c:	4099      	lsls	r1, r3
 8000c8e:	4308      	orrs	r0, r1
 8000c90:	0007      	movs	r7, r0
 8000c92:	4663      	mov	r3, ip
 8000c94:	1e78      	subs	r0, r7, #1
 8000c96:	4187      	sbcs	r7, r0
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e769      	b.n	8000b70 <__aeabi_dadd+0x4e0>
 8000c9c:	1887      	adds	r7, r0, r2
 8000c9e:	4297      	cmp	r7, r2
 8000ca0:	419b      	sbcs	r3, r3
 8000ca2:	4441      	add	r1, r8
 8000ca4:	425b      	negs	r3, r3
 8000ca6:	18c9      	adds	r1, r1, r3
 8000ca8:	0035      	movs	r5, r6
 8000caa:	e5a3      	b.n	80007f4 <__aeabi_dadd+0x164>
 8000cac:	003b      	movs	r3, r7
 8000cae:	4333      	orrs	r3, r6
 8000cb0:	d0ce      	beq.n	8000c50 <__aeabi_dadd+0x5c0>
 8000cb2:	2207      	movs	r2, #7
 8000cb4:	0031      	movs	r1, r6
 8000cb6:	403a      	ands	r2, r7
 8000cb8:	e652      	b.n	8000960 <__aeabi_dadd+0x2d0>
 8000cba:	2300      	movs	r3, #0
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	e5f4      	b.n	80008aa <__aeabi_dadd+0x21a>
 8000cc0:	000007ff 	.word	0x000007ff
 8000cc4:	ff7fffff 	.word	0xff7fffff

08000cc8 <__aeabi_ddiv>:
 8000cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cca:	4657      	mov	r7, sl
 8000ccc:	46de      	mov	lr, fp
 8000cce:	464e      	mov	r6, r9
 8000cd0:	4645      	mov	r5, r8
 8000cd2:	b5e0      	push	{r5, r6, r7, lr}
 8000cd4:	4683      	mov	fp, r0
 8000cd6:	0007      	movs	r7, r0
 8000cd8:	030e      	lsls	r6, r1, #12
 8000cda:	0048      	lsls	r0, r1, #1
 8000cdc:	b085      	sub	sp, #20
 8000cde:	4692      	mov	sl, r2
 8000ce0:	001c      	movs	r4, r3
 8000ce2:	0b36      	lsrs	r6, r6, #12
 8000ce4:	0d40      	lsrs	r0, r0, #21
 8000ce6:	0fcd      	lsrs	r5, r1, #31
 8000ce8:	2800      	cmp	r0, #0
 8000cea:	d100      	bne.n	8000cee <__aeabi_ddiv+0x26>
 8000cec:	e09d      	b.n	8000e2a <__aeabi_ddiv+0x162>
 8000cee:	4b95      	ldr	r3, [pc, #596]	; (8000f44 <__aeabi_ddiv+0x27c>)
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	d039      	beq.n	8000d68 <__aeabi_ddiv+0xa0>
 8000cf4:	2380      	movs	r3, #128	; 0x80
 8000cf6:	00f6      	lsls	r6, r6, #3
 8000cf8:	041b      	lsls	r3, r3, #16
 8000cfa:	431e      	orrs	r6, r3
 8000cfc:	4a92      	ldr	r2, [pc, #584]	; (8000f48 <__aeabi_ddiv+0x280>)
 8000cfe:	0f7b      	lsrs	r3, r7, #29
 8000d00:	4333      	orrs	r3, r6
 8000d02:	4699      	mov	r9, r3
 8000d04:	4694      	mov	ip, r2
 8000d06:	0003      	movs	r3, r0
 8000d08:	4463      	add	r3, ip
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	2600      	movs	r6, #0
 8000d10:	00ff      	lsls	r7, r7, #3
 8000d12:	9302      	str	r3, [sp, #8]
 8000d14:	0323      	lsls	r3, r4, #12
 8000d16:	0b1b      	lsrs	r3, r3, #12
 8000d18:	4698      	mov	r8, r3
 8000d1a:	0063      	lsls	r3, r4, #1
 8000d1c:	0fe4      	lsrs	r4, r4, #31
 8000d1e:	4652      	mov	r2, sl
 8000d20:	0d5b      	lsrs	r3, r3, #21
 8000d22:	9401      	str	r4, [sp, #4]
 8000d24:	d100      	bne.n	8000d28 <__aeabi_ddiv+0x60>
 8000d26:	e0b3      	b.n	8000e90 <__aeabi_ddiv+0x1c8>
 8000d28:	4986      	ldr	r1, [pc, #536]	; (8000f44 <__aeabi_ddiv+0x27c>)
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d100      	bne.n	8000d30 <__aeabi_ddiv+0x68>
 8000d2e:	e09e      	b.n	8000e6e <__aeabi_ddiv+0x1a6>
 8000d30:	4642      	mov	r2, r8
 8000d32:	00d1      	lsls	r1, r2, #3
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	0412      	lsls	r2, r2, #16
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	4651      	mov	r1, sl
 8000d3c:	0f49      	lsrs	r1, r1, #29
 8000d3e:	4311      	orrs	r1, r2
 8000d40:	468b      	mov	fp, r1
 8000d42:	4981      	ldr	r1, [pc, #516]	; (8000f48 <__aeabi_ddiv+0x280>)
 8000d44:	4652      	mov	r2, sl
 8000d46:	468c      	mov	ip, r1
 8000d48:	9900      	ldr	r1, [sp, #0]
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	00d2      	lsls	r2, r2, #3
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	002b      	movs	r3, r5
 8000d56:	4063      	eors	r3, r4
 8000d58:	469a      	mov	sl, r3
 8000d5a:	2e0f      	cmp	r6, #15
 8000d5c:	d900      	bls.n	8000d60 <__aeabi_ddiv+0x98>
 8000d5e:	e105      	b.n	8000f6c <__aeabi_ddiv+0x2a4>
 8000d60:	4b7a      	ldr	r3, [pc, #488]	; (8000f4c <__aeabi_ddiv+0x284>)
 8000d62:	00b6      	lsls	r6, r6, #2
 8000d64:	599b      	ldr	r3, [r3, r6]
 8000d66:	469f      	mov	pc, r3
 8000d68:	465b      	mov	r3, fp
 8000d6a:	4333      	orrs	r3, r6
 8000d6c:	4699      	mov	r9, r3
 8000d6e:	d000      	beq.n	8000d72 <__aeabi_ddiv+0xaa>
 8000d70:	e0b8      	b.n	8000ee4 <__aeabi_ddiv+0x21c>
 8000d72:	2302      	movs	r3, #2
 8000d74:	2608      	movs	r6, #8
 8000d76:	2700      	movs	r7, #0
 8000d78:	9000      	str	r0, [sp, #0]
 8000d7a:	9302      	str	r3, [sp, #8]
 8000d7c:	e7ca      	b.n	8000d14 <__aeabi_ddiv+0x4c>
 8000d7e:	46cb      	mov	fp, r9
 8000d80:	003a      	movs	r2, r7
 8000d82:	9902      	ldr	r1, [sp, #8]
 8000d84:	9501      	str	r5, [sp, #4]
 8000d86:	9b01      	ldr	r3, [sp, #4]
 8000d88:	469a      	mov	sl, r3
 8000d8a:	2902      	cmp	r1, #2
 8000d8c:	d027      	beq.n	8000dde <__aeabi_ddiv+0x116>
 8000d8e:	2903      	cmp	r1, #3
 8000d90:	d100      	bne.n	8000d94 <__aeabi_ddiv+0xcc>
 8000d92:	e280      	b.n	8001296 <__aeabi_ddiv+0x5ce>
 8000d94:	2901      	cmp	r1, #1
 8000d96:	d044      	beq.n	8000e22 <__aeabi_ddiv+0x15a>
 8000d98:	496d      	ldr	r1, [pc, #436]	; (8000f50 <__aeabi_ddiv+0x288>)
 8000d9a:	9b00      	ldr	r3, [sp, #0]
 8000d9c:	468c      	mov	ip, r1
 8000d9e:	4463      	add	r3, ip
 8000da0:	001c      	movs	r4, r3
 8000da2:	2c00      	cmp	r4, #0
 8000da4:	dd38      	ble.n	8000e18 <__aeabi_ddiv+0x150>
 8000da6:	0753      	lsls	r3, r2, #29
 8000da8:	d000      	beq.n	8000dac <__aeabi_ddiv+0xe4>
 8000daa:	e213      	b.n	80011d4 <__aeabi_ddiv+0x50c>
 8000dac:	08d2      	lsrs	r2, r2, #3
 8000dae:	465b      	mov	r3, fp
 8000db0:	01db      	lsls	r3, r3, #7
 8000db2:	d509      	bpl.n	8000dc8 <__aeabi_ddiv+0x100>
 8000db4:	4659      	mov	r1, fp
 8000db6:	4b67      	ldr	r3, [pc, #412]	; (8000f54 <__aeabi_ddiv+0x28c>)
 8000db8:	4019      	ands	r1, r3
 8000dba:	468b      	mov	fp, r1
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	00c9      	lsls	r1, r1, #3
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	9b00      	ldr	r3, [sp, #0]
 8000dc4:	4463      	add	r3, ip
 8000dc6:	001c      	movs	r4, r3
 8000dc8:	4b63      	ldr	r3, [pc, #396]	; (8000f58 <__aeabi_ddiv+0x290>)
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	dc07      	bgt.n	8000dde <__aeabi_ddiv+0x116>
 8000dce:	465b      	mov	r3, fp
 8000dd0:	0564      	lsls	r4, r4, #21
 8000dd2:	075f      	lsls	r7, r3, #29
 8000dd4:	025b      	lsls	r3, r3, #9
 8000dd6:	4317      	orrs	r7, r2
 8000dd8:	0b1b      	lsrs	r3, r3, #12
 8000dda:	0d62      	lsrs	r2, r4, #21
 8000ddc:	e002      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8000dde:	2300      	movs	r3, #0
 8000de0:	2700      	movs	r7, #0
 8000de2:	4a58      	ldr	r2, [pc, #352]	; (8000f44 <__aeabi_ddiv+0x27c>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	031b      	lsls	r3, r3, #12
 8000de8:	0b1c      	lsrs	r4, r3, #12
 8000dea:	0d0b      	lsrs	r3, r1, #20
 8000dec:	051b      	lsls	r3, r3, #20
 8000dee:	4323      	orrs	r3, r4
 8000df0:	0514      	lsls	r4, r2, #20
 8000df2:	4a5a      	ldr	r2, [pc, #360]	; (8000f5c <__aeabi_ddiv+0x294>)
 8000df4:	0038      	movs	r0, r7
 8000df6:	4013      	ands	r3, r2
 8000df8:	431c      	orrs	r4, r3
 8000dfa:	4653      	mov	r3, sl
 8000dfc:	0064      	lsls	r4, r4, #1
 8000dfe:	07db      	lsls	r3, r3, #31
 8000e00:	0864      	lsrs	r4, r4, #1
 8000e02:	431c      	orrs	r4, r3
 8000e04:	0021      	movs	r1, r4
 8000e06:	b005      	add	sp, #20
 8000e08:	bc3c      	pop	{r2, r3, r4, r5}
 8000e0a:	4690      	mov	r8, r2
 8000e0c:	4699      	mov	r9, r3
 8000e0e:	46a2      	mov	sl, r4
 8000e10:	46ab      	mov	fp, r5
 8000e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e14:	2201      	movs	r2, #1
 8000e16:	4252      	negs	r2, r2
 8000e18:	2301      	movs	r3, #1
 8000e1a:	1b1b      	subs	r3, r3, r4
 8000e1c:	2b38      	cmp	r3, #56	; 0x38
 8000e1e:	dc00      	bgt.n	8000e22 <__aeabi_ddiv+0x15a>
 8000e20:	e1ad      	b.n	800117e <__aeabi_ddiv+0x4b6>
 8000e22:	2200      	movs	r2, #0
 8000e24:	2300      	movs	r3, #0
 8000e26:	2700      	movs	r7, #0
 8000e28:	e7dc      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	4333      	orrs	r3, r6
 8000e2e:	4699      	mov	r9, r3
 8000e30:	d05e      	beq.n	8000ef0 <__aeabi_ddiv+0x228>
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_ddiv+0x170>
 8000e36:	e18a      	b.n	800114e <__aeabi_ddiv+0x486>
 8000e38:	0030      	movs	r0, r6
 8000e3a:	f001 f9ab 	bl	8002194 <__clzsi2>
 8000e3e:	0003      	movs	r3, r0
 8000e40:	3b0b      	subs	r3, #11
 8000e42:	2b1c      	cmp	r3, #28
 8000e44:	dd00      	ble.n	8000e48 <__aeabi_ddiv+0x180>
 8000e46:	e17b      	b.n	8001140 <__aeabi_ddiv+0x478>
 8000e48:	221d      	movs	r2, #29
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	465a      	mov	r2, fp
 8000e4e:	0001      	movs	r1, r0
 8000e50:	40da      	lsrs	r2, r3
 8000e52:	3908      	subs	r1, #8
 8000e54:	408e      	lsls	r6, r1
 8000e56:	0013      	movs	r3, r2
 8000e58:	465f      	mov	r7, fp
 8000e5a:	4333      	orrs	r3, r6
 8000e5c:	4699      	mov	r9, r3
 8000e5e:	408f      	lsls	r7, r1
 8000e60:	4b3f      	ldr	r3, [pc, #252]	; (8000f60 <__aeabi_ddiv+0x298>)
 8000e62:	2600      	movs	r6, #0
 8000e64:	1a1b      	subs	r3, r3, r0
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9302      	str	r3, [sp, #8]
 8000e6c:	e752      	b.n	8000d14 <__aeabi_ddiv+0x4c>
 8000e6e:	4641      	mov	r1, r8
 8000e70:	4653      	mov	r3, sl
 8000e72:	430b      	orrs	r3, r1
 8000e74:	493b      	ldr	r1, [pc, #236]	; (8000f64 <__aeabi_ddiv+0x29c>)
 8000e76:	469b      	mov	fp, r3
 8000e78:	468c      	mov	ip, r1
 8000e7a:	9b00      	ldr	r3, [sp, #0]
 8000e7c:	4463      	add	r3, ip
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	465b      	mov	r3, fp
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d13b      	bne.n	8000efe <__aeabi_ddiv+0x236>
 8000e86:	2302      	movs	r3, #2
 8000e88:	2200      	movs	r2, #0
 8000e8a:	431e      	orrs	r6, r3
 8000e8c:	2102      	movs	r1, #2
 8000e8e:	e761      	b.n	8000d54 <__aeabi_ddiv+0x8c>
 8000e90:	4643      	mov	r3, r8
 8000e92:	4313      	orrs	r3, r2
 8000e94:	469b      	mov	fp, r3
 8000e96:	d037      	beq.n	8000f08 <__aeabi_ddiv+0x240>
 8000e98:	4643      	mov	r3, r8
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_ddiv+0x1d8>
 8000e9e:	e162      	b.n	8001166 <__aeabi_ddiv+0x49e>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	f001 f977 	bl	8002194 <__clzsi2>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	3b0b      	subs	r3, #11
 8000eaa:	2b1c      	cmp	r3, #28
 8000eac:	dd00      	ble.n	8000eb0 <__aeabi_ddiv+0x1e8>
 8000eae:	e153      	b.n	8001158 <__aeabi_ddiv+0x490>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	4641      	mov	r1, r8
 8000eb4:	3a08      	subs	r2, #8
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	4688      	mov	r8, r1
 8000eba:	211d      	movs	r1, #29
 8000ebc:	1acb      	subs	r3, r1, r3
 8000ebe:	4651      	mov	r1, sl
 8000ec0:	40d9      	lsrs	r1, r3
 8000ec2:	000b      	movs	r3, r1
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	430b      	orrs	r3, r1
 8000ec8:	469b      	mov	fp, r3
 8000eca:	4653      	mov	r3, sl
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	001a      	movs	r2, r3
 8000ed0:	9b00      	ldr	r3, [sp, #0]
 8000ed2:	4925      	ldr	r1, [pc, #148]	; (8000f68 <__aeabi_ddiv+0x2a0>)
 8000ed4:	469c      	mov	ip, r3
 8000ed6:	4460      	add	r0, ip
 8000ed8:	0003      	movs	r3, r0
 8000eda:	468c      	mov	ip, r1
 8000edc:	4463      	add	r3, ip
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e737      	b.n	8000d54 <__aeabi_ddiv+0x8c>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	46b1      	mov	r9, r6
 8000ee8:	9000      	str	r0, [sp, #0]
 8000eea:	260c      	movs	r6, #12
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	e711      	b.n	8000d14 <__aeabi_ddiv+0x4c>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	2604      	movs	r6, #4
 8000ef8:	2700      	movs	r7, #0
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	e70a      	b.n	8000d14 <__aeabi_ddiv+0x4c>
 8000efe:	2303      	movs	r3, #3
 8000f00:	46c3      	mov	fp, r8
 8000f02:	431e      	orrs	r6, r3
 8000f04:	2103      	movs	r1, #3
 8000f06:	e725      	b.n	8000d54 <__aeabi_ddiv+0x8c>
 8000f08:	3301      	adds	r3, #1
 8000f0a:	431e      	orrs	r6, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2101      	movs	r1, #1
 8000f10:	e720      	b.n	8000d54 <__aeabi_ddiv+0x8c>
 8000f12:	2300      	movs	r3, #0
 8000f14:	469a      	mov	sl, r3
 8000f16:	2380      	movs	r3, #128	; 0x80
 8000f18:	2700      	movs	r7, #0
 8000f1a:	031b      	lsls	r3, r3, #12
 8000f1c:	4a09      	ldr	r2, [pc, #36]	; (8000f44 <__aeabi_ddiv+0x27c>)
 8000f1e:	e761      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	4649      	mov	r1, r9
 8000f24:	031b      	lsls	r3, r3, #12
 8000f26:	4219      	tst	r1, r3
 8000f28:	d100      	bne.n	8000f2c <__aeabi_ddiv+0x264>
 8000f2a:	e0e2      	b.n	80010f2 <__aeabi_ddiv+0x42a>
 8000f2c:	4659      	mov	r1, fp
 8000f2e:	4219      	tst	r1, r3
 8000f30:	d000      	beq.n	8000f34 <__aeabi_ddiv+0x26c>
 8000f32:	e0de      	b.n	80010f2 <__aeabi_ddiv+0x42a>
 8000f34:	430b      	orrs	r3, r1
 8000f36:	031b      	lsls	r3, r3, #12
 8000f38:	0017      	movs	r7, r2
 8000f3a:	0b1b      	lsrs	r3, r3, #12
 8000f3c:	46a2      	mov	sl, r4
 8000f3e:	4a01      	ldr	r2, [pc, #4]	; (8000f44 <__aeabi_ddiv+0x27c>)
 8000f40:	e750      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	000007ff 	.word	0x000007ff
 8000f48:	fffffc01 	.word	0xfffffc01
 8000f4c:	0800b584 	.word	0x0800b584
 8000f50:	000003ff 	.word	0x000003ff
 8000f54:	feffffff 	.word	0xfeffffff
 8000f58:	000007fe 	.word	0x000007fe
 8000f5c:	800fffff 	.word	0x800fffff
 8000f60:	fffffc0d 	.word	0xfffffc0d
 8000f64:	fffff801 	.word	0xfffff801
 8000f68:	000003f3 	.word	0x000003f3
 8000f6c:	45d9      	cmp	r9, fp
 8000f6e:	d900      	bls.n	8000f72 <__aeabi_ddiv+0x2aa>
 8000f70:	e0cb      	b.n	800110a <__aeabi_ddiv+0x442>
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x2ae>
 8000f74:	e0c6      	b.n	8001104 <__aeabi_ddiv+0x43c>
 8000f76:	003c      	movs	r4, r7
 8000f78:	4648      	mov	r0, r9
 8000f7a:	2700      	movs	r7, #0
 8000f7c:	9b00      	ldr	r3, [sp, #0]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	465b      	mov	r3, fp
 8000f84:	0e16      	lsrs	r6, r2, #24
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	431e      	orrs	r6, r3
 8000f8a:	0213      	lsls	r3, r2, #8
 8000f8c:	4698      	mov	r8, r3
 8000f8e:	0433      	lsls	r3, r6, #16
 8000f90:	0c1b      	lsrs	r3, r3, #16
 8000f92:	4699      	mov	r9, r3
 8000f94:	0c31      	lsrs	r1, r6, #16
 8000f96:	9101      	str	r1, [sp, #4]
 8000f98:	f7ff f94c 	bl	8000234 <__aeabi_uidivmod>
 8000f9c:	464a      	mov	r2, r9
 8000f9e:	4342      	muls	r2, r0
 8000fa0:	040b      	lsls	r3, r1, #16
 8000fa2:	0c21      	lsrs	r1, r4, #16
 8000fa4:	0005      	movs	r5, r0
 8000fa6:	4319      	orrs	r1, r3
 8000fa8:	428a      	cmp	r2, r1
 8000faa:	d907      	bls.n	8000fbc <__aeabi_ddiv+0x2f4>
 8000fac:	1989      	adds	r1, r1, r6
 8000fae:	3d01      	subs	r5, #1
 8000fb0:	428e      	cmp	r6, r1
 8000fb2:	d803      	bhi.n	8000fbc <__aeabi_ddiv+0x2f4>
 8000fb4:	428a      	cmp	r2, r1
 8000fb6:	d901      	bls.n	8000fbc <__aeabi_ddiv+0x2f4>
 8000fb8:	1e85      	subs	r5, r0, #2
 8000fba:	1989      	adds	r1, r1, r6
 8000fbc:	1a88      	subs	r0, r1, r2
 8000fbe:	9901      	ldr	r1, [sp, #4]
 8000fc0:	f7ff f938 	bl	8000234 <__aeabi_uidivmod>
 8000fc4:	0409      	lsls	r1, r1, #16
 8000fc6:	468c      	mov	ip, r1
 8000fc8:	464a      	mov	r2, r9
 8000fca:	0421      	lsls	r1, r4, #16
 8000fcc:	4664      	mov	r4, ip
 8000fce:	4342      	muls	r2, r0
 8000fd0:	0c09      	lsrs	r1, r1, #16
 8000fd2:	0003      	movs	r3, r0
 8000fd4:	4321      	orrs	r1, r4
 8000fd6:	428a      	cmp	r2, r1
 8000fd8:	d904      	bls.n	8000fe4 <__aeabi_ddiv+0x31c>
 8000fda:	1989      	adds	r1, r1, r6
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	428e      	cmp	r6, r1
 8000fe0:	d800      	bhi.n	8000fe4 <__aeabi_ddiv+0x31c>
 8000fe2:	e0f1      	b.n	80011c8 <__aeabi_ddiv+0x500>
 8000fe4:	042d      	lsls	r5, r5, #16
 8000fe6:	431d      	orrs	r5, r3
 8000fe8:	46ab      	mov	fp, r5
 8000fea:	4643      	mov	r3, r8
 8000fec:	1a89      	subs	r1, r1, r2
 8000fee:	4642      	mov	r2, r8
 8000ff0:	0c28      	lsrs	r0, r5, #16
 8000ff2:	0412      	lsls	r2, r2, #16
 8000ff4:	0c1d      	lsrs	r5, r3, #16
 8000ff6:	465b      	mov	r3, fp
 8000ff8:	0c14      	lsrs	r4, r2, #16
 8000ffa:	0022      	movs	r2, r4
 8000ffc:	041b      	lsls	r3, r3, #16
 8000ffe:	0c1b      	lsrs	r3, r3, #16
 8001000:	435a      	muls	r2, r3
 8001002:	9403      	str	r4, [sp, #12]
 8001004:	436b      	muls	r3, r5
 8001006:	4344      	muls	r4, r0
 8001008:	9502      	str	r5, [sp, #8]
 800100a:	4368      	muls	r0, r5
 800100c:	191b      	adds	r3, r3, r4
 800100e:	0c15      	lsrs	r5, r2, #16
 8001010:	18eb      	adds	r3, r5, r3
 8001012:	429c      	cmp	r4, r3
 8001014:	d903      	bls.n	800101e <__aeabi_ddiv+0x356>
 8001016:	2480      	movs	r4, #128	; 0x80
 8001018:	0264      	lsls	r4, r4, #9
 800101a:	46a4      	mov	ip, r4
 800101c:	4460      	add	r0, ip
 800101e:	0c1c      	lsrs	r4, r3, #16
 8001020:	0415      	lsls	r5, r2, #16
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	0c2d      	lsrs	r5, r5, #16
 8001026:	1820      	adds	r0, r4, r0
 8001028:	195d      	adds	r5, r3, r5
 800102a:	4281      	cmp	r1, r0
 800102c:	d377      	bcc.n	800111e <__aeabi_ddiv+0x456>
 800102e:	d073      	beq.n	8001118 <__aeabi_ddiv+0x450>
 8001030:	1a0c      	subs	r4, r1, r0
 8001032:	4aa2      	ldr	r2, [pc, #648]	; (80012bc <__aeabi_ddiv+0x5f4>)
 8001034:	1b7d      	subs	r5, r7, r5
 8001036:	42af      	cmp	r7, r5
 8001038:	41bf      	sbcs	r7, r7
 800103a:	4694      	mov	ip, r2
 800103c:	9b00      	ldr	r3, [sp, #0]
 800103e:	427f      	negs	r7, r7
 8001040:	4463      	add	r3, ip
 8001042:	1be0      	subs	r0, r4, r7
 8001044:	001c      	movs	r4, r3
 8001046:	4286      	cmp	r6, r0
 8001048:	d100      	bne.n	800104c <__aeabi_ddiv+0x384>
 800104a:	e0db      	b.n	8001204 <__aeabi_ddiv+0x53c>
 800104c:	9901      	ldr	r1, [sp, #4]
 800104e:	f7ff f8f1 	bl	8000234 <__aeabi_uidivmod>
 8001052:	464a      	mov	r2, r9
 8001054:	4342      	muls	r2, r0
 8001056:	040b      	lsls	r3, r1, #16
 8001058:	0c29      	lsrs	r1, r5, #16
 800105a:	0007      	movs	r7, r0
 800105c:	4319      	orrs	r1, r3
 800105e:	428a      	cmp	r2, r1
 8001060:	d907      	bls.n	8001072 <__aeabi_ddiv+0x3aa>
 8001062:	1989      	adds	r1, r1, r6
 8001064:	3f01      	subs	r7, #1
 8001066:	428e      	cmp	r6, r1
 8001068:	d803      	bhi.n	8001072 <__aeabi_ddiv+0x3aa>
 800106a:	428a      	cmp	r2, r1
 800106c:	d901      	bls.n	8001072 <__aeabi_ddiv+0x3aa>
 800106e:	1e87      	subs	r7, r0, #2
 8001070:	1989      	adds	r1, r1, r6
 8001072:	1a88      	subs	r0, r1, r2
 8001074:	9901      	ldr	r1, [sp, #4]
 8001076:	f7ff f8dd 	bl	8000234 <__aeabi_uidivmod>
 800107a:	0409      	lsls	r1, r1, #16
 800107c:	464a      	mov	r2, r9
 800107e:	4689      	mov	r9, r1
 8001080:	0429      	lsls	r1, r5, #16
 8001082:	464d      	mov	r5, r9
 8001084:	4342      	muls	r2, r0
 8001086:	0c09      	lsrs	r1, r1, #16
 8001088:	0003      	movs	r3, r0
 800108a:	4329      	orrs	r1, r5
 800108c:	428a      	cmp	r2, r1
 800108e:	d907      	bls.n	80010a0 <__aeabi_ddiv+0x3d8>
 8001090:	1989      	adds	r1, r1, r6
 8001092:	3b01      	subs	r3, #1
 8001094:	428e      	cmp	r6, r1
 8001096:	d803      	bhi.n	80010a0 <__aeabi_ddiv+0x3d8>
 8001098:	428a      	cmp	r2, r1
 800109a:	d901      	bls.n	80010a0 <__aeabi_ddiv+0x3d8>
 800109c:	1e83      	subs	r3, r0, #2
 800109e:	1989      	adds	r1, r1, r6
 80010a0:	043f      	lsls	r7, r7, #16
 80010a2:	1a89      	subs	r1, r1, r2
 80010a4:	003a      	movs	r2, r7
 80010a6:	9f03      	ldr	r7, [sp, #12]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	0038      	movs	r0, r7
 80010ac:	0413      	lsls	r3, r2, #16
 80010ae:	0c1b      	lsrs	r3, r3, #16
 80010b0:	4358      	muls	r0, r3
 80010b2:	4681      	mov	r9, r0
 80010b4:	9802      	ldr	r0, [sp, #8]
 80010b6:	0c15      	lsrs	r5, r2, #16
 80010b8:	436f      	muls	r7, r5
 80010ba:	4343      	muls	r3, r0
 80010bc:	4345      	muls	r5, r0
 80010be:	4648      	mov	r0, r9
 80010c0:	0c00      	lsrs	r0, r0, #16
 80010c2:	4684      	mov	ip, r0
 80010c4:	19db      	adds	r3, r3, r7
 80010c6:	4463      	add	r3, ip
 80010c8:	429f      	cmp	r7, r3
 80010ca:	d903      	bls.n	80010d4 <__aeabi_ddiv+0x40c>
 80010cc:	2080      	movs	r0, #128	; 0x80
 80010ce:	0240      	lsls	r0, r0, #9
 80010d0:	4684      	mov	ip, r0
 80010d2:	4465      	add	r5, ip
 80010d4:	4648      	mov	r0, r9
 80010d6:	0c1f      	lsrs	r7, r3, #16
 80010d8:	0400      	lsls	r0, r0, #16
 80010da:	041b      	lsls	r3, r3, #16
 80010dc:	0c00      	lsrs	r0, r0, #16
 80010de:	197d      	adds	r5, r7, r5
 80010e0:	1818      	adds	r0, r3, r0
 80010e2:	42a9      	cmp	r1, r5
 80010e4:	d200      	bcs.n	80010e8 <__aeabi_ddiv+0x420>
 80010e6:	e084      	b.n	80011f2 <__aeabi_ddiv+0x52a>
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x424>
 80010ea:	e07f      	b.n	80011ec <__aeabi_ddiv+0x524>
 80010ec:	2301      	movs	r3, #1
 80010ee:	431a      	orrs	r2, r3
 80010f0:	e657      	b.n	8000da2 <__aeabi_ddiv+0xda>
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	464a      	mov	r2, r9
 80010f6:	031b      	lsls	r3, r3, #12
 80010f8:	4313      	orrs	r3, r2
 80010fa:	031b      	lsls	r3, r3, #12
 80010fc:	0b1b      	lsrs	r3, r3, #12
 80010fe:	46aa      	mov	sl, r5
 8001100:	4a6f      	ldr	r2, [pc, #444]	; (80012c0 <__aeabi_ddiv+0x5f8>)
 8001102:	e66f      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8001104:	42ba      	cmp	r2, r7
 8001106:	d900      	bls.n	800110a <__aeabi_ddiv+0x442>
 8001108:	e735      	b.n	8000f76 <__aeabi_ddiv+0x2ae>
 800110a:	464b      	mov	r3, r9
 800110c:	07dc      	lsls	r4, r3, #31
 800110e:	0858      	lsrs	r0, r3, #1
 8001110:	087b      	lsrs	r3, r7, #1
 8001112:	431c      	orrs	r4, r3
 8001114:	07ff      	lsls	r7, r7, #31
 8001116:	e734      	b.n	8000f82 <__aeabi_ddiv+0x2ba>
 8001118:	2400      	movs	r4, #0
 800111a:	42af      	cmp	r7, r5
 800111c:	d289      	bcs.n	8001032 <__aeabi_ddiv+0x36a>
 800111e:	4447      	add	r7, r8
 8001120:	4547      	cmp	r7, r8
 8001122:	41a4      	sbcs	r4, r4
 8001124:	465b      	mov	r3, fp
 8001126:	4264      	negs	r4, r4
 8001128:	19a4      	adds	r4, r4, r6
 800112a:	1864      	adds	r4, r4, r1
 800112c:	3b01      	subs	r3, #1
 800112e:	42a6      	cmp	r6, r4
 8001130:	d21e      	bcs.n	8001170 <__aeabi_ddiv+0x4a8>
 8001132:	42a0      	cmp	r0, r4
 8001134:	d86d      	bhi.n	8001212 <__aeabi_ddiv+0x54a>
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0x472>
 8001138:	e0b6      	b.n	80012a8 <__aeabi_ddiv+0x5e0>
 800113a:	1a24      	subs	r4, r4, r0
 800113c:	469b      	mov	fp, r3
 800113e:	e778      	b.n	8001032 <__aeabi_ddiv+0x36a>
 8001140:	0003      	movs	r3, r0
 8001142:	465a      	mov	r2, fp
 8001144:	3b28      	subs	r3, #40	; 0x28
 8001146:	409a      	lsls	r2, r3
 8001148:	2700      	movs	r7, #0
 800114a:	4691      	mov	r9, r2
 800114c:	e688      	b.n	8000e60 <__aeabi_ddiv+0x198>
 800114e:	4658      	mov	r0, fp
 8001150:	f001 f820 	bl	8002194 <__clzsi2>
 8001154:	3020      	adds	r0, #32
 8001156:	e672      	b.n	8000e3e <__aeabi_ddiv+0x176>
 8001158:	0003      	movs	r3, r0
 800115a:	4652      	mov	r2, sl
 800115c:	3b28      	subs	r3, #40	; 0x28
 800115e:	409a      	lsls	r2, r3
 8001160:	4693      	mov	fp, r2
 8001162:	2200      	movs	r2, #0
 8001164:	e6b4      	b.n	8000ed0 <__aeabi_ddiv+0x208>
 8001166:	4650      	mov	r0, sl
 8001168:	f001 f814 	bl	8002194 <__clzsi2>
 800116c:	3020      	adds	r0, #32
 800116e:	e69a      	b.n	8000ea6 <__aeabi_ddiv+0x1de>
 8001170:	42a6      	cmp	r6, r4
 8001172:	d1e2      	bne.n	800113a <__aeabi_ddiv+0x472>
 8001174:	45b8      	cmp	r8, r7
 8001176:	d9dc      	bls.n	8001132 <__aeabi_ddiv+0x46a>
 8001178:	1a34      	subs	r4, r6, r0
 800117a:	469b      	mov	fp, r3
 800117c:	e759      	b.n	8001032 <__aeabi_ddiv+0x36a>
 800117e:	2b1f      	cmp	r3, #31
 8001180:	dc65      	bgt.n	800124e <__aeabi_ddiv+0x586>
 8001182:	4c50      	ldr	r4, [pc, #320]	; (80012c4 <__aeabi_ddiv+0x5fc>)
 8001184:	9900      	ldr	r1, [sp, #0]
 8001186:	46a4      	mov	ip, r4
 8001188:	465c      	mov	r4, fp
 800118a:	4461      	add	r1, ip
 800118c:	0008      	movs	r0, r1
 800118e:	408c      	lsls	r4, r1
 8001190:	0011      	movs	r1, r2
 8001192:	4082      	lsls	r2, r0
 8001194:	40d9      	lsrs	r1, r3
 8001196:	1e50      	subs	r0, r2, #1
 8001198:	4182      	sbcs	r2, r0
 800119a:	430c      	orrs	r4, r1
 800119c:	4314      	orrs	r4, r2
 800119e:	465a      	mov	r2, fp
 80011a0:	40da      	lsrs	r2, r3
 80011a2:	0013      	movs	r3, r2
 80011a4:	0762      	lsls	r2, r4, #29
 80011a6:	d009      	beq.n	80011bc <__aeabi_ddiv+0x4f4>
 80011a8:	220f      	movs	r2, #15
 80011aa:	4022      	ands	r2, r4
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d005      	beq.n	80011bc <__aeabi_ddiv+0x4f4>
 80011b0:	0022      	movs	r2, r4
 80011b2:	1d14      	adds	r4, r2, #4
 80011b4:	4294      	cmp	r4, r2
 80011b6:	4189      	sbcs	r1, r1
 80011b8:	4249      	negs	r1, r1
 80011ba:	185b      	adds	r3, r3, r1
 80011bc:	021a      	lsls	r2, r3, #8
 80011be:	d562      	bpl.n	8001286 <__aeabi_ddiv+0x5be>
 80011c0:	2201      	movs	r2, #1
 80011c2:	2300      	movs	r3, #0
 80011c4:	2700      	movs	r7, #0
 80011c6:	e60d      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 80011c8:	428a      	cmp	r2, r1
 80011ca:	d800      	bhi.n	80011ce <__aeabi_ddiv+0x506>
 80011cc:	e70a      	b.n	8000fe4 <__aeabi_ddiv+0x31c>
 80011ce:	1e83      	subs	r3, r0, #2
 80011d0:	1989      	adds	r1, r1, r6
 80011d2:	e707      	b.n	8000fe4 <__aeabi_ddiv+0x31c>
 80011d4:	230f      	movs	r3, #15
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0x516>
 80011dc:	e5e6      	b.n	8000dac <__aeabi_ddiv+0xe4>
 80011de:	1d17      	adds	r7, r2, #4
 80011e0:	4297      	cmp	r7, r2
 80011e2:	4192      	sbcs	r2, r2
 80011e4:	4253      	negs	r3, r2
 80011e6:	449b      	add	fp, r3
 80011e8:	08fa      	lsrs	r2, r7, #3
 80011ea:	e5e0      	b.n	8000dae <__aeabi_ddiv+0xe6>
 80011ec:	2800      	cmp	r0, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_ddiv+0x52a>
 80011f0:	e5d7      	b.n	8000da2 <__aeabi_ddiv+0xda>
 80011f2:	1871      	adds	r1, r6, r1
 80011f4:	1e53      	subs	r3, r2, #1
 80011f6:	42b1      	cmp	r1, r6
 80011f8:	d327      	bcc.n	800124a <__aeabi_ddiv+0x582>
 80011fa:	42a9      	cmp	r1, r5
 80011fc:	d315      	bcc.n	800122a <__aeabi_ddiv+0x562>
 80011fe:	d058      	beq.n	80012b2 <__aeabi_ddiv+0x5ea>
 8001200:	001a      	movs	r2, r3
 8001202:	e773      	b.n	80010ec <__aeabi_ddiv+0x424>
 8001204:	2b00      	cmp	r3, #0
 8001206:	dc00      	bgt.n	800120a <__aeabi_ddiv+0x542>
 8001208:	e604      	b.n	8000e14 <__aeabi_ddiv+0x14c>
 800120a:	2301      	movs	r3, #1
 800120c:	2200      	movs	r2, #0
 800120e:	449b      	add	fp, r3
 8001210:	e5cd      	b.n	8000dae <__aeabi_ddiv+0xe6>
 8001212:	2302      	movs	r3, #2
 8001214:	4447      	add	r7, r8
 8001216:	4547      	cmp	r7, r8
 8001218:	4189      	sbcs	r1, r1
 800121a:	425b      	negs	r3, r3
 800121c:	469c      	mov	ip, r3
 800121e:	4249      	negs	r1, r1
 8001220:	1989      	adds	r1, r1, r6
 8001222:	190c      	adds	r4, r1, r4
 8001224:	44e3      	add	fp, ip
 8001226:	1a24      	subs	r4, r4, r0
 8001228:	e703      	b.n	8001032 <__aeabi_ddiv+0x36a>
 800122a:	4643      	mov	r3, r8
 800122c:	005f      	lsls	r7, r3, #1
 800122e:	4547      	cmp	r7, r8
 8001230:	419b      	sbcs	r3, r3
 8001232:	46b8      	mov	r8, r7
 8001234:	425b      	negs	r3, r3
 8001236:	199e      	adds	r6, r3, r6
 8001238:	3a02      	subs	r2, #2
 800123a:	1989      	adds	r1, r1, r6
 800123c:	42a9      	cmp	r1, r5
 800123e:	d000      	beq.n	8001242 <__aeabi_ddiv+0x57a>
 8001240:	e754      	b.n	80010ec <__aeabi_ddiv+0x424>
 8001242:	4540      	cmp	r0, r8
 8001244:	d000      	beq.n	8001248 <__aeabi_ddiv+0x580>
 8001246:	e751      	b.n	80010ec <__aeabi_ddiv+0x424>
 8001248:	e5ab      	b.n	8000da2 <__aeabi_ddiv+0xda>
 800124a:	001a      	movs	r2, r3
 800124c:	e7f6      	b.n	800123c <__aeabi_ddiv+0x574>
 800124e:	211f      	movs	r1, #31
 8001250:	465f      	mov	r7, fp
 8001252:	4249      	negs	r1, r1
 8001254:	1b0c      	subs	r4, r1, r4
 8001256:	40e7      	lsrs	r7, r4
 8001258:	2b20      	cmp	r3, #32
 800125a:	d007      	beq.n	800126c <__aeabi_ddiv+0x5a4>
 800125c:	491a      	ldr	r1, [pc, #104]	; (80012c8 <__aeabi_ddiv+0x600>)
 800125e:	9b00      	ldr	r3, [sp, #0]
 8001260:	468c      	mov	ip, r1
 8001262:	4463      	add	r3, ip
 8001264:	0018      	movs	r0, r3
 8001266:	465b      	mov	r3, fp
 8001268:	4083      	lsls	r3, r0
 800126a:	431a      	orrs	r2, r3
 800126c:	1e50      	subs	r0, r2, #1
 800126e:	4182      	sbcs	r2, r0
 8001270:	433a      	orrs	r2, r7
 8001272:	2707      	movs	r7, #7
 8001274:	2300      	movs	r3, #0
 8001276:	4017      	ands	r7, r2
 8001278:	d009      	beq.n	800128e <__aeabi_ddiv+0x5c6>
 800127a:	210f      	movs	r1, #15
 800127c:	2300      	movs	r3, #0
 800127e:	4011      	ands	r1, r2
 8001280:	0014      	movs	r4, r2
 8001282:	2904      	cmp	r1, #4
 8001284:	d195      	bne.n	80011b2 <__aeabi_ddiv+0x4ea>
 8001286:	0022      	movs	r2, r4
 8001288:	075f      	lsls	r7, r3, #29
 800128a:	025b      	lsls	r3, r3, #9
 800128c:	0b1b      	lsrs	r3, r3, #12
 800128e:	08d2      	lsrs	r2, r2, #3
 8001290:	4317      	orrs	r7, r2
 8001292:	2200      	movs	r2, #0
 8001294:	e5a6      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 8001296:	2380      	movs	r3, #128	; 0x80
 8001298:	4659      	mov	r1, fp
 800129a:	031b      	lsls	r3, r3, #12
 800129c:	430b      	orrs	r3, r1
 800129e:	031b      	lsls	r3, r3, #12
 80012a0:	0017      	movs	r7, r2
 80012a2:	0b1b      	lsrs	r3, r3, #12
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <__aeabi_ddiv+0x5f8>)
 80012a6:	e59d      	b.n	8000de4 <__aeabi_ddiv+0x11c>
 80012a8:	42bd      	cmp	r5, r7
 80012aa:	d8b2      	bhi.n	8001212 <__aeabi_ddiv+0x54a>
 80012ac:	469b      	mov	fp, r3
 80012ae:	2400      	movs	r4, #0
 80012b0:	e6bf      	b.n	8001032 <__aeabi_ddiv+0x36a>
 80012b2:	4580      	cmp	r8, r0
 80012b4:	d3b9      	bcc.n	800122a <__aeabi_ddiv+0x562>
 80012b6:	001a      	movs	r2, r3
 80012b8:	e7c3      	b.n	8001242 <__aeabi_ddiv+0x57a>
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	000003ff 	.word	0x000003ff
 80012c0:	000007ff 	.word	0x000007ff
 80012c4:	0000041e 	.word	0x0000041e
 80012c8:	0000043e 	.word	0x0000043e

080012cc <__eqdf2>:
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ce:	464f      	mov	r7, r9
 80012d0:	4646      	mov	r6, r8
 80012d2:	46d6      	mov	lr, sl
 80012d4:	4684      	mov	ip, r0
 80012d6:	b5c0      	push	{r6, r7, lr}
 80012d8:	4680      	mov	r8, r0
 80012da:	4e19      	ldr	r6, [pc, #100]	; (8001340 <__eqdf2+0x74>)
 80012dc:	0318      	lsls	r0, r3, #12
 80012de:	030f      	lsls	r7, r1, #12
 80012e0:	004d      	lsls	r5, r1, #1
 80012e2:	0b00      	lsrs	r0, r0, #12
 80012e4:	005c      	lsls	r4, r3, #1
 80012e6:	4682      	mov	sl, r0
 80012e8:	0b3f      	lsrs	r7, r7, #12
 80012ea:	0d6d      	lsrs	r5, r5, #21
 80012ec:	0fc9      	lsrs	r1, r1, #31
 80012ee:	4691      	mov	r9, r2
 80012f0:	0d64      	lsrs	r4, r4, #21
 80012f2:	0fdb      	lsrs	r3, r3, #31
 80012f4:	2001      	movs	r0, #1
 80012f6:	42b5      	cmp	r5, r6
 80012f8:	d00a      	beq.n	8001310 <__eqdf2+0x44>
 80012fa:	42b4      	cmp	r4, r6
 80012fc:	d003      	beq.n	8001306 <__eqdf2+0x3a>
 80012fe:	42a5      	cmp	r5, r4
 8001300:	d101      	bne.n	8001306 <__eqdf2+0x3a>
 8001302:	4557      	cmp	r7, sl
 8001304:	d00c      	beq.n	8001320 <__eqdf2+0x54>
 8001306:	bc1c      	pop	{r2, r3, r4}
 8001308:	4690      	mov	r8, r2
 800130a:	4699      	mov	r9, r3
 800130c:	46a2      	mov	sl, r4
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001310:	4666      	mov	r6, ip
 8001312:	433e      	orrs	r6, r7
 8001314:	d1f7      	bne.n	8001306 <__eqdf2+0x3a>
 8001316:	42ac      	cmp	r4, r5
 8001318:	d1f5      	bne.n	8001306 <__eqdf2+0x3a>
 800131a:	4654      	mov	r4, sl
 800131c:	4314      	orrs	r4, r2
 800131e:	d1f2      	bne.n	8001306 <__eqdf2+0x3a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c8      	cmp	r8, r9
 8001324:	d1ef      	bne.n	8001306 <__eqdf2+0x3a>
 8001326:	4299      	cmp	r1, r3
 8001328:	d007      	beq.n	800133a <__eqdf2+0x6e>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d1eb      	bne.n	8001306 <__eqdf2+0x3a>
 800132e:	4663      	mov	r3, ip
 8001330:	431f      	orrs	r7, r3
 8001332:	0038      	movs	r0, r7
 8001334:	1e47      	subs	r7, r0, #1
 8001336:	41b8      	sbcs	r0, r7
 8001338:	e7e5      	b.n	8001306 <__eqdf2+0x3a>
 800133a:	2000      	movs	r0, #0
 800133c:	e7e3      	b.n	8001306 <__eqdf2+0x3a>
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	000007ff 	.word	0x000007ff

08001344 <__gedf2>:
 8001344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001346:	464f      	mov	r7, r9
 8001348:	4646      	mov	r6, r8
 800134a:	46d6      	mov	lr, sl
 800134c:	004d      	lsls	r5, r1, #1
 800134e:	b5c0      	push	{r6, r7, lr}
 8001350:	030e      	lsls	r6, r1, #12
 8001352:	0fc9      	lsrs	r1, r1, #31
 8001354:	468a      	mov	sl, r1
 8001356:	492c      	ldr	r1, [pc, #176]	; (8001408 <__gedf2+0xc4>)
 8001358:	031f      	lsls	r7, r3, #12
 800135a:	005c      	lsls	r4, r3, #1
 800135c:	4680      	mov	r8, r0
 800135e:	0b36      	lsrs	r6, r6, #12
 8001360:	0d6d      	lsrs	r5, r5, #21
 8001362:	4691      	mov	r9, r2
 8001364:	0b3f      	lsrs	r7, r7, #12
 8001366:	0d64      	lsrs	r4, r4, #21
 8001368:	0fdb      	lsrs	r3, r3, #31
 800136a:	428d      	cmp	r5, r1
 800136c:	d01e      	beq.n	80013ac <__gedf2+0x68>
 800136e:	428c      	cmp	r4, r1
 8001370:	d016      	beq.n	80013a0 <__gedf2+0x5c>
 8001372:	2d00      	cmp	r5, #0
 8001374:	d11e      	bne.n	80013b4 <__gedf2+0x70>
 8001376:	4330      	orrs	r0, r6
 8001378:	4684      	mov	ip, r0
 800137a:	2c00      	cmp	r4, #0
 800137c:	d101      	bne.n	8001382 <__gedf2+0x3e>
 800137e:	433a      	orrs	r2, r7
 8001380:	d023      	beq.n	80013ca <__gedf2+0x86>
 8001382:	4662      	mov	r2, ip
 8001384:	2a00      	cmp	r2, #0
 8001386:	d01a      	beq.n	80013be <__gedf2+0x7a>
 8001388:	459a      	cmp	sl, r3
 800138a:	d029      	beq.n	80013e0 <__gedf2+0x9c>
 800138c:	4651      	mov	r1, sl
 800138e:	2002      	movs	r0, #2
 8001390:	3901      	subs	r1, #1
 8001392:	4008      	ands	r0, r1
 8001394:	3801      	subs	r0, #1
 8001396:	bc1c      	pop	{r2, r3, r4}
 8001398:	4690      	mov	r8, r2
 800139a:	4699      	mov	r9, r3
 800139c:	46a2      	mov	sl, r4
 800139e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a0:	0039      	movs	r1, r7
 80013a2:	4311      	orrs	r1, r2
 80013a4:	d0e5      	beq.n	8001372 <__gedf2+0x2e>
 80013a6:	2002      	movs	r0, #2
 80013a8:	4240      	negs	r0, r0
 80013aa:	e7f4      	b.n	8001396 <__gedf2+0x52>
 80013ac:	4330      	orrs	r0, r6
 80013ae:	d1fa      	bne.n	80013a6 <__gedf2+0x62>
 80013b0:	42ac      	cmp	r4, r5
 80013b2:	d00f      	beq.n	80013d4 <__gedf2+0x90>
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	d10f      	bne.n	80013d8 <__gedf2+0x94>
 80013b8:	433a      	orrs	r2, r7
 80013ba:	d0e7      	beq.n	800138c <__gedf2+0x48>
 80013bc:	e00c      	b.n	80013d8 <__gedf2+0x94>
 80013be:	2201      	movs	r2, #1
 80013c0:	3b01      	subs	r3, #1
 80013c2:	4393      	bics	r3, r2
 80013c4:	0018      	movs	r0, r3
 80013c6:	3001      	adds	r0, #1
 80013c8:	e7e5      	b.n	8001396 <__gedf2+0x52>
 80013ca:	4663      	mov	r3, ip
 80013cc:	2000      	movs	r0, #0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0e1      	beq.n	8001396 <__gedf2+0x52>
 80013d2:	e7db      	b.n	800138c <__gedf2+0x48>
 80013d4:	433a      	orrs	r2, r7
 80013d6:	d1e6      	bne.n	80013a6 <__gedf2+0x62>
 80013d8:	459a      	cmp	sl, r3
 80013da:	d1d7      	bne.n	800138c <__gedf2+0x48>
 80013dc:	42a5      	cmp	r5, r4
 80013de:	dcd5      	bgt.n	800138c <__gedf2+0x48>
 80013e0:	42a5      	cmp	r5, r4
 80013e2:	db05      	blt.n	80013f0 <__gedf2+0xac>
 80013e4:	42be      	cmp	r6, r7
 80013e6:	d8d1      	bhi.n	800138c <__gedf2+0x48>
 80013e8:	d008      	beq.n	80013fc <__gedf2+0xb8>
 80013ea:	2000      	movs	r0, #0
 80013ec:	42be      	cmp	r6, r7
 80013ee:	d2d2      	bcs.n	8001396 <__gedf2+0x52>
 80013f0:	4650      	mov	r0, sl
 80013f2:	2301      	movs	r3, #1
 80013f4:	3801      	subs	r0, #1
 80013f6:	4398      	bics	r0, r3
 80013f8:	3001      	adds	r0, #1
 80013fa:	e7cc      	b.n	8001396 <__gedf2+0x52>
 80013fc:	45c8      	cmp	r8, r9
 80013fe:	d8c5      	bhi.n	800138c <__gedf2+0x48>
 8001400:	2000      	movs	r0, #0
 8001402:	45c8      	cmp	r8, r9
 8001404:	d3f4      	bcc.n	80013f0 <__gedf2+0xac>
 8001406:	e7c6      	b.n	8001396 <__gedf2+0x52>
 8001408:	000007ff 	.word	0x000007ff

0800140c <__ledf2>:
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	464f      	mov	r7, r9
 8001410:	4646      	mov	r6, r8
 8001412:	46d6      	mov	lr, sl
 8001414:	004d      	lsls	r5, r1, #1
 8001416:	b5c0      	push	{r6, r7, lr}
 8001418:	030e      	lsls	r6, r1, #12
 800141a:	0fc9      	lsrs	r1, r1, #31
 800141c:	468a      	mov	sl, r1
 800141e:	492e      	ldr	r1, [pc, #184]	; (80014d8 <__ledf2+0xcc>)
 8001420:	031f      	lsls	r7, r3, #12
 8001422:	005c      	lsls	r4, r3, #1
 8001424:	4680      	mov	r8, r0
 8001426:	0b36      	lsrs	r6, r6, #12
 8001428:	0d6d      	lsrs	r5, r5, #21
 800142a:	4691      	mov	r9, r2
 800142c:	0b3f      	lsrs	r7, r7, #12
 800142e:	0d64      	lsrs	r4, r4, #21
 8001430:	0fdb      	lsrs	r3, r3, #31
 8001432:	428d      	cmp	r5, r1
 8001434:	d018      	beq.n	8001468 <__ledf2+0x5c>
 8001436:	428c      	cmp	r4, r1
 8001438:	d011      	beq.n	800145e <__ledf2+0x52>
 800143a:	2d00      	cmp	r5, #0
 800143c:	d118      	bne.n	8001470 <__ledf2+0x64>
 800143e:	4330      	orrs	r0, r6
 8001440:	4684      	mov	ip, r0
 8001442:	2c00      	cmp	r4, #0
 8001444:	d11e      	bne.n	8001484 <__ledf2+0x78>
 8001446:	433a      	orrs	r2, r7
 8001448:	d11c      	bne.n	8001484 <__ledf2+0x78>
 800144a:	4663      	mov	r3, ip
 800144c:	2000      	movs	r0, #0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d030      	beq.n	80014b4 <__ledf2+0xa8>
 8001452:	4651      	mov	r1, sl
 8001454:	2002      	movs	r0, #2
 8001456:	3901      	subs	r1, #1
 8001458:	4008      	ands	r0, r1
 800145a:	3801      	subs	r0, #1
 800145c:	e02a      	b.n	80014b4 <__ledf2+0xa8>
 800145e:	0039      	movs	r1, r7
 8001460:	4311      	orrs	r1, r2
 8001462:	d0ea      	beq.n	800143a <__ledf2+0x2e>
 8001464:	2002      	movs	r0, #2
 8001466:	e025      	b.n	80014b4 <__ledf2+0xa8>
 8001468:	4330      	orrs	r0, r6
 800146a:	d1fb      	bne.n	8001464 <__ledf2+0x58>
 800146c:	42ac      	cmp	r4, r5
 800146e:	d026      	beq.n	80014be <__ledf2+0xb2>
 8001470:	2c00      	cmp	r4, #0
 8001472:	d126      	bne.n	80014c2 <__ledf2+0xb6>
 8001474:	433a      	orrs	r2, r7
 8001476:	d124      	bne.n	80014c2 <__ledf2+0xb6>
 8001478:	4651      	mov	r1, sl
 800147a:	2002      	movs	r0, #2
 800147c:	3901      	subs	r1, #1
 800147e:	4008      	ands	r0, r1
 8001480:	3801      	subs	r0, #1
 8001482:	e017      	b.n	80014b4 <__ledf2+0xa8>
 8001484:	4662      	mov	r2, ip
 8001486:	2a00      	cmp	r2, #0
 8001488:	d00f      	beq.n	80014aa <__ledf2+0x9e>
 800148a:	459a      	cmp	sl, r3
 800148c:	d1e1      	bne.n	8001452 <__ledf2+0x46>
 800148e:	42a5      	cmp	r5, r4
 8001490:	db05      	blt.n	800149e <__ledf2+0x92>
 8001492:	42be      	cmp	r6, r7
 8001494:	d8dd      	bhi.n	8001452 <__ledf2+0x46>
 8001496:	d019      	beq.n	80014cc <__ledf2+0xc0>
 8001498:	2000      	movs	r0, #0
 800149a:	42be      	cmp	r6, r7
 800149c:	d20a      	bcs.n	80014b4 <__ledf2+0xa8>
 800149e:	4650      	mov	r0, sl
 80014a0:	2301      	movs	r3, #1
 80014a2:	3801      	subs	r0, #1
 80014a4:	4398      	bics	r0, r3
 80014a6:	3001      	adds	r0, #1
 80014a8:	e004      	b.n	80014b4 <__ledf2+0xa8>
 80014aa:	2201      	movs	r2, #1
 80014ac:	3b01      	subs	r3, #1
 80014ae:	4393      	bics	r3, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	3001      	adds	r0, #1
 80014b4:	bc1c      	pop	{r2, r3, r4}
 80014b6:	4690      	mov	r8, r2
 80014b8:	4699      	mov	r9, r3
 80014ba:	46a2      	mov	sl, r4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	433a      	orrs	r2, r7
 80014c0:	d1d0      	bne.n	8001464 <__ledf2+0x58>
 80014c2:	459a      	cmp	sl, r3
 80014c4:	d1c5      	bne.n	8001452 <__ledf2+0x46>
 80014c6:	42a5      	cmp	r5, r4
 80014c8:	dcc3      	bgt.n	8001452 <__ledf2+0x46>
 80014ca:	e7e0      	b.n	800148e <__ledf2+0x82>
 80014cc:	45c8      	cmp	r8, r9
 80014ce:	d8c0      	bhi.n	8001452 <__ledf2+0x46>
 80014d0:	2000      	movs	r0, #0
 80014d2:	45c8      	cmp	r8, r9
 80014d4:	d3e3      	bcc.n	800149e <__ledf2+0x92>
 80014d6:	e7ed      	b.n	80014b4 <__ledf2+0xa8>
 80014d8:	000007ff 	.word	0x000007ff

080014dc <__aeabi_dmul>:
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	4657      	mov	r7, sl
 80014e0:	46de      	mov	lr, fp
 80014e2:	464e      	mov	r6, r9
 80014e4:	4645      	mov	r5, r8
 80014e6:	b5e0      	push	{r5, r6, r7, lr}
 80014e8:	4683      	mov	fp, r0
 80014ea:	0006      	movs	r6, r0
 80014ec:	030f      	lsls	r7, r1, #12
 80014ee:	0048      	lsls	r0, r1, #1
 80014f0:	b087      	sub	sp, #28
 80014f2:	4692      	mov	sl, r2
 80014f4:	001d      	movs	r5, r3
 80014f6:	0b3f      	lsrs	r7, r7, #12
 80014f8:	0d40      	lsrs	r0, r0, #21
 80014fa:	0fcc      	lsrs	r4, r1, #31
 80014fc:	2800      	cmp	r0, #0
 80014fe:	d100      	bne.n	8001502 <__aeabi_dmul+0x26>
 8001500:	e06f      	b.n	80015e2 <__aeabi_dmul+0x106>
 8001502:	4bde      	ldr	r3, [pc, #888]	; (800187c <__aeabi_dmul+0x3a0>)
 8001504:	4298      	cmp	r0, r3
 8001506:	d038      	beq.n	800157a <__aeabi_dmul+0x9e>
 8001508:	2380      	movs	r3, #128	; 0x80
 800150a:	00ff      	lsls	r7, r7, #3
 800150c:	041b      	lsls	r3, r3, #16
 800150e:	431f      	orrs	r7, r3
 8001510:	0f73      	lsrs	r3, r6, #29
 8001512:	433b      	orrs	r3, r7
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	4bda      	ldr	r3, [pc, #872]	; (8001880 <__aeabi_dmul+0x3a4>)
 8001518:	2700      	movs	r7, #0
 800151a:	4699      	mov	r9, r3
 800151c:	2300      	movs	r3, #0
 800151e:	469b      	mov	fp, r3
 8001520:	00f6      	lsls	r6, r6, #3
 8001522:	4481      	add	r9, r0
 8001524:	032b      	lsls	r3, r5, #12
 8001526:	0069      	lsls	r1, r5, #1
 8001528:	0b1b      	lsrs	r3, r3, #12
 800152a:	4652      	mov	r2, sl
 800152c:	4698      	mov	r8, r3
 800152e:	0d49      	lsrs	r1, r1, #21
 8001530:	0fed      	lsrs	r5, r5, #31
 8001532:	2900      	cmp	r1, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_dmul+0x5c>
 8001536:	e085      	b.n	8001644 <__aeabi_dmul+0x168>
 8001538:	4bd0      	ldr	r3, [pc, #832]	; (800187c <__aeabi_dmul+0x3a0>)
 800153a:	4299      	cmp	r1, r3
 800153c:	d100      	bne.n	8001540 <__aeabi_dmul+0x64>
 800153e:	e073      	b.n	8001628 <__aeabi_dmul+0x14c>
 8001540:	4643      	mov	r3, r8
 8001542:	00da      	lsls	r2, r3, #3
 8001544:	2380      	movs	r3, #128	; 0x80
 8001546:	041b      	lsls	r3, r3, #16
 8001548:	4313      	orrs	r3, r2
 800154a:	4652      	mov	r2, sl
 800154c:	48cc      	ldr	r0, [pc, #816]	; (8001880 <__aeabi_dmul+0x3a4>)
 800154e:	0f52      	lsrs	r2, r2, #29
 8001550:	4684      	mov	ip, r0
 8001552:	4313      	orrs	r3, r2
 8001554:	4652      	mov	r2, sl
 8001556:	2000      	movs	r0, #0
 8001558:	4461      	add	r1, ip
 800155a:	00d2      	lsls	r2, r2, #3
 800155c:	4489      	add	r9, r1
 800155e:	0021      	movs	r1, r4
 8001560:	4069      	eors	r1, r5
 8001562:	9100      	str	r1, [sp, #0]
 8001564:	468c      	mov	ip, r1
 8001566:	2101      	movs	r1, #1
 8001568:	4449      	add	r1, r9
 800156a:	468a      	mov	sl, r1
 800156c:	2f0f      	cmp	r7, #15
 800156e:	d900      	bls.n	8001572 <__aeabi_dmul+0x96>
 8001570:	e090      	b.n	8001694 <__aeabi_dmul+0x1b8>
 8001572:	49c4      	ldr	r1, [pc, #784]	; (8001884 <__aeabi_dmul+0x3a8>)
 8001574:	00bf      	lsls	r7, r7, #2
 8001576:	59cf      	ldr	r7, [r1, r7]
 8001578:	46bf      	mov	pc, r7
 800157a:	465b      	mov	r3, fp
 800157c:	433b      	orrs	r3, r7
 800157e:	9301      	str	r3, [sp, #4]
 8001580:	d000      	beq.n	8001584 <__aeabi_dmul+0xa8>
 8001582:	e16a      	b.n	800185a <__aeabi_dmul+0x37e>
 8001584:	2302      	movs	r3, #2
 8001586:	2708      	movs	r7, #8
 8001588:	2600      	movs	r6, #0
 800158a:	4681      	mov	r9, r0
 800158c:	469b      	mov	fp, r3
 800158e:	e7c9      	b.n	8001524 <__aeabi_dmul+0x48>
 8001590:	0032      	movs	r2, r6
 8001592:	4658      	mov	r0, fp
 8001594:	9b01      	ldr	r3, [sp, #4]
 8001596:	4661      	mov	r1, ip
 8001598:	9100      	str	r1, [sp, #0]
 800159a:	2802      	cmp	r0, #2
 800159c:	d100      	bne.n	80015a0 <__aeabi_dmul+0xc4>
 800159e:	e075      	b.n	800168c <__aeabi_dmul+0x1b0>
 80015a0:	2803      	cmp	r0, #3
 80015a2:	d100      	bne.n	80015a6 <__aeabi_dmul+0xca>
 80015a4:	e1fe      	b.n	80019a4 <__aeabi_dmul+0x4c8>
 80015a6:	2801      	cmp	r0, #1
 80015a8:	d000      	beq.n	80015ac <__aeabi_dmul+0xd0>
 80015aa:	e12c      	b.n	8001806 <__aeabi_dmul+0x32a>
 80015ac:	2300      	movs	r3, #0
 80015ae:	2700      	movs	r7, #0
 80015b0:	2600      	movs	r6, #0
 80015b2:	2500      	movs	r5, #0
 80015b4:	033f      	lsls	r7, r7, #12
 80015b6:	0d2a      	lsrs	r2, r5, #20
 80015b8:	0b3f      	lsrs	r7, r7, #12
 80015ba:	48b3      	ldr	r0, [pc, #716]	; (8001888 <__aeabi_dmul+0x3ac>)
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	433a      	orrs	r2, r7
 80015c0:	4002      	ands	r2, r0
 80015c2:	051b      	lsls	r3, r3, #20
 80015c4:	4313      	orrs	r3, r2
 80015c6:	9a00      	ldr	r2, [sp, #0]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	07d1      	lsls	r1, r2, #31
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	430b      	orrs	r3, r1
 80015d0:	0030      	movs	r0, r6
 80015d2:	0019      	movs	r1, r3
 80015d4:	b007      	add	sp, #28
 80015d6:	bc3c      	pop	{r2, r3, r4, r5}
 80015d8:	4690      	mov	r8, r2
 80015da:	4699      	mov	r9, r3
 80015dc:	46a2      	mov	sl, r4
 80015de:	46ab      	mov	fp, r5
 80015e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e2:	465b      	mov	r3, fp
 80015e4:	433b      	orrs	r3, r7
 80015e6:	9301      	str	r3, [sp, #4]
 80015e8:	d100      	bne.n	80015ec <__aeabi_dmul+0x110>
 80015ea:	e12f      	b.n	800184c <__aeabi_dmul+0x370>
 80015ec:	2f00      	cmp	r7, #0
 80015ee:	d100      	bne.n	80015f2 <__aeabi_dmul+0x116>
 80015f0:	e1a5      	b.n	800193e <__aeabi_dmul+0x462>
 80015f2:	0038      	movs	r0, r7
 80015f4:	f000 fdce 	bl	8002194 <__clzsi2>
 80015f8:	0003      	movs	r3, r0
 80015fa:	3b0b      	subs	r3, #11
 80015fc:	2b1c      	cmp	r3, #28
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dmul+0x126>
 8001600:	e196      	b.n	8001930 <__aeabi_dmul+0x454>
 8001602:	221d      	movs	r2, #29
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	465a      	mov	r2, fp
 8001608:	0001      	movs	r1, r0
 800160a:	40da      	lsrs	r2, r3
 800160c:	465e      	mov	r6, fp
 800160e:	3908      	subs	r1, #8
 8001610:	408f      	lsls	r7, r1
 8001612:	0013      	movs	r3, r2
 8001614:	408e      	lsls	r6, r1
 8001616:	433b      	orrs	r3, r7
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	4b9c      	ldr	r3, [pc, #624]	; (800188c <__aeabi_dmul+0x3b0>)
 800161c:	2700      	movs	r7, #0
 800161e:	1a1b      	subs	r3, r3, r0
 8001620:	4699      	mov	r9, r3
 8001622:	2300      	movs	r3, #0
 8001624:	469b      	mov	fp, r3
 8001626:	e77d      	b.n	8001524 <__aeabi_dmul+0x48>
 8001628:	4641      	mov	r1, r8
 800162a:	4653      	mov	r3, sl
 800162c:	430b      	orrs	r3, r1
 800162e:	4993      	ldr	r1, [pc, #588]	; (800187c <__aeabi_dmul+0x3a0>)
 8001630:	468c      	mov	ip, r1
 8001632:	44e1      	add	r9, ip
 8001634:	2b00      	cmp	r3, #0
 8001636:	d000      	beq.n	800163a <__aeabi_dmul+0x15e>
 8001638:	e11a      	b.n	8001870 <__aeabi_dmul+0x394>
 800163a:	2202      	movs	r2, #2
 800163c:	2002      	movs	r0, #2
 800163e:	4317      	orrs	r7, r2
 8001640:	2200      	movs	r2, #0
 8001642:	e78c      	b.n	800155e <__aeabi_dmul+0x82>
 8001644:	4313      	orrs	r3, r2
 8001646:	d100      	bne.n	800164a <__aeabi_dmul+0x16e>
 8001648:	e10d      	b.n	8001866 <__aeabi_dmul+0x38a>
 800164a:	4643      	mov	r3, r8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d100      	bne.n	8001652 <__aeabi_dmul+0x176>
 8001650:	e181      	b.n	8001956 <__aeabi_dmul+0x47a>
 8001652:	4640      	mov	r0, r8
 8001654:	f000 fd9e 	bl	8002194 <__clzsi2>
 8001658:	0002      	movs	r2, r0
 800165a:	3a0b      	subs	r2, #11
 800165c:	2a1c      	cmp	r2, #28
 800165e:	dd00      	ble.n	8001662 <__aeabi_dmul+0x186>
 8001660:	e172      	b.n	8001948 <__aeabi_dmul+0x46c>
 8001662:	0001      	movs	r1, r0
 8001664:	4643      	mov	r3, r8
 8001666:	3908      	subs	r1, #8
 8001668:	408b      	lsls	r3, r1
 800166a:	4698      	mov	r8, r3
 800166c:	231d      	movs	r3, #29
 800166e:	1a9a      	subs	r2, r3, r2
 8001670:	4653      	mov	r3, sl
 8001672:	40d3      	lsrs	r3, r2
 8001674:	001a      	movs	r2, r3
 8001676:	4643      	mov	r3, r8
 8001678:	4313      	orrs	r3, r2
 800167a:	4652      	mov	r2, sl
 800167c:	408a      	lsls	r2, r1
 800167e:	4649      	mov	r1, r9
 8001680:	1a08      	subs	r0, r1, r0
 8001682:	4982      	ldr	r1, [pc, #520]	; (800188c <__aeabi_dmul+0x3b0>)
 8001684:	4689      	mov	r9, r1
 8001686:	4481      	add	r9, r0
 8001688:	2000      	movs	r0, #0
 800168a:	e768      	b.n	800155e <__aeabi_dmul+0x82>
 800168c:	4b7b      	ldr	r3, [pc, #492]	; (800187c <__aeabi_dmul+0x3a0>)
 800168e:	2700      	movs	r7, #0
 8001690:	2600      	movs	r6, #0
 8001692:	e78e      	b.n	80015b2 <__aeabi_dmul+0xd6>
 8001694:	0c14      	lsrs	r4, r2, #16
 8001696:	0412      	lsls	r2, r2, #16
 8001698:	0c12      	lsrs	r2, r2, #16
 800169a:	0011      	movs	r1, r2
 800169c:	0c37      	lsrs	r7, r6, #16
 800169e:	0436      	lsls	r6, r6, #16
 80016a0:	0c35      	lsrs	r5, r6, #16
 80016a2:	4379      	muls	r1, r7
 80016a4:	0028      	movs	r0, r5
 80016a6:	468c      	mov	ip, r1
 80016a8:	002e      	movs	r6, r5
 80016aa:	4360      	muls	r0, r4
 80016ac:	4460      	add	r0, ip
 80016ae:	4683      	mov	fp, r0
 80016b0:	4356      	muls	r6, r2
 80016b2:	0021      	movs	r1, r4
 80016b4:	0c30      	lsrs	r0, r6, #16
 80016b6:	4680      	mov	r8, r0
 80016b8:	4658      	mov	r0, fp
 80016ba:	4379      	muls	r1, r7
 80016bc:	4440      	add	r0, r8
 80016be:	9102      	str	r1, [sp, #8]
 80016c0:	4584      	cmp	ip, r0
 80016c2:	d906      	bls.n	80016d2 <__aeabi_dmul+0x1f6>
 80016c4:	4688      	mov	r8, r1
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	0249      	lsls	r1, r1, #9
 80016ca:	468c      	mov	ip, r1
 80016cc:	44e0      	add	r8, ip
 80016ce:	4641      	mov	r1, r8
 80016d0:	9102      	str	r1, [sp, #8]
 80016d2:	0436      	lsls	r6, r6, #16
 80016d4:	0c01      	lsrs	r1, r0, #16
 80016d6:	0c36      	lsrs	r6, r6, #16
 80016d8:	0400      	lsls	r0, r0, #16
 80016da:	468b      	mov	fp, r1
 80016dc:	1981      	adds	r1, r0, r6
 80016de:	0c1e      	lsrs	r6, r3, #16
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	0c1b      	lsrs	r3, r3, #16
 80016e4:	9103      	str	r1, [sp, #12]
 80016e6:	0019      	movs	r1, r3
 80016e8:	4379      	muls	r1, r7
 80016ea:	468c      	mov	ip, r1
 80016ec:	0028      	movs	r0, r5
 80016ee:	4375      	muls	r5, r6
 80016f0:	4465      	add	r5, ip
 80016f2:	46a8      	mov	r8, r5
 80016f4:	4358      	muls	r0, r3
 80016f6:	0c05      	lsrs	r5, r0, #16
 80016f8:	4445      	add	r5, r8
 80016fa:	4377      	muls	r7, r6
 80016fc:	42a9      	cmp	r1, r5
 80016fe:	d903      	bls.n	8001708 <__aeabi_dmul+0x22c>
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	0249      	lsls	r1, r1, #9
 8001704:	468c      	mov	ip, r1
 8001706:	4467      	add	r7, ip
 8001708:	0c29      	lsrs	r1, r5, #16
 800170a:	468c      	mov	ip, r1
 800170c:	0039      	movs	r1, r7
 800170e:	0400      	lsls	r0, r0, #16
 8001710:	0c00      	lsrs	r0, r0, #16
 8001712:	042d      	lsls	r5, r5, #16
 8001714:	182d      	adds	r5, r5, r0
 8001716:	4461      	add	r1, ip
 8001718:	44ab      	add	fp, r5
 800171a:	9105      	str	r1, [sp, #20]
 800171c:	4659      	mov	r1, fp
 800171e:	9104      	str	r1, [sp, #16]
 8001720:	9901      	ldr	r1, [sp, #4]
 8001722:	040f      	lsls	r7, r1, #16
 8001724:	0c3f      	lsrs	r7, r7, #16
 8001726:	0c08      	lsrs	r0, r1, #16
 8001728:	0039      	movs	r1, r7
 800172a:	4351      	muls	r1, r2
 800172c:	4342      	muls	r2, r0
 800172e:	4690      	mov	r8, r2
 8001730:	0002      	movs	r2, r0
 8001732:	468c      	mov	ip, r1
 8001734:	0c09      	lsrs	r1, r1, #16
 8001736:	468b      	mov	fp, r1
 8001738:	4362      	muls	r2, r4
 800173a:	437c      	muls	r4, r7
 800173c:	4444      	add	r4, r8
 800173e:	445c      	add	r4, fp
 8001740:	45a0      	cmp	r8, r4
 8001742:	d903      	bls.n	800174c <__aeabi_dmul+0x270>
 8001744:	2180      	movs	r1, #128	; 0x80
 8001746:	0249      	lsls	r1, r1, #9
 8001748:	4688      	mov	r8, r1
 800174a:	4442      	add	r2, r8
 800174c:	0c21      	lsrs	r1, r4, #16
 800174e:	4688      	mov	r8, r1
 8001750:	4661      	mov	r1, ip
 8001752:	0409      	lsls	r1, r1, #16
 8001754:	0c09      	lsrs	r1, r1, #16
 8001756:	468c      	mov	ip, r1
 8001758:	0039      	movs	r1, r7
 800175a:	4359      	muls	r1, r3
 800175c:	4343      	muls	r3, r0
 800175e:	4370      	muls	r0, r6
 8001760:	437e      	muls	r6, r7
 8001762:	0c0f      	lsrs	r7, r1, #16
 8001764:	18f6      	adds	r6, r6, r3
 8001766:	0424      	lsls	r4, r4, #16
 8001768:	19be      	adds	r6, r7, r6
 800176a:	4464      	add	r4, ip
 800176c:	4442      	add	r2, r8
 800176e:	468c      	mov	ip, r1
 8001770:	42b3      	cmp	r3, r6
 8001772:	d903      	bls.n	800177c <__aeabi_dmul+0x2a0>
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	4698      	mov	r8, r3
 800177a:	4440      	add	r0, r8
 800177c:	9b02      	ldr	r3, [sp, #8]
 800177e:	4661      	mov	r1, ip
 8001780:	4698      	mov	r8, r3
 8001782:	9b04      	ldr	r3, [sp, #16]
 8001784:	0437      	lsls	r7, r6, #16
 8001786:	4443      	add	r3, r8
 8001788:	469b      	mov	fp, r3
 800178a:	45ab      	cmp	fp, r5
 800178c:	41ad      	sbcs	r5, r5
 800178e:	426b      	negs	r3, r5
 8001790:	040d      	lsls	r5, r1, #16
 8001792:	9905      	ldr	r1, [sp, #20]
 8001794:	0c2d      	lsrs	r5, r5, #16
 8001796:	468c      	mov	ip, r1
 8001798:	197f      	adds	r7, r7, r5
 800179a:	4467      	add	r7, ip
 800179c:	18fd      	adds	r5, r7, r3
 800179e:	46a8      	mov	r8, r5
 80017a0:	465d      	mov	r5, fp
 80017a2:	192d      	adds	r5, r5, r4
 80017a4:	42a5      	cmp	r5, r4
 80017a6:	41a4      	sbcs	r4, r4
 80017a8:	4693      	mov	fp, r2
 80017aa:	4264      	negs	r4, r4
 80017ac:	46a4      	mov	ip, r4
 80017ae:	44c3      	add	fp, r8
 80017b0:	44dc      	add	ip, fp
 80017b2:	428f      	cmp	r7, r1
 80017b4:	41bf      	sbcs	r7, r7
 80017b6:	4598      	cmp	r8, r3
 80017b8:	419b      	sbcs	r3, r3
 80017ba:	4593      	cmp	fp, r2
 80017bc:	4192      	sbcs	r2, r2
 80017be:	45a4      	cmp	ip, r4
 80017c0:	41a4      	sbcs	r4, r4
 80017c2:	425b      	negs	r3, r3
 80017c4:	427f      	negs	r7, r7
 80017c6:	431f      	orrs	r7, r3
 80017c8:	0c36      	lsrs	r6, r6, #16
 80017ca:	4252      	negs	r2, r2
 80017cc:	4264      	negs	r4, r4
 80017ce:	19bf      	adds	r7, r7, r6
 80017d0:	4322      	orrs	r2, r4
 80017d2:	18bf      	adds	r7, r7, r2
 80017d4:	4662      	mov	r2, ip
 80017d6:	1838      	adds	r0, r7, r0
 80017d8:	0243      	lsls	r3, r0, #9
 80017da:	0dd2      	lsrs	r2, r2, #23
 80017dc:	9903      	ldr	r1, [sp, #12]
 80017de:	4313      	orrs	r3, r2
 80017e0:	026a      	lsls	r2, r5, #9
 80017e2:	430a      	orrs	r2, r1
 80017e4:	1e50      	subs	r0, r2, #1
 80017e6:	4182      	sbcs	r2, r0
 80017e8:	4661      	mov	r1, ip
 80017ea:	0ded      	lsrs	r5, r5, #23
 80017ec:	432a      	orrs	r2, r5
 80017ee:	024e      	lsls	r6, r1, #9
 80017f0:	4332      	orrs	r2, r6
 80017f2:	01d9      	lsls	r1, r3, #7
 80017f4:	d400      	bmi.n	80017f8 <__aeabi_dmul+0x31c>
 80017f6:	e0b3      	b.n	8001960 <__aeabi_dmul+0x484>
 80017f8:	2601      	movs	r6, #1
 80017fa:	0850      	lsrs	r0, r2, #1
 80017fc:	4032      	ands	r2, r6
 80017fe:	4302      	orrs	r2, r0
 8001800:	07de      	lsls	r6, r3, #31
 8001802:	4332      	orrs	r2, r6
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	4c22      	ldr	r4, [pc, #136]	; (8001890 <__aeabi_dmul+0x3b4>)
 8001808:	4454      	add	r4, sl
 800180a:	2c00      	cmp	r4, #0
 800180c:	dd62      	ble.n	80018d4 <__aeabi_dmul+0x3f8>
 800180e:	0751      	lsls	r1, r2, #29
 8001810:	d009      	beq.n	8001826 <__aeabi_dmul+0x34a>
 8001812:	200f      	movs	r0, #15
 8001814:	4010      	ands	r0, r2
 8001816:	2804      	cmp	r0, #4
 8001818:	d005      	beq.n	8001826 <__aeabi_dmul+0x34a>
 800181a:	1d10      	adds	r0, r2, #4
 800181c:	4290      	cmp	r0, r2
 800181e:	4192      	sbcs	r2, r2
 8001820:	4252      	negs	r2, r2
 8001822:	189b      	adds	r3, r3, r2
 8001824:	0002      	movs	r2, r0
 8001826:	01d9      	lsls	r1, r3, #7
 8001828:	d504      	bpl.n	8001834 <__aeabi_dmul+0x358>
 800182a:	2480      	movs	r4, #128	; 0x80
 800182c:	4819      	ldr	r0, [pc, #100]	; (8001894 <__aeabi_dmul+0x3b8>)
 800182e:	00e4      	lsls	r4, r4, #3
 8001830:	4003      	ands	r3, r0
 8001832:	4454      	add	r4, sl
 8001834:	4818      	ldr	r0, [pc, #96]	; (8001898 <__aeabi_dmul+0x3bc>)
 8001836:	4284      	cmp	r4, r0
 8001838:	dd00      	ble.n	800183c <__aeabi_dmul+0x360>
 800183a:	e727      	b.n	800168c <__aeabi_dmul+0x1b0>
 800183c:	075e      	lsls	r6, r3, #29
 800183e:	025b      	lsls	r3, r3, #9
 8001840:	08d2      	lsrs	r2, r2, #3
 8001842:	0b1f      	lsrs	r7, r3, #12
 8001844:	0563      	lsls	r3, r4, #21
 8001846:	4316      	orrs	r6, r2
 8001848:	0d5b      	lsrs	r3, r3, #21
 800184a:	e6b2      	b.n	80015b2 <__aeabi_dmul+0xd6>
 800184c:	2300      	movs	r3, #0
 800184e:	4699      	mov	r9, r3
 8001850:	3301      	adds	r3, #1
 8001852:	2704      	movs	r7, #4
 8001854:	2600      	movs	r6, #0
 8001856:	469b      	mov	fp, r3
 8001858:	e664      	b.n	8001524 <__aeabi_dmul+0x48>
 800185a:	2303      	movs	r3, #3
 800185c:	9701      	str	r7, [sp, #4]
 800185e:	4681      	mov	r9, r0
 8001860:	270c      	movs	r7, #12
 8001862:	469b      	mov	fp, r3
 8001864:	e65e      	b.n	8001524 <__aeabi_dmul+0x48>
 8001866:	2201      	movs	r2, #1
 8001868:	2001      	movs	r0, #1
 800186a:	4317      	orrs	r7, r2
 800186c:	2200      	movs	r2, #0
 800186e:	e676      	b.n	800155e <__aeabi_dmul+0x82>
 8001870:	2303      	movs	r3, #3
 8001872:	2003      	movs	r0, #3
 8001874:	431f      	orrs	r7, r3
 8001876:	4643      	mov	r3, r8
 8001878:	e671      	b.n	800155e <__aeabi_dmul+0x82>
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	000007ff 	.word	0x000007ff
 8001880:	fffffc01 	.word	0xfffffc01
 8001884:	0800b5c4 	.word	0x0800b5c4
 8001888:	800fffff 	.word	0x800fffff
 800188c:	fffffc0d 	.word	0xfffffc0d
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	2300      	movs	r3, #0
 800189e:	2780      	movs	r7, #128	; 0x80
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	033f      	lsls	r7, r7, #12
 80018a4:	2600      	movs	r6, #0
 80018a6:	4b43      	ldr	r3, [pc, #268]	; (80019b4 <__aeabi_dmul+0x4d8>)
 80018a8:	e683      	b.n	80015b2 <__aeabi_dmul+0xd6>
 80018aa:	9b01      	ldr	r3, [sp, #4]
 80018ac:	0032      	movs	r2, r6
 80018ae:	46a4      	mov	ip, r4
 80018b0:	4658      	mov	r0, fp
 80018b2:	e670      	b.n	8001596 <__aeabi_dmul+0xba>
 80018b4:	46ac      	mov	ip, r5
 80018b6:	e66e      	b.n	8001596 <__aeabi_dmul+0xba>
 80018b8:	2780      	movs	r7, #128	; 0x80
 80018ba:	9901      	ldr	r1, [sp, #4]
 80018bc:	033f      	lsls	r7, r7, #12
 80018be:	4239      	tst	r1, r7
 80018c0:	d02d      	beq.n	800191e <__aeabi_dmul+0x442>
 80018c2:	423b      	tst	r3, r7
 80018c4:	d12b      	bne.n	800191e <__aeabi_dmul+0x442>
 80018c6:	431f      	orrs	r7, r3
 80018c8:	033f      	lsls	r7, r7, #12
 80018ca:	0b3f      	lsrs	r7, r7, #12
 80018cc:	9500      	str	r5, [sp, #0]
 80018ce:	0016      	movs	r6, r2
 80018d0:	4b38      	ldr	r3, [pc, #224]	; (80019b4 <__aeabi_dmul+0x4d8>)
 80018d2:	e66e      	b.n	80015b2 <__aeabi_dmul+0xd6>
 80018d4:	2501      	movs	r5, #1
 80018d6:	1b2d      	subs	r5, r5, r4
 80018d8:	2d38      	cmp	r5, #56	; 0x38
 80018da:	dd00      	ble.n	80018de <__aeabi_dmul+0x402>
 80018dc:	e666      	b.n	80015ac <__aeabi_dmul+0xd0>
 80018de:	2d1f      	cmp	r5, #31
 80018e0:	dc40      	bgt.n	8001964 <__aeabi_dmul+0x488>
 80018e2:	4835      	ldr	r0, [pc, #212]	; (80019b8 <__aeabi_dmul+0x4dc>)
 80018e4:	001c      	movs	r4, r3
 80018e6:	4450      	add	r0, sl
 80018e8:	0016      	movs	r6, r2
 80018ea:	4082      	lsls	r2, r0
 80018ec:	4084      	lsls	r4, r0
 80018ee:	40ee      	lsrs	r6, r5
 80018f0:	1e50      	subs	r0, r2, #1
 80018f2:	4182      	sbcs	r2, r0
 80018f4:	4334      	orrs	r4, r6
 80018f6:	4314      	orrs	r4, r2
 80018f8:	40eb      	lsrs	r3, r5
 80018fa:	0762      	lsls	r2, r4, #29
 80018fc:	d009      	beq.n	8001912 <__aeabi_dmul+0x436>
 80018fe:	220f      	movs	r2, #15
 8001900:	4022      	ands	r2, r4
 8001902:	2a04      	cmp	r2, #4
 8001904:	d005      	beq.n	8001912 <__aeabi_dmul+0x436>
 8001906:	0022      	movs	r2, r4
 8001908:	1d14      	adds	r4, r2, #4
 800190a:	4294      	cmp	r4, r2
 800190c:	4180      	sbcs	r0, r0
 800190e:	4240      	negs	r0, r0
 8001910:	181b      	adds	r3, r3, r0
 8001912:	021a      	lsls	r2, r3, #8
 8001914:	d53e      	bpl.n	8001994 <__aeabi_dmul+0x4b8>
 8001916:	2301      	movs	r3, #1
 8001918:	2700      	movs	r7, #0
 800191a:	2600      	movs	r6, #0
 800191c:	e649      	b.n	80015b2 <__aeabi_dmul+0xd6>
 800191e:	2780      	movs	r7, #128	; 0x80
 8001920:	9b01      	ldr	r3, [sp, #4]
 8001922:	033f      	lsls	r7, r7, #12
 8001924:	431f      	orrs	r7, r3
 8001926:	033f      	lsls	r7, r7, #12
 8001928:	0b3f      	lsrs	r7, r7, #12
 800192a:	9400      	str	r4, [sp, #0]
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <__aeabi_dmul+0x4d8>)
 800192e:	e640      	b.n	80015b2 <__aeabi_dmul+0xd6>
 8001930:	0003      	movs	r3, r0
 8001932:	465a      	mov	r2, fp
 8001934:	3b28      	subs	r3, #40	; 0x28
 8001936:	409a      	lsls	r2, r3
 8001938:	2600      	movs	r6, #0
 800193a:	9201      	str	r2, [sp, #4]
 800193c:	e66d      	b.n	800161a <__aeabi_dmul+0x13e>
 800193e:	4658      	mov	r0, fp
 8001940:	f000 fc28 	bl	8002194 <__clzsi2>
 8001944:	3020      	adds	r0, #32
 8001946:	e657      	b.n	80015f8 <__aeabi_dmul+0x11c>
 8001948:	0003      	movs	r3, r0
 800194a:	4652      	mov	r2, sl
 800194c:	3b28      	subs	r3, #40	; 0x28
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	2200      	movs	r2, #0
 8001954:	e693      	b.n	800167e <__aeabi_dmul+0x1a2>
 8001956:	4650      	mov	r0, sl
 8001958:	f000 fc1c 	bl	8002194 <__clzsi2>
 800195c:	3020      	adds	r0, #32
 800195e:	e67b      	b.n	8001658 <__aeabi_dmul+0x17c>
 8001960:	46ca      	mov	sl, r9
 8001962:	e750      	b.n	8001806 <__aeabi_dmul+0x32a>
 8001964:	201f      	movs	r0, #31
 8001966:	001e      	movs	r6, r3
 8001968:	4240      	negs	r0, r0
 800196a:	1b04      	subs	r4, r0, r4
 800196c:	40e6      	lsrs	r6, r4
 800196e:	2d20      	cmp	r5, #32
 8001970:	d003      	beq.n	800197a <__aeabi_dmul+0x49e>
 8001972:	4c12      	ldr	r4, [pc, #72]	; (80019bc <__aeabi_dmul+0x4e0>)
 8001974:	4454      	add	r4, sl
 8001976:	40a3      	lsls	r3, r4
 8001978:	431a      	orrs	r2, r3
 800197a:	1e50      	subs	r0, r2, #1
 800197c:	4182      	sbcs	r2, r0
 800197e:	4332      	orrs	r2, r6
 8001980:	2607      	movs	r6, #7
 8001982:	2700      	movs	r7, #0
 8001984:	4016      	ands	r6, r2
 8001986:	d009      	beq.n	800199c <__aeabi_dmul+0x4c0>
 8001988:	200f      	movs	r0, #15
 800198a:	2300      	movs	r3, #0
 800198c:	4010      	ands	r0, r2
 800198e:	0014      	movs	r4, r2
 8001990:	2804      	cmp	r0, #4
 8001992:	d1b9      	bne.n	8001908 <__aeabi_dmul+0x42c>
 8001994:	0022      	movs	r2, r4
 8001996:	075e      	lsls	r6, r3, #29
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	0b1f      	lsrs	r7, r3, #12
 800199c:	08d2      	lsrs	r2, r2, #3
 800199e:	4316      	orrs	r6, r2
 80019a0:	2300      	movs	r3, #0
 80019a2:	e606      	b.n	80015b2 <__aeabi_dmul+0xd6>
 80019a4:	2780      	movs	r7, #128	; 0x80
 80019a6:	033f      	lsls	r7, r7, #12
 80019a8:	431f      	orrs	r7, r3
 80019aa:	033f      	lsls	r7, r7, #12
 80019ac:	0b3f      	lsrs	r7, r7, #12
 80019ae:	0016      	movs	r6, r2
 80019b0:	4b00      	ldr	r3, [pc, #0]	; (80019b4 <__aeabi_dmul+0x4d8>)
 80019b2:	e5fe      	b.n	80015b2 <__aeabi_dmul+0xd6>
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	0000043e 	.word	0x0000043e

080019c0 <__aeabi_dsub>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	4657      	mov	r7, sl
 80019c4:	464e      	mov	r6, r9
 80019c6:	4645      	mov	r5, r8
 80019c8:	46de      	mov	lr, fp
 80019ca:	000c      	movs	r4, r1
 80019cc:	0309      	lsls	r1, r1, #12
 80019ce:	b5e0      	push	{r5, r6, r7, lr}
 80019d0:	0a49      	lsrs	r1, r1, #9
 80019d2:	0f46      	lsrs	r6, r0, #29
 80019d4:	005f      	lsls	r7, r3, #1
 80019d6:	4331      	orrs	r1, r6
 80019d8:	031e      	lsls	r6, r3, #12
 80019da:	0fdb      	lsrs	r3, r3, #31
 80019dc:	0a76      	lsrs	r6, r6, #9
 80019de:	469b      	mov	fp, r3
 80019e0:	0f53      	lsrs	r3, r2, #29
 80019e2:	4333      	orrs	r3, r6
 80019e4:	4ec8      	ldr	r6, [pc, #800]	; (8001d08 <__aeabi_dsub+0x348>)
 80019e6:	0065      	lsls	r5, r4, #1
 80019e8:	00c0      	lsls	r0, r0, #3
 80019ea:	0fe4      	lsrs	r4, r4, #31
 80019ec:	00d2      	lsls	r2, r2, #3
 80019ee:	0d6d      	lsrs	r5, r5, #21
 80019f0:	46a2      	mov	sl, r4
 80019f2:	4681      	mov	r9, r0
 80019f4:	0d7f      	lsrs	r7, r7, #21
 80019f6:	469c      	mov	ip, r3
 80019f8:	4690      	mov	r8, r2
 80019fa:	42b7      	cmp	r7, r6
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x40>
 80019fe:	e0b9      	b.n	8001b74 <__aeabi_dsub+0x1b4>
 8001a00:	465b      	mov	r3, fp
 8001a02:	2601      	movs	r6, #1
 8001a04:	4073      	eors	r3, r6
 8001a06:	469b      	mov	fp, r3
 8001a08:	1bee      	subs	r6, r5, r7
 8001a0a:	45a3      	cmp	fp, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x50>
 8001a0e:	e083      	b.n	8001b18 <__aeabi_dsub+0x158>
 8001a10:	2e00      	cmp	r6, #0
 8001a12:	dd63      	ble.n	8001adc <__aeabi_dsub+0x11c>
 8001a14:	2f00      	cmp	r7, #0
 8001a16:	d000      	beq.n	8001a1a <__aeabi_dsub+0x5a>
 8001a18:	e0b1      	b.n	8001b7e <__aeabi_dsub+0x1be>
 8001a1a:	4663      	mov	r3, ip
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x62>
 8001a20:	e123      	b.n	8001c6a <__aeabi_dsub+0x2aa>
 8001a22:	1e73      	subs	r3, r6, #1
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d000      	beq.n	8001a2a <__aeabi_dsub+0x6a>
 8001a28:	e1ba      	b.n	8001da0 <__aeabi_dsub+0x3e0>
 8001a2a:	1a86      	subs	r6, r0, r2
 8001a2c:	4663      	mov	r3, ip
 8001a2e:	42b0      	cmp	r0, r6
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	2501      	movs	r5, #1
 8001a34:	1ac9      	subs	r1, r1, r3
 8001a36:	4240      	negs	r0, r0
 8001a38:	1a09      	subs	r1, r1, r0
 8001a3a:	020b      	lsls	r3, r1, #8
 8001a3c:	d400      	bmi.n	8001a40 <__aeabi_dsub+0x80>
 8001a3e:	e147      	b.n	8001cd0 <__aeabi_dsub+0x310>
 8001a40:	0249      	lsls	r1, r1, #9
 8001a42:	0a4b      	lsrs	r3, r1, #9
 8001a44:	4698      	mov	r8, r3
 8001a46:	4643      	mov	r3, r8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x8e>
 8001a4c:	e189      	b.n	8001d62 <__aeabi_dsub+0x3a2>
 8001a4e:	4640      	mov	r0, r8
 8001a50:	f000 fba0 	bl	8002194 <__clzsi2>
 8001a54:	0003      	movs	r3, r0
 8001a56:	3b08      	subs	r3, #8
 8001a58:	2b1f      	cmp	r3, #31
 8001a5a:	dd00      	ble.n	8001a5e <__aeabi_dsub+0x9e>
 8001a5c:	e17c      	b.n	8001d58 <__aeabi_dsub+0x398>
 8001a5e:	2220      	movs	r2, #32
 8001a60:	0030      	movs	r0, r6
 8001a62:	1ad2      	subs	r2, r2, r3
 8001a64:	4641      	mov	r1, r8
 8001a66:	40d0      	lsrs	r0, r2
 8001a68:	4099      	lsls	r1, r3
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	409e      	lsls	r6, r3
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	429d      	cmp	r5, r3
 8001a72:	dd00      	ble.n	8001a76 <__aeabi_dsub+0xb6>
 8001a74:	e16a      	b.n	8001d4c <__aeabi_dsub+0x38c>
 8001a76:	1b5d      	subs	r5, r3, r5
 8001a78:	1c6b      	adds	r3, r5, #1
 8001a7a:	2b1f      	cmp	r3, #31
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0xc0>
 8001a7e:	e194      	b.n	8001daa <__aeabi_dsub+0x3ea>
 8001a80:	2120      	movs	r1, #32
 8001a82:	0010      	movs	r0, r2
 8001a84:	0035      	movs	r5, r6
 8001a86:	1ac9      	subs	r1, r1, r3
 8001a88:	408e      	lsls	r6, r1
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	4088      	lsls	r0, r1
 8001a8e:	40dd      	lsrs	r5, r3
 8001a90:	1e71      	subs	r1, r6, #1
 8001a92:	418e      	sbcs	r6, r1
 8001a94:	0011      	movs	r1, r2
 8001a96:	2207      	movs	r2, #7
 8001a98:	4328      	orrs	r0, r5
 8001a9a:	2500      	movs	r5, #0
 8001a9c:	4306      	orrs	r6, r0
 8001a9e:	4032      	ands	r2, r6
 8001aa0:	2a00      	cmp	r2, #0
 8001aa2:	d009      	beq.n	8001ab8 <__aeabi_dsub+0xf8>
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	4033      	ands	r3, r6
 8001aa8:	2b04      	cmp	r3, #4
 8001aaa:	d005      	beq.n	8001ab8 <__aeabi_dsub+0xf8>
 8001aac:	1d33      	adds	r3, r6, #4
 8001aae:	42b3      	cmp	r3, r6
 8001ab0:	41b6      	sbcs	r6, r6
 8001ab2:	4276      	negs	r6, r6
 8001ab4:	1989      	adds	r1, r1, r6
 8001ab6:	001e      	movs	r6, r3
 8001ab8:	020b      	lsls	r3, r1, #8
 8001aba:	d400      	bmi.n	8001abe <__aeabi_dsub+0xfe>
 8001abc:	e23d      	b.n	8001f3a <__aeabi_dsub+0x57a>
 8001abe:	1c6a      	adds	r2, r5, #1
 8001ac0:	4b91      	ldr	r3, [pc, #580]	; (8001d08 <__aeabi_dsub+0x348>)
 8001ac2:	0555      	lsls	r5, r2, #21
 8001ac4:	0d6d      	lsrs	r5, r5, #21
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d100      	bne.n	8001acc <__aeabi_dsub+0x10c>
 8001aca:	e119      	b.n	8001d00 <__aeabi_dsub+0x340>
 8001acc:	4a8f      	ldr	r2, [pc, #572]	; (8001d0c <__aeabi_dsub+0x34c>)
 8001ace:	08f6      	lsrs	r6, r6, #3
 8001ad0:	400a      	ands	r2, r1
 8001ad2:	0757      	lsls	r7, r2, #29
 8001ad4:	0252      	lsls	r2, r2, #9
 8001ad6:	4337      	orrs	r7, r6
 8001ad8:	0b12      	lsrs	r2, r2, #12
 8001ada:	e09b      	b.n	8001c14 <__aeabi_dsub+0x254>
 8001adc:	2e00      	cmp	r6, #0
 8001ade:	d000      	beq.n	8001ae2 <__aeabi_dsub+0x122>
 8001ae0:	e0c5      	b.n	8001c6e <__aeabi_dsub+0x2ae>
 8001ae2:	1c6e      	adds	r6, r5, #1
 8001ae4:	0576      	lsls	r6, r6, #21
 8001ae6:	0d76      	lsrs	r6, r6, #21
 8001ae8:	2e01      	cmp	r6, #1
 8001aea:	dc00      	bgt.n	8001aee <__aeabi_dsub+0x12e>
 8001aec:	e148      	b.n	8001d80 <__aeabi_dsub+0x3c0>
 8001aee:	4667      	mov	r7, ip
 8001af0:	1a86      	subs	r6, r0, r2
 8001af2:	1bcb      	subs	r3, r1, r7
 8001af4:	42b0      	cmp	r0, r6
 8001af6:	41bf      	sbcs	r7, r7
 8001af8:	427f      	negs	r7, r7
 8001afa:	46b8      	mov	r8, r7
 8001afc:	001f      	movs	r7, r3
 8001afe:	4643      	mov	r3, r8
 8001b00:	1aff      	subs	r7, r7, r3
 8001b02:	003b      	movs	r3, r7
 8001b04:	46b8      	mov	r8, r7
 8001b06:	021b      	lsls	r3, r3, #8
 8001b08:	d500      	bpl.n	8001b0c <__aeabi_dsub+0x14c>
 8001b0a:	e15f      	b.n	8001dcc <__aeabi_dsub+0x40c>
 8001b0c:	4337      	orrs	r7, r6
 8001b0e:	d19a      	bne.n	8001a46 <__aeabi_dsub+0x86>
 8001b10:	2200      	movs	r2, #0
 8001b12:	2400      	movs	r4, #0
 8001b14:	2500      	movs	r5, #0
 8001b16:	e079      	b.n	8001c0c <__aeabi_dsub+0x24c>
 8001b18:	2e00      	cmp	r6, #0
 8001b1a:	dc00      	bgt.n	8001b1e <__aeabi_dsub+0x15e>
 8001b1c:	e0fa      	b.n	8001d14 <__aeabi_dsub+0x354>
 8001b1e:	2f00      	cmp	r7, #0
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x164>
 8001b22:	e08d      	b.n	8001c40 <__aeabi_dsub+0x280>
 8001b24:	4b78      	ldr	r3, [pc, #480]	; (8001d08 <__aeabi_dsub+0x348>)
 8001b26:	429d      	cmp	r5, r3
 8001b28:	d067      	beq.n	8001bfa <__aeabi_dsub+0x23a>
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	4667      	mov	r7, ip
 8001b2e:	041b      	lsls	r3, r3, #16
 8001b30:	431f      	orrs	r7, r3
 8001b32:	46bc      	mov	ip, r7
 8001b34:	2e38      	cmp	r6, #56	; 0x38
 8001b36:	dc00      	bgt.n	8001b3a <__aeabi_dsub+0x17a>
 8001b38:	e152      	b.n	8001de0 <__aeabi_dsub+0x420>
 8001b3a:	4663      	mov	r3, ip
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	1e5a      	subs	r2, r3, #1
 8001b40:	4193      	sbcs	r3, r2
 8001b42:	181e      	adds	r6, r3, r0
 8001b44:	4286      	cmp	r6, r0
 8001b46:	4180      	sbcs	r0, r0
 8001b48:	4240      	negs	r0, r0
 8001b4a:	1809      	adds	r1, r1, r0
 8001b4c:	020b      	lsls	r3, r1, #8
 8001b4e:	d400      	bmi.n	8001b52 <__aeabi_dsub+0x192>
 8001b50:	e0be      	b.n	8001cd0 <__aeabi_dsub+0x310>
 8001b52:	4b6d      	ldr	r3, [pc, #436]	; (8001d08 <__aeabi_dsub+0x348>)
 8001b54:	3501      	adds	r5, #1
 8001b56:	429d      	cmp	r5, r3
 8001b58:	d100      	bne.n	8001b5c <__aeabi_dsub+0x19c>
 8001b5a:	e0d2      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001b5c:	4a6b      	ldr	r2, [pc, #428]	; (8001d0c <__aeabi_dsub+0x34c>)
 8001b5e:	0873      	lsrs	r3, r6, #1
 8001b60:	400a      	ands	r2, r1
 8001b62:	2101      	movs	r1, #1
 8001b64:	400e      	ands	r6, r1
 8001b66:	431e      	orrs	r6, r3
 8001b68:	0851      	lsrs	r1, r2, #1
 8001b6a:	07d3      	lsls	r3, r2, #31
 8001b6c:	2207      	movs	r2, #7
 8001b6e:	431e      	orrs	r6, r3
 8001b70:	4032      	ands	r2, r6
 8001b72:	e795      	b.n	8001aa0 <__aeabi_dsub+0xe0>
 8001b74:	001e      	movs	r6, r3
 8001b76:	4316      	orrs	r6, r2
 8001b78:	d000      	beq.n	8001b7c <__aeabi_dsub+0x1bc>
 8001b7a:	e745      	b.n	8001a08 <__aeabi_dsub+0x48>
 8001b7c:	e740      	b.n	8001a00 <__aeabi_dsub+0x40>
 8001b7e:	4b62      	ldr	r3, [pc, #392]	; (8001d08 <__aeabi_dsub+0x348>)
 8001b80:	429d      	cmp	r5, r3
 8001b82:	d03a      	beq.n	8001bfa <__aeabi_dsub+0x23a>
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	4667      	mov	r7, ip
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	431f      	orrs	r7, r3
 8001b8c:	46bc      	mov	ip, r7
 8001b8e:	2e38      	cmp	r6, #56	; 0x38
 8001b90:	dd00      	ble.n	8001b94 <__aeabi_dsub+0x1d4>
 8001b92:	e0eb      	b.n	8001d6c <__aeabi_dsub+0x3ac>
 8001b94:	2e1f      	cmp	r6, #31
 8001b96:	dc00      	bgt.n	8001b9a <__aeabi_dsub+0x1da>
 8001b98:	e13a      	b.n	8001e10 <__aeabi_dsub+0x450>
 8001b9a:	0033      	movs	r3, r6
 8001b9c:	4667      	mov	r7, ip
 8001b9e:	3b20      	subs	r3, #32
 8001ba0:	40df      	lsrs	r7, r3
 8001ba2:	003b      	movs	r3, r7
 8001ba4:	2e20      	cmp	r6, #32
 8001ba6:	d005      	beq.n	8001bb4 <__aeabi_dsub+0x1f4>
 8001ba8:	2740      	movs	r7, #64	; 0x40
 8001baa:	1bbf      	subs	r7, r7, r6
 8001bac:	4666      	mov	r6, ip
 8001bae:	40be      	lsls	r6, r7
 8001bb0:	4332      	orrs	r2, r6
 8001bb2:	4690      	mov	r8, r2
 8001bb4:	4646      	mov	r6, r8
 8001bb6:	1e72      	subs	r2, r6, #1
 8001bb8:	4196      	sbcs	r6, r2
 8001bba:	4333      	orrs	r3, r6
 8001bbc:	e0da      	b.n	8001d74 <__aeabi_dsub+0x3b4>
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d100      	bne.n	8001bc4 <__aeabi_dsub+0x204>
 8001bc2:	e214      	b.n	8001fee <__aeabi_dsub+0x62e>
 8001bc4:	4663      	mov	r3, ip
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x20c>
 8001bca:	e168      	b.n	8001e9e <__aeabi_dsub+0x4de>
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	074e      	lsls	r6, r1, #29
 8001bd0:	08c0      	lsrs	r0, r0, #3
 8001bd2:	08c9      	lsrs	r1, r1, #3
 8001bd4:	031b      	lsls	r3, r3, #12
 8001bd6:	4306      	orrs	r6, r0
 8001bd8:	4219      	tst	r1, r3
 8001bda:	d008      	beq.n	8001bee <__aeabi_dsub+0x22e>
 8001bdc:	4660      	mov	r0, ip
 8001bde:	08c0      	lsrs	r0, r0, #3
 8001be0:	4218      	tst	r0, r3
 8001be2:	d104      	bne.n	8001bee <__aeabi_dsub+0x22e>
 8001be4:	4663      	mov	r3, ip
 8001be6:	0001      	movs	r1, r0
 8001be8:	08d2      	lsrs	r2, r2, #3
 8001bea:	075e      	lsls	r6, r3, #29
 8001bec:	4316      	orrs	r6, r2
 8001bee:	00f3      	lsls	r3, r6, #3
 8001bf0:	4699      	mov	r9, r3
 8001bf2:	00c9      	lsls	r1, r1, #3
 8001bf4:	0f72      	lsrs	r2, r6, #29
 8001bf6:	4d44      	ldr	r5, [pc, #272]	; (8001d08 <__aeabi_dsub+0x348>)
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	464b      	mov	r3, r9
 8001bfc:	08de      	lsrs	r6, r3, #3
 8001bfe:	4b42      	ldr	r3, [pc, #264]	; (8001d08 <__aeabi_dsub+0x348>)
 8001c00:	074f      	lsls	r7, r1, #29
 8001c02:	4337      	orrs	r7, r6
 8001c04:	08ca      	lsrs	r2, r1, #3
 8001c06:	429d      	cmp	r5, r3
 8001c08:	d100      	bne.n	8001c0c <__aeabi_dsub+0x24c>
 8001c0a:	e06e      	b.n	8001cea <__aeabi_dsub+0x32a>
 8001c0c:	0312      	lsls	r2, r2, #12
 8001c0e:	056d      	lsls	r5, r5, #21
 8001c10:	0b12      	lsrs	r2, r2, #12
 8001c12:	0d6d      	lsrs	r5, r5, #21
 8001c14:	2100      	movs	r1, #0
 8001c16:	0312      	lsls	r2, r2, #12
 8001c18:	0b13      	lsrs	r3, r2, #12
 8001c1a:	0d0a      	lsrs	r2, r1, #20
 8001c1c:	0512      	lsls	r2, r2, #20
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	4b3b      	ldr	r3, [pc, #236]	; (8001d10 <__aeabi_dsub+0x350>)
 8001c22:	052d      	lsls	r5, r5, #20
 8001c24:	4013      	ands	r3, r2
 8001c26:	432b      	orrs	r3, r5
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	07e4      	lsls	r4, r4, #31
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	4323      	orrs	r3, r4
 8001c30:	0038      	movs	r0, r7
 8001c32:	0019      	movs	r1, r3
 8001c34:	bc3c      	pop	{r2, r3, r4, r5}
 8001c36:	4690      	mov	r8, r2
 8001c38:	4699      	mov	r9, r3
 8001c3a:	46a2      	mov	sl, r4
 8001c3c:	46ab      	mov	fp, r5
 8001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c40:	4663      	mov	r3, ip
 8001c42:	4313      	orrs	r3, r2
 8001c44:	d011      	beq.n	8001c6a <__aeabi_dsub+0x2aa>
 8001c46:	1e73      	subs	r3, r6, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x28e>
 8001c4c:	e107      	b.n	8001e5e <__aeabi_dsub+0x49e>
 8001c4e:	1886      	adds	r6, r0, r2
 8001c50:	4286      	cmp	r6, r0
 8001c52:	4180      	sbcs	r0, r0
 8001c54:	4461      	add	r1, ip
 8001c56:	4240      	negs	r0, r0
 8001c58:	1809      	adds	r1, r1, r0
 8001c5a:	2501      	movs	r5, #1
 8001c5c:	020b      	lsls	r3, r1, #8
 8001c5e:	d537      	bpl.n	8001cd0 <__aeabi_dsub+0x310>
 8001c60:	2502      	movs	r5, #2
 8001c62:	e77b      	b.n	8001b5c <__aeabi_dsub+0x19c>
 8001c64:	003e      	movs	r6, r7
 8001c66:	4661      	mov	r1, ip
 8001c68:	4691      	mov	r9, r2
 8001c6a:	0035      	movs	r5, r6
 8001c6c:	e7c5      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001c6e:	465c      	mov	r4, fp
 8001c70:	2d00      	cmp	r5, #0
 8001c72:	d000      	beq.n	8001c76 <__aeabi_dsub+0x2b6>
 8001c74:	e0e1      	b.n	8001e3a <__aeabi_dsub+0x47a>
 8001c76:	000b      	movs	r3, r1
 8001c78:	4303      	orrs	r3, r0
 8001c7a:	d0f3      	beq.n	8001c64 <__aeabi_dsub+0x2a4>
 8001c7c:	1c73      	adds	r3, r6, #1
 8001c7e:	d100      	bne.n	8001c82 <__aeabi_dsub+0x2c2>
 8001c80:	e1ac      	b.n	8001fdc <__aeabi_dsub+0x61c>
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <__aeabi_dsub+0x348>)
 8001c84:	429f      	cmp	r7, r3
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x2ca>
 8001c88:	e13a      	b.n	8001f00 <__aeabi_dsub+0x540>
 8001c8a:	43f3      	mvns	r3, r6
 8001c8c:	2b38      	cmp	r3, #56	; 0x38
 8001c8e:	dd00      	ble.n	8001c92 <__aeabi_dsub+0x2d2>
 8001c90:	e16f      	b.n	8001f72 <__aeabi_dsub+0x5b2>
 8001c92:	2b1f      	cmp	r3, #31
 8001c94:	dd00      	ble.n	8001c98 <__aeabi_dsub+0x2d8>
 8001c96:	e18c      	b.n	8001fb2 <__aeabi_dsub+0x5f2>
 8001c98:	2520      	movs	r5, #32
 8001c9a:	000e      	movs	r6, r1
 8001c9c:	1aed      	subs	r5, r5, r3
 8001c9e:	40ae      	lsls	r6, r5
 8001ca0:	46b0      	mov	r8, r6
 8001ca2:	0006      	movs	r6, r0
 8001ca4:	46aa      	mov	sl, r5
 8001ca6:	40de      	lsrs	r6, r3
 8001ca8:	4645      	mov	r5, r8
 8001caa:	4335      	orrs	r5, r6
 8001cac:	002e      	movs	r6, r5
 8001cae:	4655      	mov	r5, sl
 8001cb0:	40d9      	lsrs	r1, r3
 8001cb2:	40a8      	lsls	r0, r5
 8001cb4:	4663      	mov	r3, ip
 8001cb6:	1e45      	subs	r5, r0, #1
 8001cb8:	41a8      	sbcs	r0, r5
 8001cba:	1a5b      	subs	r3, r3, r1
 8001cbc:	469c      	mov	ip, r3
 8001cbe:	4330      	orrs	r0, r6
 8001cc0:	1a16      	subs	r6, r2, r0
 8001cc2:	42b2      	cmp	r2, r6
 8001cc4:	4192      	sbcs	r2, r2
 8001cc6:	4663      	mov	r3, ip
 8001cc8:	4252      	negs	r2, r2
 8001cca:	1a99      	subs	r1, r3, r2
 8001ccc:	003d      	movs	r5, r7
 8001cce:	e6b4      	b.n	8001a3a <__aeabi_dsub+0x7a>
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	4032      	ands	r2, r6
 8001cd4:	2a00      	cmp	r2, #0
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x31a>
 8001cd8:	e6e4      	b.n	8001aa4 <__aeabi_dsub+0xe4>
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <__aeabi_dsub+0x348>)
 8001cdc:	08f6      	lsrs	r6, r6, #3
 8001cde:	074f      	lsls	r7, r1, #29
 8001ce0:	4337      	orrs	r7, r6
 8001ce2:	08ca      	lsrs	r2, r1, #3
 8001ce4:	429d      	cmp	r5, r3
 8001ce6:	d000      	beq.n	8001cea <__aeabi_dsub+0x32a>
 8001ce8:	e790      	b.n	8001c0c <__aeabi_dsub+0x24c>
 8001cea:	003b      	movs	r3, r7
 8001cec:	4313      	orrs	r3, r2
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x332>
 8001cf0:	e1a6      	b.n	8002040 <__aeabi_dsub+0x680>
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	031b      	lsls	r3, r3, #12
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	0312      	lsls	r2, r2, #12
 8001cfa:	0b12      	lsrs	r2, r2, #12
 8001cfc:	4d02      	ldr	r5, [pc, #8]	; (8001d08 <__aeabi_dsub+0x348>)
 8001cfe:	e789      	b.n	8001c14 <__aeabi_dsub+0x254>
 8001d00:	0015      	movs	r5, r2
 8001d02:	2200      	movs	r2, #0
 8001d04:	2700      	movs	r7, #0
 8001d06:	e785      	b.n	8001c14 <__aeabi_dsub+0x254>
 8001d08:	000007ff 	.word	0x000007ff
 8001d0c:	ff7fffff 	.word	0xff7fffff
 8001d10:	800fffff 	.word	0x800fffff
 8001d14:	2e00      	cmp	r6, #0
 8001d16:	d000      	beq.n	8001d1a <__aeabi_dsub+0x35a>
 8001d18:	e0c7      	b.n	8001eaa <__aeabi_dsub+0x4ea>
 8001d1a:	1c6b      	adds	r3, r5, #1
 8001d1c:	055e      	lsls	r6, r3, #21
 8001d1e:	0d76      	lsrs	r6, r6, #21
 8001d20:	2e01      	cmp	r6, #1
 8001d22:	dc00      	bgt.n	8001d26 <__aeabi_dsub+0x366>
 8001d24:	e0f0      	b.n	8001f08 <__aeabi_dsub+0x548>
 8001d26:	4dc8      	ldr	r5, [pc, #800]	; (8002048 <__aeabi_dsub+0x688>)
 8001d28:	42ab      	cmp	r3, r5
 8001d2a:	d100      	bne.n	8001d2e <__aeabi_dsub+0x36e>
 8001d2c:	e0b9      	b.n	8001ea2 <__aeabi_dsub+0x4e2>
 8001d2e:	1885      	adds	r5, r0, r2
 8001d30:	000a      	movs	r2, r1
 8001d32:	4285      	cmp	r5, r0
 8001d34:	4189      	sbcs	r1, r1
 8001d36:	4462      	add	r2, ip
 8001d38:	4249      	negs	r1, r1
 8001d3a:	1851      	adds	r1, r2, r1
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	07ce      	lsls	r6, r1, #31
 8001d40:	086d      	lsrs	r5, r5, #1
 8001d42:	432e      	orrs	r6, r5
 8001d44:	0849      	lsrs	r1, r1, #1
 8001d46:	4032      	ands	r2, r6
 8001d48:	001d      	movs	r5, r3
 8001d4a:	e6a9      	b.n	8001aa0 <__aeabi_dsub+0xe0>
 8001d4c:	49bf      	ldr	r1, [pc, #764]	; (800204c <__aeabi_dsub+0x68c>)
 8001d4e:	1aed      	subs	r5, r5, r3
 8001d50:	4011      	ands	r1, r2
 8001d52:	2207      	movs	r2, #7
 8001d54:	4032      	ands	r2, r6
 8001d56:	e6a3      	b.n	8001aa0 <__aeabi_dsub+0xe0>
 8001d58:	0032      	movs	r2, r6
 8001d5a:	3828      	subs	r0, #40	; 0x28
 8001d5c:	4082      	lsls	r2, r0
 8001d5e:	2600      	movs	r6, #0
 8001d60:	e686      	b.n	8001a70 <__aeabi_dsub+0xb0>
 8001d62:	0030      	movs	r0, r6
 8001d64:	f000 fa16 	bl	8002194 <__clzsi2>
 8001d68:	3020      	adds	r0, #32
 8001d6a:	e673      	b.n	8001a54 <__aeabi_dsub+0x94>
 8001d6c:	4663      	mov	r3, ip
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	1e5a      	subs	r2, r3, #1
 8001d72:	4193      	sbcs	r3, r2
 8001d74:	1ac6      	subs	r6, r0, r3
 8001d76:	42b0      	cmp	r0, r6
 8001d78:	4180      	sbcs	r0, r0
 8001d7a:	4240      	negs	r0, r0
 8001d7c:	1a09      	subs	r1, r1, r0
 8001d7e:	e65c      	b.n	8001a3a <__aeabi_dsub+0x7a>
 8001d80:	000e      	movs	r6, r1
 8001d82:	4667      	mov	r7, ip
 8001d84:	4306      	orrs	r6, r0
 8001d86:	4317      	orrs	r7, r2
 8001d88:	2d00      	cmp	r5, #0
 8001d8a:	d15e      	bne.n	8001e4a <__aeabi_dsub+0x48a>
 8001d8c:	2e00      	cmp	r6, #0
 8001d8e:	d000      	beq.n	8001d92 <__aeabi_dsub+0x3d2>
 8001d90:	e0f3      	b.n	8001f7a <__aeabi_dsub+0x5ba>
 8001d92:	2f00      	cmp	r7, #0
 8001d94:	d100      	bne.n	8001d98 <__aeabi_dsub+0x3d8>
 8001d96:	e11e      	b.n	8001fd6 <__aeabi_dsub+0x616>
 8001d98:	465c      	mov	r4, fp
 8001d9a:	4661      	mov	r1, ip
 8001d9c:	4691      	mov	r9, r2
 8001d9e:	e72c      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001da0:	4fa9      	ldr	r7, [pc, #676]	; (8002048 <__aeabi_dsub+0x688>)
 8001da2:	42be      	cmp	r6, r7
 8001da4:	d07b      	beq.n	8001e9e <__aeabi_dsub+0x4de>
 8001da6:	001e      	movs	r6, r3
 8001da8:	e6f1      	b.n	8001b8e <__aeabi_dsub+0x1ce>
 8001daa:	0010      	movs	r0, r2
 8001dac:	3d1f      	subs	r5, #31
 8001dae:	40e8      	lsrs	r0, r5
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d003      	beq.n	8001dbc <__aeabi_dsub+0x3fc>
 8001db4:	2140      	movs	r1, #64	; 0x40
 8001db6:	1acb      	subs	r3, r1, r3
 8001db8:	409a      	lsls	r2, r3
 8001dba:	4316      	orrs	r6, r2
 8001dbc:	1e73      	subs	r3, r6, #1
 8001dbe:	419e      	sbcs	r6, r3
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4306      	orrs	r6, r0
 8001dc4:	4032      	ands	r2, r6
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2500      	movs	r5, #0
 8001dca:	e783      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dcc:	1a16      	subs	r6, r2, r0
 8001dce:	4663      	mov	r3, ip
 8001dd0:	42b2      	cmp	r2, r6
 8001dd2:	4180      	sbcs	r0, r0
 8001dd4:	1a59      	subs	r1, r3, r1
 8001dd6:	4240      	negs	r0, r0
 8001dd8:	1a0b      	subs	r3, r1, r0
 8001dda:	4698      	mov	r8, r3
 8001ddc:	465c      	mov	r4, fp
 8001dde:	e632      	b.n	8001a46 <__aeabi_dsub+0x86>
 8001de0:	2e1f      	cmp	r6, #31
 8001de2:	dd00      	ble.n	8001de6 <__aeabi_dsub+0x426>
 8001de4:	e0ab      	b.n	8001f3e <__aeabi_dsub+0x57e>
 8001de6:	2720      	movs	r7, #32
 8001de8:	1bbb      	subs	r3, r7, r6
 8001dea:	469a      	mov	sl, r3
 8001dec:	4663      	mov	r3, ip
 8001dee:	4657      	mov	r7, sl
 8001df0:	40bb      	lsls	r3, r7
 8001df2:	4699      	mov	r9, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	464f      	mov	r7, r9
 8001df8:	40f3      	lsrs	r3, r6
 8001dfa:	431f      	orrs	r7, r3
 8001dfc:	003b      	movs	r3, r7
 8001dfe:	4657      	mov	r7, sl
 8001e00:	40ba      	lsls	r2, r7
 8001e02:	1e57      	subs	r7, r2, #1
 8001e04:	41ba      	sbcs	r2, r7
 8001e06:	4313      	orrs	r3, r2
 8001e08:	4662      	mov	r2, ip
 8001e0a:	40f2      	lsrs	r2, r6
 8001e0c:	1889      	adds	r1, r1, r2
 8001e0e:	e698      	b.n	8001b42 <__aeabi_dsub+0x182>
 8001e10:	2720      	movs	r7, #32
 8001e12:	1bbb      	subs	r3, r7, r6
 8001e14:	469a      	mov	sl, r3
 8001e16:	4663      	mov	r3, ip
 8001e18:	4657      	mov	r7, sl
 8001e1a:	40bb      	lsls	r3, r7
 8001e1c:	4699      	mov	r9, r3
 8001e1e:	0013      	movs	r3, r2
 8001e20:	464f      	mov	r7, r9
 8001e22:	40f3      	lsrs	r3, r6
 8001e24:	431f      	orrs	r7, r3
 8001e26:	003b      	movs	r3, r7
 8001e28:	4657      	mov	r7, sl
 8001e2a:	40ba      	lsls	r2, r7
 8001e2c:	1e57      	subs	r7, r2, #1
 8001e2e:	41ba      	sbcs	r2, r7
 8001e30:	4313      	orrs	r3, r2
 8001e32:	4662      	mov	r2, ip
 8001e34:	40f2      	lsrs	r2, r6
 8001e36:	1a89      	subs	r1, r1, r2
 8001e38:	e79c      	b.n	8001d74 <__aeabi_dsub+0x3b4>
 8001e3a:	4b83      	ldr	r3, [pc, #524]	; (8002048 <__aeabi_dsub+0x688>)
 8001e3c:	429f      	cmp	r7, r3
 8001e3e:	d05f      	beq.n	8001f00 <__aeabi_dsub+0x540>
 8001e40:	2580      	movs	r5, #128	; 0x80
 8001e42:	042d      	lsls	r5, r5, #16
 8001e44:	4273      	negs	r3, r6
 8001e46:	4329      	orrs	r1, r5
 8001e48:	e720      	b.n	8001c8c <__aeabi_dsub+0x2cc>
 8001e4a:	2e00      	cmp	r6, #0
 8001e4c:	d10c      	bne.n	8001e68 <__aeabi_dsub+0x4a8>
 8001e4e:	2f00      	cmp	r7, #0
 8001e50:	d100      	bne.n	8001e54 <__aeabi_dsub+0x494>
 8001e52:	e0d0      	b.n	8001ff6 <__aeabi_dsub+0x636>
 8001e54:	465c      	mov	r4, fp
 8001e56:	4661      	mov	r1, ip
 8001e58:	4691      	mov	r9, r2
 8001e5a:	4d7b      	ldr	r5, [pc, #492]	; (8002048 <__aeabi_dsub+0x688>)
 8001e5c:	e6cd      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001e5e:	4f7a      	ldr	r7, [pc, #488]	; (8002048 <__aeabi_dsub+0x688>)
 8001e60:	42be      	cmp	r6, r7
 8001e62:	d01c      	beq.n	8001e9e <__aeabi_dsub+0x4de>
 8001e64:	001e      	movs	r6, r3
 8001e66:	e665      	b.n	8001b34 <__aeabi_dsub+0x174>
 8001e68:	2f00      	cmp	r7, #0
 8001e6a:	d018      	beq.n	8001e9e <__aeabi_dsub+0x4de>
 8001e6c:	08c0      	lsrs	r0, r0, #3
 8001e6e:	074e      	lsls	r6, r1, #29
 8001e70:	4306      	orrs	r6, r0
 8001e72:	2080      	movs	r0, #128	; 0x80
 8001e74:	08c9      	lsrs	r1, r1, #3
 8001e76:	0300      	lsls	r0, r0, #12
 8001e78:	4201      	tst	r1, r0
 8001e7a:	d008      	beq.n	8001e8e <__aeabi_dsub+0x4ce>
 8001e7c:	4663      	mov	r3, ip
 8001e7e:	08dc      	lsrs	r4, r3, #3
 8001e80:	4204      	tst	r4, r0
 8001e82:	d104      	bne.n	8001e8e <__aeabi_dsub+0x4ce>
 8001e84:	0021      	movs	r1, r4
 8001e86:	46da      	mov	sl, fp
 8001e88:	08d2      	lsrs	r2, r2, #3
 8001e8a:	075e      	lsls	r6, r3, #29
 8001e8c:	4316      	orrs	r6, r2
 8001e8e:	00f3      	lsls	r3, r6, #3
 8001e90:	4699      	mov	r9, r3
 8001e92:	2401      	movs	r4, #1
 8001e94:	4653      	mov	r3, sl
 8001e96:	00c9      	lsls	r1, r1, #3
 8001e98:	0f72      	lsrs	r2, r6, #29
 8001e9a:	4311      	orrs	r1, r2
 8001e9c:	401c      	ands	r4, r3
 8001e9e:	4d6a      	ldr	r5, [pc, #424]	; (8002048 <__aeabi_dsub+0x688>)
 8001ea0:	e6ab      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001ea2:	001d      	movs	r5, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	2700      	movs	r7, #0
 8001ea8:	e6b4      	b.n	8001c14 <__aeabi_dsub+0x254>
 8001eaa:	2d00      	cmp	r5, #0
 8001eac:	d159      	bne.n	8001f62 <__aeabi_dsub+0x5a2>
 8001eae:	000b      	movs	r3, r1
 8001eb0:	4303      	orrs	r3, r0
 8001eb2:	d100      	bne.n	8001eb6 <__aeabi_dsub+0x4f6>
 8001eb4:	e6d6      	b.n	8001c64 <__aeabi_dsub+0x2a4>
 8001eb6:	1c73      	adds	r3, r6, #1
 8001eb8:	d100      	bne.n	8001ebc <__aeabi_dsub+0x4fc>
 8001eba:	e0b2      	b.n	8002022 <__aeabi_dsub+0x662>
 8001ebc:	4b62      	ldr	r3, [pc, #392]	; (8002048 <__aeabi_dsub+0x688>)
 8001ebe:	429f      	cmp	r7, r3
 8001ec0:	d01e      	beq.n	8001f00 <__aeabi_dsub+0x540>
 8001ec2:	43f3      	mvns	r3, r6
 8001ec4:	2b38      	cmp	r3, #56	; 0x38
 8001ec6:	dc6f      	bgt.n	8001fa8 <__aeabi_dsub+0x5e8>
 8001ec8:	2b1f      	cmp	r3, #31
 8001eca:	dd00      	ble.n	8001ece <__aeabi_dsub+0x50e>
 8001ecc:	e097      	b.n	8001ffe <__aeabi_dsub+0x63e>
 8001ece:	2520      	movs	r5, #32
 8001ed0:	000e      	movs	r6, r1
 8001ed2:	1aed      	subs	r5, r5, r3
 8001ed4:	40ae      	lsls	r6, r5
 8001ed6:	46b0      	mov	r8, r6
 8001ed8:	0006      	movs	r6, r0
 8001eda:	46aa      	mov	sl, r5
 8001edc:	40de      	lsrs	r6, r3
 8001ede:	4645      	mov	r5, r8
 8001ee0:	4335      	orrs	r5, r6
 8001ee2:	002e      	movs	r6, r5
 8001ee4:	4655      	mov	r5, sl
 8001ee6:	40a8      	lsls	r0, r5
 8001ee8:	40d9      	lsrs	r1, r3
 8001eea:	1e45      	subs	r5, r0, #1
 8001eec:	41a8      	sbcs	r0, r5
 8001eee:	448c      	add	ip, r1
 8001ef0:	4306      	orrs	r6, r0
 8001ef2:	18b6      	adds	r6, r6, r2
 8001ef4:	4296      	cmp	r6, r2
 8001ef6:	4192      	sbcs	r2, r2
 8001ef8:	4251      	negs	r1, r2
 8001efa:	4461      	add	r1, ip
 8001efc:	003d      	movs	r5, r7
 8001efe:	e625      	b.n	8001b4c <__aeabi_dsub+0x18c>
 8001f00:	003d      	movs	r5, r7
 8001f02:	4661      	mov	r1, ip
 8001f04:	4691      	mov	r9, r2
 8001f06:	e678      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001f08:	000b      	movs	r3, r1
 8001f0a:	4303      	orrs	r3, r0
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	d000      	beq.n	8001f12 <__aeabi_dsub+0x552>
 8001f10:	e655      	b.n	8001bbe <__aeabi_dsub+0x1fe>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f5      	beq.n	8001f02 <__aeabi_dsub+0x542>
 8001f16:	4663      	mov	r3, ip
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_dsub+0x55e>
 8001f1c:	e66d      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001f1e:	1886      	adds	r6, r0, r2
 8001f20:	4286      	cmp	r6, r0
 8001f22:	4180      	sbcs	r0, r0
 8001f24:	4461      	add	r1, ip
 8001f26:	4240      	negs	r0, r0
 8001f28:	1809      	adds	r1, r1, r0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	020b      	lsls	r3, r1, #8
 8001f2e:	d400      	bmi.n	8001f32 <__aeabi_dsub+0x572>
 8001f30:	e6d0      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001f32:	4b46      	ldr	r3, [pc, #280]	; (800204c <__aeabi_dsub+0x68c>)
 8001f34:	3501      	adds	r5, #1
 8001f36:	4019      	ands	r1, r3
 8001f38:	e5b2      	b.n	8001aa0 <__aeabi_dsub+0xe0>
 8001f3a:	46b1      	mov	r9, r6
 8001f3c:	e65d      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001f3e:	0033      	movs	r3, r6
 8001f40:	4667      	mov	r7, ip
 8001f42:	3b20      	subs	r3, #32
 8001f44:	40df      	lsrs	r7, r3
 8001f46:	003b      	movs	r3, r7
 8001f48:	2e20      	cmp	r6, #32
 8001f4a:	d005      	beq.n	8001f58 <__aeabi_dsub+0x598>
 8001f4c:	2740      	movs	r7, #64	; 0x40
 8001f4e:	1bbf      	subs	r7, r7, r6
 8001f50:	4666      	mov	r6, ip
 8001f52:	40be      	lsls	r6, r7
 8001f54:	4332      	orrs	r2, r6
 8001f56:	4690      	mov	r8, r2
 8001f58:	4646      	mov	r6, r8
 8001f5a:	1e72      	subs	r2, r6, #1
 8001f5c:	4196      	sbcs	r6, r2
 8001f5e:	4333      	orrs	r3, r6
 8001f60:	e5ef      	b.n	8001b42 <__aeabi_dsub+0x182>
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <__aeabi_dsub+0x688>)
 8001f64:	429f      	cmp	r7, r3
 8001f66:	d0cb      	beq.n	8001f00 <__aeabi_dsub+0x540>
 8001f68:	2580      	movs	r5, #128	; 0x80
 8001f6a:	042d      	lsls	r5, r5, #16
 8001f6c:	4273      	negs	r3, r6
 8001f6e:	4329      	orrs	r1, r5
 8001f70:	e7a8      	b.n	8001ec4 <__aeabi_dsub+0x504>
 8001f72:	4308      	orrs	r0, r1
 8001f74:	1e41      	subs	r1, r0, #1
 8001f76:	4188      	sbcs	r0, r1
 8001f78:	e6a2      	b.n	8001cc0 <__aeabi_dsub+0x300>
 8001f7a:	2f00      	cmp	r7, #0
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x5c0>
 8001f7e:	e63c      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001f80:	4663      	mov	r3, ip
 8001f82:	1a86      	subs	r6, r0, r2
 8001f84:	1acf      	subs	r7, r1, r3
 8001f86:	42b0      	cmp	r0, r6
 8001f88:	419b      	sbcs	r3, r3
 8001f8a:	425b      	negs	r3, r3
 8001f8c:	1afb      	subs	r3, r7, r3
 8001f8e:	4698      	mov	r8, r3
 8001f90:	021b      	lsls	r3, r3, #8
 8001f92:	d54e      	bpl.n	8002032 <__aeabi_dsub+0x672>
 8001f94:	1a16      	subs	r6, r2, r0
 8001f96:	4663      	mov	r3, ip
 8001f98:	42b2      	cmp	r2, r6
 8001f9a:	4192      	sbcs	r2, r2
 8001f9c:	1a59      	subs	r1, r3, r1
 8001f9e:	4252      	negs	r2, r2
 8001fa0:	1a89      	subs	r1, r1, r2
 8001fa2:	465c      	mov	r4, fp
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	e57b      	b.n	8001aa0 <__aeabi_dsub+0xe0>
 8001fa8:	4301      	orrs	r1, r0
 8001faa:	000e      	movs	r6, r1
 8001fac:	1e71      	subs	r1, r6, #1
 8001fae:	418e      	sbcs	r6, r1
 8001fb0:	e79f      	b.n	8001ef2 <__aeabi_dsub+0x532>
 8001fb2:	001d      	movs	r5, r3
 8001fb4:	000e      	movs	r6, r1
 8001fb6:	3d20      	subs	r5, #32
 8001fb8:	40ee      	lsrs	r6, r5
 8001fba:	46b0      	mov	r8, r6
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	d004      	beq.n	8001fca <__aeabi_dsub+0x60a>
 8001fc0:	2540      	movs	r5, #64	; 0x40
 8001fc2:	1aeb      	subs	r3, r5, r3
 8001fc4:	4099      	lsls	r1, r3
 8001fc6:	4308      	orrs	r0, r1
 8001fc8:	4681      	mov	r9, r0
 8001fca:	4648      	mov	r0, r9
 8001fcc:	4643      	mov	r3, r8
 8001fce:	1e41      	subs	r1, r0, #1
 8001fd0:	4188      	sbcs	r0, r1
 8001fd2:	4318      	orrs	r0, r3
 8001fd4:	e674      	b.n	8001cc0 <__aeabi_dsub+0x300>
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2400      	movs	r4, #0
 8001fda:	e617      	b.n	8001c0c <__aeabi_dsub+0x24c>
 8001fdc:	1a16      	subs	r6, r2, r0
 8001fde:	4663      	mov	r3, ip
 8001fe0:	42b2      	cmp	r2, r6
 8001fe2:	4192      	sbcs	r2, r2
 8001fe4:	1a59      	subs	r1, r3, r1
 8001fe6:	4252      	negs	r2, r2
 8001fe8:	1a89      	subs	r1, r1, r2
 8001fea:	003d      	movs	r5, r7
 8001fec:	e525      	b.n	8001a3a <__aeabi_dsub+0x7a>
 8001fee:	4661      	mov	r1, ip
 8001ff0:	4691      	mov	r9, r2
 8001ff2:	4d15      	ldr	r5, [pc, #84]	; (8002048 <__aeabi_dsub+0x688>)
 8001ff4:	e601      	b.n	8001bfa <__aeabi_dsub+0x23a>
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	2400      	movs	r4, #0
 8001ffa:	0312      	lsls	r2, r2, #12
 8001ffc:	e679      	b.n	8001cf2 <__aeabi_dsub+0x332>
 8001ffe:	001d      	movs	r5, r3
 8002000:	000e      	movs	r6, r1
 8002002:	3d20      	subs	r5, #32
 8002004:	40ee      	lsrs	r6, r5
 8002006:	46b0      	mov	r8, r6
 8002008:	2b20      	cmp	r3, #32
 800200a:	d004      	beq.n	8002016 <__aeabi_dsub+0x656>
 800200c:	2540      	movs	r5, #64	; 0x40
 800200e:	1aeb      	subs	r3, r5, r3
 8002010:	4099      	lsls	r1, r3
 8002012:	4308      	orrs	r0, r1
 8002014:	4681      	mov	r9, r0
 8002016:	464e      	mov	r6, r9
 8002018:	4643      	mov	r3, r8
 800201a:	1e71      	subs	r1, r6, #1
 800201c:	418e      	sbcs	r6, r1
 800201e:	431e      	orrs	r6, r3
 8002020:	e767      	b.n	8001ef2 <__aeabi_dsub+0x532>
 8002022:	1886      	adds	r6, r0, r2
 8002024:	4296      	cmp	r6, r2
 8002026:	419b      	sbcs	r3, r3
 8002028:	4461      	add	r1, ip
 800202a:	425b      	negs	r3, r3
 800202c:	18c9      	adds	r1, r1, r3
 800202e:	003d      	movs	r5, r7
 8002030:	e58c      	b.n	8001b4c <__aeabi_dsub+0x18c>
 8002032:	4647      	mov	r7, r8
 8002034:	4337      	orrs	r7, r6
 8002036:	d0ce      	beq.n	8001fd6 <__aeabi_dsub+0x616>
 8002038:	2207      	movs	r2, #7
 800203a:	4641      	mov	r1, r8
 800203c:	4032      	ands	r2, r6
 800203e:	e649      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8002040:	2700      	movs	r7, #0
 8002042:	003a      	movs	r2, r7
 8002044:	e5e6      	b.n	8001c14 <__aeabi_dsub+0x254>
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	000007ff 	.word	0x000007ff
 800204c:	ff7fffff 	.word	0xff7fffff

08002050 <__aeabi_d2iz>:
 8002050:	b530      	push	{r4, r5, lr}
 8002052:	4d14      	ldr	r5, [pc, #80]	; (80020a4 <__aeabi_d2iz+0x54>)
 8002054:	030a      	lsls	r2, r1, #12
 8002056:	004b      	lsls	r3, r1, #1
 8002058:	0b12      	lsrs	r2, r2, #12
 800205a:	0d5b      	lsrs	r3, r3, #21
 800205c:	0fc9      	lsrs	r1, r1, #31
 800205e:	2400      	movs	r4, #0
 8002060:	42ab      	cmp	r3, r5
 8002062:	dd11      	ble.n	8002088 <__aeabi_d2iz+0x38>
 8002064:	4c10      	ldr	r4, [pc, #64]	; (80020a8 <__aeabi_d2iz+0x58>)
 8002066:	42a3      	cmp	r3, r4
 8002068:	dc10      	bgt.n	800208c <__aeabi_d2iz+0x3c>
 800206a:	2480      	movs	r4, #128	; 0x80
 800206c:	0364      	lsls	r4, r4, #13
 800206e:	4322      	orrs	r2, r4
 8002070:	4c0e      	ldr	r4, [pc, #56]	; (80020ac <__aeabi_d2iz+0x5c>)
 8002072:	1ae4      	subs	r4, r4, r3
 8002074:	2c1f      	cmp	r4, #31
 8002076:	dd0c      	ble.n	8002092 <__aeabi_d2iz+0x42>
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <__aeabi_d2iz+0x60>)
 800207a:	1ac3      	subs	r3, r0, r3
 800207c:	40da      	lsrs	r2, r3
 800207e:	0013      	movs	r3, r2
 8002080:	425c      	negs	r4, r3
 8002082:	2900      	cmp	r1, #0
 8002084:	d100      	bne.n	8002088 <__aeabi_d2iz+0x38>
 8002086:	001c      	movs	r4, r3
 8002088:	0020      	movs	r0, r4
 800208a:	bd30      	pop	{r4, r5, pc}
 800208c:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <__aeabi_d2iz+0x64>)
 800208e:	18cc      	adds	r4, r1, r3
 8002090:	e7fa      	b.n	8002088 <__aeabi_d2iz+0x38>
 8002092:	4d09      	ldr	r5, [pc, #36]	; (80020b8 <__aeabi_d2iz+0x68>)
 8002094:	40e0      	lsrs	r0, r4
 8002096:	46ac      	mov	ip, r5
 8002098:	4463      	add	r3, ip
 800209a:	409a      	lsls	r2, r3
 800209c:	0013      	movs	r3, r2
 800209e:	4303      	orrs	r3, r0
 80020a0:	e7ee      	b.n	8002080 <__aeabi_d2iz+0x30>
 80020a2:	46c0      	nop			; (mov r8, r8)
 80020a4:	000003fe 	.word	0x000003fe
 80020a8:	0000041d 	.word	0x0000041d
 80020ac:	00000433 	.word	0x00000433
 80020b0:	00000413 	.word	0x00000413
 80020b4:	7fffffff 	.word	0x7fffffff
 80020b8:	fffffbed 	.word	0xfffffbed

080020bc <__aeabi_i2d>:
 80020bc:	b570      	push	{r4, r5, r6, lr}
 80020be:	2800      	cmp	r0, #0
 80020c0:	d02d      	beq.n	800211e <__aeabi_i2d+0x62>
 80020c2:	17c3      	asrs	r3, r0, #31
 80020c4:	18c5      	adds	r5, r0, r3
 80020c6:	405d      	eors	r5, r3
 80020c8:	0fc4      	lsrs	r4, r0, #31
 80020ca:	0028      	movs	r0, r5
 80020cc:	f000 f862 	bl	8002194 <__clzsi2>
 80020d0:	4b15      	ldr	r3, [pc, #84]	; (8002128 <__aeabi_i2d+0x6c>)
 80020d2:	1a1b      	subs	r3, r3, r0
 80020d4:	055b      	lsls	r3, r3, #21
 80020d6:	0d5b      	lsrs	r3, r3, #21
 80020d8:	280a      	cmp	r0, #10
 80020da:	dd15      	ble.n	8002108 <__aeabi_i2d+0x4c>
 80020dc:	380b      	subs	r0, #11
 80020de:	4085      	lsls	r5, r0
 80020e0:	2200      	movs	r2, #0
 80020e2:	032d      	lsls	r5, r5, #12
 80020e4:	0b2d      	lsrs	r5, r5, #12
 80020e6:	2100      	movs	r1, #0
 80020e8:	0010      	movs	r0, r2
 80020ea:	032d      	lsls	r5, r5, #12
 80020ec:	0d0a      	lsrs	r2, r1, #20
 80020ee:	0b2d      	lsrs	r5, r5, #12
 80020f0:	0512      	lsls	r2, r2, #20
 80020f2:	432a      	orrs	r2, r5
 80020f4:	4d0d      	ldr	r5, [pc, #52]	; (800212c <__aeabi_i2d+0x70>)
 80020f6:	051b      	lsls	r3, r3, #20
 80020f8:	402a      	ands	r2, r5
 80020fa:	4313      	orrs	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	07e4      	lsls	r4, r4, #31
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	4323      	orrs	r3, r4
 8002104:	0019      	movs	r1, r3
 8002106:	bd70      	pop	{r4, r5, r6, pc}
 8002108:	0002      	movs	r2, r0
 800210a:	0029      	movs	r1, r5
 800210c:	3215      	adds	r2, #21
 800210e:	4091      	lsls	r1, r2
 8002110:	000a      	movs	r2, r1
 8002112:	210b      	movs	r1, #11
 8002114:	1a08      	subs	r0, r1, r0
 8002116:	40c5      	lsrs	r5, r0
 8002118:	032d      	lsls	r5, r5, #12
 800211a:	0b2d      	lsrs	r5, r5, #12
 800211c:	e7e3      	b.n	80020e6 <__aeabi_i2d+0x2a>
 800211e:	2400      	movs	r4, #0
 8002120:	2300      	movs	r3, #0
 8002122:	2500      	movs	r5, #0
 8002124:	2200      	movs	r2, #0
 8002126:	e7de      	b.n	80020e6 <__aeabi_i2d+0x2a>
 8002128:	0000041e 	.word	0x0000041e
 800212c:	800fffff 	.word	0x800fffff

08002130 <__aeabi_ui2d>:
 8002130:	b510      	push	{r4, lr}
 8002132:	1e04      	subs	r4, r0, #0
 8002134:	d025      	beq.n	8002182 <__aeabi_ui2d+0x52>
 8002136:	f000 f82d 	bl	8002194 <__clzsi2>
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <__aeabi_ui2d+0x5c>)
 800213c:	1a1b      	subs	r3, r3, r0
 800213e:	055b      	lsls	r3, r3, #21
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	280a      	cmp	r0, #10
 8002144:	dd12      	ble.n	800216c <__aeabi_ui2d+0x3c>
 8002146:	380b      	subs	r0, #11
 8002148:	4084      	lsls	r4, r0
 800214a:	2200      	movs	r2, #0
 800214c:	0324      	lsls	r4, r4, #12
 800214e:	0b24      	lsrs	r4, r4, #12
 8002150:	2100      	movs	r1, #0
 8002152:	0010      	movs	r0, r2
 8002154:	0324      	lsls	r4, r4, #12
 8002156:	0d0a      	lsrs	r2, r1, #20
 8002158:	0b24      	lsrs	r4, r4, #12
 800215a:	0512      	lsls	r2, r2, #20
 800215c:	4322      	orrs	r2, r4
 800215e:	4c0c      	ldr	r4, [pc, #48]	; (8002190 <__aeabi_ui2d+0x60>)
 8002160:	051b      	lsls	r3, r3, #20
 8002162:	4022      	ands	r2, r4
 8002164:	4313      	orrs	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	0859      	lsrs	r1, r3, #1
 800216a:	bd10      	pop	{r4, pc}
 800216c:	0002      	movs	r2, r0
 800216e:	0021      	movs	r1, r4
 8002170:	3215      	adds	r2, #21
 8002172:	4091      	lsls	r1, r2
 8002174:	000a      	movs	r2, r1
 8002176:	210b      	movs	r1, #11
 8002178:	1a08      	subs	r0, r1, r0
 800217a:	40c4      	lsrs	r4, r0
 800217c:	0324      	lsls	r4, r4, #12
 800217e:	0b24      	lsrs	r4, r4, #12
 8002180:	e7e6      	b.n	8002150 <__aeabi_ui2d+0x20>
 8002182:	2300      	movs	r3, #0
 8002184:	2400      	movs	r4, #0
 8002186:	2200      	movs	r2, #0
 8002188:	e7e2      	b.n	8002150 <__aeabi_ui2d+0x20>
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	0000041e 	.word	0x0000041e
 8002190:	800fffff 	.word	0x800fffff

08002194 <__clzsi2>:
 8002194:	211c      	movs	r1, #28
 8002196:	2301      	movs	r3, #1
 8002198:	041b      	lsls	r3, r3, #16
 800219a:	4298      	cmp	r0, r3
 800219c:	d301      	bcc.n	80021a2 <__clzsi2+0xe>
 800219e:	0c00      	lsrs	r0, r0, #16
 80021a0:	3910      	subs	r1, #16
 80021a2:	0a1b      	lsrs	r3, r3, #8
 80021a4:	4298      	cmp	r0, r3
 80021a6:	d301      	bcc.n	80021ac <__clzsi2+0x18>
 80021a8:	0a00      	lsrs	r0, r0, #8
 80021aa:	3908      	subs	r1, #8
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	4298      	cmp	r0, r3
 80021b0:	d301      	bcc.n	80021b6 <__clzsi2+0x22>
 80021b2:	0900      	lsrs	r0, r0, #4
 80021b4:	3904      	subs	r1, #4
 80021b6:	a202      	add	r2, pc, #8	; (adr r2, 80021c0 <__clzsi2+0x2c>)
 80021b8:	5c10      	ldrb	r0, [r2, r0]
 80021ba:	1840      	adds	r0, r0, r1
 80021bc:	4770      	bx	lr
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	02020304 	.word	0x02020304
 80021c4:	01010101 	.word	0x01010101
	...

080021d0 <__clzdi2>:
 80021d0:	b510      	push	{r4, lr}
 80021d2:	2900      	cmp	r1, #0
 80021d4:	d103      	bne.n	80021de <__clzdi2+0xe>
 80021d6:	f7ff ffdd 	bl	8002194 <__clzsi2>
 80021da:	3020      	adds	r0, #32
 80021dc:	e002      	b.n	80021e4 <__clzdi2+0x14>
 80021de:	1c08      	adds	r0, r1, #0
 80021e0:	f7ff ffd8 	bl	8002194 <__clzsi2>
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	46c0      	nop			; (mov r8, r8)

080021e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_Init+0x3c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_Init+0x3c>)
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f810 	bl	8002228 <HAL_InitTick>
 8002208:	1e03      	subs	r3, r0, #0
 800220a:	d003      	beq.n	8002214 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	e001      	b.n	8002218 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f005 f906 	bl	8007424 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40022000 	.word	0x40022000

08002228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002230:	230f      	movs	r3, #15
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_InitTick+0x88>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d02b      	beq.n	8002298 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8002240:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <HAL_InitTick+0x8c>)
 8002242:	681c      	ldr	r4, [r3, #0]
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <HAL_InitTick+0x88>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0019      	movs	r1, r3
 800224a:	23fa      	movs	r3, #250	; 0xfa
 800224c:	0098      	lsls	r0, r3, #2
 800224e:	f7fd ff6b 	bl	8000128 <__udivsi3>
 8002252:	0003      	movs	r3, r0
 8002254:	0019      	movs	r1, r3
 8002256:	0020      	movs	r0, r4
 8002258:	f7fd ff66 	bl	8000128 <__udivsi3>
 800225c:	0003      	movs	r3, r0
 800225e:	0018      	movs	r0, r3
 8002260:	f000 f969 	bl	8002536 <HAL_SYSTICK_Config>
 8002264:	1e03      	subs	r3, r0, #0
 8002266:	d112      	bne.n	800228e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2b03      	cmp	r3, #3
 800226c:	d80a      	bhi.n	8002284 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	2301      	movs	r3, #1
 8002272:	425b      	negs	r3, r3
 8002274:	2200      	movs	r2, #0
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f928 	bl	80024cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_InitTick+0x90>)
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	e00d      	b.n	80022a0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002284:	230f      	movs	r3, #15
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
 800228c:	e008      	b.n	80022a0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800228e:	230f      	movs	r3, #15
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
 8002296:	e003      	b.n	80022a0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002298:	230f      	movs	r3, #15
 800229a:	18fb      	adds	r3, r7, r3
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80022a0:	230f      	movs	r3, #15
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	781b      	ldrb	r3, [r3, #0]
}
 80022a6:	0018      	movs	r0, r3
 80022a8:	46bd      	mov	sp, r7
 80022aa:	b005      	add	sp, #20
 80022ac:	bd90      	pop	{r4, r7, pc}
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	20000004 	.word	0x20000004
 80022b4:	20000008 	.word	0x20000008
 80022b8:	20000000 	.word	0x20000000

080022bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_IncTick+0x18>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_IncTick+0x1c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	18d2      	adds	r2, r2, r3
 80022ca:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <HAL_IncTick+0x18>)
 80022cc:	601a      	str	r2, [r3, #0]
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200004c4 	.word	0x200004c4
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_GetTick+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	200004c4 	.word	0x200004c4

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fff0 	bl	80022dc <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	d004      	beq.n	8002314 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_Delay+0x40>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	18d3      	adds	r3, r2, r3
 8002312:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002314:	46c0      	nop			; (mov r8, r8)
 8002316:	f7ff ffe1 	bl	80022dc <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	429a      	cmp	r2, r3
 8002324:	d8f7      	bhi.n	8002316 <HAL_Delay+0x26>
  {
  }
}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}
 800232e:	46c0      	nop			; (mov r8, r8)
 8002330:	20000004 	.word	0x20000004

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	0002      	movs	r2, r0
 800233c:	1dfb      	adds	r3, r7, #7
 800233e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b7f      	cmp	r3, #127	; 0x7f
 8002346:	d809      	bhi.n	800235c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002348:	1dfb      	adds	r3, r7, #7
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	001a      	movs	r2, r3
 800234e:	231f      	movs	r3, #31
 8002350:	401a      	ands	r2, r3
 8002352:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_EnableIRQ+0x30>)
 8002354:	2101      	movs	r1, #1
 8002356:	4091      	lsls	r1, r2
 8002358:	000a      	movs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
  }
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000e100 	.word	0xe000e100

08002368 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	0002      	movs	r2, r0
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002374:	1dfb      	adds	r3, r7, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b7f      	cmp	r3, #127	; 0x7f
 800237a:	d80e      	bhi.n	800239a <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237c:	1dfb      	adds	r3, r7, #7
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	001a      	movs	r2, r3
 8002382:	231f      	movs	r3, #31
 8002384:	4013      	ands	r3, r2
 8002386:	4907      	ldr	r1, [pc, #28]	; (80023a4 <__NVIC_DisableIRQ+0x3c>)
 8002388:	2201      	movs	r2, #1
 800238a:	409a      	lsls	r2, r3
 800238c:	0013      	movs	r3, r2
 800238e:	2280      	movs	r2, #128	; 0x80
 8002390:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002396:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b002      	add	sp, #8
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	e000e100 	.word	0xe000e100

080023a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	0002      	movs	r2, r0
 80023b0:	6039      	str	r1, [r7, #0]
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b6:	1dfb      	adds	r3, r7, #7
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b7f      	cmp	r3, #127	; 0x7f
 80023bc:	d828      	bhi.n	8002410 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023be:	4a2f      	ldr	r2, [pc, #188]	; (800247c <__NVIC_SetPriority+0xd4>)
 80023c0:	1dfb      	adds	r3, r7, #7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	089b      	lsrs	r3, r3, #2
 80023c8:	33c0      	adds	r3, #192	; 0xc0
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	589b      	ldr	r3, [r3, r2]
 80023ce:	1dfa      	adds	r2, r7, #7
 80023d0:	7812      	ldrb	r2, [r2, #0]
 80023d2:	0011      	movs	r1, r2
 80023d4:	2203      	movs	r2, #3
 80023d6:	400a      	ands	r2, r1
 80023d8:	00d2      	lsls	r2, r2, #3
 80023da:	21ff      	movs	r1, #255	; 0xff
 80023dc:	4091      	lsls	r1, r2
 80023de:	000a      	movs	r2, r1
 80023e0:	43d2      	mvns	r2, r2
 80023e2:	401a      	ands	r2, r3
 80023e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	019b      	lsls	r3, r3, #6
 80023ea:	22ff      	movs	r2, #255	; 0xff
 80023ec:	401a      	ands	r2, r3
 80023ee:	1dfb      	adds	r3, r7, #7
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	0018      	movs	r0, r3
 80023f4:	2303      	movs	r3, #3
 80023f6:	4003      	ands	r3, r0
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023fc:	481f      	ldr	r0, [pc, #124]	; (800247c <__NVIC_SetPriority+0xd4>)
 80023fe:	1dfb      	adds	r3, r7, #7
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b25b      	sxtb	r3, r3
 8002404:	089b      	lsrs	r3, r3, #2
 8002406:	430a      	orrs	r2, r1
 8002408:	33c0      	adds	r3, #192	; 0xc0
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800240e:	e031      	b.n	8002474 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <__NVIC_SetPriority+0xd8>)
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	0019      	movs	r1, r3
 8002418:	230f      	movs	r3, #15
 800241a:	400b      	ands	r3, r1
 800241c:	3b08      	subs	r3, #8
 800241e:	089b      	lsrs	r3, r3, #2
 8002420:	3306      	adds	r3, #6
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	18d3      	adds	r3, r2, r3
 8002426:	3304      	adds	r3, #4
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1dfa      	adds	r2, r7, #7
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	0011      	movs	r1, r2
 8002430:	2203      	movs	r2, #3
 8002432:	400a      	ands	r2, r1
 8002434:	00d2      	lsls	r2, r2, #3
 8002436:	21ff      	movs	r1, #255	; 0xff
 8002438:	4091      	lsls	r1, r2
 800243a:	000a      	movs	r2, r1
 800243c:	43d2      	mvns	r2, r2
 800243e:	401a      	ands	r2, r3
 8002440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	22ff      	movs	r2, #255	; 0xff
 8002448:	401a      	ands	r2, r3
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	2303      	movs	r3, #3
 8002452:	4003      	ands	r3, r0
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002458:	4809      	ldr	r0, [pc, #36]	; (8002480 <__NVIC_SetPriority+0xd8>)
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	001c      	movs	r4, r3
 8002460:	230f      	movs	r3, #15
 8002462:	4023      	ands	r3, r4
 8002464:	3b08      	subs	r3, #8
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	430a      	orrs	r2, r1
 800246a:	3306      	adds	r3, #6
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	18c3      	adds	r3, r0, r3
 8002470:	3304      	adds	r3, #4
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b003      	add	sp, #12
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	e000e100 	.word	0xe000e100
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3b01      	subs	r3, #1
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <SysTick_Config+0x40>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002496:	2301      	movs	r3, #1
 8002498:	e010      	b.n	80024bc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <SysTick_Config+0x44>)
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	3a01      	subs	r2, #1
 80024a0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a2:	2301      	movs	r3, #1
 80024a4:	425b      	negs	r3, r3
 80024a6:	2103      	movs	r1, #3
 80024a8:	0018      	movs	r0, r3
 80024aa:	f7ff ff7d 	bl	80023a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <SysTick_Config+0x44>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x44>)
 80024b6:	2207      	movs	r2, #7
 80024b8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	00ffffff 	.word	0x00ffffff
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	210f      	movs	r1, #15
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	187b      	adds	r3, r7, r1
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b25b      	sxtb	r3, r3
 80024e6:	0011      	movs	r1, r2
 80024e8:	0018      	movs	r0, r3
 80024ea:	f7ff ff5d 	bl	80023a8 <__NVIC_SetPriority>
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b082      	sub	sp, #8
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	0002      	movs	r2, r0
 80024fe:	1dfb      	adds	r3, r7, #7
 8002500:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002502:	1dfb      	adds	r3, r7, #7
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b25b      	sxtb	r3, r3
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ff13 	bl	8002334 <__NVIC_EnableIRQ>
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b002      	add	sp, #8
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	0002      	movs	r2, r0
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b25b      	sxtb	r3, r3
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff ff1d 	bl	8002368 <__NVIC_DisableIRQ>
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	f7ff ff9f 	bl	8002484 <SysTick_Config>
 8002546:	0003      	movs	r3, r0
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	230f      	movs	r3, #15
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2224      	movs	r2, #36	; 0x24
 8002564:	2100      	movs	r1, #0
 8002566:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2224      	movs	r2, #36	; 0x24
 800256c:	5c9b      	ldrb	r3, [r3, r2]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_DMA_Abort_IT+0x26>
 8002572:	2302      	movs	r3, #2
 8002574:	e05e      	b.n	8002634 <HAL_DMA_Abort_IT+0xe4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2224      	movs	r2, #36	; 0x24
 800257a:	2101      	movs	r1, #1
 800257c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2225      	movs	r2, #37	; 0x25
 8002582:	5c9b      	ldrb	r3, [r3, r2]
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d007      	beq.n	800259a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2204      	movs	r2, #4
 800258e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002590:	230f      	movs	r3, #15
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e049      	b.n	800262e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	210e      	movs	r1, #14
 80025a6:	438a      	bics	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2101      	movs	r1, #1
 80025b6:	438a      	bics	r2, r1
 80025b8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	491d      	ldr	r1, [pc, #116]	; (800263c <HAL_DMA_Abort_IT+0xec>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_DMA_Abort_IT+0xf0>)
 80025cc:	6859      	ldr	r1, [r3, #4]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	221c      	movs	r2, #28
 80025d4:	4013      	ands	r3, r2
 80025d6:	2201      	movs	r2, #1
 80025d8:	409a      	lsls	r2, r3
 80025da:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_DMA_Abort_IT+0xf0>)
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80025e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00c      	beq.n	800260c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	490f      	ldr	r1, [pc, #60]	; (800263c <HAL_DMA_Abort_IT+0xec>)
 80025fe:	400a      	ands	r2, r1
 8002600:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800260a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2225      	movs	r2, #37	; 0x25
 8002610:	2101      	movs	r1, #1
 8002612:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2224      	movs	r2, #36	; 0x24
 8002618:	2100      	movs	r1, #0
 800261a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	0010      	movs	r0, r2
 800262c:	4798      	blx	r3
    }
  }
  return status;
 800262e:	230f      	movs	r3, #15
 8002630:	18fb      	adds	r3, r7, r3
 8002632:	781b      	ldrb	r3, [r3, #0]
}
 8002634:	0018      	movs	r0, r3
 8002636:	46bd      	mov	sp, r7
 8002638:	b004      	add	sp, #16
 800263a:	bd80      	pop	{r7, pc}
 800263c:	fffffeff 	.word	0xfffffeff
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002652:	e147      	b.n	80028e4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4091      	lsls	r1, r2
 800265e:	000a      	movs	r2, r1
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d100      	bne.n	800266c <HAL_GPIO_Init+0x28>
 800266a:	e138      	b.n	80028de <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d003      	beq.n	800267c <HAL_GPIO_Init+0x38>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2b12      	cmp	r3, #18
 800267a:	d123      	bne.n	80026c4 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	08da      	lsrs	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3208      	adds	r2, #8
 8002684:	0092      	lsls	r2, r2, #2
 8002686:	58d3      	ldr	r3, [r2, r3]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2207      	movs	r2, #7
 800268e:	4013      	ands	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	220f      	movs	r2, #15
 8002694:	409a      	lsls	r2, r3
 8002696:	0013      	movs	r3, r2
 8002698:	43da      	mvns	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4013      	ands	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	691a      	ldr	r2, [r3, #16]
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2107      	movs	r1, #7
 80026a8:	400b      	ands	r3, r1
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	409a      	lsls	r2, r3
 80026ae:	0013      	movs	r3, r2
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	08da      	lsrs	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3208      	adds	r2, #8
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	6939      	ldr	r1, [r7, #16]
 80026c2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	2203      	movs	r2, #3
 80026d0:	409a      	lsls	r2, r3
 80026d2:	0013      	movs	r3, r2
 80026d4:	43da      	mvns	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2203      	movs	r2, #3
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	409a      	lsls	r2, r3
 80026ea:	0013      	movs	r3, r2
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d00b      	beq.n	8002718 <HAL_GPIO_Init+0xd4>
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d007      	beq.n	8002718 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800270c:	2b11      	cmp	r3, #17
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b12      	cmp	r3, #18
 8002716:	d130      	bne.n	800277a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2203      	movs	r2, #3
 8002724:	409a      	lsls	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	43da      	mvns	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	0013      	movs	r3, r2
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800274e:	2201      	movs	r2, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	409a      	lsls	r2, r3
 8002754:	0013      	movs	r3, r2
 8002756:	43da      	mvns	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4013      	ands	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	2201      	movs	r2, #1
 8002766:	401a      	ands	r2, r3
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	409a      	lsls	r2, r3
 800276c:	0013      	movs	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	4313      	orrs	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	43da      	mvns	r2, r3
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	409a      	lsls	r2, r3
 800279c:	0013      	movs	r3, r2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	055b      	lsls	r3, r3, #21
 80027b2:	4013      	ands	r3, r2
 80027b4:	d100      	bne.n	80027b8 <HAL_GPIO_Init+0x174>
 80027b6:	e092      	b.n	80028de <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80027b8:	4a50      	ldr	r2, [pc, #320]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3318      	adds	r3, #24
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	589b      	ldr	r3, [r3, r2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2203      	movs	r2, #3
 80027ca:	4013      	ands	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	220f      	movs	r2, #15
 80027d0:	409a      	lsls	r2, r3
 80027d2:	0013      	movs	r3, r2
 80027d4:	43da      	mvns	r2, r3
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	23a0      	movs	r3, #160	; 0xa0
 80027e0:	05db      	lsls	r3, r3, #23
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d013      	beq.n	800280e <HAL_GPIO_Init+0x1ca>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_GPIO_Init+0x2bc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00d      	beq.n	800280a <HAL_GPIO_Init+0x1c6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a44      	ldr	r2, [pc, #272]	; (8002904 <HAL_GPIO_Init+0x2c0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d007      	beq.n	8002806 <HAL_GPIO_Init+0x1c2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a43      	ldr	r2, [pc, #268]	; (8002908 <HAL_GPIO_Init+0x2c4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d101      	bne.n	8002802 <HAL_GPIO_Init+0x1be>
 80027fe:	2303      	movs	r3, #3
 8002800:	e006      	b.n	8002810 <HAL_GPIO_Init+0x1cc>
 8002802:	2305      	movs	r3, #5
 8002804:	e004      	b.n	8002810 <HAL_GPIO_Init+0x1cc>
 8002806:	2302      	movs	r3, #2
 8002808:	e002      	b.n	8002810 <HAL_GPIO_Init+0x1cc>
 800280a:	2301      	movs	r3, #1
 800280c:	e000      	b.n	8002810 <HAL_GPIO_Init+0x1cc>
 800280e:	2300      	movs	r3, #0
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	2103      	movs	r1, #3
 8002814:	400a      	ands	r2, r1
 8002816:	00d2      	lsls	r2, r2, #3
 8002818:	4093      	lsls	r3, r2
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002820:	4936      	ldr	r1, [pc, #216]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	089b      	lsrs	r3, r3, #2
 8002826:	3318      	adds	r3, #24
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800282e:	4a33      	ldr	r2, [pc, #204]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	58d3      	ldr	r3, [r2, r3]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	43da      	mvns	r2, r3
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4013      	ands	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2380      	movs	r3, #128	; 0x80
 8002846:	025b      	lsls	r3, r3, #9
 8002848:	4013      	ands	r3, r2
 800284a:	d003      	beq.n	8002854 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800284c:	693a      	ldr	r2, [r7, #16]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002854:	4929      	ldr	r1, [pc, #164]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 8002856:	2280      	movs	r2, #128	; 0x80
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 800285e:	2384      	movs	r3, #132	; 0x84
 8002860:	58d3      	ldr	r3, [r2, r3]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	43da      	mvns	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	029b      	lsls	r3, r3, #10
 8002876:	4013      	ands	r3, r2
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002882:	491e      	ldr	r1, [pc, #120]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 8002884:	2284      	movs	r2, #132	; 0x84
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800288a:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	43da      	mvns	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4013      	ands	r3, r2
 8002898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	2380      	movs	r3, #128	; 0x80
 80028a0:	035b      	lsls	r3, r3, #13
 80028a2:	4013      	ands	r3, r2
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	43da      	mvns	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4013      	ands	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	039b      	lsls	r3, r3, #14
 80028cc:	4013      	ands	r3, r2
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_GPIO_Init+0x2b8>)
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	3301      	adds	r3, #1
 80028e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	40da      	lsrs	r2, r3
 80028ec:	1e13      	subs	r3, r2, #0
 80028ee:	d000      	beq.n	80028f2 <HAL_GPIO_Init+0x2ae>
 80028f0:	e6b0      	b.n	8002654 <HAL_GPIO_Init+0x10>
  }
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b006      	add	sp, #24
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40021800 	.word	0x40021800
 8002900:	50000400 	.word	0x50000400
 8002904:	50000800 	.word	0x50000800
 8002908:	50000c00 	.word	0x50000c00

0800290c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800291a:	e0b4      	b.n	8002a86 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800291c:	2201      	movs	r2, #1
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	409a      	lsls	r2, r3
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d100      	bne.n	8002930 <HAL_GPIO_DeInit+0x24>
 800292e:	e0a7      	b.n	8002a80 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002930:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3318      	adds	r3, #24
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	220f      	movs	r2, #15
 8002948:	409a      	lsls	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	23a0      	movs	r3, #160	; 0xa0
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	429a      	cmp	r2, r3
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_DeInit+0x76>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a50      	ldr	r2, [pc, #320]	; (8002aa0 <HAL_GPIO_DeInit+0x194>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_DeInit+0x72>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4f      	ldr	r2, [pc, #316]	; (8002aa4 <HAL_GPIO_DeInit+0x198>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_DeInit+0x6e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4e      	ldr	r2, [pc, #312]	; (8002aa8 <HAL_GPIO_DeInit+0x19c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_DeInit+0x6a>
 8002972:	2303      	movs	r3, #3
 8002974:	e006      	b.n	8002984 <HAL_GPIO_DeInit+0x78>
 8002976:	2305      	movs	r3, #5
 8002978:	e004      	b.n	8002984 <HAL_GPIO_DeInit+0x78>
 800297a:	2302      	movs	r3, #2
 800297c:	e002      	b.n	8002984 <HAL_GPIO_DeInit+0x78>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <HAL_GPIO_DeInit+0x78>
 8002982:	2300      	movs	r3, #0
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	2103      	movs	r1, #3
 8002988:	400a      	ands	r2, r1
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	4093      	lsls	r3, r2
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d136      	bne.n	8002a02 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002994:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	58d3      	ldr	r3, [r2, r3]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	43d2      	mvns	r2, r2
 800299e:	493f      	ldr	r1, [pc, #252]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029a0:	4013      	ands	r3, r2
 80029a2:	2280      	movs	r2, #128	; 0x80
 80029a4:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80029a6:	4a3d      	ldr	r2, [pc, #244]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029a8:	2384      	movs	r3, #132	; 0x84
 80029aa:	58d3      	ldr	r3, [r2, r3]
 80029ac:	693a      	ldr	r2, [r7, #16]
 80029ae:	43d2      	mvns	r2, r2
 80029b0:	493a      	ldr	r1, [pc, #232]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	2284      	movs	r2, #132	; 0x84
 80029b6:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43d9      	mvns	r1, r3
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029c2:	400a      	ands	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80029c6:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	43d9      	mvns	r1, r3
 80029ce:	4b33      	ldr	r3, [pc, #204]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2203      	movs	r2, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	220f      	movs	r2, #15
 80029de:	409a      	lsls	r2, r3
 80029e0:	0013      	movs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 80029e4:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	089b      	lsrs	r3, r3, #2
 80029ea:	3318      	adds	r3, #24
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	589a      	ldr	r2, [r3, r2]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	43d9      	mvns	r1, r3
 80029f4:	4829      	ldr	r0, [pc, #164]	; (8002a9c <HAL_GPIO_DeInit+0x190>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	089b      	lsrs	r3, r3, #2
 80029fa:	400a      	ands	r2, r1
 80029fc:	3318      	adds	r3, #24
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	4099      	lsls	r1, r3
 8002a0e:	000b      	movs	r3, r1
 8002a10:	431a      	orrs	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	08da      	lsrs	r2, r3, #3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3208      	adds	r2, #8
 8002a1e:	0092      	lsls	r2, r2, #2
 8002a20:	58d3      	ldr	r3, [r2, r3]
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	2107      	movs	r1, #7
 8002a26:	400a      	ands	r2, r1
 8002a28:	0092      	lsls	r2, r2, #2
 8002a2a:	210f      	movs	r1, #15
 8002a2c:	4091      	lsls	r1, r2
 8002a2e:	000a      	movs	r2, r1
 8002a30:	43d1      	mvns	r1, r2
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	08d2      	lsrs	r2, r2, #3
 8002a36:	4019      	ands	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3208      	adds	r2, #8
 8002a3c:	0092      	lsls	r2, r2, #2
 8002a3e:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	0052      	lsls	r2, r2, #1
 8002a48:	2103      	movs	r1, #3
 8002a4a:	4091      	lsls	r1, r2
 8002a4c:	000a      	movs	r2, r1
 8002a4e:	43d2      	mvns	r2, r2
 8002a50:	401a      	ands	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	4091      	lsls	r1, r2
 8002a60:	000a      	movs	r2, r1
 8002a62:	43d2      	mvns	r2, r2
 8002a64:	401a      	ands	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	0052      	lsls	r2, r2, #1
 8002a72:	2103      	movs	r1, #3
 8002a74:	4091      	lsls	r1, r2
 8002a76:	000a      	movs	r2, r1
 8002a78:	43d2      	mvns	r2, r2
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	3301      	adds	r3, #1
 8002a84:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	40da      	lsrs	r2, r3
 8002a8c:	1e13      	subs	r3, r2, #0
 8002a8e:	d000      	beq.n	8002a92 <HAL_GPIO_DeInit+0x186>
 8002a90:	e744      	b.n	800291c <HAL_GPIO_DeInit+0x10>
  }
}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b006      	add	sp, #24
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	50000400 	.word	0x50000400
 8002aa4:	50000800 	.word	0x50000800
 8002aa8:	50000c00 	.word	0x50000c00

08002aac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	0008      	movs	r0, r1
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	1cbb      	adds	r3, r7, #2
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	801a      	strh	r2, [r3, #0]
 8002abe:	1c7b      	adds	r3, r7, #1
 8002ac0:	1c0a      	adds	r2, r1, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ac4:	1c7b      	adds	r3, r7, #1
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002acc:	1cbb      	adds	r3, r7, #2
 8002ace:	881a      	ldrh	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ad4:	e003      	b.n	8002ade <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ad6:	1cbb      	adds	r3, r7, #2
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	b002      	add	sp, #8
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e022      	b.n	8002b3e <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2241      	movs	r2, #65	; 0x41
 8002afc:	2124      	movs	r1, #36	; 0x24
 8002afe:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	438a      	bics	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f004 fcaa 	bl	800746c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2241      	movs	r2, #65	; 0x41
 8002b22:	2100      	movs	r1, #0
 8002b24:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2242      	movs	r2, #66	; 0x42
 8002b30:	2100      	movs	r1, #0
 8002b32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	; 0x40
 8002b38:	2100      	movs	r1, #0
 8002b3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b002      	add	sp, #8
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6a:	68ba      	ldr	r2, [r7, #8]
 8002b6c:	68f9      	ldr	r1, [r7, #12]
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4798      	blx	r3
  }
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b004      	add	sp, #16
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b086      	sub	sp, #24
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	0a1b      	lsrs	r3, r3, #8
 8002b96:	001a      	movs	r2, r3
 8002b98:	2301      	movs	r3, #1
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d010      	beq.n	8002bc0 <HAL_I2C_ER_IRQHandler+0x46>
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	09db      	lsrs	r3, r3, #7
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bae:	2201      	movs	r2, #1
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2280      	movs	r2, #128	; 0x80
 8002bbc:	0052      	lsls	r2, r2, #1
 8002bbe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	0a9b      	lsrs	r3, r3, #10
 8002bc4:	001a      	movs	r2, r3
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d010      	beq.n	8002bee <HAL_I2C_ER_IRQHandler+0x74>
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	09db      	lsrs	r3, r3, #7
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d00a      	beq.n	8002bee <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bdc:	2208      	movs	r2, #8
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2280      	movs	r2, #128	; 0x80
 8002bea:	00d2      	lsls	r2, r2, #3
 8002bec:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	0a5b      	lsrs	r3, r3, #9
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d010      	beq.n	8002c1c <HAL_I2C_ER_IRQHandler+0xa2>
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	09db      	lsrs	r3, r3, #7
 8002bfe:	001a      	movs	r2, r3
 8002c00:	2301      	movs	r3, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	d00a      	beq.n	8002c1c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2280      	movs	r2, #128	; 0x80
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	220b      	movs	r2, #11
 8002c26:	4013      	ands	r3, r2
 8002c28:	d005      	beq.n	8002c36 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	0011      	movs	r1, r2
 8002c30:	0018      	movs	r0, r3
 8002c32:	f000 fb71 	bl	8003318 <I2C_ITError>
  }
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	b006      	add	sp, #24
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b082      	sub	sp, #8
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b002      	add	sp, #8
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	b002      	add	sp, #8
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b082      	sub	sp, #8
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	0008      	movs	r0, r1
 8002c68:	0011      	movs	r1, r2
 8002c6a:	1cfb      	adds	r3, r7, #3
 8002c6c:	1c02      	adds	r2, r0, #0
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	003b      	movs	r3, r7
 8002c72:	1c0a      	adds	r2, r1, #0
 8002c74:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002c86:	46c0      	nop			; (mov r8, r8)
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	b002      	add	sp, #8
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b082      	sub	sp, #8
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b002      	add	sp, #8
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2240      	movs	r2, #64	; 0x40
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <I2C_Slave_ISR_IT+0x24>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e0fe      	b.n	8002ed2 <I2C_Slave_ISR_IT+0x222>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2240      	movs	r2, #64	; 0x40
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	001a      	movs	r2, r3
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d054      	beq.n	8002d92 <I2C_Slave_ISR_IT+0xe2>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	001a      	movs	r2, r3
 8002cee:	2301      	movs	r3, #1
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d04e      	beq.n	8002d92 <I2C_Slave_ISR_IT+0xe2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d12d      	bne.n	8002d5a <I2C_Slave_ISR_IT+0xaa>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2241      	movs	r2, #65	; 0x41
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b28      	cmp	r3, #40	; 0x28
 8002d08:	d10b      	bne.n	8002d22 <I2C_Slave_ISR_IT+0x72>
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	049b      	lsls	r3, r3, #18
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <I2C_Slave_ISR_IT+0x72>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	0011      	movs	r1, r2
 8002d1a:	0018      	movs	r0, r3
 8002d1c:	f000 faa6 	bl	800326c <I2C_ITListenCplt>
 8002d20:	e036      	b.n	8002d90 <I2C_Slave_ISR_IT+0xe0>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2241      	movs	r2, #65	; 0x41
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b29      	cmp	r3, #41	; 0x29
 8002d2c:	d110      	bne.n	8002d50 <I2C_Slave_ISR_IT+0xa0>
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	; (8002edc <I2C_Slave_ISR_IT+0x22c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00c      	beq.n	8002d50 <I2C_Slave_ISR_IT+0xa0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2210      	movs	r2, #16
 8002d3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f000 fbbb 	bl	80034bc <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	0018      	movs	r0, r3
 8002d4a:	f000 f96e 	bl	800302a <I2C_ITSlaveSeqCplt>
 8002d4e:	e01f      	b.n	8002d90 <I2C_Slave_ISR_IT+0xe0>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2210      	movs	r2, #16
 8002d56:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002d58:	e0a1      	b.n	8002e9e <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	2204      	movs	r2, #4
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <I2C_Slave_ISR_IT+0xd0>
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	045b      	lsls	r3, r3, #17
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d000      	beq.n	8002d80 <I2C_Slave_ISR_IT+0xd0>
 8002d7e:	e08e      	b.n	8002e9e <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	0011      	movs	r1, r2
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 fac5 	bl	8003318 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002d8e:	e086      	b.n	8002e9e <I2C_Slave_ISR_IT+0x1ee>
 8002d90:	e085      	b.n	8002e9e <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	089b      	lsrs	r3, r3, #2
 8002d96:	001a      	movs	r2, r3
 8002d98:	2301      	movs	r3, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d035      	beq.n	8002e0a <I2C_Slave_ISR_IT+0x15a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	001a      	movs	r2, r3
 8002da4:	2301      	movs	r3, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d02f      	beq.n	8002e0a <I2C_Slave_ISR_IT+0x15a>
  {
    if (hi2c->XferCount > 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01c      	beq.n	8002dee <I2C_Slave_ISR_IT+0x13e>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2204      	movs	r2, #4
 8002db8:	4393      	bics	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d154      	bne.n	8002ea2 <I2C_Slave_ISR_IT+0x1f2>
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4a38      	ldr	r2, [pc, #224]	; (8002edc <I2C_Slave_ISR_IT+0x22c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d050      	beq.n	8002ea2 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f911 	bl	800302a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002e08:	e04b      	b.n	8002ea2 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	001a      	movs	r2, r3
 8002e10:	2301      	movs	r3, #1
 8002e12:	4013      	ands	r3, r2
 8002e14:	d00c      	beq.n	8002e30 <I2C_Slave_ISR_IT+0x180>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	08db      	lsrs	r3, r3, #3
 8002e1a:	001a      	movs	r2, r3
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d006      	beq.n	8002e30 <I2C_Slave_ISR_IT+0x180>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	0011      	movs	r1, r2
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f859 	bl	8002ee0 <I2C_ITAddrCplt>
 8002e2e:	e039      	b.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	085b      	lsrs	r3, r3, #1
 8002e34:	001a      	movs	r2, r3
 8002e36:	2301      	movs	r3, #1
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d033      	beq.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	001a      	movs	r2, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d02d      	beq.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d018      	beq.n	8002e84 <I2C_Slave_ISR_IT+0x1d4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
 8002e82:	e00f      	b.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	2380      	movs	r3, #128	; 0x80
 8002e88:	045b      	lsls	r3, r3, #17
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d002      	beq.n	8002e94 <I2C_Slave_ISR_IT+0x1e4>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	0018      	movs	r0, r3
 8002e98:	f000 f8c7 	bl	800302a <I2C_ITSlaveSeqCplt>
 8002e9c:	e002      	b.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002e9e:	46c0      	nop			; (mov r8, r8)
 8002ea0:	e000      	b.n	8002ea4 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002ea2:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2301      	movs	r3, #1
 8002eac:	4013      	ands	r3, r2
 8002eae:	d00b      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x218>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d005      	beq.n	8002ec8 <I2C_Slave_ISR_IT+0x218>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ebc:	697a      	ldr	r2, [r7, #20]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	0011      	movs	r1, r2
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 f8f2 	bl	80030ac <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2240      	movs	r2, #64	; 0x40
 8002ecc:	2100      	movs	r1, #0
 8002ece:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	b006      	add	sp, #24
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	ffff0000 	.word	0xffff0000

08002ee0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2241      	movs	r2, #65	; 0x41
 8002eee:	5c9b      	ldrb	r3, [r3, r2]
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2328      	movs	r3, #40	; 0x28
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b28      	cmp	r3, #40	; 0x28
 8002efa:	d000      	beq.n	8002efe <I2C_ITAddrCplt+0x1e>
 8002efc:	e089      	b.n	8003012 <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	400a      	ands	r2, r1
 8002f10:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	0c1b      	lsrs	r3, r3, #16
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	230c      	movs	r3, #12
 8002f1e:	18fb      	adds	r3, r7, r3
 8002f20:	21fe      	movs	r1, #254	; 0xfe
 8002f22:	400a      	ands	r2, r1
 8002f24:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	230a      	movs	r3, #10
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	0592      	lsls	r2, r2, #22
 8002f34:	0d92      	lsrs	r2, r2, #22
 8002f36:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	2308      	movs	r3, #8
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	21fe      	movs	r1, #254	; 0xfe
 8002f46:	400a      	ands	r2, r1
 8002f48:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d14b      	bne.n	8002fea <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002f52:	230a      	movs	r3, #10
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	881b      	ldrh	r3, [r3, #0]
 8002f58:	09db      	lsrs	r3, r3, #7
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	230c      	movs	r3, #12
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	4053      	eors	r3, r2
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	001a      	movs	r2, r3
 8002f68:	2306      	movs	r3, #6
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d124      	bne.n	8002fb8 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 8002f6e:	230c      	movs	r3, #12
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	220a      	movs	r2, #10
 8002f74:	18ba      	adds	r2, r7, r2
 8002f76:	8812      	ldrh	r2, [r2, #0]
 8002f78:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7e:	1c5a      	adds	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d14a      	bne.n	8003022 <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2208      	movs	r2, #8
 8002f98:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2240      	movs	r2, #64	; 0x40
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	230f      	movs	r3, #15
 8002faa:	18fb      	adds	r3, r7, r3
 8002fac:	7819      	ldrb	r1, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7ff fe54 	bl	8002c5e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002fb6:	e034      	b.n	8003022 <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 8002fb8:	240c      	movs	r4, #12
 8002fba:	193b      	adds	r3, r7, r4
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	18ba      	adds	r2, r7, r2
 8002fc0:	8812      	ldrh	r2, [r2, #0]
 8002fc2:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fabf 	bl	800354c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2240      	movs	r2, #64	; 0x40
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fd6:	193b      	adds	r3, r7, r4
 8002fd8:	881a      	ldrh	r2, [r3, #0]
 8002fda:	230f      	movs	r3, #15
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	7819      	ldrb	r1, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	0018      	movs	r0, r3
 8002fe4:	f7ff fe3b 	bl	8002c5e <HAL_I2C_AddrCallback>
}
 8002fe8:	e01b      	b.n	8003022 <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2104      	movs	r1, #4
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f000 faac 	bl	800354c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2240      	movs	r2, #64	; 0x40
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ffc:	230c      	movs	r3, #12
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	881a      	ldrh	r2, [r3, #0]
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	7819      	ldrb	r1, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	0018      	movs	r0, r3
 800300c:	f7ff fe27 	bl	8002c5e <HAL_I2C_AddrCallback>
}
 8003010:	e007      	b.n	8003022 <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2208      	movs	r2, #8
 8003018:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2240      	movs	r2, #64	; 0x40
 800301e:	2100      	movs	r1, #0
 8003020:	5499      	strb	r1, [r3, r2]
}
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	46bd      	mov	sp, r7
 8003026:	b005      	add	sp, #20
 8003028:	bd90      	pop	{r4, r7, pc}

0800302a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b082      	sub	sp, #8
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2242      	movs	r2, #66	; 0x42
 8003036:	2100      	movs	r1, #0
 8003038:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2241      	movs	r2, #65	; 0x41
 800303e:	5c9b      	ldrb	r3, [r3, r2]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b29      	cmp	r3, #41	; 0x29
 8003044:	d114      	bne.n	8003070 <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2241      	movs	r2, #65	; 0x41
 800304a:	2128      	movs	r1, #40	; 0x28
 800304c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2221      	movs	r2, #33	; 0x21
 8003052:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2101      	movs	r1, #1
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fa77 	bl	800354c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2240      	movs	r2, #64	; 0x40
 8003062:	2100      	movs	r1, #0
 8003064:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f7ff fde8 	bl	8002c3e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800306e:	e019      	b.n	80030a4 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2241      	movs	r2, #65	; 0x41
 8003074:	5c9b      	ldrb	r3, [r3, r2]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b2a      	cmp	r3, #42	; 0x2a
 800307a:	d113      	bne.n	80030a4 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2241      	movs	r2, #65	; 0x41
 8003080:	2128      	movs	r1, #40	; 0x28
 8003082:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2222      	movs	r2, #34	; 0x22
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2102      	movs	r1, #2
 800308e:	0018      	movs	r0, r3
 8003090:	f000 fa5c 	bl	800354c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2240      	movs	r2, #64	; 0x40
 8003098:	2100      	movs	r1, #0
 800309a:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff fdd5 	bl	8002c4e <HAL_I2C_SlaveRxCpltCallback>
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	46bd      	mov	sp, r7
 80030a8:	b002      	add	sp, #8
 80030aa:	bd80      	pop	{r7, pc}

080030ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2220      	movs	r2, #32
 80030c8:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2107      	movs	r1, #7
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 fa3c 	bl	800354c <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2180      	movs	r1, #128	; 0x80
 80030e0:	0209      	lsls	r1, r1, #8
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	495c      	ldr	r1, [pc, #368]	; (8003264 <I2C_ITSlaveCplt+0x1b8>)
 80030f2:	400a      	ands	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 f9df 	bl	80034bc <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	0b9b      	lsrs	r3, r3, #14
 8003102:	001a      	movs	r2, r3
 8003104:	2301      	movs	r3, #1
 8003106:	4013      	ands	r3, r2
 8003108:	d00b      	beq.n	8003122 <I2C_ITSlaveCplt+0x76>
  {
    if (hi2c->hdmatx != NULL)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	2b00      	cmp	r3, #0
 8003110:	d018      	beq.n	8003144 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	b29a      	uxth	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003120:	e010      	b.n	8003144 <I2C_ITSlaveCplt+0x98>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0bdb      	lsrs	r3, r3, #15
 8003126:	001a      	movs	r2, r3
 8003128:	2301      	movs	r3, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d00a      	beq.n	8003144 <I2C_ITSlaveCplt+0x98>
  {
    if (hi2c->hdmarx != NULL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d006      	beq.n	8003144 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	b29a      	uxth	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	089b      	lsrs	r3, r3, #2
 8003148:	001a      	movs	r2, r3
 800314a:	2301      	movs	r3, #1
 800314c:	4013      	ands	r3, r2
 800314e:	d020      	beq.n	8003192 <I2C_ITSlaveCplt+0xe6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2204      	movs	r2, #4
 8003154:	4393      	bics	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	b2d2      	uxtb	r2, r2
 8003164:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00c      	beq.n	8003192 <I2C_ITSlaveCplt+0xe6>
    {
      hi2c->XferSize--;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <I2C_ITSlaveCplt+0xfc>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	2204      	movs	r2, #4
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2242      	movs	r2, #66	; 0x42
 80031b2:	2100      	movs	r1, #0
 80031b4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 f8a3 	bl	8003318 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2241      	movs	r2, #65	; 0x41
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b28      	cmp	r3, #40	; 0x28
 80031dc:	d13e      	bne.n	800325c <I2C_ITSlaveCplt+0x1b0>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 f841 	bl	800326c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80031ea:	e037      	b.n	800325c <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f0:	4a1d      	ldr	r2, [pc, #116]	; (8003268 <I2C_ITSlaveCplt+0x1bc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <I2C_ITSlaveCplt+0x172>
    I2C_ITSlaveSeqCplt(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	0018      	movs	r0, r3
 80031fa:	f7ff ff16 	bl	800302a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <I2C_ITSlaveCplt+0x1bc>)
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2241      	movs	r2, #65	; 0x41
 8003208:	2120      	movs	r1, #32
 800320a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	2100      	movs	r1, #0
 8003212:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff fd31 	bl	8002c7e <HAL_I2C_ListenCpltCallback>
}
 800321c:	e01e      	b.n	800325c <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2241      	movs	r2, #65	; 0x41
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b22      	cmp	r3, #34	; 0x22
 8003228:	d10c      	bne.n	8003244 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2241      	movs	r2, #65	; 0x41
 800322e:	2120      	movs	r1, #32
 8003230:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2240      	movs	r2, #64	; 0x40
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	0018      	movs	r0, r3
 800323e:	f7ff fd06 	bl	8002c4e <HAL_I2C_SlaveRxCpltCallback>
}
 8003242:	e00b      	b.n	800325c <I2C_ITSlaveCplt+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2241      	movs	r2, #65	; 0x41
 8003248:	2120      	movs	r1, #32
 800324a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2240      	movs	r2, #64	; 0x40
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff fcf1 	bl	8002c3e <HAL_I2C_SlaveTxCpltCallback>
}
 800325c:	46c0      	nop			; (mov r8, r8)
 800325e:	46bd      	mov	sp, r7
 8003260:	b004      	add	sp, #16
 8003262:	bd80      	pop	{r7, pc}
 8003264:	fe00e800 	.word	0xfe00e800
 8003268:	ffff0000 	.word	0xffff0000

0800326c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a26      	ldr	r2, [pc, #152]	; (8003314 <I2C_ITListenCplt+0xa8>)
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2241      	movs	r2, #65	; 0x41
 8003286:	2120      	movs	r1, #32
 8003288:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2242      	movs	r2, #66	; 0x42
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	089b      	lsrs	r3, r3, #2
 800329c:	001a      	movs	r2, r3
 800329e:	2301      	movs	r3, #1
 80032a0:	4013      	ands	r3, r2
 80032a2:	d022      	beq.n	80032ea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	3b01      	subs	r3, #1
 80032ca:	b29a      	uxth	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e2:	2204      	movs	r2, #4
 80032e4:	431a      	orrs	r2, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2107      	movs	r1, #7
 80032ee:	0018      	movs	r0, r3
 80032f0:	f000 f92c 	bl	800354c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2210      	movs	r2, #16
 80032fa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2240      	movs	r2, #64	; 0x40
 8003300:	2100      	movs	r1, #0
 8003302:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f7ff fcb9 	bl	8002c7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800330c:	46c0      	nop			; (mov r8, r8)
 800330e:	46bd      	mov	sp, r7
 8003310:	b002      	add	sp, #8
 8003312:	bd80      	pop	{r7, pc}
 8003314:	ffff0000 	.word	0xffff0000

08003318 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003322:	200f      	movs	r0, #15
 8003324:	183b      	adds	r3, r7, r0
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	2141      	movs	r1, #65	; 0x41
 800332a:	5c52      	ldrb	r2, [r2, r1]
 800332c:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2242      	movs	r2, #66	; 0x42
 8003332:	2100      	movs	r1, #0
 8003334:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a5b      	ldr	r2, [pc, #364]	; (80034a8 <I2C_ITError+0x190>)
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	431a      	orrs	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800334e:	183b      	adds	r3, r7, r0
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b28      	cmp	r3, #40	; 0x28
 8003354:	d009      	beq.n	800336a <I2C_ITError+0x52>
 8003356:	230f      	movs	r3, #15
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b29      	cmp	r3, #41	; 0x29
 800335e:	d004      	beq.n	800336a <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	2b2a      	cmp	r3, #42	; 0x2a
 8003368:	d10f      	bne.n	800338a <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2103      	movs	r1, #3
 800336e:	0018      	movs	r0, r3
 8003370:	f000 f8ec 	bl	800354c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2241      	movs	r2, #65	; 0x41
 8003378:	2128      	movs	r1, #40	; 0x28
 800337a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a49      	ldr	r2, [pc, #292]	; (80034ac <I2C_ITError+0x194>)
 8003386:	635a      	str	r2, [r3, #52]	; 0x34
 8003388:	e014      	b.n	80033b4 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2107      	movs	r1, #7
 800338e:	0018      	movs	r0, r3
 8003390:	f000 f8dc 	bl	800354c <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2241      	movs	r2, #65	; 0x41
 8003398:	5c9b      	ldrb	r3, [r3, r2]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b60      	cmp	r3, #96	; 0x60
 800339e:	d003      	beq.n	80033a8 <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2241      	movs	r2, #65	; 0x41
 80033a4:	2120      	movs	r1, #32
 80033a6:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	01db      	lsls	r3, r3, #7
 80033be:	401a      	ands	r2, r3
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	01db      	lsls	r3, r3, #7
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d122      	bne.n	800340e <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4937      	ldr	r1, [pc, #220]	; (80034b0 <I2C_ITError+0x198>)
 80033d4:	400a      	ands	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05e      	beq.n	800349e <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	4a33      	ldr	r2, [pc, #204]	; (80034b4 <I2C_ITError+0x19c>)
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	2100      	movs	r1, #0
 80033ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f4:	0018      	movs	r0, r3
 80033f6:	f7ff f8ab 	bl	8002550 <HAL_DMA_Abort_IT>
 80033fa:	1e03      	subs	r3, r0, #0
 80033fc:	d04f      	beq.n	800349e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	0018      	movs	r0, r3
 800340a:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800340c:	e047      	b.n	800349e <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	; 0x80
 8003416:	021b      	lsls	r3, r3, #8
 8003418:	401a      	ands	r2, r3
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	021b      	lsls	r3, r3, #8
 800341e:	429a      	cmp	r2, r3
 8003420:	d122      	bne.n	8003468 <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4922      	ldr	r1, [pc, #136]	; (80034b8 <I2C_ITError+0x1a0>)
 800342e:	400a      	ands	r2, r1
 8003430:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d031      	beq.n	800349e <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	4a1d      	ldr	r2, [pc, #116]	; (80034b4 <I2C_ITError+0x19c>)
 8003440:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	; 0x40
 8003446:	2100      	movs	r1, #0
 8003448:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344e:	0018      	movs	r0, r3
 8003450:	f7ff f87e 	bl	8002550 <HAL_DMA_Abort_IT>
 8003454:	1e03      	subs	r3, r0, #0
 8003456:	d022      	beq.n	800349e <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	0018      	movs	r0, r3
 8003464:	4790      	blx	r2
}
 8003466:	e01a      	b.n	800349e <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2241      	movs	r2, #65	; 0x41
 800346c:	5c9b      	ldrb	r3, [r3, r2]
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b60      	cmp	r3, #96	; 0x60
 8003472:	d10c      	bne.n	800348e <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2241      	movs	r2, #65	; 0x41
 8003478:	2120      	movs	r1, #32
 800347a:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2240      	movs	r2, #64	; 0x40
 8003480:	2100      	movs	r1, #0
 8003482:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	0018      	movs	r0, r3
 8003488:	f7ff fc09 	bl	8002c9e <HAL_I2C_AbortCpltCallback>
}
 800348c:	e007      	b.n	800349e <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2240      	movs	r2, #64	; 0x40
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	0018      	movs	r0, r3
 800349a:	f7ff fbf8 	bl	8002c8e <HAL_I2C_ErrorCallback>
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	ffff0000 	.word	0xffff0000
 80034ac:	08002cb1 	.word	0x08002cb1
 80034b0:	ffffbfff 	.word	0xffffbfff
 80034b4:	08003501 	.word	0x08003501
 80034b8:	ffff7fff 	.word	0xffff7fff

080034bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2202      	movs	r2, #2
 80034cc:	4013      	ands	r3, r2
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d103      	bne.n	80034da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2200      	movs	r2, #0
 80034d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	2201      	movs	r2, #1
 80034e2:	4013      	ands	r3, r2
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d007      	beq.n	80034f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699a      	ldr	r2, [r3, #24]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	430a      	orrs	r2, r1
 80034f6:	619a      	str	r2, [r3, #24]
  }
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003512:	2200      	movs	r2, #0
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	2200      	movs	r2, #0
 800351c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2241      	movs	r2, #65	; 0x41
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b60      	cmp	r3, #96	; 0x60
 8003528:	d108      	bne.n	800353c <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2241      	movs	r2, #65	; 0x41
 800352e:	2120      	movs	r1, #32
 8003530:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fbb2 	bl	8002c9e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800353a:	e003      	b.n	8003544 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	0018      	movs	r0, r3
 8003540:	f7ff fba5 	bl	8002c8e <HAL_I2C_ErrorCallback>
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b004      	add	sp, #16
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	000a      	movs	r2, r1
 8003556:	1cbb      	adds	r3, r7, #2
 8003558:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800355e:	1cbb      	adds	r3, r7, #2
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d010      	beq.n	800358a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2242      	movs	r2, #66	; 0x42
 800356c:	4313      	orrs	r3, r2
 800356e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2241      	movs	r2, #65	; 0x41
 8003574:	5c9b      	ldrb	r3, [r3, r2]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	001a      	movs	r2, r3
 800357a:	2328      	movs	r3, #40	; 0x28
 800357c:	4013      	ands	r3, r2
 800357e:	2b28      	cmp	r3, #40	; 0x28
 8003580:	d003      	beq.n	800358a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	22b0      	movs	r2, #176	; 0xb0
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800358a:	1cbb      	adds	r3, r7, #2
 800358c:	881b      	ldrh	r3, [r3, #0]
 800358e:	2202      	movs	r2, #2
 8003590:	4013      	ands	r3, r2
 8003592:	d010      	beq.n	80035b6 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2244      	movs	r2, #68	; 0x44
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2241      	movs	r2, #65	; 0x41
 80035a0:	5c9b      	ldrb	r3, [r3, r2]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	001a      	movs	r2, r3
 80035a6:	2328      	movs	r3, #40	; 0x28
 80035a8:	4013      	ands	r3, r2
 80035aa:	2b28      	cmp	r3, #40	; 0x28
 80035ac:	d003      	beq.n	80035b6 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	22b0      	movs	r2, #176	; 0xb0
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80035b6:	1cbb      	adds	r3, r7, #2
 80035b8:	881b      	ldrh	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	d003      	beq.n	80035c8 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	22b8      	movs	r2, #184	; 0xb8
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80035c8:	1cbb      	adds	r3, r7, #2
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	2211      	movs	r2, #17
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b11      	cmp	r3, #17
 80035d2:	d103      	bne.n	80035dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2290      	movs	r2, #144	; 0x90
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80035dc:	1cbb      	adds	r3, r7, #2
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	2212      	movs	r2, #18
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b12      	cmp	r3, #18
 80035e6:	d103      	bne.n	80035f0 <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 80035f0:	1cbb      	adds	r3, r7, #2
 80035f2:	881b      	ldrh	r3, [r3, #0]
 80035f4:	2212      	movs	r2, #18
 80035f6:	4013      	ands	r3, r2
 80035f8:	2b12      	cmp	r3, #18
 80035fa:	d103      	bne.n	8003604 <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2240      	movs	r2, #64	; 0x40
 8003600:	4313      	orrs	r3, r2
 8003602:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	43d9      	mvns	r1, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	400a      	ands	r2, r1
 8003614:	601a      	str	r2, [r3, #0]
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2241      	movs	r2, #65	; 0x41
 800362e:	5c9b      	ldrb	r3, [r3, r2]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b20      	cmp	r3, #32
 8003634:	d138      	bne.n	80036a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2240      	movs	r2, #64	; 0x40
 800363a:	5c9b      	ldrb	r3, [r3, r2]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003640:	2302      	movs	r3, #2
 8003642:	e032      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2240      	movs	r2, #64	; 0x40
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2241      	movs	r2, #65	; 0x41
 8003650:	2124      	movs	r1, #36	; 0x24
 8003652:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2101      	movs	r1, #1
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4911      	ldr	r1, [pc, #68]	; (80036b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003670:	400a      	ands	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2101      	movs	r1, #1
 8003690:	430a      	orrs	r2, r1
 8003692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2241      	movs	r2, #65	; 0x41
 8003698:	2120      	movs	r1, #32
 800369a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2240      	movs	r2, #64	; 0x40
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e000      	b.n	80036aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036a8:	2302      	movs	r3, #2
  }
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b002      	add	sp, #8
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	ffffefff 	.word	0xffffefff

080036b8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if(hlptim == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e07f      	b.n	80037ca <HAL_LPTIM_Init+0x112>
  }  
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));  
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  
  if(hlptim->State == HAL_LPTIM_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2236      	movs	r2, #54	; 0x36
 80036ce:	5c9b      	ldrb	r3, [r3, r2]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2235      	movs	r2, #53	; 0x35
 80036da:	2100      	movs	r1, #0
 80036dc:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f003 ff5f 	bl	80075a4 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }
  
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2236      	movs	r2, #54	; 0x36
 80036ea:	2102      	movs	r1, #2
 80036ec:	5499      	strb	r1, [r3, r2]
  
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d005      	beq.n	800370a <HAL_LPTIM_Init+0x52>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	429a      	cmp	r2, r3
 8003708:	d103      	bne.n	8003712 <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	221e      	movs	r2, #30
 800370e:	4393      	bics	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	4a2f      	ldr	r2, [pc, #188]	; (80037d4 <HAL_LPTIM_Init+0x11c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d003      	beq.n	8003724 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~ (LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	4a2e      	ldr	r2, [pc, #184]	; (80037d8 <HAL_LPTIM_Init+0x120>)
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]
  }
    
  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a2d      	ldr	r2, [pc, #180]	; (80037dc <HAL_LPTIM_Init+0x124>)
 8003728:	4013      	ands	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE ));
  
  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003734:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800373a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003740:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003746:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003748:	68fa      	ldr	r2, [r7, #12]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]
  
  if (((hlptim->Init.Clock.Source) == LPTIM_CLOCKSOURCE_ULPTIM) || ((hlptim->Init.CounterSource) == LPTIM_COUNTERSOURCE_EXTERNAL))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d005      	beq.n	8003762 <HAL_LPTIM_Init+0xaa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375a:	2380      	movs	r3, #128	; 0x80
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	429a      	cmp	r2, r3
 8003760:	d107      	bne.n	8003772 <HAL_LPTIM_Init+0xba>
  {
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |=  (hlptim->Init.UltraLowPowerClock.Polarity |
 800376a:	4313      	orrs	r3, r2
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  } 
  
  if ((hlptim->Init.Trigger.Source) !=  LPTIM_TRIGSOURCE_SOFTWARE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	4a17      	ldr	r2, [pc, #92]	; (80037d4 <HAL_LPTIM_Init+0x11c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d00a      	beq.n	8003792 <HAL_LPTIM_Init+0xda>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003784:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800378a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if(hlptim->Instance == LPTIM1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a10      	ldr	r2, [pc, #64]	; (80037e0 <HAL_LPTIM_Init+0x128>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d108      	bne.n	80037b6 <HAL_LPTIM_Init+0xfe>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance,hlptim->Init.Input2Source));
    
    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
 80037b4:	e004      	b.n	80037c0 <HAL_LPTIM_Init+0x108>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance,hlptim->Init.Input1Source));
    
    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2236      	movs	r2, #54	; 0x36
 80037c4:	2101      	movs	r1, #1
 80037c6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	0018      	movs	r0, r3
 80037cc:	46bd      	mov	sp, r7
 80037ce:	b004      	add	sp, #16
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	0000ffff 	.word	0x0000ffff
 80037d8:	ffff1f3f 	.word	0xffff1f3f
 80037dc:	ff19f1f8 	.word	0xff19f1f8
 80037e0:	40007c00 	.word	0x40007c00

080037e4 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));
               
  /* Set the LPTIM state */
  hlptim->State= HAL_LPTIM_STATE_BUSY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2236      	movs	r2, #54	; 0x36
 80037f4:	2102      	movs	r1, #2
 80037f6:	5499      	strb	r1, [r3, r2]
 
  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	0309      	lsls	r1, r1, #12
 8003806:	430a      	orrs	r2, r1
 8003808:	60da      	str	r2, [r3, #12]
  
  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2101      	movs	r1, #1
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  
  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	611a      	str	r2, [r3, #16]
  
  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	619a      	str	r2, [r3, #24]
  
  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	615a      	str	r2, [r3, #20]
  
  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2104      	movs	r1, #4
 8003846:	430a      	orrs	r2, r1
 8003848:	611a      	str	r2, [r3, #16]
    
  /* Change the TIM state*/
  hlptim->State= HAL_LPTIM_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2236      	movs	r2, #54	; 0x36
 800384e:	2101      	movs	r1, #1
 8003850:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b004      	add	sp, #16
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2201      	movs	r2, #1
 800386c:	4013      	ands	r3, r2
 800386e:	2b01      	cmp	r3, #1
 8003870:	d10e      	bne.n	8003890 <HAL_LPTIM_IRQHandler+0x34>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	2b01      	cmp	r3, #1
 800387e:	d107      	bne.n	8003890 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2201      	movs	r2, #1
 8003886:	605a      	str	r2, [r3, #4]
      
      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
          hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	0018      	movs	r0, r3
 800388c:	f003 fc54 	bl	8007138 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Autoreload match interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2202      	movs	r2, #2
 8003898:	4013      	ands	r3, r2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d10e      	bne.n	80038bc <HAL_LPTIM_IRQHandler+0x60>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2202      	movs	r2, #2
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d107      	bne.n	80038bc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2202      	movs	r2, #2
 80038b2:	605a      	str	r2, [r3, #4]
      
      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);      
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 f872 	bl	80039a0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Trigger detected interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2204      	movs	r2, #4
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d10e      	bne.n	80038e8 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2204      	movs	r2, #4
 80038de:	605a      	str	r2, [r3, #4]
      
      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);      
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f000 f864 	bl	80039b0 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Compare write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2208      	movs	r2, #8
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d10e      	bne.n	8003914 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	2208      	movs	r2, #8
 80038fe:	4013      	ands	r3, r2
 8003900:	2b08      	cmp	r3, #8
 8003902:	d107      	bne.n	8003914 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2208      	movs	r2, #8
 800390a:	605a      	str	r2, [r3, #4]
      
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);      
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	0018      	movs	r0, r3
 8003910:	f000 f856 	bl	80039c0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Autoreload write interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2210      	movs	r2, #16
 800391c:	4013      	ands	r3, r2
 800391e:	2b10      	cmp	r3, #16
 8003920:	d10e      	bne.n	8003940 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2210      	movs	r2, #16
 800392a:	4013      	ands	r3, r2
 800392c:	2b10      	cmp	r3, #16
 800392e:	d107      	bne.n	8003940 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2210      	movs	r2, #16
 8003936:	605a      	str	r2, [r3, #4]
      
      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);      
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f000 f848 	bl	80039d0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Direction counter changed from Down to Up interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2220      	movs	r2, #32
 8003948:	4013      	ands	r3, r2
 800394a:	2b20      	cmp	r3, #32
 800394c:	d10e      	bne.n	800396c <HAL_LPTIM_IRQHandler+0x110>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2220      	movs	r2, #32
 8003956:	4013      	ands	r3, r2
 8003958:	2b20      	cmp	r3, #32
 800395a:	d107      	bne.n	800396c <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2220      	movs	r2, #32
 8003962:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);      
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	0018      	movs	r0, r3
 8003968:	f000 f83a 	bl	80039e0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
  
  /* Direction counter changed from Up to Down interrupt */
  if(__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	4013      	ands	r3, r2
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d10e      	bne.n	8003998 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if(__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	2240      	movs	r2, #64	; 0x40
 8003982:	4013      	ands	r3, r2
 8003984:	2b40      	cmp	r3, #64	; 0x40
 8003986:	d107      	bne.n	8003998 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	605a      	str	r2, [r3, #4]
      
      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);      
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 f82c 	bl	80039f0 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}

080039a0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */  
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	46bd      	mov	sp, r7
 80039ac:	b002      	add	sp, #8
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */  
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */  
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode. 
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */  
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	b002      	add	sp, #8
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */  
}
 80039e8:	46c0      	nop			; (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);
    
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */  
}
 80039f8:	46c0      	nop			; (mov r8, r8)
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b002      	add	sp, #8
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a19      	ldr	r2, [pc, #100]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003a0e:	4013      	ands	r3, r2
 8003a10:	0019      	movs	r1, r3
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d11f      	bne.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	0013      	movs	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	189b      	adds	r3, r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4912      	ldr	r1, [pc, #72]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003a32:	0018      	movs	r0, r3
 8003a34:	f7fc fb78 	bl	8000128 <__udivsi3>
 8003a38:	0003      	movs	r3, r0
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a3e:	e008      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	e001      	b.n	8003a52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e009      	b.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a52:	4b07      	ldr	r3, [pc, #28]	; (8003a70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003a54:	695a      	ldr	r2, [r3, #20]
 8003a56:	2380      	movs	r3, #128	; 0x80
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	2380      	movs	r3, #128	; 0x80
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d0ed      	beq.n	8003a40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	b004      	add	sp, #16
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	46c0      	nop			; (mov r8, r8)
 8003a70:	40007000 	.word	0x40007000
 8003a74:	fffff9ff 	.word	0xfffff9ff
 8003a78:	20000008 	.word	0x20000008
 8003a7c:	000f4240 	.word	0x000f4240

08003a80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003a84:	4b03      	ldr	r3, [pc, #12]	; (8003a94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	23e0      	movs	r3, #224	; 0xe0
 8003a8a:	01db      	lsls	r3, r3, #7
 8003a8c:	4013      	ands	r3, r2
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40021000 	.word	0x40021000

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e304      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d100      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x1e>
 8003ab4:	e07c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab6:	4bc3      	ldr	r3, [pc, #780]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	2238      	movs	r2, #56	; 0x38
 8003abc:	4013      	ands	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ac0:	4bc0      	ldr	r3, [pc, #768]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	2b10      	cmp	r3, #16
 8003ace:	d102      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x3e>
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b03      	cmp	r3, #3
 8003ad4:	d002      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4bb9      	ldr	r3, [pc, #740]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	2380      	movs	r3, #128	; 0x80
 8003ae2:	029b      	lsls	r3, r3, #10
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d062      	beq.n	8003bae <HAL_RCC_OscConfig+0x116>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d15e      	bne.n	8003bae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e2df      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	025b      	lsls	r3, r3, #9
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x78>
 8003b00:	4bb0      	ldr	r3, [pc, #704]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4baf      	ldr	r3, [pc, #700]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b06:	2180      	movs	r1, #128	; 0x80
 8003b08:	0249      	lsls	r1, r1, #9
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	e020      	b.n	8003b52 <HAL_RCC_OscConfig+0xba>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	23a0      	movs	r3, #160	; 0xa0
 8003b16:	02db      	lsls	r3, r3, #11
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d10e      	bne.n	8003b3a <HAL_RCC_OscConfig+0xa2>
 8003b1c:	4ba9      	ldr	r3, [pc, #676]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	4ba8      	ldr	r3, [pc, #672]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	02c9      	lsls	r1, r1, #11
 8003b26:	430a      	orrs	r2, r1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	4ba6      	ldr	r3, [pc, #664]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4ba5      	ldr	r3, [pc, #660]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b30:	2180      	movs	r1, #128	; 0x80
 8003b32:	0249      	lsls	r1, r1, #9
 8003b34:	430a      	orrs	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	e00b      	b.n	8003b52 <HAL_RCC_OscConfig+0xba>
 8003b3a:	4ba2      	ldr	r3, [pc, #648]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	4ba1      	ldr	r3, [pc, #644]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b40:	49a1      	ldr	r1, [pc, #644]	; (8003dc8 <HAL_RCC_OscConfig+0x330>)
 8003b42:	400a      	ands	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	4b9f      	ldr	r3, [pc, #636]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	4b9e      	ldr	r3, [pc, #632]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b4c:	499f      	ldr	r1, [pc, #636]	; (8003dcc <HAL_RCC_OscConfig+0x334>)
 8003b4e:	400a      	ands	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b5a:	f7fe fbbf 	bl	80022dc <HAL_GetTick>
 8003b5e:	0003      	movs	r3, r0
 8003b60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fe fbba 	bl	80022dc <HAL_GetTick>
 8003b68:	0002      	movs	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e29e      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b76:	4b93      	ldr	r3, [pc, #588]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	; 0x80
 8003b7c:	029b      	lsls	r3, r3, #10
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xcc>
 8003b82:	e015      	b.n	8003bb0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe fbaa 	bl	80022dc <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8e:	f7fe fba5 	bl	80022dc <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b64      	cmp	r3, #100	; 0x64
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e289      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ba0:	4b88      	ldr	r3, [pc, #544]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	029b      	lsls	r3, r3, #10
 8003ba8:	4013      	ands	r3, r2
 8003baa:	d1f0      	bne.n	8003b8e <HAL_RCC_OscConfig+0xf6>
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d100      	bne.n	8003bbc <HAL_RCC_OscConfig+0x124>
 8003bba:	e099      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbc:	4b81      	ldr	r3, [pc, #516]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	2238      	movs	r2, #56	; 0x38
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc6:	4b7f      	ldr	r3, [pc, #508]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2203      	movs	r2, #3
 8003bcc:	4013      	ands	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b10      	cmp	r3, #16
 8003bd4:	d102      	bne.n	8003bdc <HAL_RCC_OscConfig+0x144>
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d002      	beq.n	8003be2 <HAL_RCC_OscConfig+0x14a>
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d135      	bne.n	8003c4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be2:	4b78      	ldr	r3, [pc, #480]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4013      	ands	r3, r2
 8003bec:	d005      	beq.n	8003bfa <HAL_RCC_OscConfig+0x162>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e25c      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	4a74      	ldr	r2, [pc, #464]	; (8003dd0 <HAL_RCC_OscConfig+0x338>)
 8003c00:	4013      	ands	r3, r2
 8003c02:	0019      	movs	r1, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	021a      	lsls	r2, r3, #8
 8003c0a:	4b6e      	ldr	r3, [pc, #440]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d112      	bne.n	8003c3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c16:	4b6b      	ldr	r3, [pc, #428]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6e      	ldr	r2, [pc, #440]	; (8003dd4 <HAL_RCC_OscConfig+0x33c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	0019      	movs	r1, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	4b67      	ldr	r3, [pc, #412]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003c2a:	4b66      	ldr	r3, [pc, #408]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	0adb      	lsrs	r3, r3, #11
 8003c30:	2207      	movs	r2, #7
 8003c32:	4013      	ands	r3, r2
 8003c34:	4a68      	ldr	r2, [pc, #416]	; (8003dd8 <HAL_RCC_OscConfig+0x340>)
 8003c36:	40da      	lsrs	r2, r3
 8003c38:	4b68      	ldr	r3, [pc, #416]	; (8003ddc <HAL_RCC_OscConfig+0x344>)
 8003c3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003c3c:	4b68      	ldr	r3, [pc, #416]	; (8003de0 <HAL_RCC_OscConfig+0x348>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0018      	movs	r0, r3
 8003c42:	f7fe faf1 	bl	8002228 <HAL_InitTick>
 8003c46:	1e03      	subs	r3, r0, #0
 8003c48:	d051      	beq.n	8003cee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e232      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d030      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a5e      	ldr	r2, [pc, #376]	; (8003dd4 <HAL_RCC_OscConfig+0x33c>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	0019      	movs	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	4b57      	ldr	r3, [pc, #348]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c66:	430a      	orrs	r2, r1
 8003c68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003c6a:	4b56      	ldr	r3, [pc, #344]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	4b55      	ldr	r3, [pc, #340]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c70:	2180      	movs	r1, #128	; 0x80
 8003c72:	0049      	lsls	r1, r1, #1
 8003c74:	430a      	orrs	r2, r1
 8003c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c78:	f7fe fb30 	bl	80022dc <HAL_GetTick>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c80:	e008      	b.n	8003c94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c82:	f7fe fb2b 	bl	80022dc <HAL_GetTick>
 8003c86:	0002      	movs	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	2b02      	cmp	r3, #2
 8003c8e:	d901      	bls.n	8003c94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e20f      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	4b4b      	ldr	r3, [pc, #300]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	d0f0      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca0:	4b48      	ldr	r3, [pc, #288]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4a4a      	ldr	r2, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x338>)
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	0019      	movs	r1, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	021a      	lsls	r2, r3, #8
 8003cb0:	4b44      	ldr	r3, [pc, #272]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003cb8:	4b42      	ldr	r3, [pc, #264]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b41      	ldr	r3, [pc, #260]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003cbe:	4949      	ldr	r1, [pc, #292]	; (8003de4 <HAL_RCC_OscConfig+0x34c>)
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fb0a 	bl	80022dc <HAL_GetTick>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cce:	f7fe fb05 	bl	80022dc <HAL_GetTick>
 8003cd2:	0002      	movs	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e1e9      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ce0:	4b38      	ldr	r3, [pc, #224]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d1f0      	bne.n	8003cce <HAL_RCC_OscConfig+0x236>
 8003cec:	e000      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2208      	movs	r2, #8
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	d047      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003cfa:	4b32      	ldr	r3, [pc, #200]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	2238      	movs	r2, #56	; 0x38
 8003d00:	4013      	ands	r3, r2
 8003d02:	2b18      	cmp	r3, #24
 8003d04:	d10a      	bne.n	8003d1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003d06:	4b2f      	ldr	r3, [pc, #188]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d03c      	beq.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d138      	bne.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e1cb      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d019      	beq.n	8003d58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003d24:	4b27      	ldr	r3, [pc, #156]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d28:	4b26      	ldr	r3, [pc, #152]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d30:	f7fe fad4 	bl	80022dc <HAL_GetTick>
 8003d34:	0003      	movs	r3, r0
 8003d36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe facf 	bl	80022dc <HAL_GetTick>
 8003d3e:	0002      	movs	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e1b3      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d4c:	4b1d      	ldr	r3, [pc, #116]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d50:	2202      	movs	r2, #2
 8003d52:	4013      	ands	r3, r2
 8003d54:	d0f1      	beq.n	8003d3a <HAL_RCC_OscConfig+0x2a2>
 8003d56:	e018      	b.n	8003d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003d58:	4b1a      	ldr	r3, [pc, #104]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5c:	4b19      	ldr	r3, [pc, #100]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d5e:	2101      	movs	r1, #1
 8003d60:	438a      	bics	r2, r1
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe faba 	bl	80022dc <HAL_GetTick>
 8003d68:	0003      	movs	r3, r0
 8003d6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d6c:	e008      	b.n	8003d80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d6e:	f7fe fab5 	bl	80022dc <HAL_GetTick>
 8003d72:	0002      	movs	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	2b02      	cmp	r3, #2
 8003d7a:	d901      	bls.n	8003d80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e199      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d80:	4b10      	ldr	r3, [pc, #64]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d84:	2202      	movs	r2, #2
 8003d86:	4013      	ands	r3, r2
 8003d88:	d1f1      	bne.n	8003d6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2204      	movs	r2, #4
 8003d90:	4013      	ands	r3, r2
 8003d92:	d100      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2fe>
 8003d94:	e0c6      	b.n	8003f24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	231f      	movs	r3, #31
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003d9e:	4b09      	ldr	r3, [pc, #36]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2238      	movs	r2, #56	; 0x38
 8003da4:	4013      	ands	r3, r2
 8003da6:	2b20      	cmp	r3, #32
 8003da8:	d11e      	bne.n	8003de8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003daa:	4b06      	ldr	r3, [pc, #24]	; (8003dc4 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2202      	movs	r2, #2
 8003db0:	4013      	ands	r3, r2
 8003db2:	d100      	bne.n	8003db6 <HAL_RCC_OscConfig+0x31e>
 8003db4:	e0b6      	b.n	8003f24 <HAL_RCC_OscConfig+0x48c>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d000      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x328>
 8003dbe:	e0b1      	b.n	8003f24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e177      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	fffeffff 	.word	0xfffeffff
 8003dcc:	fffbffff 	.word	0xfffbffff
 8003dd0:	ffff80ff 	.word	0xffff80ff
 8003dd4:	ffffc7ff 	.word	0xffffc7ff
 8003dd8:	00f42400 	.word	0x00f42400
 8003ddc:	20000008 	.word	0x20000008
 8003de0:	20000000 	.word	0x20000000
 8003de4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003de8:	4bb4      	ldr	r3, [pc, #720]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003dea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	055b      	lsls	r3, r3, #21
 8003df0:	4013      	ands	r3, r2
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x360>
 8003df4:	2301      	movs	r3, #1
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x362>
 8003df8:	2300      	movs	r3, #0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	4baf      	ldr	r3, [pc, #700]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e02:	4bae      	ldr	r3, [pc, #696]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	0549      	lsls	r1, r1, #21
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e0c:	4bab      	ldr	r3, [pc, #684]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	055b      	lsls	r3, r3, #21
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003e1a:	231f      	movs	r3, #31
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e22:	4ba7      	ldr	r3, [pc, #668]	; (80040c0 <HAL_RCC_OscConfig+0x628>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d11a      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2e:	4ba4      	ldr	r3, [pc, #656]	; (80040c0 <HAL_RCC_OscConfig+0x628>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	4ba3      	ldr	r3, [pc, #652]	; (80040c0 <HAL_RCC_OscConfig+0x628>)
 8003e34:	2180      	movs	r1, #128	; 0x80
 8003e36:	0049      	lsls	r1, r1, #1
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fa4e 	bl	80022dc <HAL_GetTick>
 8003e40:	0003      	movs	r3, r0
 8003e42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fe fa49 	bl	80022dc <HAL_GetTick>
 8003e4a:	0002      	movs	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e12d      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e58:	4b99      	ldr	r3, [pc, #612]	; (80040c0 <HAL_RCC_OscConfig+0x628>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4013      	ands	r3, r2
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x3e2>
 8003e6c:	4b93      	ldr	r3, [pc, #588]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e70:	4b92      	ldr	r3, [pc, #584]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e72:	2101      	movs	r1, #1
 8003e74:	430a      	orrs	r2, r1
 8003e76:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x41c>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x404>
 8003e82:	4b8e      	ldr	r3, [pc, #568]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e86:	4b8d      	ldr	r3, [pc, #564]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e88:	2104      	movs	r1, #4
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e8e:	4b8b      	ldr	r3, [pc, #556]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e92:	4b8a      	ldr	r3, [pc, #552]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	430a      	orrs	r2, r1
 8003e98:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x41c>
 8003e9c:	4b87      	ldr	r3, [pc, #540]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003e9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ea0:	4b86      	ldr	r3, [pc, #536]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	438a      	bics	r2, r1
 8003ea6:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ea8:	4b84      	ldr	r3, [pc, #528]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003eaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eac:	4b83      	ldr	r3, [pc, #524]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003eae:	2104      	movs	r1, #4
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d014      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fe fa0e 	bl	80022dc <HAL_GetTick>
 8003ec0:	0003      	movs	r3, r0
 8003ec2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ec4:	e009      	b.n	8003eda <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fe fa09 	bl	80022dc <HAL_GetTick>
 8003eca:	0002      	movs	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	4a7c      	ldr	r2, [pc, #496]	; (80040c4 <HAL_RCC_OscConfig+0x62c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0ec      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eda:	4b78      	ldr	r3, [pc, #480]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ede:	2202      	movs	r2, #2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x42e>
 8003ee4:	e013      	b.n	8003f0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee6:	f7fe f9f9 	bl	80022dc <HAL_GetTick>
 8003eea:	0003      	movs	r3, r0
 8003eec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eee:	e009      	b.n	8003f04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe f9f4 	bl	80022dc <HAL_GetTick>
 8003ef4:	0002      	movs	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	4a72      	ldr	r2, [pc, #456]	; (80040c4 <HAL_RCC_OscConfig+0x62c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0d7      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f04:	4b6d      	ldr	r3, [pc, #436]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f08:	2202      	movs	r2, #2
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f0e:	231f      	movs	r3, #31
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b68      	ldr	r3, [pc, #416]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1c:	4b67      	ldr	r3, [pc, #412]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f1e:	496a      	ldr	r1, [pc, #424]	; (80040c8 <HAL_RCC_OscConfig+0x630>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d100      	bne.n	8003f2e <HAL_RCC_OscConfig+0x496>
 8003f2c:	e0c1      	b.n	80040b2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b63      	ldr	r3, [pc, #396]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2238      	movs	r2, #56	; 0x38
 8003f34:	4013      	ands	r3, r2
 8003f36:	2b10      	cmp	r3, #16
 8003f38:	d100      	bne.n	8003f3c <HAL_RCC_OscConfig+0x4a4>
 8003f3a:	e081      	b.n	8004040 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d156      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f44:	4b5d      	ldr	r3, [pc, #372]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4b5c      	ldr	r3, [pc, #368]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f4a:	4960      	ldr	r1, [pc, #384]	; (80040cc <HAL_RCC_OscConfig+0x634>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f50:	f7fe f9c4 	bl	80022dc <HAL_GetTick>
 8003f54:	0003      	movs	r3, r0
 8003f56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5a:	f7fe f9bf 	bl	80022dc <HAL_GetTick>
 8003f5e:	0002      	movs	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e0a3      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	049b      	lsls	r3, r3, #18
 8003f74:	4013      	ands	r3, r2
 8003f76:	d1f0      	bne.n	8003f5a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	4a54      	ldr	r2, [pc, #336]	; (80040d0 <HAL_RCC_OscConfig+0x638>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	0019      	movs	r1, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1a      	ldr	r2, [r3, #32]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	4b45      	ldr	r3, [pc, #276]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fac:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fb2:	2180      	movs	r1, #128	; 0x80
 8003fb4:	0449      	lsls	r1, r1, #17
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4b3f      	ldr	r3, [pc, #252]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fc0:	2180      	movs	r1, #128	; 0x80
 8003fc2:	0549      	lsls	r1, r1, #21
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fe f988 	bl	80022dc <HAL_GetTick>
 8003fcc:	0003      	movs	r3, r0
 8003fce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd2:	f7fe f983 	bl	80022dc <HAL_GetTick>
 8003fd6:	0002      	movs	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e067      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fe4:	4b35      	ldr	r3, [pc, #212]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	049b      	lsls	r3, r3, #18
 8003fec:	4013      	ands	r3, r2
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x53a>
 8003ff0:	e05f      	b.n	80040b2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff2:	4b32      	ldr	r3, [pc, #200]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8003ff8:	4934      	ldr	r1, [pc, #208]	; (80040cc <HAL_RCC_OscConfig+0x634>)
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003ffe:	4b2f      	ldr	r3, [pc, #188]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8004004:	2103      	movs	r1, #3
 8004006:	438a      	bics	r2, r1
 8004008:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800400a:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8004010:	4930      	ldr	r1, [pc, #192]	; (80040d4 <HAL_RCC_OscConfig+0x63c>)
 8004012:	400a      	ands	r2, r1
 8004014:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004016:	f7fe f961 	bl	80022dc <HAL_GetTick>
 800401a:	0003      	movs	r3, r0
 800401c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fe f95c 	bl	80022dc <HAL_GetTick>
 8004024:	0002      	movs	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e040      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	2380      	movs	r3, #128	; 0x80
 8004038:	049b      	lsls	r3, r3, #18
 800403a:	4013      	ands	r3, r2
 800403c:	d1f0      	bne.n	8004020 <HAL_RCC_OscConfig+0x588>
 800403e:	e038      	b.n	80040b2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e033      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800404c:	4b1b      	ldr	r3, [pc, #108]	; (80040bc <HAL_RCC_OscConfig+0x624>)
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2203      	movs	r2, #3
 8004056:	401a      	ands	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	429a      	cmp	r2, r3
 800405e:	d126      	bne.n	80040ae <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2270      	movs	r2, #112	; 0x70
 8004064:	401a      	ands	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d11f      	bne.n	80040ae <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	23fe      	movs	r3, #254	; 0xfe
 8004072:	01db      	lsls	r3, r3, #7
 8004074:	401a      	ands	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800407a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800407c:	429a      	cmp	r2, r3
 800407e:	d116      	bne.n	80040ae <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	23f8      	movs	r3, #248	; 0xf8
 8004084:	039b      	lsls	r3, r3, #14
 8004086:	401a      	ands	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d10e      	bne.n	80040ae <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	23e0      	movs	r3, #224	; 0xe0
 8004094:	051b      	lsls	r3, r3, #20
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800409c:	429a      	cmp	r2, r3
 800409e:	d106      	bne.n	80040ae <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	0f5b      	lsrs	r3, r3, #29
 80040a4:	075a      	lsls	r2, r3, #29
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e000      	b.n	80040b4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	0018      	movs	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	b008      	add	sp, #32
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40021000 	.word	0x40021000
 80040c0:	40007000 	.word	0x40007000
 80040c4:	00001388 	.word	0x00001388
 80040c8:	efffffff 	.word	0xefffffff
 80040cc:	feffffff 	.word	0xfeffffff
 80040d0:	11c1808c 	.word	0x11c1808c
 80040d4:	eefeffff 	.word	0xeefeffff

080040d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e0e9      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040ec:	4b76      	ldr	r3, [pc, #472]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2207      	movs	r2, #7
 80040f2:	4013      	ands	r3, r2
 80040f4:	683a      	ldr	r2, [r7, #0]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d91e      	bls.n	8004138 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fa:	4b73      	ldr	r3, [pc, #460]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2207      	movs	r2, #7
 8004100:	4393      	bics	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	4b70      	ldr	r3, [pc, #448]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800410c:	f7fe f8e6 	bl	80022dc <HAL_GetTick>
 8004110:	0003      	movs	r3, r0
 8004112:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004114:	e009      	b.n	800412a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004116:	f7fe f8e1 	bl	80022dc <HAL_GetTick>
 800411a:	0002      	movs	r2, r0
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <HAL_RCC_ClockConfig+0x1f4>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0ca      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800412a:	4b67      	ldr	r3, [pc, #412]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2207      	movs	r2, #7
 8004130:	4013      	ands	r3, r2
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	429a      	cmp	r2, r3
 8004136:	d1ee      	bne.n	8004116 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2202      	movs	r2, #2
 800413e:	4013      	ands	r3, r2
 8004140:	d015      	beq.n	800416e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2204      	movs	r2, #4
 8004148:	4013      	ands	r3, r2
 800414a:	d006      	beq.n	800415a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800414c:	4b60      	ldr	r3, [pc, #384]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	4b5f      	ldr	r3, [pc, #380]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004152:	21e0      	movs	r1, #224	; 0xe0
 8004154:	01c9      	lsls	r1, r1, #7
 8004156:	430a      	orrs	r2, r1
 8004158:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415a:	4b5d      	ldr	r3, [pc, #372]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	4a5d      	ldr	r2, [pc, #372]	; (80042d4 <HAL_RCC_ClockConfig+0x1fc>)
 8004160:	4013      	ands	r3, r2
 8004162:	0019      	movs	r1, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	4b59      	ldr	r3, [pc, #356]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800416a:	430a      	orrs	r2, r1
 800416c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2201      	movs	r2, #1
 8004174:	4013      	ands	r3, r2
 8004176:	d057      	beq.n	8004228 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004180:	4b53      	ldr	r3, [pc, #332]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	4013      	ands	r3, r2
 800418a:	d12b      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e097      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004198:	4b4d      	ldr	r3, [pc, #308]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	2380      	movs	r3, #128	; 0x80
 800419e:	049b      	lsls	r3, r3, #18
 80041a0:	4013      	ands	r3, r2
 80041a2:	d11f      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e08b      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d107      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b0:	4b47      	ldr	r3, [pc, #284]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	2380      	movs	r3, #128	; 0x80
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4013      	ands	r3, r2
 80041ba:	d113      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e07f      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d106      	bne.n	80041d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c8:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041cc:	2202      	movs	r2, #2
 80041ce:	4013      	ands	r3, r2
 80041d0:	d108      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e074      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d6:	4b3e      	ldr	r3, [pc, #248]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041da:	2202      	movs	r2, #2
 80041dc:	4013      	ands	r3, r2
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e06d      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041e4:	4b3a      	ldr	r3, [pc, #232]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2207      	movs	r2, #7
 80041ea:	4393      	bics	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685a      	ldr	r2, [r3, #4]
 80041f2:	4b37      	ldr	r3, [pc, #220]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 80041f4:	430a      	orrs	r2, r1
 80041f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041f8:	f7fe f870 	bl	80022dc <HAL_GetTick>
 80041fc:	0003      	movs	r3, r0
 80041fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004200:	e009      	b.n	8004216 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004202:	f7fe f86b 	bl	80022dc <HAL_GetTick>
 8004206:	0002      	movs	r2, r0
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	4a2f      	ldr	r2, [pc, #188]	; (80042cc <HAL_RCC_ClockConfig+0x1f4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e054      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004216:	4b2e      	ldr	r3, [pc, #184]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2238      	movs	r2, #56	; 0x38
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	429a      	cmp	r2, r3
 8004226:	d1ec      	bne.n	8004202 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004228:	4b27      	ldr	r3, [pc, #156]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2207      	movs	r2, #7
 800422e:	4013      	ands	r3, r2
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	429a      	cmp	r2, r3
 8004234:	d21e      	bcs.n	8004274 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004236:	4b24      	ldr	r3, [pc, #144]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2207      	movs	r2, #7
 800423c:	4393      	bics	r3, r2
 800423e:	0019      	movs	r1, r3
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004248:	f7fe f848 	bl	80022dc <HAL_GetTick>
 800424c:	0003      	movs	r3, r0
 800424e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004250:	e009      	b.n	8004266 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004252:	f7fe f843 	bl	80022dc <HAL_GetTick>
 8004256:	0002      	movs	r2, r0
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	4a1b      	ldr	r2, [pc, #108]	; (80042cc <HAL_RCC_ClockConfig+0x1f4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d901      	bls.n	8004266 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e02c      	b.n	80042c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2207      	movs	r2, #7
 800426c:	4013      	ands	r3, r2
 800426e:	683a      	ldr	r2, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d1ee      	bne.n	8004252 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2204      	movs	r2, #4
 800427a:	4013      	ands	r3, r2
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800427e:	4b14      	ldr	r3, [pc, #80]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <HAL_RCC_ClockConfig+0x200>)
 8004284:	4013      	ands	r3, r2
 8004286:	0019      	movs	r1, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004292:	f000 f829 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8004296:	0001      	movs	r1, r0
 8004298:	4b0d      	ldr	r3, [pc, #52]	; (80042d0 <HAL_RCC_ClockConfig+0x1f8>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	0a1b      	lsrs	r3, r3, #8
 800429e:	220f      	movs	r2, #15
 80042a0:	401a      	ands	r2, r3
 80042a2:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <HAL_RCC_ClockConfig+0x204>)
 80042a4:	0092      	lsls	r2, r2, #2
 80042a6:	58d3      	ldr	r3, [r2, r3]
 80042a8:	221f      	movs	r2, #31
 80042aa:	4013      	ands	r3, r2
 80042ac:	000a      	movs	r2, r1
 80042ae:	40da      	lsrs	r2, r3
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_ClockConfig+0x208>)
 80042b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_ClockConfig+0x20c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7fd ffb5 	bl	8002228 <HAL_InitTick>
 80042be:	0003      	movs	r3, r0
}
 80042c0:	0018      	movs	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	b004      	add	sp, #16
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40022000 	.word	0x40022000
 80042cc:	00001388 	.word	0x00001388
 80042d0:	40021000 	.word	0x40021000
 80042d4:	fffff0ff 	.word	0xfffff0ff
 80042d8:	ffff8fff 	.word	0xffff8fff
 80042dc:	0800b604 	.word	0x0800b604
 80042e0:	20000008 	.word	0x20000008
 80042e4:	20000000 	.word	0x20000000

080042e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80042ee:	4b3c      	ldr	r3, [pc, #240]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2238      	movs	r2, #56	; 0x38
 80042f4:	4013      	ands	r3, r2
 80042f6:	d10f      	bne.n	8004318 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80042f8:	4b39      	ldr	r3, [pc, #228]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	0adb      	lsrs	r3, r3, #11
 80042fe:	2207      	movs	r2, #7
 8004300:	4013      	ands	r3, r2
 8004302:	2201      	movs	r2, #1
 8004304:	409a      	lsls	r2, r3
 8004306:	0013      	movs	r3, r2
 8004308:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4835      	ldr	r0, [pc, #212]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 800430e:	f7fb ff0b 	bl	8000128 <__udivsi3>
 8004312:	0003      	movs	r3, r0
 8004314:	613b      	str	r3, [r7, #16]
 8004316:	e05d      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004318:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2238      	movs	r2, #56	; 0x38
 800431e:	4013      	ands	r3, r2
 8004320:	2b08      	cmp	r3, #8
 8004322:	d102      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004324:	4b30      	ldr	r3, [pc, #192]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	e054      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800432a:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2238      	movs	r2, #56	; 0x38
 8004330:	4013      	ands	r3, r2
 8004332:	2b10      	cmp	r3, #16
 8004334:	d138      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004336:	4b2a      	ldr	r3, [pc, #168]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004338:	68db      	ldr	r3, [r3, #12]
 800433a:	2203      	movs	r2, #3
 800433c:	4013      	ands	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	2207      	movs	r2, #7
 8004348:	4013      	ands	r3, r2
 800434a:	3301      	adds	r3, #1
 800434c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b03      	cmp	r3, #3
 8004352:	d10d      	bne.n	8004370 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004354:	68b9      	ldr	r1, [r7, #8]
 8004356:	4824      	ldr	r0, [pc, #144]	; (80043e8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004358:	f7fb fee6 	bl	8000128 <__udivsi3>
 800435c:	0003      	movs	r3, r0
 800435e:	0019      	movs	r1, r3
 8004360:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	227f      	movs	r2, #127	; 0x7f
 8004368:	4013      	ands	r3, r2
 800436a:	434b      	muls	r3, r1
 800436c:	617b      	str	r3, [r7, #20]
        break;
 800436e:	e00d      	b.n	800438c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004370:	68b9      	ldr	r1, [r7, #8]
 8004372:	481c      	ldr	r0, [pc, #112]	; (80043e4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004374:	f7fb fed8 	bl	8000128 <__udivsi3>
 8004378:	0003      	movs	r3, r0
 800437a:	0019      	movs	r1, r3
 800437c:	4b18      	ldr	r3, [pc, #96]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	227f      	movs	r2, #127	; 0x7f
 8004384:	4013      	ands	r3, r2
 8004386:	434b      	muls	r3, r1
 8004388:	617b      	str	r3, [r7, #20]
        break;
 800438a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	0f5b      	lsrs	r3, r3, #29
 8004392:	2207      	movs	r2, #7
 8004394:	4013      	ands	r3, r2
 8004396:	3301      	adds	r3, #1
 8004398:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	6978      	ldr	r0, [r7, #20]
 800439e:	f7fb fec3 	bl	8000128 <__udivsi3>
 80043a2:	0003      	movs	r3, r0
 80043a4:	613b      	str	r3, [r7, #16]
 80043a6:	e015      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80043a8:	4b0d      	ldr	r3, [pc, #52]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2238      	movs	r2, #56	; 0x38
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b20      	cmp	r3, #32
 80043b2:	d103      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80043bc:	4b08      	ldr	r3, [pc, #32]	; (80043e0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2238      	movs	r2, #56	; 0x38
 80043c2:	4013      	ands	r3, r2
 80043c4:	2b18      	cmp	r3, #24
 80043c6:	d103      	bne.n	80043d0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80043c8:	23fa      	movs	r3, #250	; 0xfa
 80043ca:	01db      	lsls	r3, r3, #7
 80043cc:	613b      	str	r3, [r7, #16]
 80043ce:	e001      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80043d4:	693b      	ldr	r3, [r7, #16]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b006      	add	sp, #24
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	40021000 	.word	0x40021000
 80043e4:	00f42400 	.word	0x00f42400
 80043e8:	007a1200 	.word	0x007a1200

080043ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043f0:	4b02      	ldr	r3, [pc, #8]	; (80043fc <HAL_RCC_GetHCLKFreq+0x10>)
 80043f2:	681b      	ldr	r3, [r3, #0]
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	20000008 	.word	0x20000008

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b5b0      	push	{r4, r5, r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004404:	f7ff fff2 	bl	80043ec <HAL_RCC_GetHCLKFreq>
 8004408:	0004      	movs	r4, r0
 800440a:	f7ff fb39 	bl	8003a80 <LL_RCC_GetAPB1Prescaler>
 800440e:	0003      	movs	r3, r0
 8004410:	0b1a      	lsrs	r2, r3, #12
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004414:	0092      	lsls	r2, r2, #2
 8004416:	58d3      	ldr	r3, [r2, r3]
 8004418:	221f      	movs	r2, #31
 800441a:	4013      	ands	r3, r2
 800441c:	40dc      	lsrs	r4, r3
 800441e:	0023      	movs	r3, r4
}
 8004420:	0018      	movs	r0, r3
 8004422:	46bd      	mov	sp, r7
 8004424:	bdb0      	pop	{r4, r5, r7, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	0800b644 	.word	0x0800b644

0800442c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004434:	2313      	movs	r3, #19
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800443c:	2312      	movs	r3, #18
 800443e:	18fb      	adds	r3, r7, r3
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	029b      	lsls	r3, r3, #10
 800444c:	4013      	ands	r3, r2
 800444e:	d100      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004450:	e0a4      	b.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004452:	2311      	movs	r3, #17
 8004454:	18fb      	adds	r3, r7, r3
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800445a:	4ba5      	ldr	r3, [pc, #660]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800445c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800445e:	2380      	movs	r3, #128	; 0x80
 8004460:	055b      	lsls	r3, r3, #21
 8004462:	4013      	ands	r3, r2
 8004464:	d111      	bne.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004466:	4ba2      	ldr	r3, [pc, #648]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800446a:	4ba1      	ldr	r3, [pc, #644]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800446c:	2180      	movs	r1, #128	; 0x80
 800446e:	0549      	lsls	r1, r1, #21
 8004470:	430a      	orrs	r2, r1
 8004472:	63da      	str	r2, [r3, #60]	; 0x3c
 8004474:	4b9e      	ldr	r3, [pc, #632]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	055b      	lsls	r3, r3, #21
 800447c:	4013      	ands	r3, r2
 800447e:	60bb      	str	r3, [r7, #8]
 8004480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004482:	2311      	movs	r3, #17
 8004484:	18fb      	adds	r3, r7, r3
 8004486:	2201      	movs	r2, #1
 8004488:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448a:	4b9a      	ldr	r3, [pc, #616]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b99      	ldr	r3, [pc, #612]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	0049      	lsls	r1, r1, #1
 8004494:	430a      	orrs	r2, r1
 8004496:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004498:	f7fd ff20 	bl	80022dc <HAL_GetTick>
 800449c:	0003      	movs	r3, r0
 800449e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044a0:	e00b      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fd ff1b 	bl	80022dc <HAL_GetTick>
 80044a6:	0002      	movs	r2, r0
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d904      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80044b0:	2313      	movs	r3, #19
 80044b2:	18fb      	adds	r3, r7, r3
 80044b4:	2203      	movs	r2, #3
 80044b6:	701a      	strb	r2, [r3, #0]
        break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044ba:	4b8e      	ldr	r3, [pc, #568]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	2380      	movs	r3, #128	; 0x80
 80044c0:	005b      	lsls	r3, r3, #1
 80044c2:	4013      	ands	r3, r2
 80044c4:	d0ed      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80044c6:	2313      	movs	r3, #19
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d154      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044d0:	4b87      	ldr	r3, [pc, #540]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044d4:	23c0      	movs	r3, #192	; 0xc0
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	4013      	ands	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d019      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d014      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ec:	4b80      	ldr	r3, [pc, #512]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	4a81      	ldr	r2, [pc, #516]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b7e      	ldr	r3, [pc, #504]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80044fa:	4b7d      	ldr	r3, [pc, #500]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044fc:	2180      	movs	r1, #128	; 0x80
 80044fe:	0249      	lsls	r1, r1, #9
 8004500:	430a      	orrs	r2, r1
 8004502:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004504:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004506:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004508:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800450a:	497c      	ldr	r1, [pc, #496]	; (80046fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800450c:	400a      	ands	r2, r1
 800450e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004510:	4b77      	ldr	r3, [pc, #476]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2201      	movs	r2, #1
 800451a:	4013      	ands	r3, r2
 800451c:	d016      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd fedd 	bl	80022dc <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004526:	e00c      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004528:	f7fd fed8 	bl	80022dc <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	4a73      	ldr	r2, [pc, #460]	; (8004700 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d904      	bls.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004538:	2313      	movs	r3, #19
 800453a:	18fb      	adds	r3, r7, r3
 800453c:	2203      	movs	r2, #3
 800453e:	701a      	strb	r2, [r3, #0]
            break;
 8004540:	e004      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004542:	4b6b      	ldr	r3, [pc, #428]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004546:	2202      	movs	r2, #2
 8004548:	4013      	ands	r3, r2
 800454a:	d0ed      	beq.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 800454c:	2313      	movs	r3, #19
 800454e:	18fb      	adds	r3, r7, r3
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004556:	4b66      	ldr	r3, [pc, #408]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455a:	4a67      	ldr	r2, [pc, #412]	; (80046f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800455c:	4013      	ands	r3, r2
 800455e:	0019      	movs	r1, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004564:	4b62      	ldr	r3, [pc, #392]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004566:	430a      	orrs	r2, r1
 8004568:	65da      	str	r2, [r3, #92]	; 0x5c
 800456a:	e00c      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456c:	2312      	movs	r3, #18
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	2213      	movs	r2, #19
 8004572:	18ba      	adds	r2, r7, r2
 8004574:	7812      	ldrb	r2, [r2, #0]
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	e005      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	2312      	movs	r3, #18
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	2213      	movs	r2, #19
 8004580:	18ba      	adds	r2, r7, r2
 8004582:	7812      	ldrb	r2, [r2, #0]
 8004584:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004586:	2311      	movs	r3, #17
 8004588:	18fb      	adds	r3, r7, r3
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004594:	4b56      	ldr	r3, [pc, #344]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004596:	495b      	ldr	r1, [pc, #364]	; (8004704 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004598:	400a      	ands	r2, r1
 800459a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	4013      	ands	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a6:	4b52      	ldr	r3, [pc, #328]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	2203      	movs	r2, #3
 80045ac:	4393      	bics	r3, r2
 80045ae:	0019      	movs	r1, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b4e      	ldr	r3, [pc, #312]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b6:	430a      	orrs	r2, r1
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2220      	movs	r2, #32
 80045c0:	4013      	ands	r3, r2
 80045c2:	d009      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045c4:	4b4a      	ldr	r3, [pc, #296]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c8:	4a4f      	ldr	r2, [pc, #316]	; (8004708 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	0019      	movs	r1, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	4b47      	ldr	r3, [pc, #284]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d4:	430a      	orrs	r2, r1
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4013      	ands	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e8:	4a48      	ldr	r2, [pc, #288]	; (800470c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	0019      	movs	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	4b3f      	ldr	r3, [pc, #252]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045f4:	430a      	orrs	r2, r1
 80045f6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	2380      	movs	r3, #128	; 0x80
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4013      	ands	r3, r2
 8004602:	d009      	beq.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004604:	4b3a      	ldr	r3, [pc, #232]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	4a41      	ldr	r2, [pc, #260]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800460a:	4013      	ands	r3, r2
 800460c:	0019      	movs	r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004614:	430a      	orrs	r2, r1
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2240      	movs	r2, #64	; 0x40
 800461e:	4013      	ands	r3, r2
 8004620:	d009      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004622:	4b33      	ldr	r3, [pc, #204]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	4a3b      	ldr	r2, [pc, #236]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004628:	4013      	ands	r3, r2
 800462a:	0019      	movs	r1, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	4b2f      	ldr	r3, [pc, #188]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004632:	430a      	orrs	r2, r1
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	2380      	movs	r3, #128	; 0x80
 800463c:	01db      	lsls	r3, r3, #7
 800463e:	4013      	ands	r3, r2
 8004640:	d015      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004642:	4b2b      	ldr	r3, [pc, #172]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	0899      	lsrs	r1, r3, #2
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	4b28      	ldr	r3, [pc, #160]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004650:	430a      	orrs	r2, r1
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69da      	ldr	r2, [r3, #28]
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	05db      	lsls	r3, r3, #23
 800465c:	429a      	cmp	r2, r3
 800465e:	d106      	bne.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004660:	4b23      	ldr	r3, [pc, #140]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004662:	68da      	ldr	r2, [r3, #12]
 8004664:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004666:	2180      	movs	r1, #128	; 0x80
 8004668:	0249      	lsls	r1, r1, #9
 800466a:	430a      	orrs	r2, r1
 800466c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	2380      	movs	r3, #128	; 0x80
 8004674:	039b      	lsls	r3, r3, #14
 8004676:	4013      	ands	r3, r2
 8004678:	d016      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800467c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467e:	4a26      	ldr	r2, [pc, #152]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004680:	4013      	ands	r3, r2
 8004682:	0019      	movs	r1, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1a      	ldr	r2, [r3, #32]
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800468a:	430a      	orrs	r2, r1
 800468c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1a      	ldr	r2, [r3, #32]
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	03db      	lsls	r3, r3, #15
 8004696:	429a      	cmp	r2, r3
 8004698:	d106      	bne.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046a0:	2180      	movs	r1, #128	; 0x80
 80046a2:	0449      	lsls	r1, r1, #17
 80046a4:	430a      	orrs	r2, r1
 80046a6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	011b      	lsls	r3, r3, #4
 80046b0:	4013      	ands	r3, r2
 80046b2:	d016      	beq.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80046b4:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b8:	4a18      	ldr	r2, [pc, #96]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	0019      	movs	r1, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046c4:	430a      	orrs	r2, r1
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	2380      	movs	r3, #128	; 0x80
 80046ce:	01db      	lsls	r3, r3, #7
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d106      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80046d4:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046d6:	68da      	ldr	r2, [r3, #12]
 80046d8:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	0249      	lsls	r1, r1, #9
 80046de:	430a      	orrs	r2, r1
 80046e0:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80046e2:	2312      	movs	r3, #18
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	781b      	ldrb	r3, [r3, #0]
}
 80046e8:	0018      	movs	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	b006      	add	sp, #24
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40007000 	.word	0x40007000
 80046f8:	fffffcff 	.word	0xfffffcff
 80046fc:	fffeffff 	.word	0xfffeffff
 8004700:	00001388 	.word	0x00001388
 8004704:	efffffff 	.word	0xefffffff
 8004708:	fffff3ff 	.word	0xfffff3ff
 800470c:	fff3ffff 	.word	0xfff3ffff
 8004710:	ffcfffff 	.word	0xffcfffff
 8004714:	ffffcfff 	.word	0xffffcfff
 8004718:	ffbfffff 	.word	0xffbfffff
 800471c:	ffff3fff 	.word	0xffff3fff

08004720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e046      	b.n	80047c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2280      	movs	r2, #128	; 0x80
 8004736:	589b      	ldr	r3, [r3, r2]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d107      	bne.n	800474c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	227c      	movs	r2, #124	; 0x7c
 8004740:	2100      	movs	r1, #0
 8004742:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	0018      	movs	r0, r3
 8004748:	f002 feb4 	bl	80074b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	2124      	movs	r1, #36	; 0x24
 8004752:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	0018      	movs	r0, r3
 8004768:	f000 fb80 	bl	8004e6c <UART_SetConfig>
 800476c:	0003      	movs	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d101      	bne.n	8004776 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e024      	b.n	80047c0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	0018      	movs	r0, r3
 8004782:	f001 fc21 	bl	8005fc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	490d      	ldr	r1, [pc, #52]	; (80047c8 <HAL_UART_Init+0xa8>)
 8004792:	400a      	ands	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689a      	ldr	r2, [r3, #8]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	212a      	movs	r1, #42	; 0x2a
 80047a2:	438a      	bics	r2, r1
 80047a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2101      	movs	r1, #1
 80047b2:	430a      	orrs	r2, r1
 80047b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f001 fcb9 	bl	8006130 <UART_CheckIdleState>
 80047be:	0003      	movs	r3, r0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b002      	add	sp, #8
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	ffffb7ff 	.word	0xffffb7ff

080047cc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e02c      	b.n	8004838 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2280      	movs	r2, #128	; 0x80
 80047e2:	2124      	movs	r1, #36	; 0x24
 80047e4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2101      	movs	r1, #1
 80047f2:	438a      	bics	r2, r1
 80047f4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2200      	movs	r2, #0
 80047fc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f002 fea3 	bl	800755c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2288      	movs	r2, #136	; 0x88
 800481a:	2100      	movs	r1, #0
 800481c:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2280      	movs	r2, #128	; 0x80
 8004822:	2100      	movs	r1, #0
 8004824:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2284      	movs	r2, #132	; 0x84
 800482a:	2100      	movs	r1, #0
 800482c:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	227c      	movs	r2, #124	; 0x7c
 8004832:	2100      	movs	r1, #0
 8004834:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	1dbb      	adds	r3, r7, #6
 800484e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	589b      	ldr	r3, [r3, r2]
 8004856:	2b20      	cmp	r3, #32
 8004858:	d000      	beq.n	800485c <HAL_UART_Transmit+0x1c>
 800485a:	e097      	b.n	800498c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_UART_Transmit+0x2a>
 8004862:	1dbb      	adds	r3, r7, #6
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e08f      	b.n	800498e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689a      	ldr	r2, [r3, #8]
 8004872:	2380      	movs	r3, #128	; 0x80
 8004874:	015b      	lsls	r3, r3, #5
 8004876:	429a      	cmp	r2, r3
 8004878:	d109      	bne.n	800488e <HAL_UART_Transmit+0x4e>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d105      	bne.n	800488e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2201      	movs	r2, #1
 8004886:	4013      	ands	r3, r2
 8004888:	d001      	beq.n	800488e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e07f      	b.n	800498e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	227c      	movs	r2, #124	; 0x7c
 8004892:	5c9b      	ldrb	r3, [r3, r2]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_UART_Transmit+0x5c>
 8004898:	2302      	movs	r3, #2
 800489a:	e078      	b.n	800498e <HAL_UART_Transmit+0x14e>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	227c      	movs	r2, #124	; 0x7c
 80048a0:	2101      	movs	r1, #1
 80048a2:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2288      	movs	r2, #136	; 0x88
 80048a8:	2100      	movs	r1, #0
 80048aa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2280      	movs	r2, #128	; 0x80
 80048b0:	2121      	movs	r1, #33	; 0x21
 80048b2:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80048b4:	f7fd fd12 	bl	80022dc <HAL_GetTick>
 80048b8:	0003      	movs	r3, r0
 80048ba:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1dba      	adds	r2, r7, #6
 80048c0:	2154      	movs	r1, #84	; 0x54
 80048c2:	8812      	ldrh	r2, [r2, #0]
 80048c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1dba      	adds	r2, r7, #6
 80048ca:	2156      	movs	r1, #86	; 0x56
 80048cc:	8812      	ldrh	r2, [r2, #0]
 80048ce:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	2380      	movs	r3, #128	; 0x80
 80048d6:	015b      	lsls	r3, r3, #5
 80048d8:	429a      	cmp	r2, r3
 80048da:	d108      	bne.n	80048ee <HAL_UART_Transmit+0xae>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d104      	bne.n	80048ee <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	61bb      	str	r3, [r7, #24]
 80048ec:	e003      	b.n	80048f6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048f6:	e02c      	b.n	8004952 <HAL_UART_Transmit+0x112>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	0013      	movs	r3, r2
 8004902:	2200      	movs	r2, #0
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	f001 fc5d 	bl	80061c4 <UART_WaitOnFlagUntilTimeout>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d001      	beq.n	8004912 <HAL_UART_Transmit+0xd2>
      {
        return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e03d      	b.n	800498e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10b      	bne.n	8004930 <HAL_UART_Transmit+0xf0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	881b      	ldrh	r3, [r3, #0]
 800491c:	001a      	movs	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	05d2      	lsls	r2, r2, #23
 8004924:	0dd2      	lsrs	r2, r2, #23
 8004926:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	3302      	adds	r3, #2
 800492c:	61bb      	str	r3, [r7, #24]
 800492e:	e007      	b.n	8004940 <HAL_UART_Transmit+0x100>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	781a      	ldrb	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2256      	movs	r2, #86	; 0x56
 8004944:	5a9b      	ldrh	r3, [r3, r2]
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b299      	uxth	r1, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2256      	movs	r2, #86	; 0x56
 8004950:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2256      	movs	r2, #86	; 0x56
 8004956:	5a9b      	ldrh	r3, [r3, r2]
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1cc      	bne.n	80048f8 <HAL_UART_Transmit+0xb8>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	9300      	str	r3, [sp, #0]
 8004966:	0013      	movs	r3, r2
 8004968:	2200      	movs	r2, #0
 800496a:	2140      	movs	r1, #64	; 0x40
 800496c:	f001 fc2a 	bl	80061c4 <UART_WaitOnFlagUntilTimeout>
 8004970:	1e03      	subs	r3, r0, #0
 8004972:	d001      	beq.n	8004978 <HAL_UART_Transmit+0x138>
    {
      return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e00a      	b.n	800498e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2280      	movs	r2, #128	; 0x80
 800497c:	2120      	movs	r1, #32
 800497e:	5099      	str	r1, [r3, r2]

    __HAL_UNLOCK(huart);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	227c      	movs	r2, #124	; 0x7c
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	0018      	movs	r0, r3
 8004990:	46bd      	mov	sp, r7
 8004992:	b008      	add	sp, #32
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	1dbb      	adds	r3, r7, #6
 80049a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2284      	movs	r2, #132	; 0x84
 80049aa:	589b      	ldr	r3, [r3, r2]
 80049ac:	2b20      	cmp	r3, #32
 80049ae:	d000      	beq.n	80049b2 <HAL_UART_Receive_IT+0x1a>
 80049b0:	e0d6      	b.n	8004b60 <HAL_UART_Receive_IT+0x1c8>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_UART_Receive_IT+0x28>
 80049b8:	1dbb      	adds	r3, r7, #6
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_UART_Receive_IT+0x2c>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0ce      	b.n	8004b62 <HAL_UART_Receive_IT+0x1ca>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	2380      	movs	r3, #128	; 0x80
 80049ca:	015b      	lsls	r3, r3, #5
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d109      	bne.n	80049e4 <HAL_UART_Receive_IT+0x4c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d105      	bne.n	80049e4 <HAL_UART_Receive_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2201      	movs	r2, #1
 80049dc:	4013      	ands	r3, r2
 80049de:	d001      	beq.n	80049e4 <HAL_UART_Receive_IT+0x4c>
      {
        return  HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0be      	b.n	8004b62 <HAL_UART_Receive_IT+0x1ca>
      }
    }

    __HAL_LOCK(huart);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	227c      	movs	r2, #124	; 0x7c
 80049e8:	5c9b      	ldrb	r3, [r3, r2]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d101      	bne.n	80049f2 <HAL_UART_Receive_IT+0x5a>
 80049ee:	2302      	movs	r3, #2
 80049f0:	e0b7      	b.n	8004b62 <HAL_UART_Receive_IT+0x1ca>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	227c      	movs	r2, #124	; 0x7c
 80049f6:	2101      	movs	r1, #1
 80049f8:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	1dba      	adds	r2, r7, #6
 8004a04:	215c      	movs	r1, #92	; 0x5c
 8004a06:	8812      	ldrh	r2, [r2, #0]
 8004a08:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1dba      	adds	r2, r7, #6
 8004a0e:	215e      	movs	r1, #94	; 0x5e
 8004a10:	8812      	ldrh	r2, [r2, #0]
 8004a12:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	2380      	movs	r3, #128	; 0x80
 8004a20:	015b      	lsls	r3, r3, #5
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d10d      	bne.n	8004a42 <HAL_UART_Receive_IT+0xaa>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d104      	bne.n	8004a38 <HAL_UART_Receive_IT+0xa0>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2260      	movs	r2, #96	; 0x60
 8004a32:	494e      	ldr	r1, [pc, #312]	; (8004b6c <HAL_UART_Receive_IT+0x1d4>)
 8004a34:	5299      	strh	r1, [r3, r2]
 8004a36:	e02e      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2260      	movs	r2, #96	; 0x60
 8004a3c:	21ff      	movs	r1, #255	; 0xff
 8004a3e:	5299      	strh	r1, [r3, r2]
 8004a40:	e029      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10d      	bne.n	8004a66 <HAL_UART_Receive_IT+0xce>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_UART_Receive_IT+0xc4>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2260      	movs	r2, #96	; 0x60
 8004a56:	21ff      	movs	r1, #255	; 0xff
 8004a58:	5299      	strh	r1, [r3, r2]
 8004a5a:	e01c      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2260      	movs	r2, #96	; 0x60
 8004a60:	217f      	movs	r1, #127	; 0x7f
 8004a62:	5299      	strh	r1, [r3, r2]
 8004a64:	e017      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	055b      	lsls	r3, r3, #21
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d10d      	bne.n	8004a8e <HAL_UART_Receive_IT+0xf6>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d104      	bne.n	8004a84 <HAL_UART_Receive_IT+0xec>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2260      	movs	r2, #96	; 0x60
 8004a7e:	217f      	movs	r1, #127	; 0x7f
 8004a80:	5299      	strh	r1, [r3, r2]
 8004a82:	e008      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2260      	movs	r2, #96	; 0x60
 8004a88:	213f      	movs	r1, #63	; 0x3f
 8004a8a:	5299      	strh	r1, [r3, r2]
 8004a8c:	e003      	b.n	8004a96 <HAL_UART_Receive_IT+0xfe>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2260      	movs	r2, #96	; 0x60
 8004a92:	2100      	movs	r1, #0
 8004a94:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2288      	movs	r2, #136	; 0x88
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2284      	movs	r2, #132	; 0x84
 8004aa2:	2122      	movs	r1, #34	; 0x22
 8004aa4:	5099      	str	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004aba:	2380      	movs	r3, #128	; 0x80
 8004abc:	059b      	lsls	r3, r3, #22
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d12e      	bne.n	8004b20 <HAL_UART_Receive_IT+0x188>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2268      	movs	r2, #104	; 0x68
 8004ac6:	5a9b      	ldrh	r3, [r3, r2]
 8004ac8:	1dba      	adds	r2, r7, #6
 8004aca:	8812      	ldrh	r2, [r2, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d327      	bcc.n	8004b20 <HAL_UART_Receive_IT+0x188>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	015b      	lsls	r3, r3, #5
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d107      	bne.n	8004aec <HAL_UART_Receive_IT+0x154>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d103      	bne.n	8004aec <HAL_UART_Receive_IT+0x154>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a22      	ldr	r2, [pc, #136]	; (8004b70 <HAL_UART_Receive_IT+0x1d8>)
 8004ae8:	66da      	str	r2, [r3, #108]	; 0x6c
 8004aea:	e002      	b.n	8004af2 <HAL_UART_Receive_IT+0x15a>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <HAL_UART_Receive_IT+0x1dc>)
 8004af0:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	227c      	movs	r2, #124	; 0x7c
 8004af6:	2100      	movs	r1, #0
 8004af8:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2180      	movs	r1, #128	; 0x80
 8004b06:	0049      	lsls	r1, r1, #1
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	689a      	ldr	r2, [r3, #8]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0549      	lsls	r1, r1, #21
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	e01d      	b.n	8004b5c <HAL_UART_Receive_IT+0x1c4>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	015b      	lsls	r3, r3, #5
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d107      	bne.n	8004b3c <HAL_UART_Receive_IT+0x1a4>
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d103      	bne.n	8004b3c <HAL_UART_Receive_IT+0x1a4>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <HAL_UART_Receive_IT+0x1e0>)
 8004b38:	66da      	str	r2, [r3, #108]	; 0x6c
 8004b3a:	e002      	b.n	8004b42 <HAL_UART_Receive_IT+0x1aa>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a0f      	ldr	r2, [pc, #60]	; (8004b7c <HAL_UART_Receive_IT+0x1e4>)
 8004b40:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	227c      	movs	r2, #124	; 0x7c
 8004b46:	2100      	movs	r1, #0
 8004b48:	5499      	strb	r1, [r3, r2]

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2190      	movs	r1, #144	; 0x90
 8004b56:	0049      	lsls	r1, r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e000      	b.n	8004b62 <HAL_UART_Receive_IT+0x1ca>
  }
  else
  {
    return HAL_BUSY;
 8004b60:	2302      	movs	r3, #2
  }
}
 8004b62:	0018      	movs	r0, r3
 8004b64:	46bd      	mov	sp, r7
 8004b66:	b004      	add	sp, #16
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	000001ff 	.word	0x000001ff
 8004b70:	080065c5 	.word	0x080065c5
 8004b74:	08006489 	.word	0x08006489
 8004b78:	080063c9 	.word	0x080063c9
 8004b7c:	08006309 	.word	0x08006309

08004b80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	220f      	movs	r2, #15
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d117      	bne.n	8004bde <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d013      	beq.n	8004bde <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	4013      	ands	r3, r2
 8004bbc:	d104      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	2380      	movs	r3, #128	; 0x80
 8004bc2:	055b      	lsls	r3, r3, #21
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00a      	beq.n	8004bde <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d100      	bne.n	8004bd2 <HAL_UART_IRQHandler+0x52>
 8004bd0:	e127      	b.n	8004e22 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	0010      	movs	r0, r2
 8004bda:	4798      	blx	r3
      }
      return;
 8004bdc:	e121      	b.n	8004e22 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d100      	bne.n	8004be6 <HAL_UART_IRQHandler+0x66>
 8004be4:	e0c8      	b.n	8004d78 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4a92      	ldr	r2, [pc, #584]	; (8004e34 <HAL_UART_IRQHandler+0x2b4>)
 8004bea:	4013      	ands	r3, r2
 8004bec:	d105      	bne.n	8004bfa <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	2390      	movs	r3, #144	; 0x90
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d100      	bne.n	8004bfa <HAL_UART_IRQHandler+0x7a>
 8004bf8:	e0be      	b.n	8004d78 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d010      	beq.n	8004c24 <HAL_UART_IRQHandler+0xa4>
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	4013      	ands	r3, r2
 8004c0a:	d00b      	beq.n	8004c24 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2201      	movs	r2, #1
 8004c12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2288      	movs	r2, #136	; 0x88
 8004c18:	589b      	ldr	r3, [r3, r2]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2188      	movs	r1, #136	; 0x88
 8004c22:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	2202      	movs	r2, #2
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d00f      	beq.n	8004c4c <HAL_UART_IRQHandler+0xcc>
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	4013      	ands	r3, r2
 8004c32:	d00b      	beq.n	8004c4c <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2202      	movs	r2, #2
 8004c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2288      	movs	r2, #136	; 0x88
 8004c40:	589b      	ldr	r3, [r3, r2]
 8004c42:	2204      	movs	r2, #4
 8004c44:	431a      	orrs	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2188      	movs	r1, #136	; 0x88
 8004c4a:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2204      	movs	r2, #4
 8004c50:	4013      	ands	r3, r2
 8004c52:	d00f      	beq.n	8004c74 <HAL_UART_IRQHandler+0xf4>
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2201      	movs	r2, #1
 8004c58:	4013      	ands	r3, r2
 8004c5a:	d00b      	beq.n	8004c74 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2204      	movs	r2, #4
 8004c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2288      	movs	r2, #136	; 0x88
 8004c68:	589b      	ldr	r3, [r3, r2]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	431a      	orrs	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2188      	movs	r1, #136	; 0x88
 8004c72:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	2208      	movs	r2, #8
 8004c78:	4013      	ands	r3, r2
 8004c7a:	d013      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	4013      	ands	r3, r2
 8004c82:	d103      	bne.n	8004c8c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4a6b      	ldr	r2, [pc, #428]	; (8004e34 <HAL_UART_IRQHandler+0x2b4>)
 8004c88:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004c8a:	d00b      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2208      	movs	r2, #8
 8004c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2288      	movs	r2, #136	; 0x88
 8004c98:	589b      	ldr	r3, [r3, r2]
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2188      	movs	r1, #136	; 0x88
 8004ca2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2288      	movs	r2, #136	; 0x88
 8004ca8:	589b      	ldr	r3, [r3, r2]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d100      	bne.n	8004cb0 <HAL_UART_IRQHandler+0x130>
 8004cae:	e0ba      	b.n	8004e26 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	d011      	beq.n	8004cdc <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	d104      	bne.n	8004cca <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	2380      	movs	r3, #128	; 0x80
 8004cc4:	055b      	lsls	r3, r3, #21
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	d008      	beq.n	8004cdc <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	0010      	movs	r0, r2
 8004cda:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2288      	movs	r2, #136	; 0x88
 8004ce0:	589b      	ldr	r3, [r3, r2]
 8004ce2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	2240      	movs	r2, #64	; 0x40
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d003      	beq.n	8004cfa <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004cf8:	d033      	beq.n	8004d62 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	f001 faad 	bl	800625c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2240      	movs	r2, #64	; 0x40
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b40      	cmp	r3, #64	; 0x40
 8004d0e:	d123      	bne.n	8004d58 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2140      	movs	r1, #64	; 0x40
 8004d1c:	438a      	bics	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d012      	beq.n	8004d4e <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2c:	4a42      	ldr	r2, [pc, #264]	; (8004e38 <HAL_UART_IRQHandler+0x2b8>)
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fd fc0b 	bl	8002550 <HAL_DMA_Abort_IT>
 8004d3a:	1e03      	subs	r3, r0, #0
 8004d3c:	d01a      	beq.n	8004d74 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d48:	0018      	movs	r0, r3
 8004d4a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d4c:	e012      	b.n	8004d74 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 f883 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d56:	e00d      	b.n	8004d74 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f000 f87e 	bl	8004e5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d60:	e008      	b.n	8004d74 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f000 f879 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2288      	movs	r2, #136	; 0x88
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004d72:	e058      	b.n	8004e26 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d74:	46c0      	nop			; (mov r8, r8)
    return;
 8004d76:	e056      	b.n	8004e26 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d78:	69fa      	ldr	r2, [r7, #28]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	035b      	lsls	r3, r3, #13
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d00e      	beq.n	8004da0 <HAL_UART_IRQHandler+0x220>
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	03db      	lsls	r3, r3, #15
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d009      	beq.n	8004da0 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2280      	movs	r2, #128	; 0x80
 8004d92:	0352      	lsls	r2, r2, #13
 8004d94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f001 fcb1 	bl	8006700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d9e:	e045      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	2280      	movs	r2, #128	; 0x80
 8004da4:	4013      	ands	r3, r2
 8004da6:	d012      	beq.n	8004dce <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2280      	movs	r2, #128	; 0x80
 8004dac:	4013      	ands	r3, r2
 8004dae:	d104      	bne.n	8004dba <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4013      	ands	r3, r2
 8004db8:	d009      	beq.n	8004dce <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d033      	beq.n	8004e2a <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	0010      	movs	r0, r2
 8004dca:	4798      	blx	r3
    }
    return;
 8004dcc:	e02d      	b.n	8004e2a <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2240      	movs	r2, #64	; 0x40
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	d008      	beq.n	8004de8 <HAL_UART_IRQHandler+0x268>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2240      	movs	r2, #64	; 0x40
 8004dda:	4013      	ands	r3, r2
 8004ddc:	d004      	beq.n	8004de8 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	0018      	movs	r0, r3
 8004de2:	f001 fa76 	bl	80062d2 <UART_EndTransmit_IT>
    return;
 8004de6:	e021      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	041b      	lsls	r3, r3, #16
 8004dee:	4013      	ands	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_UART_IRQHandler+0x286>
 8004df2:	69ba      	ldr	r2, [r7, #24]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	05db      	lsls	r3, r3, #23
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f001 fc8e 	bl	8006720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e04:	e012      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	045b      	lsls	r3, r3, #17
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d00d      	beq.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	da0a      	bge.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f001 fc79 	bl	8006710 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004e1e:	46c0      	nop			; (mov r8, r8)
 8004e20:	e004      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
      return;
 8004e22:	46c0      	nop			; (mov r8, r8)
 8004e24:	e002      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
    return;
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	e000      	b.n	8004e2c <HAL_UART_IRQHandler+0x2ac>
    return;
 8004e2a:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	b008      	add	sp, #32
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	46c0      	nop			; (mov r8, r8)
 8004e34:	10000001 	.word	0x10000001
 8004e38:	080062a5 	.word	0x080062a5

08004e3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e44:	46c0      	nop			; (mov r8, r8)
 8004e46:	46bd      	mov	sp, r7
 8004e48:	b002      	add	sp, #8
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6e:	b0a1      	sub	sp, #132	; 0x84
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	65f8      	str	r0, [r7, #92]	; 0x5c
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	677b      	str	r3, [r7, #116]	; 0x74
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e78:	231b      	movs	r3, #27
 8004e7a:	2258      	movs	r2, #88	; 0x58
 8004e7c:	18ba      	adds	r2, r7, r2
 8004e7e:	18d2      	adds	r2, r2, r3
 8004e80:	2300      	movs	r3, #0
 8004e82:	7013      	strb	r3, [r2, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	66fb      	str	r3, [r7, #108]	; 0x6c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	67fb      	str	r3, [r7, #124]	; 0x7c
  tmpreg |= (uint32_t)huart->FifoMode;
 8004ea0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	67fb      	str	r3, [r7, #124]	; 0x7c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4bbe      	ldr	r3, [pc, #760]	; (80051ac <UART_SetConfig+0x340>)
 8004eb2:	401a      	ands	r2, r3
 8004eb4:	0011      	movs	r1, r2
 8004eb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4bba      	ldr	r3, [pc, #744]	; (80051b0 <UART_SetConfig+0x344>)
 8004ec8:	401a      	ands	r2, r3
 8004eca:	0010      	movs	r0, r2
 8004ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ece:	68d9      	ldr	r1, [r3, #12]
 8004ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ed2:	681a      	ldr	r2, [r3, #0]
 8004ed4:	0003      	movs	r3, r0
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	67fb      	str	r3, [r7, #124]	; 0x7c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	4bb3      	ldr	r3, [pc, #716]	; (80051b4 <UART_SetConfig+0x348>)
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d004      	beq.n	8004ef4 <UART_SetConfig+0x88>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004eec:	6a1a      	ldr	r2, [r3, #32]
 8004eee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ef4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	4baf      	ldr	r3, [pc, #700]	; (80051b8 <UART_SetConfig+0x34c>)
 8004efc:	401a      	ands	r2, r3
 8004efe:	0011      	movs	r1, r2
 8004f00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f10:	230f      	movs	r3, #15
 8004f12:	439a      	bics	r2, r3
 8004f14:	0010      	movs	r0, r2
 8004f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004f1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	0003      	movs	r3, r0
 8004f20:	430b      	orrs	r3, r1
 8004f22:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	4ba4      	ldr	r3, [pc, #656]	; (80051bc <UART_SetConfig+0x350>)
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d12f      	bne.n	8004f8e <UART_SetConfig+0x122>
 8004f2e:	4ba4      	ldr	r3, [pc, #656]	; (80051c0 <UART_SetConfig+0x354>)
 8004f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f32:	2303      	movs	r3, #3
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d013      	beq.n	8004f62 <UART_SetConfig+0xf6>
 8004f3a:	d304      	bcc.n	8004f46 <UART_SetConfig+0xda>
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d009      	beq.n	8004f54 <UART_SetConfig+0xe8>
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d015      	beq.n	8004f70 <UART_SetConfig+0x104>
 8004f44:	e01b      	b.n	8004f7e <UART_SetConfig+0x112>
 8004f46:	2323      	movs	r3, #35	; 0x23
 8004f48:	2258      	movs	r2, #88	; 0x58
 8004f4a:	18ba      	adds	r2, r7, r2
 8004f4c:	18d2      	adds	r2, r2, r3
 8004f4e:	2300      	movs	r3, #0
 8004f50:	7013      	strb	r3, [r2, #0]
 8004f52:	e070      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004f54:	2323      	movs	r3, #35	; 0x23
 8004f56:	2258      	movs	r2, #88	; 0x58
 8004f58:	18ba      	adds	r2, r7, r2
 8004f5a:	18d2      	adds	r2, r2, r3
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	7013      	strb	r3, [r2, #0]
 8004f60:	e069      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004f62:	2323      	movs	r3, #35	; 0x23
 8004f64:	2258      	movs	r2, #88	; 0x58
 8004f66:	18ba      	adds	r2, r7, r2
 8004f68:	18d2      	adds	r2, r2, r3
 8004f6a:	2304      	movs	r3, #4
 8004f6c:	7013      	strb	r3, [r2, #0]
 8004f6e:	e062      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004f70:	2323      	movs	r3, #35	; 0x23
 8004f72:	2258      	movs	r2, #88	; 0x58
 8004f74:	18ba      	adds	r2, r7, r2
 8004f76:	18d2      	adds	r2, r2, r3
 8004f78:	2308      	movs	r3, #8
 8004f7a:	7013      	strb	r3, [r2, #0]
 8004f7c:	e05b      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004f7e:	2323      	movs	r3, #35	; 0x23
 8004f80:	2258      	movs	r2, #88	; 0x58
 8004f82:	18ba      	adds	r2, r7, r2
 8004f84:	18d2      	adds	r2, r2, r3
 8004f86:	2310      	movs	r3, #16
 8004f88:	7013      	strb	r3, [r2, #0]
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	e053      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	4b8c      	ldr	r3, [pc, #560]	; (80051c4 <UART_SetConfig+0x358>)
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d106      	bne.n	8004fa6 <UART_SetConfig+0x13a>
 8004f98:	2323      	movs	r3, #35	; 0x23
 8004f9a:	2258      	movs	r2, #88	; 0x58
 8004f9c:	18ba      	adds	r2, r7, r2
 8004f9e:	18d2      	adds	r2, r2, r3
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	7013      	strb	r3, [r2, #0]
 8004fa4:	e047      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004fa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	4b82      	ldr	r3, [pc, #520]	; (80051b4 <UART_SetConfig+0x348>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d13c      	bne.n	800502a <UART_SetConfig+0x1be>
 8004fb0:	4b83      	ldr	r3, [pc, #524]	; (80051c0 <UART_SetConfig+0x354>)
 8004fb2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fb4:	23c0      	movs	r3, #192	; 0xc0
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	401a      	ands	r2, r3
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d01d      	beq.n	8004ffe <UART_SetConfig+0x192>
 8004fc2:	2380      	movs	r3, #128	; 0x80
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d802      	bhi.n	8004fd0 <UART_SetConfig+0x164>
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	d009      	beq.n	8004fe2 <UART_SetConfig+0x176>
 8004fce:	e024      	b.n	800501a <UART_SetConfig+0x1ae>
 8004fd0:	2380      	movs	r3, #128	; 0x80
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d00b      	beq.n	8004ff0 <UART_SetConfig+0x184>
 8004fd8:	23c0      	movs	r3, #192	; 0xc0
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d015      	beq.n	800500c <UART_SetConfig+0x1a0>
 8004fe0:	e01b      	b.n	800501a <UART_SetConfig+0x1ae>
 8004fe2:	2323      	movs	r3, #35	; 0x23
 8004fe4:	2258      	movs	r2, #88	; 0x58
 8004fe6:	18ba      	adds	r2, r7, r2
 8004fe8:	18d2      	adds	r2, r2, r3
 8004fea:	2300      	movs	r3, #0
 8004fec:	7013      	strb	r3, [r2, #0]
 8004fee:	e022      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004ff0:	2323      	movs	r3, #35	; 0x23
 8004ff2:	2258      	movs	r2, #88	; 0x58
 8004ff4:	18ba      	adds	r2, r7, r2
 8004ff6:	18d2      	adds	r2, r2, r3
 8004ff8:	2302      	movs	r3, #2
 8004ffa:	7013      	strb	r3, [r2, #0]
 8004ffc:	e01b      	b.n	8005036 <UART_SetConfig+0x1ca>
 8004ffe:	2323      	movs	r3, #35	; 0x23
 8005000:	2258      	movs	r2, #88	; 0x58
 8005002:	18ba      	adds	r2, r7, r2
 8005004:	18d2      	adds	r2, r2, r3
 8005006:	2304      	movs	r3, #4
 8005008:	7013      	strb	r3, [r2, #0]
 800500a:	e014      	b.n	8005036 <UART_SetConfig+0x1ca>
 800500c:	2323      	movs	r3, #35	; 0x23
 800500e:	2258      	movs	r2, #88	; 0x58
 8005010:	18ba      	adds	r2, r7, r2
 8005012:	18d2      	adds	r2, r2, r3
 8005014:	2308      	movs	r3, #8
 8005016:	7013      	strb	r3, [r2, #0]
 8005018:	e00d      	b.n	8005036 <UART_SetConfig+0x1ca>
 800501a:	2323      	movs	r3, #35	; 0x23
 800501c:	2258      	movs	r2, #88	; 0x58
 800501e:	18ba      	adds	r2, r7, r2
 8005020:	18d2      	adds	r2, r2, r3
 8005022:	2310      	movs	r3, #16
 8005024:	7013      	strb	r3, [r2, #0]
 8005026:	46c0      	nop			; (mov r8, r8)
 8005028:	e005      	b.n	8005036 <UART_SetConfig+0x1ca>
 800502a:	2323      	movs	r3, #35	; 0x23
 800502c:	2258      	movs	r2, #88	; 0x58
 800502e:	18ba      	adds	r2, r7, r2
 8005030:	18d2      	adds	r2, r2, r3
 8005032:	2310      	movs	r3, #16
 8005034:	7013      	strb	r3, [r2, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b5e      	ldr	r3, [pc, #376]	; (80051b4 <UART_SetConfig+0x348>)
 800503c:	429a      	cmp	r2, r3
 800503e:	d001      	beq.n	8005044 <UART_SetConfig+0x1d8>
 8005040:	f000 fbe8 	bl	8005814 <UART_SetConfig+0x9a8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005044:	2323      	movs	r3, #35	; 0x23
 8005046:	2258      	movs	r2, #88	; 0x58
 8005048:	4694      	mov	ip, r2
 800504a:	44bc      	add	ip, r7
 800504c:	4463      	add	r3, ip
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d100      	bne.n	8005056 <UART_SetConfig+0x1ea>
 8005054:	e05e      	b.n	8005114 <UART_SetConfig+0x2a8>
 8005056:	dc02      	bgt.n	800505e <UART_SetConfig+0x1f2>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <UART_SetConfig+0x200>
 800505c:	e174      	b.n	8005348 <UART_SetConfig+0x4dc>
 800505e:	2b04      	cmp	r3, #4
 8005060:	d100      	bne.n	8005064 <UART_SetConfig+0x1f8>
 8005062:	e0c9      	b.n	80051f8 <UART_SetConfig+0x38c>
 8005064:	2b08      	cmp	r3, #8
 8005066:	d100      	bne.n	800506a <UART_SetConfig+0x1fe>
 8005068:	e11a      	b.n	80052a0 <UART_SetConfig+0x434>
 800506a:	e16d      	b.n	8005348 <UART_SetConfig+0x4dc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800506c:	f7ff f9c8 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8005070:	0002      	movs	r2, r0
 8005072:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2b00      	cmp	r3, #0
 8005078:	d044      	beq.n	8005104 <UART_SetConfig+0x298>
 800507a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	2b01      	cmp	r3, #1
 8005080:	d03e      	beq.n	8005100 <UART_SetConfig+0x294>
 8005082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	2b02      	cmp	r3, #2
 8005088:	d038      	beq.n	80050fc <UART_SetConfig+0x290>
 800508a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2b03      	cmp	r3, #3
 8005090:	d032      	beq.n	80050f8 <UART_SetConfig+0x28c>
 8005092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	2b04      	cmp	r3, #4
 8005098:	d02c      	beq.n	80050f4 <UART_SetConfig+0x288>
 800509a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800509c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d026      	beq.n	80050f0 <UART_SetConfig+0x284>
 80050a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b06      	cmp	r3, #6
 80050a8:	d020      	beq.n	80050ec <UART_SetConfig+0x280>
 80050aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	2b07      	cmp	r3, #7
 80050b0:	d01a      	beq.n	80050e8 <UART_SetConfig+0x27c>
 80050b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d014      	beq.n	80050e4 <UART_SetConfig+0x278>
 80050ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050be:	2b09      	cmp	r3, #9
 80050c0:	d00e      	beq.n	80050e0 <UART_SetConfig+0x274>
 80050c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	2b0a      	cmp	r3, #10
 80050c8:	d008      	beq.n	80050dc <UART_SetConfig+0x270>
 80050ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ce:	2b0b      	cmp	r3, #11
 80050d0:	d102      	bne.n	80050d8 <UART_SetConfig+0x26c>
 80050d2:	2380      	movs	r3, #128	; 0x80
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	e016      	b.n	8005106 <UART_SetConfig+0x29a>
 80050d8:	2301      	movs	r3, #1
 80050da:	e014      	b.n	8005106 <UART_SetConfig+0x29a>
 80050dc:	2380      	movs	r3, #128	; 0x80
 80050de:	e012      	b.n	8005106 <UART_SetConfig+0x29a>
 80050e0:	2340      	movs	r3, #64	; 0x40
 80050e2:	e010      	b.n	8005106 <UART_SetConfig+0x29a>
 80050e4:	2320      	movs	r3, #32
 80050e6:	e00e      	b.n	8005106 <UART_SetConfig+0x29a>
 80050e8:	2310      	movs	r3, #16
 80050ea:	e00c      	b.n	8005106 <UART_SetConfig+0x29a>
 80050ec:	230c      	movs	r3, #12
 80050ee:	e00a      	b.n	8005106 <UART_SetConfig+0x29a>
 80050f0:	230a      	movs	r3, #10
 80050f2:	e008      	b.n	8005106 <UART_SetConfig+0x29a>
 80050f4:	2308      	movs	r3, #8
 80050f6:	e006      	b.n	8005106 <UART_SetConfig+0x29a>
 80050f8:	2306      	movs	r3, #6
 80050fa:	e004      	b.n	8005106 <UART_SetConfig+0x29a>
 80050fc:	2304      	movs	r3, #4
 80050fe:	e002      	b.n	8005106 <UART_SetConfig+0x29a>
 8005100:	2302      	movs	r3, #2
 8005102:	e000      	b.n	8005106 <UART_SetConfig+0x29a>
 8005104:	2301      	movs	r3, #1
 8005106:	0019      	movs	r1, r3
 8005108:	0010      	movs	r0, r2
 800510a:	f7fb f80d 	bl	8000128 <__udivsi3>
 800510e:	0003      	movs	r3, r0
 8005110:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8005112:	e120      	b.n	8005356 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8005114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b00      	cmp	r3, #0
 800511a:	d043      	beq.n	80051a4 <UART_SetConfig+0x338>
 800511c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b01      	cmp	r3, #1
 8005122:	d03d      	beq.n	80051a0 <UART_SetConfig+0x334>
 8005124:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005128:	2b02      	cmp	r3, #2
 800512a:	d037      	beq.n	800519c <UART_SetConfig+0x330>
 800512c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800512e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005130:	2b03      	cmp	r3, #3
 8005132:	d031      	beq.n	8005198 <UART_SetConfig+0x32c>
 8005134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005138:	2b04      	cmp	r3, #4
 800513a:	d02b      	beq.n	8005194 <UART_SetConfig+0x328>
 800513c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	2b05      	cmp	r3, #5
 8005142:	d025      	beq.n	8005190 <UART_SetConfig+0x324>
 8005144:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2b06      	cmp	r3, #6
 800514a:	d01f      	beq.n	800518c <UART_SetConfig+0x320>
 800514c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800514e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005150:	2b07      	cmp	r3, #7
 8005152:	d019      	beq.n	8005188 <UART_SetConfig+0x31c>
 8005154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005158:	2b08      	cmp	r3, #8
 800515a:	d013      	beq.n	8005184 <UART_SetConfig+0x318>
 800515c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b09      	cmp	r3, #9
 8005162:	d00d      	beq.n	8005180 <UART_SetConfig+0x314>
 8005164:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005168:	2b0a      	cmp	r3, #10
 800516a:	d007      	beq.n	800517c <UART_SetConfig+0x310>
 800516c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	2b0b      	cmp	r3, #11
 8005172:	d101      	bne.n	8005178 <UART_SetConfig+0x30c>
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <UART_SetConfig+0x35c>)
 8005176:	e016      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <UART_SetConfig+0x360>)
 800517a:	e014      	b.n	80051a6 <UART_SetConfig+0x33a>
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <UART_SetConfig+0x364>)
 800517e:	e012      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005180:	4b14      	ldr	r3, [pc, #80]	; (80051d4 <UART_SetConfig+0x368>)
 8005182:	e010      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005184:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <UART_SetConfig+0x36c>)
 8005186:	e00e      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <UART_SetConfig+0x370>)
 800518a:	e00c      	b.n	80051a6 <UART_SetConfig+0x33a>
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <UART_SetConfig+0x374>)
 800518e:	e00a      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <UART_SetConfig+0x378>)
 8005192:	e008      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005194:	4b14      	ldr	r3, [pc, #80]	; (80051e8 <UART_SetConfig+0x37c>)
 8005196:	e006      	b.n	80051a6 <UART_SetConfig+0x33a>
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <UART_SetConfig+0x380>)
 800519a:	e004      	b.n	80051a6 <UART_SetConfig+0x33a>
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <UART_SetConfig+0x384>)
 800519e:	e002      	b.n	80051a6 <UART_SetConfig+0x33a>
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <UART_SetConfig+0x388>)
 80051a2:	e000      	b.n	80051a6 <UART_SetConfig+0x33a>
 80051a4:	4b09      	ldr	r3, [pc, #36]	; (80051cc <UART_SetConfig+0x360>)
 80051a6:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 80051a8:	e0d5      	b.n	8005356 <UART_SetConfig+0x4ea>
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	cfff69f3 	.word	0xcfff69f3
 80051b0:	ffffcfff 	.word	0xffffcfff
 80051b4:	40008000 	.word	0x40008000
 80051b8:	11fff4ff 	.word	0x11fff4ff
 80051bc:	40013800 	.word	0x40013800
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40004400 	.word	0x40004400
 80051c8:	0000f424 	.word	0x0000f424
 80051cc:	00f42400 	.word	0x00f42400
 80051d0:	0001e848 	.word	0x0001e848
 80051d4:	0003d090 	.word	0x0003d090
 80051d8:	0007a120 	.word	0x0007a120
 80051dc:	000f4240 	.word	0x000f4240
 80051e0:	00145855 	.word	0x00145855
 80051e4:	00186a00 	.word	0x00186a00
 80051e8:	001e8480 	.word	0x001e8480
 80051ec:	0028b0aa 	.word	0x0028b0aa
 80051f0:	003d0900 	.word	0x003d0900
 80051f4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80051f8:	f7ff f876 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80051fc:	0002      	movs	r2, r0
 80051fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b00      	cmp	r3, #0
 8005204:	d044      	beq.n	8005290 <UART_SetConfig+0x424>
 8005206:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b01      	cmp	r3, #1
 800520c:	d03e      	beq.n	800528c <UART_SetConfig+0x420>
 800520e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b02      	cmp	r3, #2
 8005214:	d038      	beq.n	8005288 <UART_SetConfig+0x41c>
 8005216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b03      	cmp	r3, #3
 800521c:	d032      	beq.n	8005284 <UART_SetConfig+0x418>
 800521e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005222:	2b04      	cmp	r3, #4
 8005224:	d02c      	beq.n	8005280 <UART_SetConfig+0x414>
 8005226:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2b05      	cmp	r3, #5
 800522c:	d026      	beq.n	800527c <UART_SetConfig+0x410>
 800522e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b06      	cmp	r3, #6
 8005234:	d020      	beq.n	8005278 <UART_SetConfig+0x40c>
 8005236:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b07      	cmp	r3, #7
 800523c:	d01a      	beq.n	8005274 <UART_SetConfig+0x408>
 800523e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	2b08      	cmp	r3, #8
 8005244:	d014      	beq.n	8005270 <UART_SetConfig+0x404>
 8005246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	2b09      	cmp	r3, #9
 800524c:	d00e      	beq.n	800526c <UART_SetConfig+0x400>
 800524e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005252:	2b0a      	cmp	r3, #10
 8005254:	d008      	beq.n	8005268 <UART_SetConfig+0x3fc>
 8005256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	2b0b      	cmp	r3, #11
 800525c:	d102      	bne.n	8005264 <UART_SetConfig+0x3f8>
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	e016      	b.n	8005292 <UART_SetConfig+0x426>
 8005264:	2301      	movs	r3, #1
 8005266:	e014      	b.n	8005292 <UART_SetConfig+0x426>
 8005268:	2380      	movs	r3, #128	; 0x80
 800526a:	e012      	b.n	8005292 <UART_SetConfig+0x426>
 800526c:	2340      	movs	r3, #64	; 0x40
 800526e:	e010      	b.n	8005292 <UART_SetConfig+0x426>
 8005270:	2320      	movs	r3, #32
 8005272:	e00e      	b.n	8005292 <UART_SetConfig+0x426>
 8005274:	2310      	movs	r3, #16
 8005276:	e00c      	b.n	8005292 <UART_SetConfig+0x426>
 8005278:	230c      	movs	r3, #12
 800527a:	e00a      	b.n	8005292 <UART_SetConfig+0x426>
 800527c:	230a      	movs	r3, #10
 800527e:	e008      	b.n	8005292 <UART_SetConfig+0x426>
 8005280:	2308      	movs	r3, #8
 8005282:	e006      	b.n	8005292 <UART_SetConfig+0x426>
 8005284:	2306      	movs	r3, #6
 8005286:	e004      	b.n	8005292 <UART_SetConfig+0x426>
 8005288:	2304      	movs	r3, #4
 800528a:	e002      	b.n	8005292 <UART_SetConfig+0x426>
 800528c:	2302      	movs	r3, #2
 800528e:	e000      	b.n	8005292 <UART_SetConfig+0x426>
 8005290:	2301      	movs	r3, #1
 8005292:	0019      	movs	r1, r3
 8005294:	0010      	movs	r0, r2
 8005296:	f7fa ff47 	bl	8000128 <__udivsi3>
 800529a:	0003      	movs	r3, r0
 800529c:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 800529e:	e05a      	b.n	8005356 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80052a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d04b      	beq.n	8005340 <UART_SetConfig+0x4d4>
 80052a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d044      	beq.n	800533a <UART_SetConfig+0x4ce>
 80052b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d03d      	beq.n	8005334 <UART_SetConfig+0x4c8>
 80052b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	2b03      	cmp	r3, #3
 80052be:	d037      	beq.n	8005330 <UART_SetConfig+0x4c4>
 80052c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	d030      	beq.n	800532a <UART_SetConfig+0x4be>
 80052c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	2b05      	cmp	r3, #5
 80052ce:	d02a      	beq.n	8005326 <UART_SetConfig+0x4ba>
 80052d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b06      	cmp	r3, #6
 80052d6:	d024      	beq.n	8005322 <UART_SetConfig+0x4b6>
 80052d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b07      	cmp	r3, #7
 80052de:	d01d      	beq.n	800531c <UART_SetConfig+0x4b0>
 80052e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d016      	beq.n	8005316 <UART_SetConfig+0x4aa>
 80052e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	2b09      	cmp	r3, #9
 80052ee:	d00f      	beq.n	8005310 <UART_SetConfig+0x4a4>
 80052f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b0a      	cmp	r3, #10
 80052f6:	d008      	beq.n	800530a <UART_SetConfig+0x49e>
 80052f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fc:	2b0b      	cmp	r3, #11
 80052fe:	d101      	bne.n	8005304 <UART_SetConfig+0x498>
 8005300:	2380      	movs	r3, #128	; 0x80
 8005302:	e01f      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	e01c      	b.n	8005344 <UART_SetConfig+0x4d8>
 800530a:	2380      	movs	r3, #128	; 0x80
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	e019      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005310:	2380      	movs	r3, #128	; 0x80
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	e016      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005316:	2380      	movs	r3, #128	; 0x80
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	e013      	b.n	8005344 <UART_SetConfig+0x4d8>
 800531c:	2380      	movs	r3, #128	; 0x80
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	e010      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005322:	4bbf      	ldr	r3, [pc, #764]	; (8005620 <UART_SetConfig+0x7b4>)
 8005324:	e00e      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005326:	4bbf      	ldr	r3, [pc, #764]	; (8005624 <UART_SetConfig+0x7b8>)
 8005328:	e00c      	b.n	8005344 <UART_SetConfig+0x4d8>
 800532a:	2380      	movs	r3, #128	; 0x80
 800532c:	015b      	lsls	r3, r3, #5
 800532e:	e009      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005330:	4bbd      	ldr	r3, [pc, #756]	; (8005628 <UART_SetConfig+0x7bc>)
 8005332:	e007      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	019b      	lsls	r3, r3, #6
 8005338:	e004      	b.n	8005344 <UART_SetConfig+0x4d8>
 800533a:	2380      	movs	r3, #128	; 0x80
 800533c:	01db      	lsls	r3, r3, #7
 800533e:	e001      	b.n	8005344 <UART_SetConfig+0x4d8>
 8005340:	2380      	movs	r3, #128	; 0x80
 8005342:	021b      	lsls	r3, r3, #8
 8005344:	66fb      	str	r3, [r7, #108]	; 0x6c
        break;
 8005346:	e006      	b.n	8005356 <UART_SetConfig+0x4ea>
      default:
        ret = HAL_ERROR;
 8005348:	231b      	movs	r3, #27
 800534a:	2258      	movs	r2, #88	; 0x58
 800534c:	18ba      	adds	r2, r7, r2
 800534e:	18d2      	adds	r2, r2, r3
 8005350:	2301      	movs	r3, #1
 8005352:	7013      	strb	r3, [r2, #0]
        break;
 8005354:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8005356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <UART_SetConfig+0x4f4>
 800535c:	f000 fe14 	bl	8005f88 <UART_SetConfig+0x111c>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	0013      	movs	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	189a      	adds	r2, r3, r2
 800536a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536c:	4293      	cmp	r3, r2
 800536e:	d305      	bcc.n	800537c <UART_SetConfig+0x510>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005370:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	031a      	lsls	r2, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005378:	4293      	cmp	r3, r2
 800537a:	d908      	bls.n	800538e <UART_SetConfig+0x522>
      {
        ret = HAL_ERROR;
 800537c:	231b      	movs	r3, #27
 800537e:	2258      	movs	r2, #88	; 0x58
 8005380:	4694      	mov	ip, r2
 8005382:	44bc      	add	ip, r7
 8005384:	4463      	add	r3, ip
 8005386:	2201      	movs	r2, #1
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	f000 fdfd 	bl	8005f88 <UART_SetConfig+0x111c>
      }
      else
      {
        switch (clocksource)
 800538e:	2323      	movs	r3, #35	; 0x23
 8005390:	2258      	movs	r2, #88	; 0x58
 8005392:	4694      	mov	ip, r2
 8005394:	44bc      	add	ip, r7
 8005396:	4463      	add	r3, ip
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	2b02      	cmp	r3, #2
 800539c:	d100      	bne.n	80053a0 <UART_SetConfig+0x534>
 800539e:	e08c      	b.n	80054ba <UART_SetConfig+0x64e>
 80053a0:	dc02      	bgt.n	80053a8 <UART_SetConfig+0x53c>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d007      	beq.n	80053b6 <UART_SetConfig+0x54a>
 80053a6:	e216      	b.n	80057d6 <UART_SetConfig+0x96a>
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d100      	bne.n	80053ae <UART_SetConfig+0x542>
 80053ac:	e0f2      	b.n	8005594 <UART_SetConfig+0x728>
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d100      	bne.n	80053b4 <UART_SetConfig+0x548>
 80053b2:	e199      	b.n	80056e8 <UART_SetConfig+0x87c>
 80053b4:	e20f      	b.n	80057d6 <UART_SetConfig+0x96a>
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80053b6:	f7ff f823 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 80053ba:	0003      	movs	r3, r0
 80053bc:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053c2:	2300      	movs	r3, #0
 80053c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d050      	beq.n	8005470 <UART_SetConfig+0x604>
 80053ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d049      	beq.n	800546a <UART_SetConfig+0x5fe>
 80053d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d042      	beq.n	8005464 <UART_SetConfig+0x5f8>
 80053de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d03b      	beq.n	800545e <UART_SetConfig+0x5f2>
 80053e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ea:	2b04      	cmp	r3, #4
 80053ec:	d034      	beq.n	8005458 <UART_SetConfig+0x5ec>
 80053ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f2:	2b05      	cmp	r3, #5
 80053f4:	d02d      	beq.n	8005452 <UART_SetConfig+0x5e6>
 80053f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d026      	beq.n	800544c <UART_SetConfig+0x5e0>
 80053fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	2b07      	cmp	r3, #7
 8005404:	d01f      	beq.n	8005446 <UART_SetConfig+0x5da>
 8005406:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b08      	cmp	r3, #8
 800540c:	d018      	beq.n	8005440 <UART_SetConfig+0x5d4>
 800540e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005412:	2b09      	cmp	r3, #9
 8005414:	d011      	beq.n	800543a <UART_SetConfig+0x5ce>
 8005416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800541a:	2b0a      	cmp	r3, #10
 800541c:	d00a      	beq.n	8005434 <UART_SetConfig+0x5c8>
 800541e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	2b0b      	cmp	r3, #11
 8005424:	d103      	bne.n	800542e <UART_SetConfig+0x5c2>
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	2400      	movs	r4, #0
 800542c:	e022      	b.n	8005474 <UART_SetConfig+0x608>
 800542e:	2301      	movs	r3, #1
 8005430:	2400      	movs	r4, #0
 8005432:	e01f      	b.n	8005474 <UART_SetConfig+0x608>
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	2400      	movs	r4, #0
 8005438:	e01c      	b.n	8005474 <UART_SetConfig+0x608>
 800543a:	2340      	movs	r3, #64	; 0x40
 800543c:	2400      	movs	r4, #0
 800543e:	e019      	b.n	8005474 <UART_SetConfig+0x608>
 8005440:	2320      	movs	r3, #32
 8005442:	2400      	movs	r4, #0
 8005444:	e016      	b.n	8005474 <UART_SetConfig+0x608>
 8005446:	2310      	movs	r3, #16
 8005448:	2400      	movs	r4, #0
 800544a:	e013      	b.n	8005474 <UART_SetConfig+0x608>
 800544c:	230c      	movs	r3, #12
 800544e:	2400      	movs	r4, #0
 8005450:	e010      	b.n	8005474 <UART_SetConfig+0x608>
 8005452:	230a      	movs	r3, #10
 8005454:	2400      	movs	r4, #0
 8005456:	e00d      	b.n	8005474 <UART_SetConfig+0x608>
 8005458:	2308      	movs	r3, #8
 800545a:	2400      	movs	r4, #0
 800545c:	e00a      	b.n	8005474 <UART_SetConfig+0x608>
 800545e:	2306      	movs	r3, #6
 8005460:	2400      	movs	r4, #0
 8005462:	e007      	b.n	8005474 <UART_SetConfig+0x608>
 8005464:	2304      	movs	r3, #4
 8005466:	2400      	movs	r4, #0
 8005468:	e004      	b.n	8005474 <UART_SetConfig+0x608>
 800546a:	2302      	movs	r3, #2
 800546c:	2400      	movs	r4, #0
 800546e:	e001      	b.n	8005474 <UART_SetConfig+0x608>
 8005470:	2301      	movs	r3, #1
 8005472:	2400      	movs	r4, #0
 8005474:	001a      	movs	r2, r3
 8005476:	0023      	movs	r3, r4
 8005478:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800547a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800547c:	f7fb f808 	bl	8000490 <__aeabi_uldivmod>
 8005480:	0003      	movs	r3, r0
 8005482:	000c      	movs	r4, r1
 8005484:	0e1a      	lsrs	r2, r3, #24
 8005486:	0226      	lsls	r6, r4, #8
 8005488:	4316      	orrs	r6, r2
 800548a:	021d      	lsls	r5, r3, #8
 800548c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	085b      	lsrs	r3, r3, #1
 8005492:	643b      	str	r3, [r7, #64]	; 0x40
 8005494:	2300      	movs	r3, #0
 8005496:	647b      	str	r3, [r7, #68]	; 0x44
 8005498:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800549a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800549c:	1940      	adds	r0, r0, r5
 800549e:	4171      	adcs	r1, r6
 80054a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a6:	2300      	movs	r3, #0
 80054a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ae:	f7fa ffef 	bl	8000490 <__aeabi_uldivmod>
 80054b2:	0003      	movs	r3, r0
 80054b4:	000c      	movs	r4, r1
 80054b6:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80054b8:	e195      	b.n	80057e6 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d04f      	beq.n	8005562 <UART_SetConfig+0x6f6>
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d048      	beq.n	800555c <UART_SetConfig+0x6f0>
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d041      	beq.n	8005556 <UART_SetConfig+0x6ea>
 80054d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d03a      	beq.n	8005550 <UART_SetConfig+0x6e4>
 80054da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d033      	beq.n	800554a <UART_SetConfig+0x6de>
 80054e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d02c      	beq.n	8005544 <UART_SetConfig+0x6d8>
 80054ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	2b06      	cmp	r3, #6
 80054f0:	d025      	beq.n	800553e <UART_SetConfig+0x6d2>
 80054f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f6:	2b07      	cmp	r3, #7
 80054f8:	d01e      	beq.n	8005538 <UART_SetConfig+0x6cc>
 80054fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fe:	2b08      	cmp	r3, #8
 8005500:	d017      	beq.n	8005532 <UART_SetConfig+0x6c6>
 8005502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005506:	2b09      	cmp	r3, #9
 8005508:	d010      	beq.n	800552c <UART_SetConfig+0x6c0>
 800550a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	2b0a      	cmp	r3, #10
 8005510:	d009      	beq.n	8005526 <UART_SetConfig+0x6ba>
 8005512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	2b0b      	cmp	r3, #11
 8005518:	d102      	bne.n	8005520 <UART_SetConfig+0x6b4>
 800551a:	4b44      	ldr	r3, [pc, #272]	; (800562c <UART_SetConfig+0x7c0>)
 800551c:	2400      	movs	r4, #0
 800551e:	e022      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005520:	4b43      	ldr	r3, [pc, #268]	; (8005630 <UART_SetConfig+0x7c4>)
 8005522:	2400      	movs	r4, #0
 8005524:	e01f      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005526:	4b43      	ldr	r3, [pc, #268]	; (8005634 <UART_SetConfig+0x7c8>)
 8005528:	2400      	movs	r4, #0
 800552a:	e01c      	b.n	8005566 <UART_SetConfig+0x6fa>
 800552c:	4b42      	ldr	r3, [pc, #264]	; (8005638 <UART_SetConfig+0x7cc>)
 800552e:	2400      	movs	r4, #0
 8005530:	e019      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005532:	4b42      	ldr	r3, [pc, #264]	; (800563c <UART_SetConfig+0x7d0>)
 8005534:	2400      	movs	r4, #0
 8005536:	e016      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005538:	4b41      	ldr	r3, [pc, #260]	; (8005640 <UART_SetConfig+0x7d4>)
 800553a:	2400      	movs	r4, #0
 800553c:	e013      	b.n	8005566 <UART_SetConfig+0x6fa>
 800553e:	4b41      	ldr	r3, [pc, #260]	; (8005644 <UART_SetConfig+0x7d8>)
 8005540:	2400      	movs	r4, #0
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005544:	4b40      	ldr	r3, [pc, #256]	; (8005648 <UART_SetConfig+0x7dc>)
 8005546:	2400      	movs	r4, #0
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x6fa>
 800554a:	4b40      	ldr	r3, [pc, #256]	; (800564c <UART_SetConfig+0x7e0>)
 800554c:	2400      	movs	r4, #0
 800554e:	e00a      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005550:	4b3f      	ldr	r3, [pc, #252]	; (8005650 <UART_SetConfig+0x7e4>)
 8005552:	2400      	movs	r4, #0
 8005554:	e007      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005556:	4b3f      	ldr	r3, [pc, #252]	; (8005654 <UART_SetConfig+0x7e8>)
 8005558:	2400      	movs	r4, #0
 800555a:	e004      	b.n	8005566 <UART_SetConfig+0x6fa>
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <UART_SetConfig+0x7ec>)
 800555e:	2400      	movs	r4, #0
 8005560:	e001      	b.n	8005566 <UART_SetConfig+0x6fa>
 8005562:	4b33      	ldr	r3, [pc, #204]	; (8005630 <UART_SetConfig+0x7c4>)
 8005564:	2400      	movs	r4, #0
 8005566:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005568:	6852      	ldr	r2, [r2, #4]
 800556a:	0852      	lsrs	r2, r2, #1
 800556c:	633a      	str	r2, [r7, #48]	; 0x30
 800556e:	2200      	movs	r2, #0
 8005570:	637a      	str	r2, [r7, #52]	; 0x34
 8005572:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005574:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005576:	18c0      	adds	r0, r0, r3
 8005578:	4161      	adcs	r1, r4
 800557a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005580:	2300      	movs	r3, #0
 8005582:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005584:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005588:	f7fa ff82 	bl	8000490 <__aeabi_uldivmod>
 800558c:	0003      	movs	r3, r0
 800558e:	000c      	movs	r4, r1
 8005590:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 8005592:	e128      	b.n	80057e6 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8005594:	f7fe fea8 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005598:	0003      	movs	r3, r0
 800559a:	66bb      	str	r3, [r7, #104]	; 0x68
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800559e:	623b      	str	r3, [r7, #32]
 80055a0:	2300      	movs	r3, #0
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
 80055a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d100      	bne.n	80055ae <UART_SetConfig+0x742>
 80055ac:	e071      	b.n	8005692 <UART_SetConfig+0x826>
 80055ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d100      	bne.n	80055b8 <UART_SetConfig+0x74c>
 80055b6:	e069      	b.n	800568c <UART_SetConfig+0x820>
 80055b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d100      	bne.n	80055c2 <UART_SetConfig+0x756>
 80055c0:	e061      	b.n	8005686 <UART_SetConfig+0x81a>
 80055c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d05a      	beq.n	8005680 <UART_SetConfig+0x814>
 80055ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	d053      	beq.n	800567a <UART_SetConfig+0x80e>
 80055d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d6:	2b05      	cmp	r3, #5
 80055d8:	d04c      	beq.n	8005674 <UART_SetConfig+0x808>
 80055da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055de:	2b06      	cmp	r3, #6
 80055e0:	d045      	beq.n	800566e <UART_SetConfig+0x802>
 80055e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	2b07      	cmp	r3, #7
 80055e8:	d03e      	beq.n	8005668 <UART_SetConfig+0x7fc>
 80055ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d037      	beq.n	8005662 <UART_SetConfig+0x7f6>
 80055f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d030      	beq.n	800565c <UART_SetConfig+0x7f0>
 80055fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	2b0a      	cmp	r3, #10
 8005600:	d00a      	beq.n	8005618 <UART_SetConfig+0x7ac>
 8005602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005606:	2b0b      	cmp	r3, #11
 8005608:	d103      	bne.n	8005612 <UART_SetConfig+0x7a6>
 800560a:	2380      	movs	r3, #128	; 0x80
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	2400      	movs	r4, #0
 8005610:	e041      	b.n	8005696 <UART_SetConfig+0x82a>
 8005612:	2301      	movs	r3, #1
 8005614:	2400      	movs	r4, #0
 8005616:	e03e      	b.n	8005696 <UART_SetConfig+0x82a>
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	2400      	movs	r4, #0
 800561c:	e03b      	b.n	8005696 <UART_SetConfig+0x82a>
 800561e:	46c0      	nop			; (mov r8, r8)
 8005620:	00000aaa 	.word	0x00000aaa
 8005624:	00000ccc 	.word	0x00000ccc
 8005628:	00001555 	.word	0x00001555
 800562c:	00f42400 	.word	0x00f42400
 8005630:	f4240000 	.word	0xf4240000
 8005634:	01e84800 	.word	0x01e84800
 8005638:	03d09000 	.word	0x03d09000
 800563c:	07a12000 	.word	0x07a12000
 8005640:	0f424000 	.word	0x0f424000
 8005644:	14585500 	.word	0x14585500
 8005648:	186a0000 	.word	0x186a0000
 800564c:	1e848000 	.word	0x1e848000
 8005650:	28b0aa00 	.word	0x28b0aa00
 8005654:	3d090000 	.word	0x3d090000
 8005658:	7a120000 	.word	0x7a120000
 800565c:	2340      	movs	r3, #64	; 0x40
 800565e:	2400      	movs	r4, #0
 8005660:	e019      	b.n	8005696 <UART_SetConfig+0x82a>
 8005662:	2320      	movs	r3, #32
 8005664:	2400      	movs	r4, #0
 8005666:	e016      	b.n	8005696 <UART_SetConfig+0x82a>
 8005668:	2310      	movs	r3, #16
 800566a:	2400      	movs	r4, #0
 800566c:	e013      	b.n	8005696 <UART_SetConfig+0x82a>
 800566e:	230c      	movs	r3, #12
 8005670:	2400      	movs	r4, #0
 8005672:	e010      	b.n	8005696 <UART_SetConfig+0x82a>
 8005674:	230a      	movs	r3, #10
 8005676:	2400      	movs	r4, #0
 8005678:	e00d      	b.n	8005696 <UART_SetConfig+0x82a>
 800567a:	2308      	movs	r3, #8
 800567c:	2400      	movs	r4, #0
 800567e:	e00a      	b.n	8005696 <UART_SetConfig+0x82a>
 8005680:	2306      	movs	r3, #6
 8005682:	2400      	movs	r4, #0
 8005684:	e007      	b.n	8005696 <UART_SetConfig+0x82a>
 8005686:	2304      	movs	r3, #4
 8005688:	2400      	movs	r4, #0
 800568a:	e004      	b.n	8005696 <UART_SetConfig+0x82a>
 800568c:	2302      	movs	r3, #2
 800568e:	2400      	movs	r4, #0
 8005690:	e001      	b.n	8005696 <UART_SetConfig+0x82a>
 8005692:	2301      	movs	r3, #1
 8005694:	2400      	movs	r4, #0
 8005696:	001a      	movs	r2, r3
 8005698:	0023      	movs	r3, r4
 800569a:	6a38      	ldr	r0, [r7, #32]
 800569c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800569e:	f7fa fef7 	bl	8000490 <__aeabi_uldivmod>
 80056a2:	0003      	movs	r3, r0
 80056a4:	000c      	movs	r4, r1
 80056a6:	0e1a      	lsrs	r2, r3, #24
 80056a8:	0221      	lsls	r1, r4, #8
 80056aa:	6579      	str	r1, [r7, #84]	; 0x54
 80056ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ae:	4311      	orrs	r1, r2
 80056b0:	6579      	str	r1, [r7, #84]	; 0x54
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	653b      	str	r3, [r7, #80]	; 0x50
 80056b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	61bb      	str	r3, [r7, #24]
 80056be:	2300      	movs	r3, #0
 80056c0:	61fb      	str	r3, [r7, #28]
 80056c2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80056c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056c6:	69bb      	ldr	r3, [r7, #24]
 80056c8:	69fc      	ldr	r4, [r7, #28]
 80056ca:	18c0      	adds	r0, r0, r3
 80056cc:	4161      	adcs	r1, r4
 80056ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f7fa fed8 	bl	8000490 <__aeabi_uldivmod>
 80056e0:	0003      	movs	r3, r0
 80056e2:	000c      	movs	r4, r1
 80056e4:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80056e6:	e07e      	b.n	80057e6 <UART_SetConfig+0x97a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d058      	beq.n	80057a2 <UART_SetConfig+0x936>
 80056f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d050      	beq.n	800579a <UART_SetConfig+0x92e>
 80056f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d048      	beq.n	8005792 <UART_SetConfig+0x926>
 8005700:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	2b03      	cmp	r3, #3
 8005706:	d041      	beq.n	800578c <UART_SetConfig+0x920>
 8005708:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570c:	2b04      	cmp	r3, #4
 800570e:	d039      	beq.n	8005784 <UART_SetConfig+0x918>
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	2b05      	cmp	r3, #5
 8005716:	d032      	beq.n	800577e <UART_SetConfig+0x912>
 8005718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	2b06      	cmp	r3, #6
 800571e:	d02b      	beq.n	8005778 <UART_SetConfig+0x90c>
 8005720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	2b07      	cmp	r3, #7
 8005726:	d023      	beq.n	8005770 <UART_SetConfig+0x904>
 8005728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	2b08      	cmp	r3, #8
 800572e:	d01b      	beq.n	8005768 <UART_SetConfig+0x8fc>
 8005730:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005734:	2b09      	cmp	r3, #9
 8005736:	d013      	beq.n	8005760 <UART_SetConfig+0x8f4>
 8005738:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b0a      	cmp	r3, #10
 800573e:	d00b      	beq.n	8005758 <UART_SetConfig+0x8ec>
 8005740:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	2b0b      	cmp	r3, #11
 8005746:	d103      	bne.n	8005750 <UART_SetConfig+0x8e4>
 8005748:	2380      	movs	r3, #128	; 0x80
 800574a:	021b      	lsls	r3, r3, #8
 800574c:	2400      	movs	r4, #0
 800574e:	e02b      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	041b      	lsls	r3, r3, #16
 8005754:	2400      	movs	r4, #0
 8005756:	e027      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	025b      	lsls	r3, r3, #9
 800575c:	2400      	movs	r4, #0
 800575e:	e023      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	2400      	movs	r4, #0
 8005766:	e01f      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005768:	2380      	movs	r3, #128	; 0x80
 800576a:	02db      	lsls	r3, r3, #11
 800576c:	2400      	movs	r4, #0
 800576e:	e01b      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	031b      	lsls	r3, r3, #12
 8005774:	2400      	movs	r4, #0
 8005776:	e017      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005778:	4bb7      	ldr	r3, [pc, #732]	; (8005a58 <UART_SetConfig+0xbec>)
 800577a:	2400      	movs	r4, #0
 800577c:	e014      	b.n	80057a8 <UART_SetConfig+0x93c>
 800577e:	4bb7      	ldr	r3, [pc, #732]	; (8005a5c <UART_SetConfig+0xbf0>)
 8005780:	2400      	movs	r4, #0
 8005782:	e011      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	035b      	lsls	r3, r3, #13
 8005788:	2400      	movs	r4, #0
 800578a:	e00d      	b.n	80057a8 <UART_SetConfig+0x93c>
 800578c:	4bb4      	ldr	r3, [pc, #720]	; (8005a60 <UART_SetConfig+0xbf4>)
 800578e:	2400      	movs	r4, #0
 8005790:	e00a      	b.n	80057a8 <UART_SetConfig+0x93c>
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	039b      	lsls	r3, r3, #14
 8005796:	2400      	movs	r4, #0
 8005798:	e006      	b.n	80057a8 <UART_SetConfig+0x93c>
 800579a:	2380      	movs	r3, #128	; 0x80
 800579c:	03db      	lsls	r3, r3, #15
 800579e:	2400      	movs	r4, #0
 80057a0:	e002      	b.n	80057a8 <UART_SetConfig+0x93c>
 80057a2:	2380      	movs	r3, #128	; 0x80
 80057a4:	041b      	lsls	r3, r3, #16
 80057a6:	2400      	movs	r4, #0
 80057a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057aa:	6852      	ldr	r2, [r2, #4]
 80057ac:	0852      	lsrs	r2, r2, #1
 80057ae:	60ba      	str	r2, [r7, #8]
 80057b0:	2200      	movs	r2, #0
 80057b2:	60fa      	str	r2, [r7, #12]
 80057b4:	68b8      	ldr	r0, [r7, #8]
 80057b6:	68f9      	ldr	r1, [r7, #12]
 80057b8:	18c0      	adds	r0, r0, r3
 80057ba:	4161      	adcs	r1, r4
 80057bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f7fa fe61 	bl	8000490 <__aeabi_uldivmod>
 80057ce:	0003      	movs	r3, r0
 80057d0:	000c      	movs	r4, r1
 80057d2:	677b      	str	r3, [r7, #116]	; 0x74
            break;
 80057d4:	e007      	b.n	80057e6 <UART_SetConfig+0x97a>
          default:
            ret = HAL_ERROR;
 80057d6:	231b      	movs	r3, #27
 80057d8:	2258      	movs	r2, #88	; 0x58
 80057da:	4694      	mov	ip, r2
 80057dc:	44bc      	add	ip, r7
 80057de:	4463      	add	r3, ip
 80057e0:	2201      	movs	r2, #1
 80057e2:	701a      	strb	r2, [r3, #0]
            break;
 80057e4:	46c0      	nop			; (mov r8, r8)
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057e8:	4a9e      	ldr	r2, [pc, #632]	; (8005a64 <UART_SetConfig+0xbf8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d909      	bls.n	8005802 <UART_SetConfig+0x996>
 80057ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f0:	4a9d      	ldr	r2, [pc, #628]	; (8005a68 <UART_SetConfig+0xbfc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d805      	bhi.n	8005802 <UART_SetConfig+0x996>
        {
          huart->Instance->BRR = usartdiv;
 80057f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	f000 fbc3 	bl	8005f88 <UART_SetConfig+0x111c>
        }
        else
        {
          ret = HAL_ERROR;
 8005802:	231b      	movs	r3, #27
 8005804:	2258      	movs	r2, #88	; 0x58
 8005806:	4694      	mov	ip, r2
 8005808:	44bc      	add	ip, r7
 800580a:	4463      	add	r3, ip
 800580c:	2201      	movs	r2, #1
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	f000 fbba 	bl	8005f88 <UART_SetConfig+0x111c>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005816:	69da      	ldr	r2, [r3, #28]
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	021b      	lsls	r3, r3, #8
 800581c:	429a      	cmp	r2, r3
 800581e:	d000      	beq.n	8005822 <UART_SetConfig+0x9b6>
 8005820:	e1e6      	b.n	8005bf0 <UART_SetConfig+0xd84>
  {
    switch (clocksource)
 8005822:	2323      	movs	r3, #35	; 0x23
 8005824:	2258      	movs	r2, #88	; 0x58
 8005826:	4694      	mov	ip, r2
 8005828:	44bc      	add	ip, r7
 800582a:	4463      	add	r3, ip
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d100      	bne.n	8005834 <UART_SetConfig+0x9c8>
 8005832:	e06c      	b.n	800590e <UART_SetConfig+0xaa2>
 8005834:	dc02      	bgt.n	800583c <UART_SetConfig+0x9d0>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d007      	beq.n	800584a <UART_SetConfig+0x9de>
 800583a:	e1a5      	b.n	8005b88 <UART_SetConfig+0xd1c>
 800583c:	2b04      	cmp	r3, #4
 800583e:	d100      	bne.n	8005842 <UART_SetConfig+0x9d6>
 8005840:	e0bc      	b.n	80059bc <UART_SetConfig+0xb50>
 8005842:	2b08      	cmp	r3, #8
 8005844:	d100      	bne.n	8005848 <UART_SetConfig+0x9dc>
 8005846:	e13e      	b.n	8005ac6 <UART_SetConfig+0xc5a>
 8005848:	e19e      	b.n	8005b88 <UART_SetConfig+0xd1c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584a:	f7fe fdd9 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 800584e:	0003      	movs	r3, r0
 8005850:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005856:	2b00      	cmp	r3, #0
 8005858:	d044      	beq.n	80058e4 <UART_SetConfig+0xa78>
 800585a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	2b01      	cmp	r3, #1
 8005860:	d03e      	beq.n	80058e0 <UART_SetConfig+0xa74>
 8005862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	2b02      	cmp	r3, #2
 8005868:	d038      	beq.n	80058dc <UART_SetConfig+0xa70>
 800586a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	2b03      	cmp	r3, #3
 8005870:	d032      	beq.n	80058d8 <UART_SetConfig+0xa6c>
 8005872:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	2b04      	cmp	r3, #4
 8005878:	d02c      	beq.n	80058d4 <UART_SetConfig+0xa68>
 800587a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587e:	2b05      	cmp	r3, #5
 8005880:	d026      	beq.n	80058d0 <UART_SetConfig+0xa64>
 8005882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005886:	2b06      	cmp	r3, #6
 8005888:	d020      	beq.n	80058cc <UART_SetConfig+0xa60>
 800588a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800588c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588e:	2b07      	cmp	r3, #7
 8005890:	d01a      	beq.n	80058c8 <UART_SetConfig+0xa5c>
 8005892:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005896:	2b08      	cmp	r3, #8
 8005898:	d014      	beq.n	80058c4 <UART_SetConfig+0xa58>
 800589a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2b09      	cmp	r3, #9
 80058a0:	d00e      	beq.n	80058c0 <UART_SetConfig+0xa54>
 80058a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a6:	2b0a      	cmp	r3, #10
 80058a8:	d008      	beq.n	80058bc <UART_SetConfig+0xa50>
 80058aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	d102      	bne.n	80058b8 <UART_SetConfig+0xa4c>
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	005b      	lsls	r3, r3, #1
 80058b6:	e016      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e014      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	e012      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058c0:	2340      	movs	r3, #64	; 0x40
 80058c2:	e010      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058c4:	2320      	movs	r3, #32
 80058c6:	e00e      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058c8:	2310      	movs	r3, #16
 80058ca:	e00c      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058cc:	230c      	movs	r3, #12
 80058ce:	e00a      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058d0:	230a      	movs	r3, #10
 80058d2:	e008      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058d4:	2308      	movs	r3, #8
 80058d6:	e006      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058d8:	2306      	movs	r3, #6
 80058da:	e004      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058dc:	2304      	movs	r3, #4
 80058de:	e002      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e000      	b.n	80058e6 <UART_SetConfig+0xa7a>
 80058e4:	2301      	movs	r3, #1
 80058e6:	0019      	movs	r1, r3
 80058e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80058ea:	f7fa fc1d 	bl	8000128 <__udivsi3>
 80058ee:	0003      	movs	r3, r0
 80058f0:	005a      	lsls	r2, r3, #1
 80058f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	085b      	lsrs	r3, r3, #1
 80058f8:	18d2      	adds	r2, r2, r3
 80058fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	0019      	movs	r1, r3
 8005900:	0010      	movs	r0, r2
 8005902:	f7fa fc11 	bl	8000128 <__udivsi3>
 8005906:	0003      	movs	r3, r0
 8005908:	b29b      	uxth	r3, r3
 800590a:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 800590c:	e144      	b.n	8005b98 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800590e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d043      	beq.n	800599e <UART_SetConfig+0xb32>
 8005916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2b01      	cmp	r3, #1
 800591c:	d03d      	beq.n	800599a <UART_SetConfig+0xb2e>
 800591e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	2b02      	cmp	r3, #2
 8005924:	d037      	beq.n	8005996 <UART_SetConfig+0xb2a>
 8005926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	2b03      	cmp	r3, #3
 800592c:	d031      	beq.n	8005992 <UART_SetConfig+0xb26>
 800592e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	2b04      	cmp	r3, #4
 8005934:	d02b      	beq.n	800598e <UART_SetConfig+0xb22>
 8005936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593a:	2b05      	cmp	r3, #5
 800593c:	d025      	beq.n	800598a <UART_SetConfig+0xb1e>
 800593e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005942:	2b06      	cmp	r3, #6
 8005944:	d01f      	beq.n	8005986 <UART_SetConfig+0xb1a>
 8005946:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2b07      	cmp	r3, #7
 800594c:	d019      	beq.n	8005982 <UART_SetConfig+0xb16>
 800594e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	2b08      	cmp	r3, #8
 8005954:	d013      	beq.n	800597e <UART_SetConfig+0xb12>
 8005956:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	2b09      	cmp	r3, #9
 800595c:	d00d      	beq.n	800597a <UART_SetConfig+0xb0e>
 800595e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	2b0a      	cmp	r3, #10
 8005964:	d007      	beq.n	8005976 <UART_SetConfig+0xb0a>
 8005966:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b0b      	cmp	r3, #11
 800596c:	d101      	bne.n	8005972 <UART_SetConfig+0xb06>
 800596e:	4b3f      	ldr	r3, [pc, #252]	; (8005a6c <UART_SetConfig+0xc00>)
 8005970:	e016      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005972:	4b3f      	ldr	r3, [pc, #252]	; (8005a70 <UART_SetConfig+0xc04>)
 8005974:	e014      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005976:	4b3f      	ldr	r3, [pc, #252]	; (8005a74 <UART_SetConfig+0xc08>)
 8005978:	e012      	b.n	80059a0 <UART_SetConfig+0xb34>
 800597a:	4b3f      	ldr	r3, [pc, #252]	; (8005a78 <UART_SetConfig+0xc0c>)
 800597c:	e010      	b.n	80059a0 <UART_SetConfig+0xb34>
 800597e:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <UART_SetConfig+0xc10>)
 8005980:	e00e      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005982:	4b3f      	ldr	r3, [pc, #252]	; (8005a80 <UART_SetConfig+0xc14>)
 8005984:	e00c      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005986:	4b3f      	ldr	r3, [pc, #252]	; (8005a84 <UART_SetConfig+0xc18>)
 8005988:	e00a      	b.n	80059a0 <UART_SetConfig+0xb34>
 800598a:	4b3f      	ldr	r3, [pc, #252]	; (8005a88 <UART_SetConfig+0xc1c>)
 800598c:	e008      	b.n	80059a0 <UART_SetConfig+0xb34>
 800598e:	4b3f      	ldr	r3, [pc, #252]	; (8005a8c <UART_SetConfig+0xc20>)
 8005990:	e006      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005992:	4b3f      	ldr	r3, [pc, #252]	; (8005a90 <UART_SetConfig+0xc24>)
 8005994:	e004      	b.n	80059a0 <UART_SetConfig+0xb34>
 8005996:	4b3f      	ldr	r3, [pc, #252]	; (8005a94 <UART_SetConfig+0xc28>)
 8005998:	e002      	b.n	80059a0 <UART_SetConfig+0xb34>
 800599a:	4b3f      	ldr	r3, [pc, #252]	; (8005a98 <UART_SetConfig+0xc2c>)
 800599c:	e000      	b.n	80059a0 <UART_SetConfig+0xb34>
 800599e:	4b34      	ldr	r3, [pc, #208]	; (8005a70 <UART_SetConfig+0xc04>)
 80059a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80059a2:	6852      	ldr	r2, [r2, #4]
 80059a4:	0852      	lsrs	r2, r2, #1
 80059a6:	189a      	adds	r2, r3, r2
 80059a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	0019      	movs	r1, r3
 80059ae:	0010      	movs	r0, r2
 80059b0:	f7fa fbba 	bl	8000128 <__udivsi3>
 80059b4:	0003      	movs	r3, r0
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 80059ba:	e0ed      	b.n	8005b98 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059bc:	f7fe fc94 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 80059c0:	0003      	movs	r3, r0
 80059c2:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d100      	bne.n	80059ce <UART_SetConfig+0xb62>
 80059cc:	e066      	b.n	8005a9c <UART_SetConfig+0xc30>
 80059ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d03e      	beq.n	8005a54 <UART_SetConfig+0xbe8>
 80059d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d038      	beq.n	8005a50 <UART_SetConfig+0xbe4>
 80059de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	2b03      	cmp	r3, #3
 80059e4:	d032      	beq.n	8005a4c <UART_SetConfig+0xbe0>
 80059e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d02c      	beq.n	8005a48 <UART_SetConfig+0xbdc>
 80059ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2b05      	cmp	r3, #5
 80059f4:	d026      	beq.n	8005a44 <UART_SetConfig+0xbd8>
 80059f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fa:	2b06      	cmp	r3, #6
 80059fc:	d020      	beq.n	8005a40 <UART_SetConfig+0xbd4>
 80059fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	2b07      	cmp	r3, #7
 8005a04:	d01a      	beq.n	8005a3c <UART_SetConfig+0xbd0>
 8005a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0a:	2b08      	cmp	r3, #8
 8005a0c:	d014      	beq.n	8005a38 <UART_SetConfig+0xbcc>
 8005a0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a12:	2b09      	cmp	r3, #9
 8005a14:	d00e      	beq.n	8005a34 <UART_SetConfig+0xbc8>
 8005a16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1a:	2b0a      	cmp	r3, #10
 8005a1c:	d008      	beq.n	8005a30 <UART_SetConfig+0xbc4>
 8005a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a22:	2b0b      	cmp	r3, #11
 8005a24:	d102      	bne.n	8005a2c <UART_SetConfig+0xbc0>
 8005a26:	2380      	movs	r3, #128	; 0x80
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	e038      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e036      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	e034      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	e032      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a38:	2320      	movs	r3, #32
 8005a3a:	e030      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	e02e      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a40:	230c      	movs	r3, #12
 8005a42:	e02c      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a44:	230a      	movs	r3, #10
 8005a46:	e02a      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a48:	2308      	movs	r3, #8
 8005a4a:	e028      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a4c:	2306      	movs	r3, #6
 8005a4e:	e026      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a50:	2304      	movs	r3, #4
 8005a52:	e024      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e022      	b.n	8005a9e <UART_SetConfig+0xc32>
 8005a58:	000aaa00 	.word	0x000aaa00
 8005a5c:	000ccc00 	.word	0x000ccc00
 8005a60:	00155500 	.word	0x00155500
 8005a64:	000002ff 	.word	0x000002ff
 8005a68:	000fffff 	.word	0x000fffff
 8005a6c:	0001e848 	.word	0x0001e848
 8005a70:	01e84800 	.word	0x01e84800
 8005a74:	0003d090 	.word	0x0003d090
 8005a78:	0007a120 	.word	0x0007a120
 8005a7c:	000f4240 	.word	0x000f4240
 8005a80:	001e8480 	.word	0x001e8480
 8005a84:	0028b0aa 	.word	0x0028b0aa
 8005a88:	0030d400 	.word	0x0030d400
 8005a8c:	003d0900 	.word	0x003d0900
 8005a90:	00516154 	.word	0x00516154
 8005a94:	007a1200 	.word	0x007a1200
 8005a98:	00f42400 	.word	0x00f42400
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	0019      	movs	r1, r3
 8005aa0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005aa2:	f7fa fb41 	bl	8000128 <__udivsi3>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	005a      	lsls	r2, r3, #1
 8005aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	085b      	lsrs	r3, r3, #1
 8005ab0:	18d2      	adds	r2, r2, r3
 8005ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	0019      	movs	r1, r3
 8005ab8:	0010      	movs	r0, r2
 8005aba:	f7fa fb35 	bl	8000128 <__udivsi3>
 8005abe:	0003      	movs	r3, r0
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005ac4:	e068      	b.n	8005b98 <UART_SetConfig+0xd2c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d04c      	beq.n	8005b68 <UART_SetConfig+0xcfc>
 8005ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d045      	beq.n	8005b62 <UART_SetConfig+0xcf6>
 8005ad6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d03e      	beq.n	8005b5c <UART_SetConfig+0xcf0>
 8005ade:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d038      	beq.n	8005b58 <UART_SetConfig+0xcec>
 8005ae6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d031      	beq.n	8005b52 <UART_SetConfig+0xce6>
 8005aee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af2:	2b05      	cmp	r3, #5
 8005af4:	d02b      	beq.n	8005b4e <UART_SetConfig+0xce2>
 8005af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d025      	beq.n	8005b4a <UART_SetConfig+0xcde>
 8005afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	d01e      	beq.n	8005b44 <UART_SetConfig+0xcd8>
 8005b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0a:	2b08      	cmp	r3, #8
 8005b0c:	d017      	beq.n	8005b3e <UART_SetConfig+0xcd2>
 8005b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	2b09      	cmp	r3, #9
 8005b14:	d010      	beq.n	8005b38 <UART_SetConfig+0xccc>
 8005b16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	2b0a      	cmp	r3, #10
 8005b1c:	d009      	beq.n	8005b32 <UART_SetConfig+0xcc6>
 8005b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	2b0b      	cmp	r3, #11
 8005b24:	d102      	bne.n	8005b2c <UART_SetConfig+0xcc0>
 8005b26:	2380      	movs	r3, #128	; 0x80
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	e01f      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b2c:	2380      	movs	r3, #128	; 0x80
 8005b2e:	025b      	lsls	r3, r3, #9
 8005b30:	e01c      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b32:	2380      	movs	r3, #128	; 0x80
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	e019      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b38:	2380      	movs	r3, #128	; 0x80
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	e016      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b3e:	2380      	movs	r3, #128	; 0x80
 8005b40:	011b      	lsls	r3, r3, #4
 8005b42:	e013      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b44:	2380      	movs	r3, #128	; 0x80
 8005b46:	015b      	lsls	r3, r3, #5
 8005b48:	e010      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b4a:	4bb7      	ldr	r3, [pc, #732]	; (8005e28 <UART_SetConfig+0xfbc>)
 8005b4c:	e00e      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b4e:	4bb7      	ldr	r3, [pc, #732]	; (8005e2c <UART_SetConfig+0xfc0>)
 8005b50:	e00c      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b52:	2380      	movs	r3, #128	; 0x80
 8005b54:	019b      	lsls	r3, r3, #6
 8005b56:	e009      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b58:	4bb5      	ldr	r3, [pc, #724]	; (8005e30 <UART_SetConfig+0xfc4>)
 8005b5a:	e007      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	01db      	lsls	r3, r3, #7
 8005b60:	e004      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b62:	2380      	movs	r3, #128	; 0x80
 8005b64:	021b      	lsls	r3, r3, #8
 8005b66:	e001      	b.n	8005b6c <UART_SetConfig+0xd00>
 8005b68:	2380      	movs	r3, #128	; 0x80
 8005b6a:	025b      	lsls	r3, r3, #9
 8005b6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b6e:	6852      	ldr	r2, [r2, #4]
 8005b70:	0852      	lsrs	r2, r2, #1
 8005b72:	189a      	adds	r2, r3, r2
 8005b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	0019      	movs	r1, r3
 8005b7a:	0010      	movs	r0, r2
 8005b7c:	f7fa fad4 	bl	8000128 <__udivsi3>
 8005b80:	0003      	movs	r3, r0
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005b86:	e007      	b.n	8005b98 <UART_SetConfig+0xd2c>
      default:
        ret = HAL_ERROR;
 8005b88:	231b      	movs	r3, #27
 8005b8a:	2258      	movs	r2, #88	; 0x58
 8005b8c:	4694      	mov	ip, r2
 8005b8e:	44bc      	add	ip, r7
 8005b90:	4463      	add	r3, ip
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
        break;
 8005b96:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b9a:	2b0f      	cmp	r3, #15
 8005b9c:	d920      	bls.n	8005be0 <UART_SetConfig+0xd74>
 8005b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba0:	4aa4      	ldr	r2, [pc, #656]	; (8005e34 <UART_SetConfig+0xfc8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d81c      	bhi.n	8005be0 <UART_SetConfig+0xd74>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	200e      	movs	r0, #14
 8005bac:	2458      	movs	r4, #88	; 0x58
 8005bae:	193b      	adds	r3, r7, r4
 8005bb0:	181b      	adds	r3, r3, r0
 8005bb2:	210f      	movs	r1, #15
 8005bb4:	438a      	bics	r2, r1
 8005bb6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	2207      	movs	r2, #7
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	b299      	uxth	r1, r3
 8005bc4:	193b      	adds	r3, r7, r4
 8005bc6:	181b      	adds	r3, r3, r0
 8005bc8:	193a      	adds	r2, r7, r4
 8005bca:	1812      	adds	r2, r2, r0
 8005bcc:	8812      	ldrh	r2, [r2, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005bd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	193a      	adds	r2, r7, r4
 8005bd8:	1812      	adds	r2, r2, r0
 8005bda:	8812      	ldrh	r2, [r2, #0]
 8005bdc:	60da      	str	r2, [r3, #12]
 8005bde:	e1d3      	b.n	8005f88 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8005be0:	231b      	movs	r3, #27
 8005be2:	2258      	movs	r2, #88	; 0x58
 8005be4:	4694      	mov	ip, r2
 8005be6:	44bc      	add	ip, r7
 8005be8:	4463      	add	r3, ip
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e1cb      	b.n	8005f88 <UART_SetConfig+0x111c>
    }
  }
  else
  {
    switch (clocksource)
 8005bf0:	2323      	movs	r3, #35	; 0x23
 8005bf2:	2258      	movs	r2, #88	; 0x58
 8005bf4:	4694      	mov	ip, r2
 8005bf6:	44bc      	add	ip, r7
 8005bf8:	4463      	add	r3, ip
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d100      	bne.n	8005c02 <UART_SetConfig+0xd96>
 8005c00:	e06c      	b.n	8005cdc <UART_SetConfig+0xe70>
 8005c02:	dc02      	bgt.n	8005c0a <UART_SetConfig+0xd9e>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d007      	beq.n	8005c18 <UART_SetConfig+0xdac>
 8005c08:	e1a3      	b.n	8005f52 <UART_SetConfig+0x10e6>
 8005c0a:	2b04      	cmp	r3, #4
 8005c0c:	d100      	bne.n	8005c10 <UART_SetConfig+0xda4>
 8005c0e:	e0bc      	b.n	8005d8a <UART_SetConfig+0xf1e>
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d100      	bne.n	8005c16 <UART_SetConfig+0xdaa>
 8005c14:	e13d      	b.n	8005e92 <UART_SetConfig+0x1026>
 8005c16:	e19c      	b.n	8005f52 <UART_SetConfig+0x10e6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c18:	f7fe fbf2 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	0003      	movs	r3, r0
 8005c1e:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d044      	beq.n	8005cb2 <UART_SetConfig+0xe46>
 8005c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d03e      	beq.n	8005cae <UART_SetConfig+0xe42>
 8005c30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d038      	beq.n	8005caa <UART_SetConfig+0xe3e>
 8005c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d032      	beq.n	8005ca6 <UART_SetConfig+0xe3a>
 8005c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d02c      	beq.n	8005ca2 <UART_SetConfig+0xe36>
 8005c48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4c:	2b05      	cmp	r3, #5
 8005c4e:	d026      	beq.n	8005c9e <UART_SetConfig+0xe32>
 8005c50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b06      	cmp	r3, #6
 8005c56:	d020      	beq.n	8005c9a <UART_SetConfig+0xe2e>
 8005c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5c:	2b07      	cmp	r3, #7
 8005c5e:	d01a      	beq.n	8005c96 <UART_SetConfig+0xe2a>
 8005c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c64:	2b08      	cmp	r3, #8
 8005c66:	d014      	beq.n	8005c92 <UART_SetConfig+0xe26>
 8005c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6c:	2b09      	cmp	r3, #9
 8005c6e:	d00e      	beq.n	8005c8e <UART_SetConfig+0xe22>
 8005c70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c74:	2b0a      	cmp	r3, #10
 8005c76:	d008      	beq.n	8005c8a <UART_SetConfig+0xe1e>
 8005c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c7c:	2b0b      	cmp	r3, #11
 8005c7e:	d102      	bne.n	8005c86 <UART_SetConfig+0xe1a>
 8005c80:	2380      	movs	r3, #128	; 0x80
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	e016      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e014      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c8a:	2380      	movs	r3, #128	; 0x80
 8005c8c:	e012      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c8e:	2340      	movs	r3, #64	; 0x40
 8005c90:	e010      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c92:	2320      	movs	r3, #32
 8005c94:	e00e      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c96:	2310      	movs	r3, #16
 8005c98:	e00c      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	e00a      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005c9e:	230a      	movs	r3, #10
 8005ca0:	e008      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005ca2:	2308      	movs	r3, #8
 8005ca4:	e006      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005ca6:	2306      	movs	r3, #6
 8005ca8:	e004      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005caa:	2304      	movs	r3, #4
 8005cac:	e002      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	e000      	b.n	8005cb4 <UART_SetConfig+0xe48>
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	0019      	movs	r1, r3
 8005cb6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005cb8:	f7fa fa36 	bl	8000128 <__udivsi3>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	001a      	movs	r2, r3
 8005cc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	18d2      	adds	r2, r2, r3
 8005cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	0019      	movs	r1, r3
 8005cce:	0010      	movs	r0, r2
 8005cd0:	f7fa fa2a 	bl	8000128 <__udivsi3>
 8005cd4:	0003      	movs	r3, r0
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005cda:	e142      	b.n	8005f62 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d043      	beq.n	8005d6c <UART_SetConfig+0xf00>
 8005ce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d03d      	beq.n	8005d68 <UART_SetConfig+0xefc>
 8005cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d037      	beq.n	8005d64 <UART_SetConfig+0xef8>
 8005cf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	d031      	beq.n	8005d60 <UART_SetConfig+0xef4>
 8005cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b04      	cmp	r3, #4
 8005d02:	d02b      	beq.n	8005d5c <UART_SetConfig+0xef0>
 8005d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	d025      	beq.n	8005d58 <UART_SetConfig+0xeec>
 8005d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d10:	2b06      	cmp	r3, #6
 8005d12:	d01f      	beq.n	8005d54 <UART_SetConfig+0xee8>
 8005d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b07      	cmp	r3, #7
 8005d1a:	d019      	beq.n	8005d50 <UART_SetConfig+0xee4>
 8005d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d013      	beq.n	8005d4c <UART_SetConfig+0xee0>
 8005d24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	2b09      	cmp	r3, #9
 8005d2a:	d00d      	beq.n	8005d48 <UART_SetConfig+0xedc>
 8005d2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	2b0a      	cmp	r3, #10
 8005d32:	d007      	beq.n	8005d44 <UART_SetConfig+0xed8>
 8005d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	2b0b      	cmp	r3, #11
 8005d3a:	d101      	bne.n	8005d40 <UART_SetConfig+0xed4>
 8005d3c:	4b3e      	ldr	r3, [pc, #248]	; (8005e38 <UART_SetConfig+0xfcc>)
 8005d3e:	e016      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d40:	4b3e      	ldr	r3, [pc, #248]	; (8005e3c <UART_SetConfig+0xfd0>)
 8005d42:	e014      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d44:	4b3e      	ldr	r3, [pc, #248]	; (8005e40 <UART_SetConfig+0xfd4>)
 8005d46:	e012      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d48:	4b3e      	ldr	r3, [pc, #248]	; (8005e44 <UART_SetConfig+0xfd8>)
 8005d4a:	e010      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <UART_SetConfig+0xfdc>)
 8005d4e:	e00e      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d50:	4b3e      	ldr	r3, [pc, #248]	; (8005e4c <UART_SetConfig+0xfe0>)
 8005d52:	e00c      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d54:	4b3e      	ldr	r3, [pc, #248]	; (8005e50 <UART_SetConfig+0xfe4>)
 8005d56:	e00a      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d58:	4b3e      	ldr	r3, [pc, #248]	; (8005e54 <UART_SetConfig+0xfe8>)
 8005d5a:	e008      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d5c:	4b3e      	ldr	r3, [pc, #248]	; (8005e58 <UART_SetConfig+0xfec>)
 8005d5e:	e006      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d60:	4b3e      	ldr	r3, [pc, #248]	; (8005e5c <UART_SetConfig+0xff0>)
 8005d62:	e004      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d64:	4b3e      	ldr	r3, [pc, #248]	; (8005e60 <UART_SetConfig+0xff4>)
 8005d66:	e002      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d68:	4b3e      	ldr	r3, [pc, #248]	; (8005e64 <UART_SetConfig+0xff8>)
 8005d6a:	e000      	b.n	8005d6e <UART_SetConfig+0xf02>
 8005d6c:	4b33      	ldr	r3, [pc, #204]	; (8005e3c <UART_SetConfig+0xfd0>)
 8005d6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005d70:	6852      	ldr	r2, [r2, #4]
 8005d72:	0852      	lsrs	r2, r2, #1
 8005d74:	189a      	adds	r2, r3, r2
 8005d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	0010      	movs	r0, r2
 8005d7e:	f7fa f9d3 	bl	8000128 <__udivsi3>
 8005d82:	0003      	movs	r3, r0
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005d88:	e0eb      	b.n	8005f62 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d8a:	f7fe faad 	bl	80042e8 <HAL_RCC_GetSysClockFreq>
 8005d8e:	0003      	movs	r3, r0
 8005d90:	66bb      	str	r3, [r7, #104]	; 0x68
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d100      	bne.n	8005d9c <UART_SetConfig+0xf30>
 8005d9a:	e065      	b.n	8005e68 <UART_SetConfig+0xffc>
 8005d9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d03e      	beq.n	8005e22 <UART_SetConfig+0xfb6>
 8005da4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d038      	beq.n	8005e1e <UART_SetConfig+0xfb2>
 8005dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d032      	beq.n	8005e1a <UART_SetConfig+0xfae>
 8005db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d02c      	beq.n	8005e16 <UART_SetConfig+0xfaa>
 8005dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	2b05      	cmp	r3, #5
 8005dc2:	d026      	beq.n	8005e12 <UART_SetConfig+0xfa6>
 8005dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc8:	2b06      	cmp	r3, #6
 8005dca:	d020      	beq.n	8005e0e <UART_SetConfig+0xfa2>
 8005dcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	2b07      	cmp	r3, #7
 8005dd2:	d01a      	beq.n	8005e0a <UART_SetConfig+0xf9e>
 8005dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d014      	beq.n	8005e06 <UART_SetConfig+0xf9a>
 8005ddc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de0:	2b09      	cmp	r3, #9
 8005de2:	d00e      	beq.n	8005e02 <UART_SetConfig+0xf96>
 8005de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	2b0a      	cmp	r3, #10
 8005dea:	d008      	beq.n	8005dfe <UART_SetConfig+0xf92>
 8005dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df0:	2b0b      	cmp	r3, #11
 8005df2:	d102      	bne.n	8005dfa <UART_SetConfig+0xf8e>
 8005df4:	2380      	movs	r3, #128	; 0x80
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	e037      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e035      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005dfe:	2380      	movs	r3, #128	; 0x80
 8005e00:	e033      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e02:	2340      	movs	r3, #64	; 0x40
 8005e04:	e031      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e06:	2320      	movs	r3, #32
 8005e08:	e02f      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e0a:	2310      	movs	r3, #16
 8005e0c:	e02d      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e0e:	230c      	movs	r3, #12
 8005e10:	e02b      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e12:	230a      	movs	r3, #10
 8005e14:	e029      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e16:	2308      	movs	r3, #8
 8005e18:	e027      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e1a:	2306      	movs	r3, #6
 8005e1c:	e025      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e1e:	2304      	movs	r3, #4
 8005e20:	e023      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e22:	2302      	movs	r3, #2
 8005e24:	e021      	b.n	8005e6a <UART_SetConfig+0xffe>
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	00001554 	.word	0x00001554
 8005e2c:	00001998 	.word	0x00001998
 8005e30:	00002aaa 	.word	0x00002aaa
 8005e34:	0000ffff 	.word	0x0000ffff
 8005e38:	0000f424 	.word	0x0000f424
 8005e3c:	00f42400 	.word	0x00f42400
 8005e40:	0001e848 	.word	0x0001e848
 8005e44:	0003d090 	.word	0x0003d090
 8005e48:	0007a120 	.word	0x0007a120
 8005e4c:	000f4240 	.word	0x000f4240
 8005e50:	00145855 	.word	0x00145855
 8005e54:	00186a00 	.word	0x00186a00
 8005e58:	001e8480 	.word	0x001e8480
 8005e5c:	0028b0aa 	.word	0x0028b0aa
 8005e60:	003d0900 	.word	0x003d0900
 8005e64:	007a1200 	.word	0x007a1200
 8005e68:	2301      	movs	r3, #1
 8005e6a:	0019      	movs	r1, r3
 8005e6c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8005e6e:	f7fa f95b 	bl	8000128 <__udivsi3>
 8005e72:	0003      	movs	r3, r0
 8005e74:	001a      	movs	r2, r3
 8005e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	18d2      	adds	r2, r2, r3
 8005e7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	0019      	movs	r1, r3
 8005e84:	0010      	movs	r0, r2
 8005e86:	f7fa f94f 	bl	8000128 <__udivsi3>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005e90:	e067      	b.n	8005f62 <UART_SetConfig+0x10f6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04b      	beq.n	8005f32 <UART_SetConfig+0x10c6>
 8005e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d044      	beq.n	8005f2c <UART_SetConfig+0x10c0>
 8005ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d03d      	beq.n	8005f26 <UART_SetConfig+0x10ba>
 8005eaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d037      	beq.n	8005f22 <UART_SetConfig+0x10b6>
 8005eb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d030      	beq.n	8005f1c <UART_SetConfig+0x10b0>
 8005eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebe:	2b05      	cmp	r3, #5
 8005ec0:	d02a      	beq.n	8005f18 <UART_SetConfig+0x10ac>
 8005ec2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	2b06      	cmp	r3, #6
 8005ec8:	d024      	beq.n	8005f14 <UART_SetConfig+0x10a8>
 8005eca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ece:	2b07      	cmp	r3, #7
 8005ed0:	d01d      	beq.n	8005f0e <UART_SetConfig+0x10a2>
 8005ed2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	2b08      	cmp	r3, #8
 8005ed8:	d016      	beq.n	8005f08 <UART_SetConfig+0x109c>
 8005eda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b09      	cmp	r3, #9
 8005ee0:	d00f      	beq.n	8005f02 <UART_SetConfig+0x1096>
 8005ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	2b0a      	cmp	r3, #10
 8005ee8:	d008      	beq.n	8005efc <UART_SetConfig+0x1090>
 8005eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b0b      	cmp	r3, #11
 8005ef0:	d101      	bne.n	8005ef6 <UART_SetConfig+0x108a>
 8005ef2:	2380      	movs	r3, #128	; 0x80
 8005ef4:	e01f      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005ef6:	2380      	movs	r3, #128	; 0x80
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	e01c      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	e019      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f02:	2380      	movs	r3, #128	; 0x80
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	e016      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	e013      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	011b      	lsls	r3, r3, #4
 8005f12:	e010      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <UART_SetConfig+0x114c>)
 8005f16:	e00e      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f18:	4b28      	ldr	r3, [pc, #160]	; (8005fbc <UART_SetConfig+0x1150>)
 8005f1a:	e00c      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f1c:	2380      	movs	r3, #128	; 0x80
 8005f1e:	015b      	lsls	r3, r3, #5
 8005f20:	e009      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f22:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <UART_SetConfig+0x1154>)
 8005f24:	e007      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f26:	2380      	movs	r3, #128	; 0x80
 8005f28:	019b      	lsls	r3, r3, #6
 8005f2a:	e004      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f2c:	2380      	movs	r3, #128	; 0x80
 8005f2e:	01db      	lsls	r3, r3, #7
 8005f30:	e001      	b.n	8005f36 <UART_SetConfig+0x10ca>
 8005f32:	2380      	movs	r3, #128	; 0x80
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f38:	6852      	ldr	r2, [r2, #4]
 8005f3a:	0852      	lsrs	r2, r2, #1
 8005f3c:	189a      	adds	r2, r3, r2
 8005f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	0019      	movs	r1, r3
 8005f44:	0010      	movs	r0, r2
 8005f46:	f7fa f8ef 	bl	8000128 <__udivsi3>
 8005f4a:	0003      	movs	r3, r0
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	677b      	str	r3, [r7, #116]	; 0x74
        break;
 8005f50:	e007      	b.n	8005f62 <UART_SetConfig+0x10f6>
      default:
        ret = HAL_ERROR;
 8005f52:	231b      	movs	r3, #27
 8005f54:	2258      	movs	r2, #88	; 0x58
 8005f56:	4694      	mov	ip, r2
 8005f58:	44bc      	add	ip, r7
 8005f5a:	4463      	add	r3, ip
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
        break;
 8005f60:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f64:	2b0f      	cmp	r3, #15
 8005f66:	d908      	bls.n	8005f7a <UART_SetConfig+0x110e>
 8005f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6a:	4a16      	ldr	r2, [pc, #88]	; (8005fc4 <UART_SetConfig+0x1158>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d804      	bhi.n	8005f7a <UART_SetConfig+0x110e>
    {
      huart->Instance->BRR = usartdiv;
 8005f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005f76:	60da      	str	r2, [r3, #12]
 8005f78:	e006      	b.n	8005f88 <UART_SetConfig+0x111c>
    }
    else
    {
      ret = HAL_ERROR;
 8005f7a:	231b      	movs	r3, #27
 8005f7c:	2258      	movs	r2, #88	; 0x58
 8005f7e:	4694      	mov	ip, r2
 8005f80:	44bc      	add	ip, r7
 8005f82:	4463      	add	r3, ip
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8a:	226a      	movs	r2, #106	; 0x6a
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8005f90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f92:	2268      	movs	r2, #104	; 0x68
 8005f94:	2101      	movs	r1, #1
 8005f96:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8005f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005fa4:	231b      	movs	r3, #27
 8005fa6:	2258      	movs	r2, #88	; 0x58
 8005fa8:	4694      	mov	ip, r2
 8005faa:	44bc      	add	ip, r7
 8005fac:	4463      	add	r3, ip
 8005fae:	781b      	ldrb	r3, [r3, #0]
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b021      	add	sp, #132	; 0x84
 8005fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fb8:	00000aaa 	.word	0x00000aaa
 8005fbc:	00000ccc 	.word	0x00000ccc
 8005fc0:	00001555 	.word	0x00001555
 8005fc4:	0000ffff 	.word	0x0000ffff

08005fc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	d00b      	beq.n	8005ff2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4a4a      	ldr	r2, [pc, #296]	; (800610c <UART_AdvFeatureConfig+0x144>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	0019      	movs	r1, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	d00b      	beq.n	8006014 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	4a43      	ldr	r2, [pc, #268]	; (8006110 <UART_AdvFeatureConfig+0x148>)
 8006004:	4013      	ands	r3, r2
 8006006:	0019      	movs	r1, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006018:	2204      	movs	r2, #4
 800601a:	4013      	ands	r3, r2
 800601c:	d00b      	beq.n	8006036 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <UART_AdvFeatureConfig+0x14c>)
 8006026:	4013      	ands	r3, r2
 8006028:	0019      	movs	r1, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603a:	2208      	movs	r2, #8
 800603c:	4013      	ands	r3, r2
 800603e:	d00b      	beq.n	8006058 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	4a34      	ldr	r2, [pc, #208]	; (8006118 <UART_AdvFeatureConfig+0x150>)
 8006048:	4013      	ands	r3, r2
 800604a:	0019      	movs	r1, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	2210      	movs	r2, #16
 800605e:	4013      	ands	r3, r2
 8006060:	d00b      	beq.n	800607a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	4a2c      	ldr	r2, [pc, #176]	; (800611c <UART_AdvFeatureConfig+0x154>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	2220      	movs	r2, #32
 8006080:	4013      	ands	r3, r2
 8006082:	d00b      	beq.n	800609c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	4a25      	ldr	r2, [pc, #148]	; (8006120 <UART_AdvFeatureConfig+0x158>)
 800608c:	4013      	ands	r3, r2
 800608e:	0019      	movs	r1, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	430a      	orrs	r2, r1
 800609a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a0:	2240      	movs	r2, #64	; 0x40
 80060a2:	4013      	ands	r3, r2
 80060a4:	d01d      	beq.n	80060e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	4a1d      	ldr	r2, [pc, #116]	; (8006124 <UART_AdvFeatureConfig+0x15c>)
 80060ae:	4013      	ands	r3, r2
 80060b0:	0019      	movs	r1, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060c2:	2380      	movs	r3, #128	; 0x80
 80060c4:	035b      	lsls	r3, r3, #13
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d10b      	bne.n	80060e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	4a15      	ldr	r2, [pc, #84]	; (8006128 <UART_AdvFeatureConfig+0x160>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	0019      	movs	r1, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	430a      	orrs	r2, r1
 80060e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	2280      	movs	r2, #128	; 0x80
 80060e8:	4013      	ands	r3, r2
 80060ea:	d00b      	beq.n	8006104 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	4a0e      	ldr	r2, [pc, #56]	; (800612c <UART_AdvFeatureConfig+0x164>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	0019      	movs	r1, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	605a      	str	r2, [r3, #4]
  }
}
 8006104:	46c0      	nop			; (mov r8, r8)
 8006106:	46bd      	mov	sp, r7
 8006108:	b002      	add	sp, #8
 800610a:	bd80      	pop	{r7, pc}
 800610c:	fffdffff 	.word	0xfffdffff
 8006110:	fffeffff 	.word	0xfffeffff
 8006114:	fffbffff 	.word	0xfffbffff
 8006118:	ffff7fff 	.word	0xffff7fff
 800611c:	ffffefff 	.word	0xffffefff
 8006120:	ffffdfff 	.word	0xffffdfff
 8006124:	ffefffff 	.word	0xffefffff
 8006128:	ff9fffff 	.word	0xff9fffff
 800612c:	fff7ffff 	.word	0xfff7ffff

08006130 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af02      	add	r7, sp, #8
 8006136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2288      	movs	r2, #136	; 0x88
 800613c:	2100      	movs	r1, #0
 800613e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006140:	f7fc f8cc 	bl	80022dc <HAL_GetTick>
 8006144:	0003      	movs	r3, r0
 8006146:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2208      	movs	r2, #8
 8006150:	4013      	ands	r3, r2
 8006152:	2b08      	cmp	r3, #8
 8006154:	d10d      	bne.n	8006172 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	2380      	movs	r3, #128	; 0x80
 800615a:	0399      	lsls	r1, r3, #14
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	4b18      	ldr	r3, [pc, #96]	; (80061c0 <UART_CheckIdleState+0x90>)
 8006160:	9300      	str	r3, [sp, #0]
 8006162:	0013      	movs	r3, r2
 8006164:	2200      	movs	r2, #0
 8006166:	f000 f82d 	bl	80061c4 <UART_WaitOnFlagUntilTimeout>
 800616a:	1e03      	subs	r3, r0, #0
 800616c:	d001      	beq.n	8006172 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e021      	b.n	80061b6 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2204      	movs	r2, #4
 800617a:	4013      	ands	r3, r2
 800617c:	2b04      	cmp	r3, #4
 800617e:	d10d      	bne.n	800619c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	2380      	movs	r3, #128	; 0x80
 8006184:	03d9      	lsls	r1, r3, #15
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4b0d      	ldr	r3, [pc, #52]	; (80061c0 <UART_CheckIdleState+0x90>)
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	0013      	movs	r3, r2
 800618e:	2200      	movs	r2, #0
 8006190:	f000 f818 	bl	80061c4 <UART_WaitOnFlagUntilTimeout>
 8006194:	1e03      	subs	r3, r0, #0
 8006196:	d001      	beq.n	800619c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e00c      	b.n	80061b6 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2280      	movs	r2, #128	; 0x80
 80061a0:	2120      	movs	r1, #32
 80061a2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2284      	movs	r2, #132	; 0x84
 80061a8:	2120      	movs	r1, #32
 80061aa:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	227c      	movs	r2, #124	; 0x7c
 80061b0:	2100      	movs	r1, #0
 80061b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	01ffffff 	.word	0x01ffffff

080061c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	1dfb      	adds	r3, r7, #7
 80061d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061d4:	e02b      	b.n	800622e <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	3301      	adds	r3, #1
 80061da:	d028      	beq.n	800622e <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061dc:	f7fc f87e 	bl	80022dc <HAL_GetTick>
 80061e0:	0002      	movs	r2, r0
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80061ec:	69bb      	ldr	r3, [r7, #24]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d11d      	bne.n	800622e <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4916      	ldr	r1, [pc, #88]	; (8006258 <UART_WaitOnFlagUntilTimeout+0x94>)
 80061fe:	400a      	ands	r2, r1
 8006200:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2101      	movs	r1, #1
 800620e:	438a      	bics	r2, r1
 8006210:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2280      	movs	r2, #128	; 0x80
 8006216:	2120      	movs	r1, #32
 8006218:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2284      	movs	r2, #132	; 0x84
 800621e:	2120      	movs	r1, #32
 8006220:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	227c      	movs	r2, #124	; 0x7c
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e00f      	b.n	800624e <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	4013      	ands	r3, r2
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	425a      	negs	r2, r3
 800623e:	4153      	adcs	r3, r2
 8006240:	b2db      	uxtb	r3, r3
 8006242:	001a      	movs	r2, r3
 8006244:	1dfb      	adds	r3, r7, #7
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	429a      	cmp	r2, r3
 800624a:	d0c4      	beq.n	80061d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	0018      	movs	r0, r3
 8006250:	46bd      	mov	sp, r7
 8006252:	b004      	add	sp, #16
 8006254:	bd80      	pop	{r7, pc}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	fffffe5f 	.word	0xfffffe5f

0800625c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	490b      	ldr	r1, [pc, #44]	; (800629c <UART_EndRxTransfer+0x40>)
 8006270:	400a      	ands	r2, r1
 8006272:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4908      	ldr	r1, [pc, #32]	; (80062a0 <UART_EndRxTransfer+0x44>)
 8006280:	400a      	ands	r2, r1
 8006282:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2284      	movs	r2, #132	; 0x84
 8006288:	2120      	movs	r1, #32
 800628a:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	46bd      	mov	sp, r7
 8006296:	b002      	add	sp, #8
 8006298:	bd80      	pop	{r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	fffffedf 	.word	0xfffffedf
 80062a0:	effffffe 	.word	0xeffffffe

080062a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	225e      	movs	r2, #94	; 0x5e
 80062b6:	2100      	movs	r1, #0
 80062b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2256      	movs	r2, #86	; 0x56
 80062be:	2100      	movs	r1, #0
 80062c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	0018      	movs	r0, r3
 80062c6:	f7fe fdc9 	bl	8004e5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	46bd      	mov	sp, r7
 80062ce:	b004      	add	sp, #16
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b082      	sub	sp, #8
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	438a      	bics	r2, r1
 80062e8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2280      	movs	r2, #128	; 0x80
 80062ee:	2120      	movs	r1, #32
 80062f0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f7fe fd9e 	bl	8004e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b002      	add	sp, #8
 8006306:	bd80      	pop	{r7, pc}

08006308 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006310:	230e      	movs	r3, #14
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	2160      	movs	r1, #96	; 0x60
 8006318:	5a52      	ldrh	r2, [r2, r1]
 800631a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2284      	movs	r2, #132	; 0x84
 8006320:	589b      	ldr	r3, [r3, r2]
 8006322:	2b22      	cmp	r3, #34	; 0x22
 8006324:	d141      	bne.n	80063aa <UART_RxISR_8BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800632c:	210c      	movs	r1, #12
 800632e:	187b      	adds	r3, r7, r1
 8006330:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006332:	187b      	adds	r3, r7, r1
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b2da      	uxtb	r2, r3
 8006338:	230e      	movs	r3, #14
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b2d9      	uxtb	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006344:	400a      	ands	r2, r1
 8006346:	b2d2      	uxtb	r2, r2
 8006348:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800634e:	1c5a      	adds	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	225e      	movs	r2, #94	; 0x5e
 8006358:	5a9b      	ldrh	r3, [r3, r2]
 800635a:	b29b      	uxth	r3, r3
 800635c:	3b01      	subs	r3, #1
 800635e:	b299      	uxth	r1, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	225e      	movs	r2, #94	; 0x5e
 8006364:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	225e      	movs	r2, #94	; 0x5e
 800636a:	5a9b      	ldrh	r3, [r3, r2]
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d123      	bne.n	80063ba <UART_RxISR_8BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4911      	ldr	r1, [pc, #68]	; (80063c4 <UART_RxISR_8BIT+0xbc>)
 800637e:	400a      	ands	r2, r1
 8006380:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689a      	ldr	r2, [r3, #8]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2101      	movs	r1, #1
 800638e:	438a      	bics	r2, r1
 8006390:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2284      	movs	r2, #132	; 0x84
 8006396:	2120      	movs	r1, #32
 8006398:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	0018      	movs	r0, r3
 80063a4:	f7fe fd52 	bl	8004e4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80063a8:	e007      	b.n	80063ba <UART_RxISR_8BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699a      	ldr	r2, [r3, #24]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2108      	movs	r1, #8
 80063b6:	430a      	orrs	r2, r1
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	46bd      	mov	sp, r7
 80063be:	b004      	add	sp, #16
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	fffffedf 	.word	0xfffffedf

080063c8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80063d0:	230e      	movs	r3, #14
 80063d2:	18fb      	adds	r3, r7, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	2160      	movs	r1, #96	; 0x60
 80063d8:	5a52      	ldrh	r2, [r2, r1]
 80063da:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2284      	movs	r2, #132	; 0x84
 80063e0:	589b      	ldr	r3, [r3, r2]
 80063e2:	2b22      	cmp	r3, #34	; 0x22
 80063e4:	d141      	bne.n	800646a <UART_RxISR_16BIT+0xa2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ec:	210c      	movs	r1, #12
 80063ee:	187b      	adds	r3, r7, r1
 80063f0:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80063f8:	187b      	adds	r3, r7, r1
 80063fa:	220e      	movs	r2, #14
 80063fc:	18ba      	adds	r2, r7, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	8812      	ldrh	r2, [r2, #0]
 8006402:	4013      	ands	r3, r2
 8006404:	b29a      	uxth	r2, r3
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640e:	1c9a      	adds	r2, r3, #2
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	225e      	movs	r2, #94	; 0x5e
 8006418:	5a9b      	ldrh	r3, [r3, r2]
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b299      	uxth	r1, r3
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	225e      	movs	r2, #94	; 0x5e
 8006424:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	225e      	movs	r2, #94	; 0x5e
 800642a:	5a9b      	ldrh	r3, [r3, r2]
 800642c:	b29b      	uxth	r3, r3
 800642e:	2b00      	cmp	r3, #0
 8006430:	d123      	bne.n	800647a <UART_RxISR_16BIT+0xb2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4911      	ldr	r1, [pc, #68]	; (8006484 <UART_RxISR_16BIT+0xbc>)
 800643e:	400a      	ands	r2, r1
 8006440:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689a      	ldr	r2, [r3, #8]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2101      	movs	r1, #1
 800644e:	438a      	bics	r2, r1
 8006450:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2284      	movs	r2, #132	; 0x84
 8006456:	2120      	movs	r1, #32
 8006458:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	0018      	movs	r0, r3
 8006464:	f7fe fcf2 	bl	8004e4c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006468:	e007      	b.n	800647a <UART_RxISR_16BIT+0xb2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699a      	ldr	r2, [r3, #24]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2108      	movs	r1, #8
 8006476:	430a      	orrs	r2, r1
 8006478:	619a      	str	r2, [r3, #24]
}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	46bd      	mov	sp, r7
 800647e:	b004      	add	sp, #16
 8006480:	bd80      	pop	{r7, pc}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	fffffedf 	.word	0xfffffedf

08006488 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006490:	230c      	movs	r3, #12
 8006492:	18fb      	adds	r3, r7, r3
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	2160      	movs	r1, #96	; 0x60
 8006498:	5a52      	ldrh	r2, [r2, r1]
 800649a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2284      	movs	r2, #132	; 0x84
 80064a0:	589b      	ldr	r3, [r3, r2]
 80064a2:	2b22      	cmp	r3, #34	; 0x22
 80064a4:	d000      	beq.n	80064a8 <UART_RxISR_8BIT_FIFOEN+0x20>
 80064a6:	e078      	b.n	800659a <UART_RxISR_8BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80064a8:	230e      	movs	r3, #14
 80064aa:	18fb      	adds	r3, r7, r3
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	2168      	movs	r1, #104	; 0x68
 80064b0:	5a52      	ldrh	r2, [r2, r1]
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	e046      	b.n	8006544 <UART_RxISR_8BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064bc:	2108      	movs	r1, #8
 80064be:	187b      	adds	r3, r7, r1
 80064c0:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064c2:	187b      	adds	r3, r7, r1
 80064c4:	881b      	ldrh	r3, [r3, #0]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	230c      	movs	r3, #12
 80064ca:	18fb      	adds	r3, r7, r3
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	b2d9      	uxtb	r1, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	400a      	ands	r2, r1
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	225e      	movs	r2, #94	; 0x5e
 80064e8:	5a9b      	ldrh	r3, [r3, r2]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	3b01      	subs	r3, #1
 80064ee:	b299      	uxth	r1, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	225e      	movs	r2, #94	; 0x5e
 80064f4:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	225e      	movs	r2, #94	; 0x5e
 80064fa:	5a9b      	ldrh	r3, [r3, r2]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d11a      	bne.n	8006538 <UART_RxISR_8BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4929      	ldr	r1, [pc, #164]	; (80065b4 <UART_RxISR_8BIT_FIFOEN+0x12c>)
 800650e:	400a      	ands	r2, r1
 8006510:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4926      	ldr	r1, [pc, #152]	; (80065b8 <UART_RxISR_8BIT_FIFOEN+0x130>)
 800651e:	400a      	ands	r2, r1
 8006520:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2284      	movs	r2, #132	; 0x84
 8006526:	2120      	movs	r1, #32
 8006528:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	0018      	movs	r0, r3
 8006534:	f7fe fc8a 	bl	8004e4c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006538:	210e      	movs	r1, #14
 800653a:	187b      	adds	r3, r7, r1
 800653c:	881a      	ldrh	r2, [r3, #0]
 800653e:	187b      	adds	r3, r7, r1
 8006540:	3a01      	subs	r2, #1
 8006542:	801a      	strh	r2, [r3, #0]
 8006544:	230e      	movs	r3, #14
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	881b      	ldrh	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1b3      	bne.n	80064b6 <UART_RxISR_8BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800654e:	200a      	movs	r0, #10
 8006550:	183b      	adds	r3, r7, r0
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	215e      	movs	r1, #94	; 0x5e
 8006556:	5a52      	ldrh	r2, [r2, r1]
 8006558:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800655a:	183b      	adds	r3, r7, r0
 800655c:	881b      	ldrh	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d023      	beq.n	80065aa <UART_RxISR_8BIT_FIFOEN+0x122>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2268      	movs	r2, #104	; 0x68
 8006566:	5a9b      	ldrh	r3, [r3, r2]
 8006568:	220a      	movs	r2, #10
 800656a:	18ba      	adds	r2, r7, r2
 800656c:	8812      	ldrh	r2, [r2, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d21b      	bcs.n	80065aa <UART_RxISR_8BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	490f      	ldr	r1, [pc, #60]	; (80065bc <UART_RxISR_8BIT_FIFOEN+0x134>)
 800657e:	400a      	ands	r2, r1
 8006580:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	4a0e      	ldr	r2, [pc, #56]	; (80065c0 <UART_RxISR_8BIT_FIFOEN+0x138>)
 8006586:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2120      	movs	r1, #32
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006598:	e007      	b.n	80065aa <UART_RxISR_8BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	699a      	ldr	r2, [r3, #24]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2108      	movs	r1, #8
 80065a6:	430a      	orrs	r2, r1
 80065a8:	619a      	str	r2, [r3, #24]
}
 80065aa:	46c0      	nop			; (mov r8, r8)
 80065ac:	46bd      	mov	sp, r7
 80065ae:	b004      	add	sp, #16
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	fffffeff 	.word	0xfffffeff
 80065b8:	effffffe 	.word	0xeffffffe
 80065bc:	efffffff 	.word	0xefffffff
 80065c0:	08006309 	.word	0x08006309

080065c4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80065cc:	2314      	movs	r3, #20
 80065ce:	18fb      	adds	r3, r7, r3
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	2160      	movs	r1, #96	; 0x60
 80065d4:	5a52      	ldrh	r2, [r2, r1]
 80065d6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2284      	movs	r2, #132	; 0x84
 80065dc:	589b      	ldr	r3, [r3, r2]
 80065de:	2b22      	cmp	r3, #34	; 0x22
 80065e0:	d000      	beq.n	80065e4 <UART_RxISR_16BIT_FIFOEN+0x20>
 80065e2:	e078      	b.n	80066d6 <UART_RxISR_16BIT_FIFOEN+0x112>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80065e4:	2316      	movs	r3, #22
 80065e6:	18fb      	adds	r3, r7, r3
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	2168      	movs	r1, #104	; 0x68
 80065ec:	5a52      	ldrh	r2, [r2, r1]
 80065ee:	801a      	strh	r2, [r3, #0]
 80065f0:	e046      	b.n	8006680 <UART_RxISR_16BIT_FIFOEN+0xbc>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065f8:	2110      	movs	r1, #16
 80065fa:	187b      	adds	r3, r7, r1
 80065fc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006602:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006604:	187b      	adds	r3, r7, r1
 8006606:	2214      	movs	r2, #20
 8006608:	18ba      	adds	r2, r7, r2
 800660a:	881b      	ldrh	r3, [r3, #0]
 800660c:	8812      	ldrh	r2, [r2, #0]
 800660e:	4013      	ands	r3, r2
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661a:	1c9a      	adds	r2, r3, #2
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	225e      	movs	r2, #94	; 0x5e
 8006624:	5a9b      	ldrh	r3, [r3, r2]
 8006626:	b29b      	uxth	r3, r3
 8006628:	3b01      	subs	r3, #1
 800662a:	b299      	uxth	r1, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	225e      	movs	r2, #94	; 0x5e
 8006630:	5299      	strh	r1, [r3, r2]

      if (huart->RxXferCount == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	225e      	movs	r2, #94	; 0x5e
 8006636:	5a9b      	ldrh	r3, [r3, r2]
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11a      	bne.n	8006674 <UART_RxISR_16BIT_FIFOEN+0xb0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4929      	ldr	r1, [pc, #164]	; (80066f0 <UART_RxISR_16BIT_FIFOEN+0x12c>)
 800664a:	400a      	ands	r2, r1
 800664c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4926      	ldr	r1, [pc, #152]	; (80066f4 <UART_RxISR_16BIT_FIFOEN+0x130>)
 800665a:	400a      	ands	r2, r1
 800665c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2284      	movs	r2, #132	; 0x84
 8006662:	2120      	movs	r1, #32
 8006664:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	0018      	movs	r0, r3
 8006670:	f7fe fbec 	bl	8004e4c <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8006674:	2116      	movs	r1, #22
 8006676:	187b      	adds	r3, r7, r1
 8006678:	881a      	ldrh	r2, [r3, #0]
 800667a:	187b      	adds	r3, r7, r1
 800667c:	3a01      	subs	r2, #1
 800667e:	801a      	strh	r2, [r3, #0]
 8006680:	2316      	movs	r3, #22
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1b3      	bne.n	80065f2 <UART_RxISR_16BIT_FIFOEN+0x2e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800668a:	2012      	movs	r0, #18
 800668c:	183b      	adds	r3, r7, r0
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	215e      	movs	r1, #94	; 0x5e
 8006692:	5a52      	ldrh	r2, [r2, r1]
 8006694:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006696:	183b      	adds	r3, r7, r0
 8006698:	881b      	ldrh	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d023      	beq.n	80066e6 <UART_RxISR_16BIT_FIFOEN+0x122>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2268      	movs	r2, #104	; 0x68
 80066a2:	5a9b      	ldrh	r3, [r3, r2]
 80066a4:	2212      	movs	r2, #18
 80066a6:	18ba      	adds	r2, r7, r2
 80066a8:	8812      	ldrh	r2, [r2, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d21b      	bcs.n	80066e6 <UART_RxISR_16BIT_FIFOEN+0x122>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689a      	ldr	r2, [r3, #8]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	490f      	ldr	r1, [pc, #60]	; (80066f8 <UART_RxISR_16BIT_FIFOEN+0x134>)
 80066ba:	400a      	ands	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a0e      	ldr	r2, [pc, #56]	; (80066fc <UART_RxISR_16BIT_FIFOEN+0x138>)
 80066c2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2120      	movs	r1, #32
 80066d0:	430a      	orrs	r2, r1
 80066d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066d4:	e007      	b.n	80066e6 <UART_RxISR_16BIT_FIFOEN+0x122>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2108      	movs	r1, #8
 80066e2:	430a      	orrs	r2, r1
 80066e4:	619a      	str	r2, [r3, #24]
}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b006      	add	sp, #24
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	46c0      	nop			; (mov r8, r8)
 80066f0:	fffffeff 	.word	0xfffffeff
 80066f4:	effffffe 	.word	0xeffffffe
 80066f8:	efffffff 	.word	0xefffffff
 80066fc:	080063c9 	.word	0x080063c9

08006700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006708:	46c0      	nop			; (mov r8, r8)
 800670a:	46bd      	mov	sp, r7
 800670c:	b002      	add	sp, #8
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006718:	46c0      	nop			; (mov r8, r8)
 800671a:	46bd      	mov	sp, r7
 800671c:	b002      	add	sp, #8
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006728:	46c0      	nop			; (mov r8, r8)
 800672a:	46bd      	mov	sp, r7
 800672c:	b002      	add	sp, #8
 800672e:	bd80      	pop	{r7, pc}

08006730 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	227c      	movs	r2, #124	; 0x7c
 800673c:	5c9b      	ldrb	r3, [r3, r2]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d101      	bne.n	8006746 <HAL_UARTEx_DisableFifoMode+0x16>
 8006742:	2302      	movs	r3, #2
 8006744:	e027      	b.n	8006796 <HAL_UARTEx_DisableFifoMode+0x66>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	227c      	movs	r2, #124	; 0x7c
 800674a:	2101      	movs	r1, #1
 800674c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2280      	movs	r2, #128	; 0x80
 8006752:	2124      	movs	r1, #36	; 0x24
 8006754:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2101      	movs	r1, #1
 800676a:	438a      	bics	r2, r1
 800676c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8006772:	4013      	ands	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2280      	movs	r2, #128	; 0x80
 8006788:	2120      	movs	r1, #32
 800678a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	227c      	movs	r2, #124	; 0x7c
 8006790:	2100      	movs	r1, #0
 8006792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b004      	add	sp, #16
 800679c:	bd80      	pop	{r7, pc}
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	dfffffff 	.word	0xdfffffff

080067a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	227c      	movs	r2, #124	; 0x7c
 80067b2:	5c9b      	ldrb	r3, [r3, r2]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d101      	bne.n	80067bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80067b8:	2302      	movs	r3, #2
 80067ba:	e02e      	b.n	800681a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	227c      	movs	r2, #124	; 0x7c
 80067c0:	2101      	movs	r1, #1
 80067c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2280      	movs	r2, #128	; 0x80
 80067c8:	2124      	movs	r1, #36	; 0x24
 80067ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2101      	movs	r1, #1
 80067e0:	438a      	bics	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	08d9      	lsrs	r1, r3, #3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	683a      	ldr	r2, [r7, #0]
 80067f4:	430a      	orrs	r2, r1
 80067f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	0018      	movs	r0, r3
 80067fc:	f000 f854 	bl	80068a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2280      	movs	r2, #128	; 0x80
 800680c:	2120      	movs	r1, #32
 800680e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	227c      	movs	r2, #124	; 0x7c
 8006814:	2100      	movs	r1, #0
 8006816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	0018      	movs	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	b004      	add	sp, #16
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	227c      	movs	r2, #124	; 0x7c
 8006832:	5c9b      	ldrb	r3, [r3, r2]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d101      	bne.n	800683c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006838:	2302      	movs	r3, #2
 800683a:	e02f      	b.n	800689c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	227c      	movs	r2, #124	; 0x7c
 8006840:	2101      	movs	r1, #1
 8006842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2280      	movs	r2, #128	; 0x80
 8006848:	2124      	movs	r1, #36	; 0x24
 800684a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2101      	movs	r1, #1
 8006860:	438a      	bics	r2, r1
 8006862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	4a0e      	ldr	r2, [pc, #56]	; (80068a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800686c:	4013      	ands	r3, r2
 800686e:	0019      	movs	r1, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	0018      	movs	r0, r3
 800687e:	f000 f813 	bl	80068a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2280      	movs	r2, #128	; 0x80
 800688e:	2120      	movs	r1, #32
 8006890:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	227c      	movs	r2, #124	; 0x7c
 8006896:	2100      	movs	r1, #0
 8006898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	0018      	movs	r0, r3
 800689e:	46bd      	mov	sp, r7
 80068a0:	b004      	add	sp, #16
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	f1ffffff 	.word	0xf1ffffff

080068a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80068a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80068b0:	2314      	movs	r3, #20
 80068b2:	18fb      	adds	r3, r7, r3
 80068b4:	4a2f      	ldr	r2, [pc, #188]	; (8006974 <UARTEx_SetNbDataToProcess+0xcc>)
 80068b6:	ca03      	ldmia	r2!, {r0, r1}
 80068b8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80068ba:	230c      	movs	r3, #12
 80068bc:	18fb      	adds	r3, r7, r3
 80068be:	4a2e      	ldr	r2, [pc, #184]	; (8006978 <UARTEx_SetNbDataToProcess+0xd0>)
 80068c0:	ca03      	ldmia	r2!, {r0, r1}
 80068c2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d108      	bne.n	80068de <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	226a      	movs	r2, #106	; 0x6a
 80068d0:	2101      	movs	r1, #1
 80068d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2268      	movs	r2, #104	; 0x68
 80068d8:	2101      	movs	r1, #1
 80068da:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80068dc:	e046      	b.n	800696c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80068de:	261f      	movs	r6, #31
 80068e0:	19bb      	adds	r3, r7, r6
 80068e2:	2208      	movs	r2, #8
 80068e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80068e6:	201e      	movs	r0, #30
 80068e8:	183b      	adds	r3, r7, r0
 80068ea:	2208      	movs	r2, #8
 80068ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	0e5b      	lsrs	r3, r3, #25
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	241d      	movs	r4, #29
 80068fa:	193b      	adds	r3, r7, r4
 80068fc:	2107      	movs	r1, #7
 80068fe:	400a      	ands	r2, r1
 8006900:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	0f5b      	lsrs	r3, r3, #29
 800690a:	b2da      	uxtb	r2, r3
 800690c:	251c      	movs	r5, #28
 800690e:	197b      	adds	r3, r7, r5
 8006910:	2107      	movs	r1, #7
 8006912:	400a      	ands	r2, r1
 8006914:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006916:	183b      	adds	r3, r7, r0
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	197a      	adds	r2, r7, r5
 800691c:	7812      	ldrb	r2, [r2, #0]
 800691e:	2114      	movs	r1, #20
 8006920:	1879      	adds	r1, r7, r1
 8006922:	5c8a      	ldrb	r2, [r1, r2]
 8006924:	435a      	muls	r2, r3
 8006926:	0010      	movs	r0, r2
 8006928:	197b      	adds	r3, r7, r5
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	250c      	movs	r5, #12
 800692e:	197a      	adds	r2, r7, r5
 8006930:	5cd3      	ldrb	r3, [r2, r3]
 8006932:	0019      	movs	r1, r3
 8006934:	f7f9 fc82 	bl	800023c <__divsi3>
 8006938:	0003      	movs	r3, r0
 800693a:	b299      	uxth	r1, r3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	226a      	movs	r2, #106	; 0x6a
 8006940:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006942:	19bb      	adds	r3, r7, r6
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	193a      	adds	r2, r7, r4
 8006948:	7812      	ldrb	r2, [r2, #0]
 800694a:	2114      	movs	r1, #20
 800694c:	1879      	adds	r1, r7, r1
 800694e:	5c8a      	ldrb	r2, [r1, r2]
 8006950:	435a      	muls	r2, r3
 8006952:	0010      	movs	r0, r2
 8006954:	193b      	adds	r3, r7, r4
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	197a      	adds	r2, r7, r5
 800695a:	5cd3      	ldrb	r3, [r2, r3]
 800695c:	0019      	movs	r1, r3
 800695e:	f7f9 fc6d 	bl	800023c <__divsi3>
 8006962:	0003      	movs	r3, r0
 8006964:	b299      	uxth	r1, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2268      	movs	r2, #104	; 0x68
 800696a:	5299      	strh	r1, [r3, r2]
}
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46bd      	mov	sp, r7
 8006970:	b009      	add	sp, #36	; 0x24
 8006972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006974:	0800b220 	.word	0x0800b220
 8006978:	0800b228 	.word	0x0800b228

0800697c <LL_PWR_EnableFlashPowerDownInStop>:
  * @brief  Enable Flash Power-down mode during stop mode
  * @rmtoll CR1          CFIPD_STOP    LL_PWR_EnableFlashPowerDownInStop
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableFlashPowerDownInStop(void)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_FPD_STOP);
 8006980:	4b04      	ldr	r3, [pc, #16]	; (8006994 <LL_PWR_EnableFlashPowerDownInStop+0x18>)
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <LL_PWR_EnableFlashPowerDownInStop+0x18>)
 8006986:	2108      	movs	r1, #8
 8006988:	430a      	orrs	r2, r1
 800698a:	601a      	str	r2, [r3, #0]
}
 800698c:	46c0      	nop			; (mov r8, r8)
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	40007000 	.word	0x40007000

08006998 <LL_PWR_SetPowerMode>:
  *         @arg @ref LL_PWR_MODE_STANDBY
  *         @arg @ref LL_PWR_MODE_SHUTDOWN
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <LL_PWR_SetPowerMode+0x24>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2207      	movs	r2, #7
 80069a6:	4393      	bics	r3, r2
 80069a8:	0019      	movs	r1, r3
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <LL_PWR_SetPowerMode+0x24>)
 80069ac:	687a      	ldr	r2, [r7, #4]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]
}
 80069b2:	46c0      	nop			; (mov r8, r8)
 80069b4:	46bd      	mov	sp, r7
 80069b6:	b002      	add	sp, #8
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	40007000 	.word	0x40007000

080069c0 <LL_PWR_EnableSRAMRetention>:
  * @brief  Enable SRAM content retention in Standby mode
  * @rmtoll CR3          RRS           LL_PWR_EnableSRAMRetention
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableSRAMRetention(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_RRS);
 80069c4:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <LL_PWR_EnableSRAMRetention+0x18>)
 80069c6:	689a      	ldr	r2, [r3, #8]
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <LL_PWR_EnableSRAMRetention+0x18>)
 80069ca:	2180      	movs	r1, #128	; 0x80
 80069cc:	0049      	lsls	r1, r1, #1
 80069ce:	430a      	orrs	r2, r1
 80069d0:	609a      	str	r2, [r3, #8]
}
 80069d2:	46c0      	nop			; (mov r8, r8)
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40007000 	.word	0x40007000

080069dc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <LL_LPM_EnableSleep+0x18>)
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	4b03      	ldr	r3, [pc, #12]	; (80069f4 <LL_LPM_EnableSleep+0x18>)
 80069e6:	2104      	movs	r1, #4
 80069e8:	438a      	bics	r2, r1
 80069ea:	611a      	str	r2, [r3, #16]
}
 80069ec:	46c0      	nop			; (mov r8, r8)
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	e000ed00 	.word	0xe000ed00

080069f8 <LL_LPM_EnableDeepSleep>:
  * @brief  Processor uses deep sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableDeepSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableDeepSleep(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80069fc:	4b04      	ldr	r3, [pc, #16]	; (8006a10 <LL_LPM_EnableDeepSleep+0x18>)
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	4b03      	ldr	r3, [pc, #12]	; (8006a10 <LL_LPM_EnableDeepSleep+0x18>)
 8006a02:	2104      	movs	r1, #4
 8006a04:	430a      	orrs	r2, r1
 8006a06:	611a      	str	r2, [r3, #16]
}
 8006a08:	46c0      	nop			; (mov r8, r8)
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <LL_LPM_DisableSleepOnExit>:
  * @brief  Do not sleep when returning to Thread mode.
  * @rmtoll SCB_SCR      SLEEPONEXIT   LL_LPM_DisableSleepOnExit
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8006a18:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <LL_LPM_DisableSleepOnExit+0x18>)
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	4b03      	ldr	r3, [pc, #12]	; (8006a2c <LL_LPM_DisableSleepOnExit+0x18>)
 8006a1e:	2102      	movs	r1, #2
 8006a20:	438a      	bics	r2, r1
 8006a22:	611a      	str	r2, [r3, #16]
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	46c0      	nop			; (mov r8, r8)
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <LL_LPM_EnableEventOnPend>:
  *         processor.
  * @rmtoll SCB_SCR      SEVEONPEND    LL_LPM_EnableEventOnPend
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableEventOnPend(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
  /* Set SEVEONPEND bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 8006a34:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <LL_LPM_EnableEventOnPend+0x18>)
 8006a36:	691a      	ldr	r2, [r3, #16]
 8006a38:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <LL_LPM_EnableEventOnPend+0x18>)
 8006a3a:	2110      	movs	r1, #16
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	611a      	str	r2, [r3, #16]
}
 8006a40:	46c0      	nop			; (mov r8, r8)
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	e000ed00 	.word	0xe000ed00

08006a4c <eventWait>:

// Forwards
void eventSleep(uint32_t wakeEvents);

// Wait for any of these events to happen, with a high-granularity timeout (granularity defined by LPTIM1)
bool eventWait(uint32_t events, uint32_t timeoutMs) {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b082      	sub	sp, #8
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]

    if (timeoutMs != 0) {
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00d      	beq.n	8006a78 <eventWait+0x2c>
#ifdef EVENT_TIMER
        eventClear(EVENT_TIMER);
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f000 f855 	bl	8006b0c <eventClear>
        events |= EVENT_TIMER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	607b      	str	r3, [r7, #4]
        eventTimerExpiresMs = MY_TimerMs() + timeoutMs;
 8006a6a:	f000 fb79 	bl	8007160 <MY_TimerMs>
 8006a6e:	0002      	movs	r2, r0
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	18d2      	adds	r2, r2, r3
 8006a74:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <eventWait+0x58>)
 8006a76:	601a      	str	r2, [r3, #0]
        eventTimerExpiresMs = HAL_Ticks() + timeoutMs;
#endif
    }

    // Sleep until any of these events happens
    eventSleep(events);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	0018      	movs	r0, r3
 8006a7c:	f000 f858 	bl	8006b30 <eventSleep>

    // Mask off anything except non-timer events that we're looking for
    events &= eventOccurred();
 8006a80:	f000 f83a 	bl	8006af8 <eventOccurred>
 8006a84:	0002      	movs	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	607b      	str	r3, [r7, #4]
#ifdef EVENT_TIMER
    events &= ~EVENT_TIMER;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4393      	bics	r3, r2
 8006a92:	607b      	str	r3, [r7, #4]
#endif

    // Return TRUE if an event other than timeout occurred
    return (events != 0);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	1e5a      	subs	r2, r3, #1
 8006a98:	4193      	sbcs	r3, r2
 8006a9a:	b2db      	uxtb	r3, r3

}
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	b002      	add	sp, #8
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000258 	.word	0x20000258

08006aa8 <eventPollTimer>:

// Poll to see if any timer events transpired
#ifdef EVENT_TIMER
void eventPollTimer() {
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
    if (eventTimerExpiresMs != 0 && MY_TimerMs() >= eventTimerExpiresMs) {
 8006aac:	4b09      	ldr	r3, [pc, #36]	; (8006ad4 <eventPollTimer+0x2c>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00c      	beq.n	8006ace <eventPollTimer+0x26>
 8006ab4:	f000 fb54 	bl	8007160 <MY_TimerMs>
 8006ab8:	0002      	movs	r2, r0
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <eventPollTimer+0x2c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d305      	bcc.n	8006ace <eventPollTimer+0x26>
        eventTimerExpiresMs = 0;
 8006ac2:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <eventPollTimer+0x2c>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]
        event(EVENT_TIMER);
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f000 f805 	bl	8006ad8 <event>
    }
}
 8006ace:	46c0      	nop			; (mov r8, r8)
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	20000258 	.word	0x20000258

08006ad8 <event>:
#endif

// Mark that an event has transpired.  Note that this is safe to call from an ISR
void event(uint32_t event) {
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
    eventsThatHappened |= event;
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <event+0x1c>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	431a      	orrs	r2, r3
 8006ae8:	4b02      	ldr	r3, [pc, #8]	; (8006af4 <event+0x1c>)
 8006aea:	601a      	str	r2, [r3, #0]
}
 8006aec:	46c0      	nop			; (mov r8, r8)
 8006aee:	46bd      	mov	sp, r7
 8006af0:	b002      	add	sp, #8
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000254 	.word	0x20000254

08006af8 <eventOccurred>:

// Get the mask of events that have occurred
uint32_t eventOccurred() {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
    return eventsThatHappened;
 8006afc:	4b02      	ldr	r3, [pc, #8]	; (8006b08 <eventOccurred+0x10>)
 8006afe:	681b      	ldr	r3, [r3, #0]
}
 8006b00:	0018      	movs	r0, r3
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	46c0      	nop			; (mov r8, r8)
 8006b08:	20000254 	.word	0x20000254

08006b0c <eventClear>:

// Mark that we're no longer interested in an event
void eventClear(uint32_t event) {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
    eventsThatHappened &= ~event;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	43da      	mvns	r2, r3
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <eventClear+0x20>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	4b03      	ldr	r3, [pc, #12]	; (8006b2c <eventClear+0x20>)
 8006b20:	601a      	str	r2, [r3, #0]
}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	46bd      	mov	sp, r7
 8006b26:	b002      	add	sp, #8
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	46c0      	nop			; (mov r8, r8)
 8006b2c:	20000254 	.word	0x20000254

08006b30 <eventSleep>:

// Go into a sleep state if it's appropriate to do so, else simply return
void eventSleep(uint32_t wakeEvents) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]

    // Exit immediately if the event already occurred
    if ((eventsThatHappened & wakeEvents) != 0)
 8006b38:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <eventSleep+0x9c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	4013      	ands	r3, r2
 8006b40:	d13f      	bne.n	8006bc2 <eventSleep+0x92>
    }

#else

    // If any of several conditions hold true, we will wait for events in a loop
    bool highPowerEventWait = false;
 8006b42:	230f      	movs	r3, #15
 8006b44:	18fb      	adds	r3, r7, r3
 8006b46:	2200      	movs	r2, #0
 8006b48:	701a      	strb	r2, [r3, #0]

    // If we're debugging, don't sleep
    if (MY_Debug())
 8006b4a:	f000 fbf8 	bl	800733e <MY_Debug>
 8006b4e:	1e03      	subs	r3, r0, #0
 8006b50:	d031      	beq.n	8006bb6 <eventSleep+0x86>
        highPowerEventWait = true;
 8006b52:	230f      	movs	r3, #15
 8006b54:	18fb      	adds	r3, r7, r3
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]

    // Loop in here until an event happens
    while ((eventsThatHappened & wakeEvents) == 0) {
 8006b5a:	e02c      	b.n	8006bb6 <eventSleep+0x86>

        // If we're doing an event wait in a high-power manner, spin
        if (highPowerEventWait) {
 8006b5c:	230f      	movs	r3, #15
 8006b5e:	18fb      	adds	r3, r7, r3
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <eventSleep+0x3e>

            HAL_Delay(1);
 8006b66:	2001      	movs	r0, #1
 8006b68:	f7fb fbc2 	bl	80022f0 <HAL_Delay>
 8006b6c:	e023      	b.n	8006bb6 <eventSleep+0x86>

        } else {

            // Deinitialize all perpherals
            MY_Sleep_DeInit();
 8006b6e:	f000 fbec 	bl	800734a <MY_Sleep_DeInit>

            // Specify that we want flash to be powered down in STOP mode (huge savings)
            LL_PWR_EnableFlashPowerDownInStop();
 8006b72:	f7ff ff03 	bl	800697c <LL_PWR_EnableFlashPowerDownInStop>

            // Set Stop mode 2
            LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 8006b76:	2001      	movs	r0, #1
 8006b78:	f7ff ff0e 	bl	8006998 <LL_PWR_SetPowerMode>

            // Enabled events and all interrupts, including disabled interrupts,
            // can wake up the processor
            LL_LPM_EnableEventOnPend();
 8006b7c:	f7ff ff58 	bl	8006a30 <LL_LPM_EnableEventOnPend>

            // Make sure that we don't sleep on return from an interrupt
            LL_LPM_DisableSleepOnExit();
 8006b80:	f7ff ff48 	bl	8006a14 <LL_LPM_DisableSleepOnExit>

            // Enable content retention
            LL_PWR_EnableSRAMRetention();
 8006b84:	f7ff ff1c 	bl	80069c0 <LL_PWR_EnableSRAMRetention>

            // Set SLEEPDEEP bit of Cortex System Control Register
            LL_LPM_EnableDeepSleep();
 8006b88:	f7ff ff36 	bl	80069f8 <LL_LPM_EnableDeepSleep>

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_RESET);
 8006b8c:	4b10      	ldr	r3, [pc, #64]	; (8006bd0 <eventSleep+0xa0>)
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2140      	movs	r1, #64	; 0x40
 8006b92:	0018      	movs	r0, r3
 8006b94:	f7fb ff8a 	bl	8002aac <HAL_GPIO_WritePin>
  __ASM volatile ("dsb 0xF":::"memory");
 8006b98:	f3bf 8f4f 	dsb	sy
#endif

            // Wait for interrupt
            __DSB();
            __WFI();
 8006b9c:	bf30      	wfi
  __ASM volatile ("isb 0xF":::"memory");
 8006b9e:	f3bf 8f6f 	isb	sy
            __ISB();

            // Give visibility to scheduler because otherwise it's difficult to debug
#if EVENT_SLEEP_LED
            HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <eventSleep+0xa0>)
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	2140      	movs	r1, #64	; 0x40
 8006ba8:	0018      	movs	r0, r3
 8006baa:	f7fb ff7f 	bl	8002aac <HAL_GPIO_WritePin>
#endif

            // Reset SLEEPDEEP bit of Cortex System Control Register
            // so that we only sleep, not deep sleep, on another wfi
            LL_LPM_EnableSleep();
 8006bae:	f7ff ff15 	bl	80069dc <LL_LPM_EnableSleep>

            // Reset clocks (BEFORE GetHCLKFreq() is called)
            SystemCoreClockUpdate();
 8006bb2:	f000 fdf3 	bl	800779c <SystemCoreClockUpdate>
    while ((eventsThatHappened & wakeEvents) == 0) {
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <eventSleep+0x9c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	d0cd      	beq.n	8006b5c <eventSleep+0x2c>
 8006bc0:	e000      	b.n	8006bc4 <eventSleep+0x94>
        return;
 8006bc2:	46c0      	nop			; (mov r8, r8)

#endif  // EVENT_TIMER

    }   // loop until an event happens

}
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	b004      	add	sp, #16
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	46c0      	nop			; (mov r8, r8)
 8006bcc:	20000254 	.word	0x20000254
 8006bd0:	50000800 	.word	0x50000800

08006bd4 <setup>:
#else
#define EVENTS_TO_WAIT_FOR  0
#endif

// One-time initialization
void setup() {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("service.set");
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <setup+0x3c>)
 8006bdc:	0018      	movs	r0, r3
 8006bde:	f003 fb9f 	bl	800a320 <NoteNewRequest>
 8006be2:	0003      	movs	r3, r0
 8006be4:	607b      	str	r3, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8006be6:	4a0b      	ldr	r2, [pc, #44]	; (8006c14 <setup+0x40>)
 8006be8:	490b      	ldr	r1, [pc, #44]	; (8006c18 <setup+0x44>)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	0018      	movs	r0, r3
 8006bee:	f002 ff31 	bl	8009a54 <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 8006bf2:	4a0a      	ldr	r2, [pc, #40]	; (8006c1c <setup+0x48>)
 8006bf4:	490a      	ldr	r1, [pc, #40]	; (8006c20 <setup+0x4c>)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	f002 ff2b 	bl	8009a54 <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	0018      	movs	r0, r3
 8006c02:	f003 fba5 	bl	800a350 <NoteRequest>

}
 8006c06:	46c0      	nop			; (mov r8, r8)
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	b002      	add	sp, #8
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	0800b230 	.word	0x0800b230
 8006c14:	0800b23c 	.word	0x0800b23c
 8006c18:	0800b264 	.word	0x0800b264
 8006c1c:	0800b26c 	.word	0x0800b26c
 8006c20:	0800b278 	.word	0x0800b278

08006c24 <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 8006c24:	b590      	push	{r4, r7, lr}
 8006c26:	b089      	sub	sp, #36	; 0x24
 8006c28:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 8006c2a:	4b4f      	ldr	r3, [pc, #316]	; (8006d68 <loop+0x144>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	4b4d      	ldr	r3, [pc, #308]	; (8006d68 <loop+0x144>)
 8006c32:	601a      	str	r2, [r3, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	2400      	movs	r4, #0
 8006c38:	61bb      	str	r3, [r7, #24]
 8006c3a:	61fc      	str	r4, [r7, #28]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 8006c3c:	4b4b      	ldr	r3, [pc, #300]	; (8006d6c <loop+0x148>)
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f003 fb6e 	bl	800a320 <NoteNewRequest>
 8006c44:	0003      	movs	r3, r0
 8006c46:	0018      	movs	r0, r3
 8006c48:	f003 fbb4 	bl	800a3b4 <NoteRequestResponse>
 8006c4c:	0003      	movs	r3, r0
 8006c4e:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00d      	beq.n	8006c72 <loop+0x4e>
        temperature = JGetNumber(rsp, "value");
 8006c56:	4a46      	ldr	r2, [pc, #280]	; (8006d70 <loop+0x14c>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	0011      	movs	r1, r2
 8006c5c:	0018      	movs	r0, r3
 8006c5e:	f002 ffe9 	bl	8009c34 <JGetNumber>
 8006c62:	0003      	movs	r3, r0
 8006c64:	000c      	movs	r4, r1
 8006c66:	61bb      	str	r3, [r7, #24]
 8006c68:	61fc      	str	r4, [r7, #28]
        NoteDeleteResponse(rsp);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	0018      	movs	r0, r3
 8006c6e:	f001 f86d 	bl	8007d4c <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8006c72:	2300      	movs	r3, #0
 8006c74:	2400      	movs	r4, #0
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	617c      	str	r4, [r7, #20]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 8006c7a:	4b3e      	ldr	r3, [pc, #248]	; (8006d74 <loop+0x150>)
 8006c7c:	0018      	movs	r0, r3
 8006c7e:	f003 fb4f 	bl	800a320 <NoteNewRequest>
 8006c82:	0003      	movs	r3, r0
 8006c84:	0018      	movs	r0, r3
 8006c86:	f003 fb95 	bl	800a3b4 <NoteRequestResponse>
 8006c8a:	0003      	movs	r3, r0
 8006c8c:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00d      	beq.n	8006cb0 <loop+0x8c>
        voltage = JGetNumber(rsp, "value");
 8006c94:	4a36      	ldr	r2, [pc, #216]	; (8006d70 <loop+0x14c>)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	0011      	movs	r1, r2
 8006c9a:	0018      	movs	r0, r3
 8006c9c:	f002 ffca 	bl	8009c34 <JGetNumber>
 8006ca0:	0003      	movs	r3, r0
 8006ca2:	000c      	movs	r4, r1
 8006ca4:	613b      	str	r3, [r7, #16]
 8006ca6:	617c      	str	r4, [r7, #20]
        NoteDeleteResponse(rsp);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	0018      	movs	r0, r3
 8006cac:	f001 f84e 	bl	8007d4c <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8006cb0:	4b31      	ldr	r3, [pc, #196]	; (8006d78 <loop+0x154>)
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	f003 fb34 	bl	800a320 <NoteNewRequest>
 8006cb8:	0003      	movs	r3, r0
 8006cba:	60bb      	str	r3, [r7, #8]
	if (req != NULL) {
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d048      	beq.n	8006d54 <loop+0x130>
	    JAddStringToObject(req, "file", "sensors.qo");
 8006cc2:	4a2e      	ldr	r2, [pc, #184]	; (8006d7c <loop+0x158>)
 8006cc4:	492e      	ldr	r1, [pc, #184]	; (8006d80 <loop+0x15c>)
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f002 fec3 	bl	8009a54 <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 8006cce:	492d      	ldr	r1, [pc, #180]	; (8006d84 <loop+0x160>)
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	0018      	movs	r0, r3
 8006cd6:	f002 fe71 	bl	80099bc <JAddBoolToObject>
		J *body = JCreateObject();
 8006cda:	f002 ff6b 	bl	8009bb4 <JCreateObject>
 8006cde:	0003      	movs	r3, r0
 8006ce0:	607b      	str	r3, [r7, #4]
		if (body != NULL) {
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d031      	beq.n	8006d4c <loop+0x128>
			JAddNumberToObject(body, "temp", temperature);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	69fc      	ldr	r4, [r7, #28]
 8006cec:	4926      	ldr	r1, [pc, #152]	; (8006d88 <loop+0x164>)
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	001a      	movs	r2, r3
 8006cf2:	0023      	movs	r3, r4
 8006cf4:	f002 fe86 	bl	8009a04 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	697c      	ldr	r4, [r7, #20]
 8006cfc:	4923      	ldr	r1, [pc, #140]	; (8006d8c <loop+0x168>)
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	001a      	movs	r2, r3
 8006d02:	0023      	movs	r3, r4
 8006d04:	f002 fe7e 	bl	8009a04 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 8006d08:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <loop+0x144>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f7fb fa0f 	bl	8002130 <__aeabi_ui2d>
 8006d12:	0003      	movs	r3, r0
 8006d14:	000c      	movs	r4, r1
 8006d16:	491e      	ldr	r1, [pc, #120]	; (8006d90 <loop+0x16c>)
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	001a      	movs	r2, r3
 8006d1c:	0023      	movs	r3, r4
 8006d1e:	f002 fe71 	bl	8009a04 <JAddNumberToObject>
#ifdef EVENT_BUTTON
            if ((eventOccurred() & EVENT_BUTTON) != 0) {
 8006d22:	f7ff fee9 	bl	8006af8 <eventOccurred>
 8006d26:	0002      	movs	r2, r0
 8006d28:	2302      	movs	r3, #2
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	d008      	beq.n	8006d40 <loop+0x11c>
                JAddBoolToObject(body, "button", true);
 8006d2e:	4919      	ldr	r1, [pc, #100]	; (8006d94 <loop+0x170>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	0018      	movs	r0, r3
 8006d36:	f002 fe41 	bl	80099bc <JAddBoolToObject>
                eventClear(EVENT_BUTTON);
 8006d3a:	2002      	movs	r0, #2
 8006d3c:	f7ff fee6 	bl	8006b0c <eventClear>
            }
#endif
		    JAddItemToObject(req, "body", body);
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	4915      	ldr	r1, [pc, #84]	; (8006d98 <loop+0x174>)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	0018      	movs	r0, r3
 8006d48:	f002 fe22 	bl	8009990 <JAddItemToObject>
		}
	    NoteRequest(req);
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	0018      	movs	r0, r3
 8006d50:	f003 fafe 	bl	800a350 <NoteRequest>
	}

	// Delay between measurements
#if EVENTS
    eventWait(EVENTS_TO_WAIT_FOR, DELAY_PERIOD);
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <loop+0x178>)
 8006d56:	0019      	movs	r1, r3
 8006d58:	2002      	movs	r0, #2
 8006d5a:	f7ff fe77 	bl	8006a4c <eventWait>
#else
	delay(DELAY_PERIOD);
#endif

}
 8006d5e:	46c0      	nop			; (mov r8, r8)
 8006d60:	46bd      	mov	sp, r7
 8006d62:	b009      	add	sp, #36	; 0x24
 8006d64:	bd90      	pop	{r4, r7, pc}
 8006d66:	46c0      	nop			; (mov r8, r8)
 8006d68:	2000025c 	.word	0x2000025c
 8006d6c:	0800b280 	.word	0x0800b280
 8006d70:	0800b28c 	.word	0x0800b28c
 8006d74:	0800b294 	.word	0x0800b294
 8006d78:	0800b2a4 	.word	0x0800b2a4
 8006d7c:	0800b2b0 	.word	0x0800b2b0
 8006d80:	0800b2bc 	.word	0x0800b2bc
 8006d84:	0800b2c4 	.word	0x0800b2c4
 8006d88:	0800b2cc 	.word	0x0800b2cc
 8006d8c:	0800b2d4 	.word	0x0800b2d4
 8006d90:	0800b2dc 	.word	0x0800b2dc
 8006d94:	0800b2e4 	.word	0x0800b2e4
 8006d98:	0800b2ec 	.word	0x0800b2ec
 8006d9c:	00003a98 	.word	0x00003a98

08006da0 <main>:
size_t noteDebugSerialOutput(const char *message);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	af00      	add	r7, sp, #0

    // Initialize peripherals
    HAL_Init();
 8006da4:	f7fb fa20 	bl	80021e8 <HAL_Init>
    SystemClock_Config();
 8006da8:	f000 f826 	bl	8006df8 <SystemClock_Config>
    MX_GPIO_Init();
 8006dac:	f000 f9e2 	bl	8007174 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
 8006db0:	f000 f988 	bl	80070c4 <MX_LPTIM1_Init>
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 8006db4:	4b08      	ldr	r3, [pc, #32]	; (8006dd8 <main+0x38>)
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <main+0x3c>)
 8006db8:	4909      	ldr	r1, [pc, #36]	; (8006de0 <main+0x40>)
 8006dba:	480a      	ldr	r0, [pc, #40]	; (8006de4 <main+0x44>)
 8006dbc:	f003 f91a 	bl	8009ff4 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
 8006dc0:	4b09      	ldr	r3, [pc, #36]	; (8006de8 <main+0x48>)
 8006dc2:	4a0a      	ldr	r2, [pc, #40]	; (8006dec <main+0x4c>)
 8006dc4:	490a      	ldr	r1, [pc, #40]	; (8006df0 <main+0x50>)
 8006dc6:	480b      	ldr	r0, [pc, #44]	; (8006df4 <main+0x54>)
 8006dc8:	f003 f934 	bl	800a034 <NoteSetFnSerial>
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8006dcc:	f7ff ff02 	bl	8006bd4 <setup>
    while (true)
        loop();
 8006dd0:	f7ff ff28 	bl	8006c24 <loop>
 8006dd4:	e7fc      	b.n	8006dd0 <main+0x30>
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	0800732f 	.word	0x0800732f
 8006ddc:	08007317 	.word	0x08007317
 8006de0:	0800a92d 	.word	0x0800a92d
 8006de4:	0800a919 	.word	0x0800a919
 8006de8:	080073c5 	.word	0x080073c5
 8006dec:	080073a1 	.word	0x080073a1
 8006df0:	08007375 	.word	0x08007375
 8006df4:	08007361 	.word	0x08007361

08006df8 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8006df8:	b590      	push	{r4, r7, lr}
 8006dfa:	b09d      	sub	sp, #116	; 0x74
 8006dfc:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006dfe:	2438      	movs	r4, #56	; 0x38
 8006e00:	193b      	adds	r3, r7, r4
 8006e02:	0018      	movs	r0, r3
 8006e04:	2338      	movs	r3, #56	; 0x38
 8006e06:	001a      	movs	r2, r3
 8006e08:	2100      	movs	r1, #0
 8006e0a:	f003 fdc7 	bl	800a99c <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006e0e:	2328      	movs	r3, #40	; 0x28
 8006e10:	18fb      	adds	r3, r7, r3
 8006e12:	0018      	movs	r0, r3
 8006e14:	2310      	movs	r3, #16
 8006e16:	001a      	movs	r2, r3
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f003 fdbf 	bl	800a99c <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e1e:	003b      	movs	r3, r7
 8006e20:	0018      	movs	r0, r3
 8006e22:	2328      	movs	r3, #40	; 0x28
 8006e24:	001a      	movs	r2, r3
 8006e26:	2100      	movs	r1, #0
 8006e28:	f003 fdb8 	bl	800a99c <memset>

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e2c:	2380      	movs	r3, #128	; 0x80
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	0018      	movs	r0, r3
 8006e32:	f7fc fde5 	bl	8003a00 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8006e36:	193b      	adds	r3, r7, r4
 8006e38:	220a      	movs	r2, #10
 8006e3a:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006e3c:	193b      	adds	r3, r7, r4
 8006e3e:	2201      	movs	r2, #1
 8006e40:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006e42:	193b      	adds	r3, r7, r4
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	0052      	lsls	r2, r2, #1
 8006e48:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006e4a:	193b      	adds	r3, r7, r4
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006e50:	193b      	adds	r3, r7, r4
 8006e52:	2240      	movs	r2, #64	; 0x40
 8006e54:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006e56:	193b      	adds	r3, r7, r4
 8006e58:	2200      	movs	r2, #0
 8006e5a:	61da      	str	r2, [r3, #28]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006e5c:	193b      	adds	r3, r7, r4
 8006e5e:	0018      	movs	r0, r3
 8006e60:	f7fc fe1a 	bl	8003a98 <HAL_RCC_OscConfig>
 8006e64:	1e03      	subs	r3, r0, #0
 8006e66:	d001      	beq.n	8006e6c <SystemClock_Config+0x74>
        Error_Handler();
 8006e68:	f000 fa50 	bl	800730c <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8006e6c:	2128      	movs	r1, #40	; 0x28
 8006e6e:	187b      	adds	r3, r7, r1
 8006e70:	2207      	movs	r2, #7
 8006e72:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8006e74:	187b      	adds	r3, r7, r1
 8006e76:	2200      	movs	r2, #0
 8006e78:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006e7a:	187b      	adds	r3, r7, r1
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006e80:	187b      	adds	r3, r7, r1
 8006e82:	2200      	movs	r2, #0
 8006e84:	60da      	str	r2, [r3, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006e86:	187b      	adds	r3, r7, r1
 8006e88:	2100      	movs	r1, #0
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f7fd f924 	bl	80040d8 <HAL_RCC_ClockConfig>
 8006e90:	1e03      	subs	r3, r0, #0
 8006e92:	d001      	beq.n	8006e98 <SystemClock_Config+0xa0>
        Error_Handler();
 8006e94:	f000 fa3a 	bl	800730c <Error_Handler>

    // Initializes the peripherals clocks
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8006e98:	003b      	movs	r3, r7
 8006e9a:	2241      	movs	r2, #65	; 0x41
 8006e9c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8006e9e:	003b      	movs	r3, r7
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	605a      	str	r2, [r3, #4]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006ea4:	003b      	movs	r3, r7
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	60da      	str	r2, [r3, #12]
#ifdef EVENT_TIMER
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_LPTIM1;
 8006eaa:	003b      	movs	r3, r7
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	0092      	lsls	r2, r2, #2
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	003b      	movs	r3, r7
 8006eb6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
 8006eb8:	003b      	movs	r3, r7
 8006eba:	2280      	movs	r2, #128	; 0x80
 8006ebc:	02d2      	lsls	r2, r2, #11
 8006ebe:	615a      	str	r2, [r3, #20]
#endif
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006ec0:	003b      	movs	r3, r7
 8006ec2:	0018      	movs	r0, r3
 8006ec4:	f7fd fab2 	bl	800442c <HAL_RCCEx_PeriphCLKConfig>
 8006ec8:	1e03      	subs	r3, r0, #0
 8006eca:	d001      	beq.n	8006ed0 <SystemClock_Config+0xd8>
        Error_Handler();
 8006ecc:	f000 fa1e 	bl	800730c <Error_Handler>

}
 8006ed0:	46c0      	nop			; (mov r8, r8)
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b01d      	add	sp, #116	; 0x74
 8006ed6:	bd90      	pop	{r4, r7, pc}

08006ed8 <MX_I2C1_DeInit>:
        Error_Handler();

}

// I2C1 De-initialization
void MX_I2C1_DeInit(void) {
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!i2c1Initialized)
 8006edc:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <MX_I2C1_DeInit+0x38>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	4053      	eors	r3, r2
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10e      	bne.n	8006f08 <MX_I2C1_DeInit+0x30>
        return;
    i2c1Initialized = false;
 8006eea:	4b09      	ldr	r3, [pc, #36]	; (8006f10 <MX_I2C1_DeInit+0x38>)
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
    
    // Deconfigure Analogue filter
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE);
 8006ef0:	2380      	movs	r3, #128	; 0x80
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <MX_I2C1_DeInit+0x3c>)
 8006ef6:	0011      	movs	r1, r2
 8006ef8:	0018      	movs	r0, r3
 8006efa:	f7fc fb91 	bl	8003620 <HAL_I2CEx_ConfigAnalogFilter>

    // Deinitialize
    HAL_I2C_DeInit(&hi2c1);
 8006efe:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <MX_I2C1_DeInit+0x3c>)
 8006f00:	0018      	movs	r0, r3
 8006f02:	f7fb fdf0 	bl	8002ae6 <HAL_I2C_DeInit>
 8006f06:	e000      	b.n	8006f0a <MX_I2C1_DeInit+0x32>
        return;
 8006f08:	46c0      	nop			; (mov r8, r8)

}
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
 8006f0e:	46c0      	nop			; (mov r8, r8)
 8006f10:	20000260 	.word	0x20000260
 8006f14:	200004c8 	.word	0x200004c8

08006f18 <MX_USART1_UART_Init>:


// USART1 Initialization
void MX_USART1_UART_Init(void) {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0

    // Exit if already done
    if (uart1Initialized)
 8006f1c:	4b2e      	ldr	r3, [pc, #184]	; (8006fd8 <MX_USART1_UART_Init+0xc0>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d155      	bne.n	8006fd0 <MX_USART1_UART_Init+0xb8>
        return;
    uart1Initialized = true;
 8006f24:	4b2c      	ldr	r3, [pc, #176]	; (8006fd8 <MX_USART1_UART_Init+0xc0>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    huart1.Instance = USART1;
 8006f2a:	4b2c      	ldr	r3, [pc, #176]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f2c:	4a2c      	ldr	r2, [pc, #176]	; (8006fe0 <MX_USART1_UART_Init+0xc8>)
 8006f2e:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 8006f30:	4b2a      	ldr	r3, [pc, #168]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f32:	2296      	movs	r2, #150	; 0x96
 8006f34:	0192      	lsls	r2, r2, #6
 8006f36:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006f38:	4b28      	ldr	r3, [pc, #160]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8006f3e:	4b27      	ldr	r3, [pc, #156]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8006f44:	4b25      	ldr	r3, [pc, #148]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8006f4a:	4b24      	ldr	r3, [pc, #144]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f4c:	220c      	movs	r2, #12
 8006f4e:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006f50:	4b22      	ldr	r3, [pc, #136]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006f56:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f58:	2200      	movs	r2, #0
 8006f5a:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006f5c:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f5e:	2200      	movs	r2, #0
 8006f60:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006f62:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	625a      	str	r2, [r3, #36]	; 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006f68:	4b1c      	ldr	r3, [pc, #112]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8006f6e:	4b1b      	ldr	r3, [pc, #108]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f70:	0018      	movs	r0, r3
 8006f72:	f7fd fbd5 	bl	8004720 <HAL_UART_Init>
 8006f76:	1e03      	subs	r3, r0, #0
 8006f78:	d001      	beq.n	8006f7e <MX_USART1_UART_Init+0x66>
        Error_Handler();
 8006f7a:	f000 f9c7 	bl	800730c <Error_Handler>

    // FIFO mode configuration
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f7e:	4b17      	ldr	r3, [pc, #92]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f80:	2100      	movs	r1, #0
 8006f82:	0018      	movs	r0, r3
 8006f84:	f7ff fc0e 	bl	80067a4 <HAL_UARTEx_SetTxFifoThreshold>
 8006f88:	1e03      	subs	r3, r0, #0
 8006f8a:	d001      	beq.n	8006f90 <MX_USART1_UART_Init+0x78>
        Error_Handler();
 8006f8c:	f000 f9be 	bl	800730c <Error_Handler>
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006f92:	2100      	movs	r1, #0
 8006f94:	0018      	movs	r0, r3
 8006f96:	f7ff fc45 	bl	8006824 <HAL_UARTEx_SetRxFifoThreshold>
 8006f9a:	1e03      	subs	r3, r0, #0
 8006f9c:	d001      	beq.n	8006fa2 <MX_USART1_UART_Init+0x8a>
        Error_Handler();
 8006f9e:	f000 f9b5 	bl	800730c <Error_Handler>
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006fa2:	4b0e      	ldr	r3, [pc, #56]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7ff fbc3 	bl	8006730 <HAL_UARTEx_DisableFifoMode>
 8006faa:	1e03      	subs	r3, r0, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_USART1_UART_Init+0x9a>
        Error_Handler();
 8006fae:	f000 f9ad 	bl	800730c <Error_Handler>

    // Reset our buffer management
    serialFillIndex = serialDrainIndex = serialOverruns = 0;
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <MX_USART1_UART_Init+0xcc>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <MX_USART1_UART_Init+0xd0>)
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <MX_USART1_UART_Init+0xd4>)
 8006fc0:	601a      	str	r2, [r3, #0]

    // Unused, but included for documentation
    ((void)(serialOverruns));

    // Start the inbound receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8006fc2:	490b      	ldr	r1, [pc, #44]	; (8006ff0 <MX_USART1_UART_Init+0xd8>)
 8006fc4:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <MX_USART1_UART_Init+0xc4>)
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	0018      	movs	r0, r3
 8006fca:	f7fd fce5 	bl	8004998 <HAL_UART_Receive_IT>
 8006fce:	e000      	b.n	8006fd2 <MX_USART1_UART_Init+0xba>
        return;
 8006fd0:	46c0      	nop			; (mov r8, r8)

}
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	46c0      	nop			; (mov r8, r8)
 8006fd8:	20000261 	.word	0x20000261
 8006fdc:	20000514 	.word	0x20000514
 8006fe0:	40013800 	.word	0x40013800
 8006fe4:	20000274 	.word	0x20000274
 8006fe8:	20000270 	.word	0x20000270
 8006fec:	2000026c 	.word	0x2000026c
 8006ff0:	20000268 	.word	0x20000268

08006ff4 <MY_UART_IRQHandler>:

// USART1 IRQ handler
void MY_UART_IRQHandler(UART_HandleTypeDef *huart) {
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]

    // See if the transfer is completed
    if (huart->RxXferCount == 0) {
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	225e      	movs	r2, #94	; 0x5e
 8007000:	5a9b      	ldrh	r3, [r3, r2]
 8007002:	b29b      	uxth	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d12c      	bne.n	8007062 <MY_UART_IRQHandler+0x6e>
        if (serialFillIndex < sizeof(serialBuffer)) {
 8007008:	4b1b      	ldr	r3, [pc, #108]	; (8007078 <MY_UART_IRQHandler+0x84>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a1b      	ldr	r2, [pc, #108]	; (800707c <MY_UART_IRQHandler+0x88>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d816      	bhi.n	8007040 <MY_UART_IRQHandler+0x4c>
            if (serialFillIndex+1 == serialDrainIndex)
 8007012:	4b19      	ldr	r3, [pc, #100]	; (8007078 <MY_UART_IRQHandler+0x84>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	1c5a      	adds	r2, r3, #1
 8007018:	4b19      	ldr	r3, [pc, #100]	; (8007080 <MY_UART_IRQHandler+0x8c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	429a      	cmp	r2, r3
 800701e:	d105      	bne.n	800702c <MY_UART_IRQHandler+0x38>
                serialOverruns++;
 8007020:	4b18      	ldr	r3, [pc, #96]	; (8007084 <MY_UART_IRQHandler+0x90>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	1c5a      	adds	r2, r3, #1
 8007026:	4b17      	ldr	r3, [pc, #92]	; (8007084 <MY_UART_IRQHandler+0x90>)
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	e01a      	b.n	8007062 <MY_UART_IRQHandler+0x6e>
            else
                serialBuffer[serialFillIndex++] = serialInterruptBuffer[0];
 800702c:	4b12      	ldr	r3, [pc, #72]	; (8007078 <MY_UART_IRQHandler+0x84>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	1c59      	adds	r1, r3, #1
 8007032:	4a11      	ldr	r2, [pc, #68]	; (8007078 <MY_UART_IRQHandler+0x84>)
 8007034:	6011      	str	r1, [r2, #0]
 8007036:	4a14      	ldr	r2, [pc, #80]	; (8007088 <MY_UART_IRQHandler+0x94>)
 8007038:	7811      	ldrb	r1, [r2, #0]
 800703a:	4a14      	ldr	r2, [pc, #80]	; (800708c <MY_UART_IRQHandler+0x98>)
 800703c:	54d1      	strb	r1, [r2, r3]
 800703e:	e010      	b.n	8007062 <MY_UART_IRQHandler+0x6e>
        } else {
            if (serialDrainIndex == 1)
 8007040:	4b0f      	ldr	r3, [pc, #60]	; (8007080 <MY_UART_IRQHandler+0x8c>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d105      	bne.n	8007054 <MY_UART_IRQHandler+0x60>
                serialOverruns++;
 8007048:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <MY_UART_IRQHandler+0x90>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	1c5a      	adds	r2, r3, #1
 800704e:	4b0d      	ldr	r3, [pc, #52]	; (8007084 <MY_UART_IRQHandler+0x90>)
 8007050:	601a      	str	r2, [r3, #0]
 8007052:	e006      	b.n	8007062 <MY_UART_IRQHandler+0x6e>
            else {
                serialBuffer[0] = serialInterruptBuffer[0];
 8007054:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <MY_UART_IRQHandler+0x94>)
 8007056:	781a      	ldrb	r2, [r3, #0]
 8007058:	4b0c      	ldr	r3, [pc, #48]	; (800708c <MY_UART_IRQHandler+0x98>)
 800705a:	701a      	strb	r2, [r3, #0]
                serialFillIndex = 1;
 800705c:	4b06      	ldr	r3, [pc, #24]	; (8007078 <MY_UART_IRQHandler+0x84>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Start another receive
    HAL_UART_Receive_IT(&huart1, (uint8_t *) &serialInterruptBuffer, sizeof(serialInterruptBuffer));
 8007062:	4909      	ldr	r1, [pc, #36]	; (8007088 <MY_UART_IRQHandler+0x94>)
 8007064:	4b0a      	ldr	r3, [pc, #40]	; (8007090 <MY_UART_IRQHandler+0x9c>)
 8007066:	2201      	movs	r2, #1
 8007068:	0018      	movs	r0, r3
 800706a:	f7fd fc95 	bl	8004998 <HAL_UART_Receive_IT>

}
 800706e:	46c0      	nop			; (mov r8, r8)
 8007070:	46bd      	mov	sp, r7
 8007072:	b002      	add	sp, #8
 8007074:	bd80      	pop	{r7, pc}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	2000026c 	.word	0x2000026c
 800707c:	000001ff 	.word	0x000001ff
 8007080:	20000270 	.word	0x20000270
 8007084:	20000274 	.word	0x20000274
 8007088:	20000268 	.word	0x20000268
 800708c:	20000278 	.word	0x20000278
 8007090:	20000514 	.word	0x20000514

08007094 <MX_USART1_UART_DeInit>:

// USART1 De-initialization
void MX_USART1_UART_DeInit(void) {
 8007094:	b580      	push	{r7, lr}
 8007096:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!uart1Initialized)
 8007098:	4b08      	ldr	r3, [pc, #32]	; (80070bc <MX_USART1_UART_DeInit+0x28>)
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	2201      	movs	r2, #1
 800709e:	4053      	eors	r3, r2
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d107      	bne.n	80070b6 <MX_USART1_UART_DeInit+0x22>
        return;
    uart1Initialized = false;
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <MX_USART1_UART_DeInit+0x28>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]

    // Deinitialize
    HAL_UART_DeInit(&huart1);
 80070ac:	4b04      	ldr	r3, [pc, #16]	; (80070c0 <MX_USART1_UART_DeInit+0x2c>)
 80070ae:	0018      	movs	r0, r3
 80070b0:	f7fd fb8c 	bl	80047cc <HAL_UART_DeInit>
 80070b4:	e000      	b.n	80070b8 <MX_USART1_UART_DeInit+0x24>
        return;
 80070b6:	46c0      	nop			; (mov r8, r8)

}
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	20000261 	.word	0x20000261
 80070c0:	20000514 	.word	0x20000514

080070c4 <MX_LPTIM1_Init>:

// LPTIM1 Initialization
#ifdef EVENT_TIMER
void MX_LPTIM1_Init(void) {
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0

    // Initialize clock
    hlptim1.Instance = LPTIM1;
 80070c8:	4b17      	ldr	r3, [pc, #92]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070ca:	4a18      	ldr	r2, [pc, #96]	; (800712c <MX_LPTIM1_Init+0x68>)
 80070cc:	601a      	str	r2, [r3, #0]
    hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80070ce:	4b16      	ldr	r3, [pc, #88]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	605a      	str	r2, [r3, #4]
    hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80070d4:	4b14      	ldr	r3, [pc, #80]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	609a      	str	r2, [r3, #8]
    hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80070da:	4b13      	ldr	r3, [pc, #76]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070dc:	4a14      	ldr	r2, [pc, #80]	; (8007130 <MX_LPTIM1_Init+0x6c>)
 80070de:	615a      	str	r2, [r3, #20]
    hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80070e0:	4b11      	ldr	r3, [pc, #68]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	621a      	str	r2, [r3, #32]
    hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
    hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80070ec:	4b0e      	ldr	r3, [pc, #56]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070ee:	2200      	movs	r2, #0
 80070f0:	629a      	str	r2, [r3, #40]	; 0x28
    hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80070f2:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <MX_LPTIM1_Init+0x64>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80070fe:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <MX_LPTIM1_Init+0x64>)
 8007100:	0018      	movs	r0, r3
 8007102:	f7fc fad9 	bl	80036b8 <HAL_LPTIM_Init>
 8007106:	1e03      	subs	r3, r0, #0
 8007108:	d001      	beq.n	800710e <MX_LPTIM1_Init+0x4a>
        Error_Handler();
 800710a:	f000 f8ff 	bl	800730c <Error_Handler>
    // Period is the maximum value of the auto-reload counter - can't go higher.
    // Timeout is the value to be placed into the compare register - this is max
#define Period      (uint32_t) 65535
#define Timeout     (uint32_t) 32767
#define LPTIM_MS    2000
    if (HAL_LPTIM_TimeOut_Start_IT(&hlptim1, Period, Timeout) != HAL_OK)
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <MX_LPTIM1_Init+0x70>)
 8007110:	4907      	ldr	r1, [pc, #28]	; (8007130 <MX_LPTIM1_Init+0x6c>)
 8007112:	4b05      	ldr	r3, [pc, #20]	; (8007128 <MX_LPTIM1_Init+0x64>)
 8007114:	0018      	movs	r0, r3
 8007116:	f7fc fb65 	bl	80037e4 <HAL_LPTIM_TimeOut_Start_IT>
 800711a:	1e03      	subs	r3, r0, #0
 800711c:	d001      	beq.n	8007122 <MX_LPTIM1_Init+0x5e>
        Error_Handler();
 800711e:	f000 f8f5 	bl	800730c <Error_Handler>

}
 8007122:	46c0      	nop			; (mov r8, r8)
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	200005a0 	.word	0x200005a0
 800712c:	40007c00 	.word	0x40007c00
 8007130:	0000ffff 	.word	0x0000ffff
 8007134:	00007fff 	.word	0x00007fff

08007138 <HAL_LPTIM_CompareMatchCallback>:
#endif

// Compare match callback in non blocking mode
// NOTE: THIS IS CALLED ONCE PER TICK (EVERY 2 SECONDS AS LPTIM1 IS PROGRAMMED)
#ifdef EVENT_TIMER
void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]

    // Add to the total milliseconds since boot
    totalTimerMs += LPTIM_MS;
 8007140:	4b06      	ldr	r3, [pc, #24]	; (800715c <HAL_LPTIM_CompareMatchCallback+0x24>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	22fa      	movs	r2, #250	; 0xfa
 8007146:	00d2      	lsls	r2, r2, #3
 8007148:	189a      	adds	r2, r3, r2
 800714a:	4b04      	ldr	r3, [pc, #16]	; (800715c <HAL_LPTIM_CompareMatchCallback+0x24>)
 800714c:	601a      	str	r2, [r3, #0]

    // Poll the event poller to see if any events transpired
    eventPollTimer();
 800714e:	f7ff fcab 	bl	8006aa8 <eventPollTimer>

}
 8007152:	46c0      	nop			; (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b002      	add	sp, #8
 8007158:	bd80      	pop	{r7, pc}
 800715a:	46c0      	nop			; (mov r8, r8)
 800715c:	20000264 	.word	0x20000264

08007160 <MY_TimerMs>:
#endif

// This returns milliseconds since boot (which may wrap)
#ifdef EVENT_TIMER
uint32_t MY_TimerMs() {
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
    return totalTimerMs;
 8007164:	4b02      	ldr	r3, [pc, #8]	; (8007170 <MY_TimerMs+0x10>)
 8007166:	681b      	ldr	r3, [r3, #0]
}
 8007168:	0018      	movs	r0, r3
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	46c0      	nop			; (mov r8, r8)
 8007170:	20000264 	.word	0x20000264

08007174 <MX_GPIO_Init>:
#endif

// GPIO initialization
void MX_GPIO_Init(void) {
 8007174:	b590      	push	{r4, r7, lr}
 8007176:	b08d      	sub	sp, #52	; 0x34
 8007178:	af00      	add	r7, sp, #0

    // GPIO Ports Clock Enable
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800717a:	241c      	movs	r4, #28
 800717c:	193b      	adds	r3, r7, r4
 800717e:	0018      	movs	r0, r3
 8007180:	2314      	movs	r3, #20
 8007182:	001a      	movs	r2, r3
 8007184:	2100      	movs	r1, #0
 8007186:	f003 fc09 	bl	800a99c <memset>

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800718a:	4b52      	ldr	r3, [pc, #328]	; (80072d4 <MX_GPIO_Init+0x160>)
 800718c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800718e:	4b51      	ldr	r3, [pc, #324]	; (80072d4 <MX_GPIO_Init+0x160>)
 8007190:	2104      	movs	r1, #4
 8007192:	430a      	orrs	r2, r1
 8007194:	635a      	str	r2, [r3, #52]	; 0x34
 8007196:	4b4f      	ldr	r3, [pc, #316]	; (80072d4 <MX_GPIO_Init+0x160>)
 8007198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800719a:	2204      	movs	r2, #4
 800719c:	4013      	ands	r3, r2
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80071a2:	4b4c      	ldr	r3, [pc, #304]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071a6:	4b4b      	ldr	r3, [pc, #300]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071a8:	2120      	movs	r1, #32
 80071aa:	430a      	orrs	r2, r1
 80071ac:	635a      	str	r2, [r3, #52]	; 0x34
 80071ae:	4b49      	ldr	r3, [pc, #292]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b2:	2220      	movs	r2, #32
 80071b4:	4013      	ands	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]
 80071b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ba:	4b46      	ldr	r3, [pc, #280]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071be:	4b45      	ldr	r3, [pc, #276]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071c0:	2101      	movs	r1, #1
 80071c2:	430a      	orrs	r2, r1
 80071c4:	635a      	str	r2, [r3, #52]	; 0x34
 80071c6:	4b43      	ldr	r3, [pc, #268]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ca:	2201      	movs	r2, #1
 80071cc:	4013      	ands	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d2:	4b40      	ldr	r3, [pc, #256]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071d6:	4b3f      	ldr	r3, [pc, #252]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071d8:	2102      	movs	r1, #2
 80071da:	430a      	orrs	r2, r1
 80071dc:	635a      	str	r2, [r3, #52]	; 0x34
 80071de:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <MX_GPIO_Init+0x160>)
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	2202      	movs	r2, #2
 80071e4:	4013      	ands	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]

    // Configure GPIO pin : T_NRST_Pin
    GPIO_InitStruct.Pin = T_NRST_Pin;
 80071ea:	193b      	adds	r3, r7, r4
 80071ec:	2204      	movs	r2, #4
 80071ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80071f0:	193b      	adds	r3, r7, r4
 80071f2:	4a39      	ldr	r2, [pc, #228]	; (80072d8 <MX_GPIO_Init+0x164>)
 80071f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f6:	193b      	adds	r3, r7, r4
 80071f8:	2200      	movs	r2, #0
 80071fa:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 80071fc:	193b      	adds	r3, r7, r4
 80071fe:	4a37      	ldr	r2, [pc, #220]	; (80072dc <MX_GPIO_Init+0x168>)
 8007200:	0019      	movs	r1, r3
 8007202:	0010      	movs	r0, r2
 8007204:	f7fb fa1e 	bl	8002644 <HAL_GPIO_Init>

    // Configure GPIO pins : T_VCP_TX_Pin T_VCP_RX_Pin
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8007208:	193b      	adds	r3, r7, r4
 800720a:	220c      	movs	r2, #12
 800720c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720e:	193b      	adds	r3, r7, r4
 8007210:	2202      	movs	r2, #2
 8007212:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007214:	193b      	adds	r3, r7, r4
 8007216:	2200      	movs	r2, #0
 8007218:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800721a:	193b      	adds	r3, r7, r4
 800721c:	2200      	movs	r2, #0
 800721e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8007220:	193b      	adds	r3, r7, r4
 8007222:	2201      	movs	r2, #1
 8007224:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007226:	193a      	adds	r2, r7, r4
 8007228:	23a0      	movs	r3, #160	; 0xa0
 800722a:	05db      	lsls	r3, r3, #23
 800722c:	0011      	movs	r1, r2
 800722e:	0018      	movs	r0, r3
 8007230:	f7fb fa08 	bl	8002644 <HAL_GPIO_Init>

    // Configure LED GPIO pin : LD3_Pin
#if EVENT_SLEEP_LED
    GPIO_LED_ENABLE();
 8007234:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <MX_GPIO_Init+0x160>)
 8007236:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007238:	4b26      	ldr	r3, [pc, #152]	; (80072d4 <MX_GPIO_Init+0x160>)
 800723a:	2104      	movs	r1, #4
 800723c:	430a      	orrs	r2, r1
 800723e:	635a      	str	r2, [r3, #52]	; 0x34
 8007240:	4b24      	ldr	r3, [pc, #144]	; (80072d4 <MX_GPIO_Init+0x160>)
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	2204      	movs	r2, #4
 8007246:	4013      	ands	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_LED_PIN;
 800724c:	193b      	adds	r3, r7, r4
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007252:	193b      	adds	r3, r7, r4
 8007254:	2201      	movs	r2, #1
 8007256:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007258:	193b      	adds	r3, r7, r4
 800725a:	2200      	movs	r2, #0
 800725c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725e:	193b      	adds	r3, r7, r4
 8007260:	2200      	movs	r2, #0
 8007262:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_LED_PORT, &GPIO_InitStruct);
 8007264:	193b      	adds	r3, r7, r4
 8007266:	4a1e      	ldr	r2, [pc, #120]	; (80072e0 <MX_GPIO_Init+0x16c>)
 8007268:	0019      	movs	r1, r3
 800726a:	0010      	movs	r0, r2
 800726c:	f7fb f9ea 	bl	8002644 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIO_LED_PORT, GPIO_LED_PIN, GPIO_PIN_SET);
 8007270:	4b1b      	ldr	r3, [pc, #108]	; (80072e0 <MX_GPIO_Init+0x16c>)
 8007272:	2201      	movs	r2, #1
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	0018      	movs	r0, r3
 8007278:	f7fb fc18 	bl	8002aac <HAL_GPIO_WritePin>
#endif

    // Initialize the simulated button, if present
#ifdef EVENT_BUTTON
    GPIO_BUTTON_CLOCK_ENABLE();
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <MX_GPIO_Init+0x160>)
 800727e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007280:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <MX_GPIO_Init+0x160>)
 8007282:	2104      	movs	r1, #4
 8007284:	430a      	orrs	r2, r1
 8007286:	635a      	str	r2, [r3, #52]	; 0x34
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <MX_GPIO_Init+0x160>)
 800728a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728c:	2204      	movs	r2, #4
 800728e:	4013      	ands	r3, r2
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007294:	0021      	movs	r1, r4
 8007296:	187b      	adds	r3, r7, r1
 8007298:	2201      	movs	r2, #1
 800729a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Pin = GPIO_BUTTON_PIN;
 800729c:	187b      	adds	r3, r7, r1
 800729e:	2210      	movs	r2, #16
 80072a0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80072a2:	187b      	adds	r3, r7, r1
 80072a4:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <MX_GPIO_Init+0x164>)
 80072a6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072a8:	187b      	adds	r3, r7, r1
 80072aa:	2200      	movs	r2, #0
 80072ac:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIO_BUTTON_PORT, &GPIO_InitStruct);
 80072ae:	187b      	adds	r3, r7, r1
 80072b0:	4a0c      	ldr	r2, [pc, #48]	; (80072e4 <MX_GPIO_Init+0x170>)
 80072b2:	0019      	movs	r1, r3
 80072b4:	0010      	movs	r0, r2
 80072b6:	f7fb f9c5 	bl	8002644 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(GPIO_BUTTON_IRQ, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	2007      	movs	r0, #7
 80072c0:	f7fb f904 	bl	80024cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPIO_BUTTON_IRQ);
 80072c4:	2007      	movs	r0, #7
 80072c6:	f7fb f916 	bl	80024f6 <HAL_NVIC_EnableIRQ>
#endif

}
 80072ca:	46c0      	nop			; (mov r8, r8)
 80072cc:	46bd      	mov	sp, r7
 80072ce:	b00d      	add	sp, #52	; 0x34
 80072d0:	bd90      	pop	{r4, r7, pc}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	40021000 	.word	0x40021000
 80072d8:	10110000 	.word	0x10110000
 80072dc:	50001400 	.word	0x50001400
 80072e0:	50000800 	.word	0x50000800
 80072e4:	50000400 	.word	0x50000400

080072e8 <HAL_GPIO_EXTI_Rising_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	0002      	movs	r2, r0
 80072f0:	1dbb      	adds	r3, r7, #6
 80072f2:	801a      	strh	r2, [r3, #0]

    // Handle the button
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
 80072f4:	1dbb      	adds	r3, r7, #6
 80072f6:	881b      	ldrh	r3, [r3, #0]
 80072f8:	2210      	movs	r2, #16
 80072fa:	4013      	ands	r3, r2
 80072fc:	d002      	beq.n	8007304 <HAL_GPIO_EXTI_Rising_Callback+0x1c>
        event(EVENT_BUTTON);
 80072fe:	2002      	movs	r0, #2
 8007300:	f7ff fbea 	bl	8006ad8 <event>
#endif

}
 8007304:	46c0      	nop			; (mov r8, r8)
 8007306:	46bd      	mov	sp, r7
 8007308:	b002      	add	sp, #8
 800730a:	bd80      	pop	{r7, pc}

0800730c <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
}
 8007310:	46c0      	nop			; (mov r8, r8)
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	0018      	movs	r0, r3
 8007322:	f7fa ffe5 	bl	80022f0 <HAL_Delay>
}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	46bd      	mov	sp, r7
 800732a:	b002      	add	sp, #8
 800732c:	bd80      	pop	{r7, pc}

0800732e <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 800732e:	b580      	push	{r7, lr}
 8007330:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 8007332:	f7fa ffd3 	bl	80022dc <HAL_GetTick>
 8007336:	0003      	movs	r3, r0
}
 8007338:	0018      	movs	r0, r3
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <MY_Debug>:

// Determine whether or not a debugger is actively connected.  We use
// this to suppress STOP2 mode so that code can be maintained/debugged.
bool MY_Debug() {
 800733e:	b580      	push	{r7, lr}
 8007340:	af00      	add	r7, sp, #0
	return (DEBUGGING);
 8007342:	2300      	movs	r3, #0
}
 8007344:	0018      	movs	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}

0800734a <MY_Sleep_DeInit>:

// Deinitialize everything that might block a sleep from happening
void MY_Sleep_DeInit() {
 800734a:	b580      	push	{r7, lr}
 800734c:	af00      	add	r7, sp, #0

    // Deinitialize the peripherals
    MX_I2C1_DeInit();
 800734e:	f7ff fdc3 	bl	8006ed8 <MX_I2C1_DeInit>
    MX_USART1_UART_DeInit();
 8007352:	f7ff fe9f 	bl	8007094 <MX_USART1_UART_DeInit>

    // Notify the Note subsystem that these will need to be reinitialized
    // on the next call to any of the Note I/O functions
    NoteResetRequired();
 8007356:	f003 f8d5 	bl	800a504 <NoteResetRequired>

}
 800735a:	46c0      	nop			; (mov r8, r8)
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <noteSerialReset>:

// Serial port reset procedure, called before any I/O and called again upon I/O error
void noteSerialReset() {
 8007360:	b580      	push	{r7, lr}
 8007362:	af00      	add	r7, sp, #0
    MX_USART1_UART_DeInit();
 8007364:	f7ff fe96 	bl	8007094 <MX_USART1_UART_DeInit>
    MX_USART1_UART_Init();
 8007368:	f7ff fdd6 	bl	8006f18 <MX_USART1_UART_Init>
}
 800736c:	46c0      	nop			; (mov r8, r8)
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <noteSerialTransmit>:

// Serial write data function
void noteSerialTransmit(uint8_t *text, size_t len, bool flush) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	1dfb      	adds	r3, r7, #7
 8007380:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, text, len, 5000);
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	b29a      	uxth	r2, r3
 8007386:	4b04      	ldr	r3, [pc, #16]	; (8007398 <noteSerialTransmit+0x24>)
 8007388:	68f9      	ldr	r1, [r7, #12]
 800738a:	4804      	ldr	r0, [pc, #16]	; (800739c <noteSerialTransmit+0x28>)
 800738c:	f7fd fa58 	bl	8004840 <HAL_UART_Transmit>
}
 8007390:	46c0      	nop			; (mov r8, r8)
 8007392:	46bd      	mov	sp, r7
 8007394:	b004      	add	sp, #16
 8007396:	bd80      	pop	{r7, pc}
 8007398:	00001388 	.word	0x00001388
 800739c:	20000514 	.word	0x20000514

080073a0 <noteSerialAvailable>:

// Serial "is anything available" function, which does a read-ahead for data into a serial buffer
bool noteSerialAvailable() {
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0
    return (serialFillIndex != serialDrainIndex);
 80073a4:	4b05      	ldr	r3, [pc, #20]	; (80073bc <noteSerialAvailable+0x1c>)
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	4b05      	ldr	r3, [pc, #20]	; (80073c0 <noteSerialAvailable+0x20>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	1e5a      	subs	r2, r3, #1
 80073b0:	4193      	sbcs	r3, r2
 80073b2:	b2db      	uxtb	r3, r3
}
 80073b4:	0018      	movs	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	46c0      	nop			; (mov r8, r8)
 80073bc:	2000026c 	.word	0x2000026c
 80073c0:	20000270 	.word	0x20000270

080073c4 <noteSerialReceive>:

// Blocking serial read a byte function (generally only called if known to be available)
char noteSerialReceive() {
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
    char data;
    while (!noteSerialAvailable()) ;
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	f7ff ffe8 	bl	80073a0 <noteSerialAvailable>
 80073d0:	0003      	movs	r3, r0
 80073d2:	001a      	movs	r2, r3
 80073d4:	2301      	movs	r3, #1
 80073d6:	4053      	eors	r3, r2
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1f6      	bne.n	80073cc <noteSerialReceive+0x8>
    if (serialDrainIndex < sizeof(serialBuffer))
 80073de:	4b0e      	ldr	r3, [pc, #56]	; (8007418 <noteSerialReceive+0x54>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a0e      	ldr	r2, [pc, #56]	; (800741c <noteSerialReceive+0x58>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d809      	bhi.n	80073fc <noteSerialReceive+0x38>
        data = serialBuffer[serialDrainIndex++];
 80073e8:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <noteSerialReceive+0x54>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	1c59      	adds	r1, r3, #1
 80073ee:	4a0a      	ldr	r2, [pc, #40]	; (8007418 <noteSerialReceive+0x54>)
 80073f0:	6011      	str	r1, [r2, #0]
 80073f2:	1dfa      	adds	r2, r7, #7
 80073f4:	490a      	ldr	r1, [pc, #40]	; (8007420 <noteSerialReceive+0x5c>)
 80073f6:	5ccb      	ldrb	r3, [r1, r3]
 80073f8:	7013      	strb	r3, [r2, #0]
 80073fa:	e006      	b.n	800740a <noteSerialReceive+0x46>
    else {
        data = serialBuffer[0];
 80073fc:	1dfb      	adds	r3, r7, #7
 80073fe:	4a08      	ldr	r2, [pc, #32]	; (8007420 <noteSerialReceive+0x5c>)
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]
        serialDrainIndex = 1;
 8007404:	4b04      	ldr	r3, [pc, #16]	; (8007418 <noteSerialReceive+0x54>)
 8007406:	2201      	movs	r2, #1
 8007408:	601a      	str	r2, [r3, #0]
    }
    return data;
 800740a:	1dfb      	adds	r3, r7, #7
 800740c:	781b      	ldrb	r3, [r3, #0]
}
 800740e:	0018      	movs	r0, r3
 8007410:	46bd      	mov	sp, r7
 8007412:	b002      	add	sp, #8
 8007414:	bd80      	pop	{r7, pc}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	20000270 	.word	0x20000270
 800741c:	000001ff 	.word	0x000001ff
 8007420:	20000278 	.word	0x20000278

08007424 <HAL_MspInit>:

#include "main.h"
#include "event.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800742a:	4b0f      	ldr	r3, [pc, #60]	; (8007468 <HAL_MspInit+0x44>)
 800742c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_MspInit+0x44>)
 8007430:	2101      	movs	r1, #1
 8007432:	430a      	orrs	r2, r1
 8007434:	641a      	str	r2, [r3, #64]	; 0x40
 8007436:	4b0c      	ldr	r3, [pc, #48]	; (8007468 <HAL_MspInit+0x44>)
 8007438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743a:	2201      	movs	r2, #1
 800743c:	4013      	ands	r3, r2
 800743e:	607b      	str	r3, [r7, #4]
 8007440:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <HAL_MspInit+0x44>)
 8007444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007446:	4b08      	ldr	r3, [pc, #32]	; (8007468 <HAL_MspInit+0x44>)
 8007448:	2180      	movs	r1, #128	; 0x80
 800744a:	0549      	lsls	r1, r1, #21
 800744c:	430a      	orrs	r2, r1
 800744e:	63da      	str	r2, [r3, #60]	; 0x3c
 8007450:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_MspInit+0x44>)
 8007452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007454:	2380      	movs	r3, #128	; 0x80
 8007456:	055b      	lsls	r3, r3, #21
 8007458:	4013      	ands	r3, r2
 800745a:	603b      	str	r3, [r7, #0]
 800745c:	683b      	ldr	r3, [r7, #0]
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	46bd      	mov	sp, r7
 8007462:	b002      	add	sp, #8
 8007464:	bd80      	pop	{r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	40021000 	.word	0x40021000

0800746c <HAL_I2C_MspDeInit>:
    }

}

// Deinitialize all I2C ports
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]

    // Handle I2C1
    if (hi2c->Instance==I2C1) {
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a0b      	ldr	r2, [pc, #44]	; (80074a8 <HAL_I2C_MspDeInit+0x3c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d110      	bne.n	80074a0 <HAL_I2C_MspDeInit+0x34>

        // Peripheral clock disable
        __HAL_RCC_I2C1_CLK_DISABLE();
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <HAL_I2C_MspDeInit+0x40>)
 8007480:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007482:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <HAL_I2C_MspDeInit+0x40>)
 8007484:	490a      	ldr	r1, [pc, #40]	; (80074b0 <HAL_I2C_MspDeInit+0x44>)
 8007486:	400a      	ands	r2, r1
 8007488:	63da      	str	r2, [r3, #60]	; 0x3c

        // I2C1 GPIO Configuration
        // PA9     ------> I2C1_SCL
        // PA10     ------> I2C1_SDA
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800748a:	23c0      	movs	r3, #192	; 0xc0
 800748c:	00da      	lsls	r2, r3, #3
 800748e:	23a0      	movs	r3, #160	; 0xa0
 8007490:	05db      	lsls	r3, r3, #23
 8007492:	0011      	movs	r1, r2
 8007494:	0018      	movs	r0, r3
 8007496:	f7fb fa39 	bl	800290c <HAL_GPIO_DeInit>

        // I2C1 interrupt DeInit
        HAL_NVIC_DisableIRQ(I2C1_IRQn);
 800749a:	2017      	movs	r0, #23
 800749c:	f7fb f83b 	bl	8002516 <HAL_NVIC_DisableIRQ>

    }

}
 80074a0:	46c0      	nop			; (mov r8, r8)
 80074a2:	46bd      	mov	sp, r7
 80074a4:	b002      	add	sp, #8
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	40005400 	.word	0x40005400
 80074ac:	40021000 	.word	0x40021000
 80074b0:	ffdfffff 	.word	0xffdfffff

080074b4 <HAL_UART_MspInit>:

// Initialize all UART ports
void HAL_UART_MspInit(UART_HandleTypeDef* huart) {
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b08b      	sub	sp, #44	; 0x2c
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a23      	ldr	r2, [pc, #140]	; (8007550 <HAL_UART_MspInit+0x9c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d13f      	bne.n	8007546 <HAL_UART_MspInit+0x92>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c6:	2414      	movs	r4, #20
 80074c8:	193b      	adds	r3, r7, r4
 80074ca:	0018      	movs	r0, r3
 80074cc:	2314      	movs	r3, #20
 80074ce:	001a      	movs	r2, r3
 80074d0:	2100      	movs	r1, #0
 80074d2:	f003 fa63 	bl	800a99c <memset>

        // Peripheral clock enable
        __HAL_RCC_USART1_CLK_ENABLE();
 80074d6:	4b1f      	ldr	r3, [pc, #124]	; (8007554 <HAL_UART_MspInit+0xa0>)
 80074d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074da:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <HAL_UART_MspInit+0xa0>)
 80074dc:	2180      	movs	r1, #128	; 0x80
 80074de:	01c9      	lsls	r1, r1, #7
 80074e0:	430a      	orrs	r2, r1
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40
 80074e4:	4b1b      	ldr	r3, [pc, #108]	; (8007554 <HAL_UART_MspInit+0xa0>)
 80074e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074e8:	2380      	movs	r3, #128	; 0x80
 80074ea:	01db      	lsls	r3, r3, #7
 80074ec:	4013      	ands	r3, r2
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	693b      	ldr	r3, [r7, #16]

        // USART1 GPIO Configuration
        // PB6     ------> USART1_TX
        // PB7     ------> USART1_RX
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80074f2:	4b18      	ldr	r3, [pc, #96]	; (8007554 <HAL_UART_MspInit+0xa0>)
 80074f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f6:	4b17      	ldr	r3, [pc, #92]	; (8007554 <HAL_UART_MspInit+0xa0>)
 80074f8:	2102      	movs	r1, #2
 80074fa:	430a      	orrs	r2, r1
 80074fc:	635a      	str	r2, [r3, #52]	; 0x34
 80074fe:	4b15      	ldr	r3, [pc, #84]	; (8007554 <HAL_UART_MspInit+0xa0>)
 8007500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007502:	2202      	movs	r2, #2
 8007504:	4013      	ands	r3, r2
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]
        GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800750a:	0021      	movs	r1, r4
 800750c:	187b      	adds	r3, r7, r1
 800750e:	22c0      	movs	r2, #192	; 0xc0
 8007510:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007512:	187b      	adds	r3, r7, r1
 8007514:	2202      	movs	r2, #2
 8007516:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	187b      	adds	r3, r7, r1
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751e:	187b      	adds	r3, r7, r1
 8007520:	2200      	movs	r2, #0
 8007522:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8007524:	187b      	adds	r3, r7, r1
 8007526:	2200      	movs	r2, #0
 8007528:	611a      	str	r2, [r3, #16]
        HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800752a:	187b      	adds	r3, r7, r1
 800752c:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <HAL_UART_MspInit+0xa4>)
 800752e:	0019      	movs	r1, r3
 8007530:	0010      	movs	r0, r2
 8007532:	f7fb f887 	bl	8002644 <HAL_GPIO_Init>

        // USART1 interrupt Init
        HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007536:	2200      	movs	r2, #0
 8007538:	2100      	movs	r1, #0
 800753a:	201b      	movs	r0, #27
 800753c:	f7fa ffc6 	bl	80024cc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007540:	201b      	movs	r0, #27
 8007542:	f7fa ffd8 	bl	80024f6 <HAL_NVIC_EnableIRQ>

    }

}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	b00b      	add	sp, #44	; 0x2c
 800754c:	bd90      	pop	{r4, r7, pc}
 800754e:	46c0      	nop			; (mov r8, r8)
 8007550:	40013800 	.word	0x40013800
 8007554:	40021000 	.word	0x40021000
 8007558:	50000400 	.word	0x50000400

0800755c <HAL_UART_MspDeInit>:

// Deinitialize all UARTs
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart) {
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]

    // Handle USART1
    if (huart->Instance==USART1) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <HAL_UART_MspDeInit+0x38>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d10d      	bne.n	800758a <HAL_UART_MspDeInit+0x2e>

        // Peripheral clock disable
        __HAL_RCC_USART1_CLK_DISABLE();
 800756e:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <HAL_UART_MspDeInit+0x3c>)
 8007570:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_UART_MspDeInit+0x3c>)
 8007574:	4909      	ldr	r1, [pc, #36]	; (800759c <HAL_UART_MspDeInit+0x40>)
 8007576:	400a      	ands	r2, r1
 8007578:	641a      	str	r2, [r3, #64]	; 0x40

        // USART1 GPIO Configuration
        // PB6     ------> USART1_TX
        // PB7     ------> USART1_RX
        HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6|GPIO_PIN_7);
 800757a:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <HAL_UART_MspDeInit+0x44>)
 800757c:	21c0      	movs	r1, #192	; 0xc0
 800757e:	0018      	movs	r0, r3
 8007580:	f7fb f9c4 	bl	800290c <HAL_GPIO_DeInit>

        // Interrupt DeInit
        HAL_NVIC_DisableIRQ(USART1_IRQn);
 8007584:	201b      	movs	r0, #27
 8007586:	f7fa ffc6 	bl	8002516 <HAL_NVIC_DisableIRQ>

    }

}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b002      	add	sp, #8
 8007590:	bd80      	pop	{r7, pc}
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	40013800 	.word	0x40013800
 8007598:	40021000 	.word	0x40021000
 800759c:	ffffbfff 	.word	0xffffbfff
 80075a0:	50000400 	.word	0x50000400

080075a4 <HAL_LPTIM_MspInit>:

// Initialize all low power timers
#ifdef EVENT_TIMER
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim) {
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

    // Handle LPTIM1
    if (hlptim->Instance==LPTIM1) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0d      	ldr	r2, [pc, #52]	; (80075e8 <HAL_LPTIM_MspInit+0x44>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d114      	bne.n	80075e0 <HAL_LPTIM_MspInit+0x3c>

        // Peripheral clock enable
        __HAL_RCC_LPTIM1_CLK_ENABLE();
 80075b6:	4b0d      	ldr	r3, [pc, #52]	; (80075ec <HAL_LPTIM_MspInit+0x48>)
 80075b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80075ba:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <HAL_LPTIM_MspInit+0x48>)
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	0609      	lsls	r1, r1, #24
 80075c0:	430a      	orrs	r2, r1
 80075c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80075c4:	4b09      	ldr	r3, [pc, #36]	; (80075ec <HAL_LPTIM_MspInit+0x48>)
 80075c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075c8:	0fdb      	lsrs	r3, r3, #31
 80075ca:	07db      	lsls	r3, r3, #31
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]

        // LPTIM1 interrupt Init
        HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80075d0:	2200      	movs	r2, #0
 80075d2:	2100      	movs	r1, #0
 80075d4:	2011      	movs	r0, #17
 80075d6:	f7fa ff79 	bl	80024cc <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80075da:	2011      	movs	r0, #17
 80075dc:	f7fa ff8b 	bl	80024f6 <HAL_NVIC_EnableIRQ>

    }

}
 80075e0:	46c0      	nop			; (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b004      	add	sp, #16
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40007c00 	.word	0x40007c00
 80075ec:	40021000 	.word	0x40021000

080075f0 <NMI_Handler>:
#ifdef EVENT_TIMER
extern LPTIM_HandleTypeDef hlptim1;
#endif

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
}
 80075f4:	46c0      	nop			; (mov r8, r8)
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 80075fa:	b580      	push	{r7, lr}
 80075fc:	af00      	add	r7, sp, #0
    while (1) ;
 80075fe:	e7fe      	b.n	80075fe <HardFault_Handler+0x4>

08007600 <SVC_Handler>:
void UsageFault_Handler(void) {
    while (1) ;
}

// System service call via SWI instruction
void SVC_Handler(void) {
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
}
 8007604:	46c0      	nop			; (mov r8, r8)
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <PendSV_Handler>:
// Debug monitor
void DebugMon_Handler(void) {
}

// Pendable request for system service.
void PendSV_Handler(void) {
 800760a:	b580      	push	{r7, lr}
 800760c:	af00      	add	r7, sp, #0
}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 8007614:	b580      	push	{r7, lr}
 8007616:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8007618:	f7fa fe50 	bl	80022bc <HAL_IncTick>
}
 800761c:	46c0      	nop			; (mov r8, r8)
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <I2C1_IRQHandler>:

// I2C1 event interrupt
void I2C1_IRQHandler(void) {
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8007628:	4b09      	ldr	r3, [pc, #36]	; (8007650 <I2C1_IRQHandler+0x2c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	23e0      	movs	r3, #224	; 0xe0
 8007630:	00db      	lsls	r3, r3, #3
 8007632:	4013      	ands	r3, r2
 8007634:	d004      	beq.n	8007640 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007636:	4b06      	ldr	r3, [pc, #24]	; (8007650 <I2C1_IRQHandler+0x2c>)
 8007638:	0018      	movs	r0, r3
 800763a:	f7fb fa9e 	bl	8002b7a <HAL_I2C_ER_IRQHandler>
  } else {
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
}
 800763e:	e003      	b.n	8007648 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8007640:	4b03      	ldr	r3, [pc, #12]	; (8007650 <I2C1_IRQHandler+0x2c>)
 8007642:	0018      	movs	r0, r3
 8007644:	f7fb fa7f 	bl	8002b46 <HAL_I2C_EV_IRQHandler>
}
 8007648:	46c0      	nop			; (mov r8, r8)
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	46c0      	nop			; (mov r8, r8)
 8007650:	200004c8 	.word	0x200004c8

08007654 <USART1_IRQHandler>:

// USART1 global interrupt
void USART1_IRQHandler(void) {
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <USART1_IRQHandler+0x1c>)
 800765a:	0018      	movs	r0, r3
 800765c:	f7fd fa90 	bl	8004b80 <HAL_UART_IRQHandler>
    MY_UART_IRQHandler(&huart1);
 8007660:	4b03      	ldr	r3, [pc, #12]	; (8007670 <USART1_IRQHandler+0x1c>)
 8007662:	0018      	movs	r0, r3
 8007664:	f7ff fcc6 	bl	8006ff4 <MY_UART_IRQHandler>
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	20000514 	.word	0x20000514

08007674 <MY_GPIO_EXTI_IRQHandler>:

// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	0002      	movs	r2, r0
 800767c:	1dbb      	adds	r3, r7, #6
 800767e:	801a      	strh	r2, [r3, #0]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8007680:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <MY_GPIO_EXTI_IRQHandler+0x64>)
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	1dba      	adds	r2, r7, #6
 8007686:	8812      	ldrh	r2, [r2, #0]
 8007688:	4013      	ands	r3, r2
 800768a:	d105      	bne.n	8007698 <MY_GPIO_EXTI_IRQHandler+0x24>
 800768c:	4b12      	ldr	r3, [pc, #72]	; (80076d8 <MY_GPIO_EXTI_IRQHandler+0x64>)
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	1dba      	adds	r2, r7, #6
 8007692:	8812      	ldrh	r2, [r2, #0]
 8007694:	4013      	ands	r3, r2
 8007696:	d001      	beq.n	800769c <MY_GPIO_EXTI_IRQHandler+0x28>
 8007698:	2301      	movs	r3, #1
 800769a:	e000      	b.n	800769e <MY_GPIO_EXTI_IRQHandler+0x2a>
 800769c:	2300      	movs	r3, #0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <MY_GPIO_EXTI_IRQHandler+0x5a>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->RPR1;
 80076a2:	4b0d      	ldr	r3, [pc, #52]	; (80076d8 <MY_GPIO_EXTI_IRQHandler+0x64>)
 80076a4:	68db      	ldr	r3, [r3, #12]
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	200e      	movs	r0, #14
 80076aa:	183b      	adds	r3, r7, r0
 80076ac:	1db9      	adds	r1, r7, #6
 80076ae:	8809      	ldrh	r1, [r1, #0]
 80076b0:	400a      	ands	r2, r1
 80076b2:	801a      	strh	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80076b4:	4b08      	ldr	r3, [pc, #32]	; (80076d8 <MY_GPIO_EXTI_IRQHandler+0x64>)
 80076b6:	1dba      	adds	r2, r7, #6
 80076b8:	8812      	ldrh	r2, [r2, #0]
 80076ba:	60da      	str	r2, [r3, #12]
 80076bc:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <MY_GPIO_EXTI_IRQHandler+0x64>)
 80076be:	1dba      	adds	r2, r7, #6
 80076c0:	8812      	ldrh	r2, [r2, #0]
 80076c2:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_Rising_Callback(GPIO_Line);
 80076c4:	183b      	adds	r3, r7, r0
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	0018      	movs	r0, r3
 80076ca:	f7ff fe0d 	bl	80072e8 <HAL_GPIO_EXTI_Rising_Callback>
    }
}
 80076ce:	46c0      	nop			; (mov r8, r8)
 80076d0:	46bd      	mov	sp, r7
 80076d2:	b004      	add	sp, #16
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	40021800 	.word	0x40021800

080076dc <EXTI0_1_IRQHandler>:

// GPIO interrupts
void EXTI0_1_IRQHandler( void ) {
 80076dc:	b580      	push	{r7, lr}
 80076de:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_0|GPIO_PIN_1);
 80076e0:	2003      	movs	r0, #3
 80076e2:	f7ff ffc7 	bl	8007674 <MY_GPIO_EXTI_IRQHandler>
}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler( void ) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_2|GPIO_PIN_3);
 80076f0:	200c      	movs	r0, #12
 80076f2:	f7ff ffbf 	bl	8007674 <MY_GPIO_EXTI_IRQHandler>
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler( void ) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 8007700:	4b03      	ldr	r3, [pc, #12]	; (8007710 <EXTI4_15_IRQHandler+0x14>)
 8007702:	0018      	movs	r0, r3
 8007704:	f7ff ffb6 	bl	8007674 <MY_GPIO_EXTI_IRQHandler>
}
 8007708:	46c0      	nop			; (mov r8, r8)
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	46c0      	nop			; (mov r8, r8)
 8007710:	0000fff0 	.word	0x0000fff0

08007714 <LPTIM1_IRQHandler>:

// LPTIM1 global interrupt
#ifdef EVENT_TIMER
void LPTIM1_IRQHandler(void) {
 8007714:	b580      	push	{r7, lr}
 8007716:	af00      	add	r7, sp, #0
  HAL_LPTIM_IRQHandler(&hlptim1);
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <LPTIM1_IRQHandler+0x14>)
 800771a:	0018      	movs	r0, r3
 800771c:	f7fc f89e 	bl	800385c <HAL_LPTIM_IRQHandler>
}
 8007720:	46c0      	nop			; (mov r8, r8)
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	200005a0 	.word	0x200005a0

0800772c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007734:	4b11      	ldr	r3, [pc, #68]	; (800777c <_sbrk+0x50>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <_sbrk+0x16>
		heap_end = &end;
 800773c:	4b0f      	ldr	r3, [pc, #60]	; (800777c <_sbrk+0x50>)
 800773e:	4a10      	ldr	r2, [pc, #64]	; (8007780 <_sbrk+0x54>)
 8007740:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007742:	4b0e      	ldr	r3, [pc, #56]	; (800777c <_sbrk+0x50>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007748:	4b0c      	ldr	r3, [pc, #48]	; (800777c <_sbrk+0x50>)
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	18d3      	adds	r3, r2, r3
 8007750:	466a      	mov	r2, sp
 8007752:	4293      	cmp	r3, r2
 8007754:	d907      	bls.n	8007766 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007756:	f003 f8a7 	bl	800a8a8 <__errno>
 800775a:	0003      	movs	r3, r0
 800775c:	220c      	movs	r2, #12
 800775e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8007760:	2301      	movs	r3, #1
 8007762:	425b      	negs	r3, r3
 8007764:	e006      	b.n	8007774 <_sbrk+0x48>
	}

	heap_end += incr;
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <_sbrk+0x50>)
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	18d2      	adds	r2, r2, r3
 800776e:	4b03      	ldr	r3, [pc, #12]	; (800777c <_sbrk+0x50>)
 8007770:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	0018      	movs	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	b004      	add	sp, #16
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000478 	.word	0x20000478
 8007780:	200005e0 	.word	0x200005e0

08007784 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007788:	4b03      	ldr	r3, [pc, #12]	; (8007798 <SystemInit+0x14>)
 800778a:	2280      	movs	r2, #128	; 0x80
 800778c:	0512      	lsls	r2, r2, #20
 800778e:	609a      	str	r2, [r3, #8]
#endif
}
 8007790:	46c0      	nop			; (mov r8, r8)
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}
 8007796:	46c0      	nop			; (mov r8, r8)
 8007798:	e000ed00 	.word	0xe000ed00

0800779c <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t pllm;
  uint32_t hsidiv;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077a2:	4b3b      	ldr	r3, [pc, #236]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2238      	movs	r2, #56	; 0x38
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b10      	cmp	r3, #16
 80077ac:	d016      	beq.n	80077dc <SystemCoreClockUpdate+0x40>
 80077ae:	d802      	bhi.n	80077b6 <SystemCoreClockUpdate+0x1a>
 80077b0:	2b08      	cmp	r3, #8
 80077b2:	d005      	beq.n	80077c0 <SystemCoreClockUpdate+0x24>
 80077b4:	e046      	b.n	8007844 <SystemCoreClockUpdate+0xa8>
 80077b6:	2b18      	cmp	r3, #24
 80077b8:	d006      	beq.n	80077c8 <SystemCoreClockUpdate+0x2c>
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	d009      	beq.n	80077d2 <SystemCoreClockUpdate+0x36>
 80077be:	e041      	b.n	8007844 <SystemCoreClockUpdate+0xa8>
  {
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80077c0:	4b34      	ldr	r3, [pc, #208]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 80077c2:	4a35      	ldr	r2, [pc, #212]	; (8007898 <SystemCoreClockUpdate+0xfc>)
 80077c4:	601a      	str	r2, [r3, #0]
      break;
 80077c6:	e04f      	b.n	8007868 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSI:  /* LSI used as system clock */
      SystemCoreClock = LSI_VALUE;
 80077c8:	4b32      	ldr	r3, [pc, #200]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 80077ca:	22fa      	movs	r2, #250	; 0xfa
 80077cc:	01d2      	lsls	r2, r2, #7
 80077ce:	601a      	str	r2, [r3, #0]
      break;
 80077d0:	e04a      	b.n	8007868 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_LSE:  /* LSE used as system clock */
      SystemCoreClock = LSE_VALUE;
 80077d2:	4b30      	ldr	r3, [pc, #192]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 80077d4:	2280      	movs	r2, #128	; 0x80
 80077d6:	0212      	lsls	r2, r2, #8
 80077d8:	601a      	str	r2, [r3, #0]
      break;
 80077da:	e045      	b.n	8007868 <SystemCoreClockUpdate+0xcc>

    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80077dc:	4b2c      	ldr	r3, [pc, #176]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	2203      	movs	r2, #3
 80077e2:	4013      	ands	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL;
 80077e6:	4b2a      	ldr	r3, [pc, #168]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	091b      	lsrs	r3, r3, #4
 80077ec:	2207      	movs	r2, #7
 80077ee:	4013      	ands	r3, r2
 80077f0:	3301      	adds	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]

      if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	2b03      	cmp	r3, #3
 80077f8:	d106      	bne.n	8007808 <SystemCoreClockUpdate+0x6c>
      {
        pllvco = (HSE_VALUE / pllm);
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	4826      	ldr	r0, [pc, #152]	; (8007898 <SystemCoreClockUpdate+0xfc>)
 80077fe:	f7f8 fc93 	bl	8000128 <__udivsi3>
 8007802:	0003      	movs	r3, r0
 8007804:	617b      	str	r3, [r7, #20]
 8007806:	e005      	b.n	8007814 <SystemCoreClockUpdate+0x78>
      }
      else /* HSI used as PLL clock source */
      {
          pllvco = (HSI_VALUE / pllm);
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	4824      	ldr	r0, [pc, #144]	; (800789c <SystemCoreClockUpdate+0x100>)
 800780c:	f7f8 fc8c 	bl	8000128 <__udivsi3>
 8007810:	0003      	movs	r3, r0
 8007812:	617b      	str	r3, [r7, #20]
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007814:	4b1e      	ldr	r3, [pc, #120]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	0a1b      	lsrs	r3, r3, #8
 800781a:	227f      	movs	r2, #127	; 0x7f
 800781c:	401a      	ands	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4353      	muls	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 8007824:	4b1a      	ldr	r3, [pc, #104]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	0f5b      	lsrs	r3, r3, #29
 800782a:	2207      	movs	r2, #7
 800782c:	4013      	ands	r3, r2
 800782e:	3301      	adds	r3, #1
 8007830:	60bb      	str	r3, [r7, #8]

      SystemCoreClock = pllvco/pllr;
 8007832:	68b9      	ldr	r1, [r7, #8]
 8007834:	6978      	ldr	r0, [r7, #20]
 8007836:	f7f8 fc77 	bl	8000128 <__udivsi3>
 800783a:	0003      	movs	r3, r0
 800783c:	001a      	movs	r2, r3
 800783e:	4b15      	ldr	r3, [pc, #84]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 8007840:	601a      	str	r2, [r3, #0]
      break;
 8007842:	e011      	b.n	8007868 <SystemCoreClockUpdate+0xcc>
      
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
    default:                /* HSI used as system clock */
      hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV))>> RCC_CR_HSIDIV_Pos));
 8007844:	4b12      	ldr	r3, [pc, #72]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	0adb      	lsrs	r3, r3, #11
 800784a:	2207      	movs	r2, #7
 800784c:	4013      	ands	r3, r2
 800784e:	2201      	movs	r2, #1
 8007850:	409a      	lsls	r2, r3
 8007852:	0013      	movs	r3, r2
 8007854:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (HSI_VALUE/hsidiv);
 8007856:	6879      	ldr	r1, [r7, #4]
 8007858:	4810      	ldr	r0, [pc, #64]	; (800789c <SystemCoreClockUpdate+0x100>)
 800785a:	f7f8 fc65 	bl	8000128 <__udivsi3>
 800785e:	0003      	movs	r3, r0
 8007860:	001a      	movs	r2, r3
 8007862:	4b0c      	ldr	r3, [pc, #48]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 8007864:	601a      	str	r2, [r3, #0]
      break;
 8007866:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007868:	4b09      	ldr	r3, [pc, #36]	; (8007890 <SystemCoreClockUpdate+0xf4>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	220f      	movs	r2, #15
 8007870:	401a      	ands	r2, r3
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <SystemCoreClockUpdate+0x104>)
 8007874:	0092      	lsls	r2, r2, #2
 8007876:	58d3      	ldr	r3, [r2, r3]
 8007878:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800787a:	4b06      	ldr	r3, [pc, #24]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	40da      	lsrs	r2, r3
 8007882:	4b04      	ldr	r3, [pc, #16]	; (8007894 <SystemCoreClockUpdate+0xf8>)
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	46c0      	nop			; (mov r8, r8)
 8007888:	46bd      	mov	sp, r7
 800788a:	b006      	add	sp, #24
 800788c:	bd80      	pop	{r7, pc}
 800788e:	46c0      	nop			; (mov r8, r8)
 8007890:	40021000 	.word	0x40021000
 8007894:	20000008 	.word	0x20000008
 8007898:	007a1200 	.word	0x007a1200
 800789c:	00f42400 	.word	0x00f42400
 80078a0:	0800b604 	.word	0x0800b604

080078a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80078a4:	480d      	ldr	r0, [pc, #52]	; (80078dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80078a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80078a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80078aa:	e003      	b.n	80078b4 <LoopCopyDataInit>

080078ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80078ac:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80078ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80078b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80078b2:	3104      	adds	r1, #4

080078b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80078b4:	480b      	ldr	r0, [pc, #44]	; (80078e4 <LoopForever+0xa>)
  ldr r3, =_edata
 80078b6:	4b0c      	ldr	r3, [pc, #48]	; (80078e8 <LoopForever+0xe>)
  adds r2, r0, r1
 80078b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80078ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80078bc:	d3f6      	bcc.n	80078ac <CopyDataInit>
  ldr r2, =_sbss
 80078be:	4a0b      	ldr	r2, [pc, #44]	; (80078ec <LoopForever+0x12>)
  b LoopFillZerobss
 80078c0:	e002      	b.n	80078c8 <LoopFillZerobss>

080078c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80078c2:	2300      	movs	r3, #0
  str  r3, [r2]
 80078c4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078c6:	3204      	adds	r2, #4

080078c8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80078c8:	4b09      	ldr	r3, [pc, #36]	; (80078f0 <LoopForever+0x16>)
  cmp r2, r3
 80078ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80078cc:	d3f9      	bcc.n	80078c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80078ce:	f7ff ff59 	bl	8007784 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80078d2:	f002 ffef 	bl	800a8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80078d6:	f7ff fa63 	bl	8006da0 <main>

080078da <LoopForever>:

LoopForever:
    b LoopForever
 80078da:	e7fe      	b.n	80078da <LoopForever>
  ldr   r0, =_estack
 80078dc:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 80078e0:	0800ba50 	.word	0x0800ba50
  ldr r0, =_sdata
 80078e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80078e8:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 80078ec:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 80078f0:	200005dc 	.word	0x200005dc

080078f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80078f4:	e7fe      	b.n	80078f4 <ADC1_IRQHandler>
	...

080078f8 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 80078f8:	b5b0      	push	{r4, r5, r7, lr}
 80078fa:	b092      	sub	sp, #72	; 0x48
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 8007902:	2300      	movs	r3, #0
 8007904:	643b      	str	r3, [r7, #64]	; 0x40
    double fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 8007906:	2300      	movs	r3, #0
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 800790a:	2300      	movs	r3, #0
 800790c:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 800790e:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 8007910:	e000      	b.n	8007914 <JAtoN+0x1c>
        p += 1;
 8007912:	3401      	adds	r4, #1
    while (*p == ' ') {
 8007914:	7823      	ldrb	r3, [r4, #0]
 8007916:	2b20      	cmp	r3, #32
 8007918:	d0fb      	beq.n	8007912 <JAtoN+0x1a>
    }
    if (*p == '-') {
 800791a:	7823      	ldrb	r3, [r4, #0]
 800791c:	2b2d      	cmp	r3, #45	; 0x2d
 800791e:	d103      	bne.n	8007928 <JAtoN+0x30>
        sign = TRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 8007924:	3401      	adds	r4, #1
 8007926:	e005      	b.n	8007934 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 8007928:	7823      	ldrb	r3, [r4, #0]
 800792a:	2b2b      	cmp	r3, #43	; 0x2b
 800792c:	d100      	bne.n	8007930 <JAtoN+0x38>
            p += 1;
 800792e:	3401      	adds	r4, #1
        }
        sign = FALSE;
 8007930:	2300      	movs	r3, #0
 8007932:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 8007934:	2301      	movs	r3, #1
 8007936:	425b      	negs	r3, r3
 8007938:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 800793a:	2300      	movs	r3, #0
 800793c:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 800793e:	7823      	ldrb	r3, [r4, #0]
 8007940:	001d      	movs	r5, r3
        if (c < '0' || c > '9') {
 8007942:	2d2f      	cmp	r5, #47	; 0x2f
 8007944:	dd01      	ble.n	800794a <JAtoN+0x52>
 8007946:	2d39      	cmp	r5, #57	; 0x39
 8007948:	dd06      	ble.n	8007958 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 800794a:	2d2e      	cmp	r5, #46	; 0x2e
 800794c:	d109      	bne.n	8007962 <JAtoN+0x6a>
 800794e:	69fb      	ldr	r3, [r7, #28]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da06      	bge.n	8007962 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 8007958:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	3301      	adds	r3, #1
 800795e:	623b      	str	r3, [r7, #32]
        c = *p;
 8007960:	e7ed      	b.n	800793e <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 8007962:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	425b      	negs	r3, r3
 8007968:	18e4      	adds	r4, r4, r3
    if (decPt < 0) {
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	2b00      	cmp	r3, #0
 800796e:	da02      	bge.n	8007976 <JAtoN+0x7e>
        decPt = mantSize;
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	61fb      	str	r3, [r7, #28]
 8007974:	e002      	b.n	800797c <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8007976:	6a3b      	ldr	r3, [r7, #32]
 8007978:	3b01      	subs	r3, #1
 800797a:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 800797c:	6a3b      	ldr	r3, [r7, #32]
 800797e:	2b12      	cmp	r3, #18
 8007980:	dd05      	ble.n	800798e <JAtoN+0x96>
        fracExp = decPt - 18;
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	3b12      	subs	r3, #18
 8007986:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 8007988:	2312      	movs	r3, #18
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	e003      	b.n	8007996 <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	1ad3      	subs	r3, r2, r3
 8007994:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d105      	bne.n	80079a8 <JAtoN+0xb0>
        fraction = 0.0;
 800799c:	2300      	movs	r3, #0
 800799e:	2400      	movs	r4, #0
 80079a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80079a2:	63fc      	str	r4, [r7, #60]	; 0x3c
        p = string;
 80079a4:	68fc      	ldr	r4, [r7, #12]
        goto done;
 80079a6:	e0ca      	b.n	8007b3e <JAtoN+0x246>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 80079a8:	2300      	movs	r3, #0
 80079aa:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 80079ac:	e014      	b.n	80079d8 <JAtoN+0xe0>
        {
            c = *p;
 80079ae:	7823      	ldrb	r3, [r4, #0]
 80079b0:	001d      	movs	r5, r3
            p += 1;
 80079b2:	3401      	adds	r4, #1
            if (c == '.') {
 80079b4:	2d2e      	cmp	r5, #46	; 0x2e
 80079b6:	d102      	bne.n	80079be <JAtoN+0xc6>
                c = *p;
 80079b8:	7823      	ldrb	r3, [r4, #0]
 80079ba:	001d      	movs	r5, r3
                p += 1;
 80079bc:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	0013      	movs	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	189b      	adds	r3, r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	001a      	movs	r2, r3
 80079ca:	002b      	movs	r3, r5
 80079cc:	3b30      	subs	r3, #48	; 0x30
 80079ce:	18d3      	adds	r3, r2, r3
 80079d0:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	3b01      	subs	r3, #1
 80079d6:	623b      	str	r3, [r7, #32]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	2b09      	cmp	r3, #9
 80079dc:	dce7      	bgt.n	80079ae <JAtoN+0xb6>
        }
        frac2 = 0L;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 80079e2:	e014      	b.n	8007a0e <JAtoN+0x116>
        {
            c = *p;
 80079e4:	7823      	ldrb	r3, [r4, #0]
 80079e6:	001d      	movs	r5, r3
            p += 1;
 80079e8:	3401      	adds	r4, #1
            if (c == '.') {
 80079ea:	2d2e      	cmp	r5, #46	; 0x2e
 80079ec:	d102      	bne.n	80079f4 <JAtoN+0xfc>
                c = *p;
 80079ee:	7823      	ldrb	r3, [r4, #0]
 80079f0:	001d      	movs	r5, r3
                p += 1;
 80079f2:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	0013      	movs	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	189b      	adds	r3, r3, r2
 80079fc:	005b      	lsls	r3, r3, #1
 80079fe:	001a      	movs	r2, r3
 8007a00:	002b      	movs	r3, r5
 8007a02:	3b30      	subs	r3, #48	; 0x30
 8007a04:	18d3      	adds	r3, r2, r3
 8007a06:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	623b      	str	r3, [r7, #32]
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dce7      	bgt.n	80079e4 <JAtoN+0xec>
        }
        fraction = (1.0e9 * frac1) + frac2;
 8007a14:	69b8      	ldr	r0, [r7, #24]
 8007a16:	f7fa fb51 	bl	80020bc <__aeabi_i2d>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <JAtoN+0x27c>)
 8007a1e:	f7f9 fd5d 	bl	80014dc <__aeabi_dmul>
 8007a22:	0003      	movs	r3, r0
 8007a24:	000c      	movs	r4, r1
 8007a26:	0025      	movs	r5, r4
 8007a28:	001c      	movs	r4, r3
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7fa fb46 	bl	80020bc <__aeabi_i2d>
 8007a30:	0002      	movs	r2, r0
 8007a32:	000b      	movs	r3, r1
 8007a34:	0020      	movs	r0, r4
 8007a36:	0029      	movs	r1, r5
 8007a38:	f7f8 fe2a 	bl	8000690 <__aeabi_dadd>
 8007a3c:	0003      	movs	r3, r0
 8007a3e:	000c      	movs	r4, r1
 8007a40:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a42:	63fc      	str	r4, [r7, #60]	; 0x3c

    /*
     * Skim off the exponent.
     */

    p = pExp;
 8007a44:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 8007a46:	7823      	ldrb	r3, [r4, #0]
 8007a48:	2b45      	cmp	r3, #69	; 0x45
 8007a4a:	d002      	beq.n	8007a52 <JAtoN+0x15a>
 8007a4c:	7823      	ldrb	r3, [r4, #0]
 8007a4e:	2b65      	cmp	r3, #101	; 0x65
 8007a50:	d11f      	bne.n	8007a92 <JAtoN+0x19a>
        p += 1;
 8007a52:	3401      	adds	r4, #1
        if (*p == '-') {
 8007a54:	7823      	ldrb	r3, [r4, #0]
 8007a56:	2b2d      	cmp	r3, #45	; 0x2d
 8007a58:	d103      	bne.n	8007a62 <JAtoN+0x16a>
            expSign = TRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 8007a5e:	3401      	adds	r4, #1
 8007a60:	e011      	b.n	8007a86 <JAtoN+0x18e>
        } else {
            if (*p == '+') {
 8007a62:	7823      	ldrb	r3, [r4, #0]
 8007a64:	2b2b      	cmp	r3, #43	; 0x2b
 8007a66:	d100      	bne.n	8007a6a <JAtoN+0x172>
                p += 1;
 8007a68:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 8007a6e:	e00a      	b.n	8007a86 <JAtoN+0x18e>
            exp = exp * 10 + (*p - '0');
 8007a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a72:	0013      	movs	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	189b      	adds	r3, r3, r2
 8007a78:	005b      	lsls	r3, r3, #1
 8007a7a:	001a      	movs	r2, r3
 8007a7c:	7823      	ldrb	r3, [r4, #0]
 8007a7e:	3b30      	subs	r3, #48	; 0x30
 8007a80:	18d3      	adds	r3, r2, r3
 8007a82:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 8007a84:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 8007a86:	7823      	ldrb	r3, [r4, #0]
 8007a88:	2b2f      	cmp	r3, #47	; 0x2f
 8007a8a:	d902      	bls.n	8007a92 <JAtoN+0x19a>
 8007a8c:	7823      	ldrb	r3, [r4, #0]
 8007a8e:	2b39      	cmp	r3, #57	; 0x39
 8007a90:	d9ee      	bls.n	8007a70 <JAtoN+0x178>
        }
    }
    if (expSign) {
 8007a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <JAtoN+0x1aa>
        exp = fracExp - exp;
 8007a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aa0:	e003      	b.n	8007aaa <JAtoN+0x1b2>
    } else {
        exp = fracExp + exp;
 8007aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	18d3      	adds	r3, r2, r3
 8007aa8:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	da05      	bge.n	8007abc <JAtoN+0x1c4>
        expSign = TRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	425b      	negs	r3, r3
 8007ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007aba:	e001      	b.n	8007ac0 <JAtoN+0x1c8>
    } else {
        expSign = FALSE;
 8007abc:	2300      	movs	r3, #0
 8007abe:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 8007ac0:	4b2d      	ldr	r3, [pc, #180]	; (8007b78 <JAtoN+0x280>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	dd02      	ble.n	8007ad0 <JAtoN+0x1d8>
        exp = maxExponent;
 8007aca:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <JAtoN+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <JAtoN+0x284>)
 8007ad4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 8007ad8:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <JAtoN+0x288>)
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007adc:	e014      	b.n	8007b08 <JAtoN+0x210>
        if (exp & 01) {
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	d00a      	beq.n	8007afc <JAtoN+0x204>
            dblExp *= *d;
 8007ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007af0:	f7f9 fcf4 	bl	80014dc <__aeabi_dmul>
 8007af4:	0002      	movs	r2, r0
 8007af6:	000b      	movs	r3, r1
 8007af8:	633a      	str	r2, [r7, #48]	; 0x30
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 8007afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007afe:	105b      	asrs	r3, r3, #1
 8007b00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	3308      	adds	r3, #8
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e7      	bne.n	8007ade <JAtoN+0x1e6>
        }
    }
    if (expSign) {
 8007b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00a      	beq.n	8007b2a <JAtoN+0x232>
        fraction /= dblExp;
 8007b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b1c:	f7f9 f8d4 	bl	8000cc8 <__aeabi_ddiv>
 8007b20:	0002      	movs	r2, r0
 8007b22:	000b      	movs	r3, r1
 8007b24:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b28:	e009      	b.n	8007b3e <JAtoN+0x246>
    } else {
        fraction *= dblExp;
 8007b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b32:	f7f9 fcd3 	bl	80014dc <__aeabi_dmul>
 8007b36:	0002      	movs	r2, r0
 8007b38:	000b      	movs	r3, r1
 8007b3a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

done:
    if (endPtr != NULL) {
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d001      	beq.n	8007b48 <JAtoN+0x250>
        *endPtr = (char *) p;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 8007b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d007      	beq.n	8007b5e <JAtoN+0x266>
        return -fraction;
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b50:	603b      	str	r3, [r7, #0]
 8007b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b54:	2280      	movs	r2, #128	; 0x80
 8007b56:	0612      	lsls	r2, r2, #24
 8007b58:	405a      	eors	r2, r3
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	e003      	b.n	8007b66 <JAtoN+0x26e>
    }
    return fraction;
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8007b62:	603b      	str	r3, [r7, #0]
 8007b64:	607c      	str	r4, [r7, #4]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	687c      	ldr	r4, [r7, #4]
}
 8007b6a:	0018      	movs	r0, r3
 8007b6c:	0021      	movs	r1, r4
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b012      	add	sp, #72	; 0x48
 8007b72:	bdb0      	pop	{r4, r5, r7, pc}
 8007b74:	41cdcd65 	.word	0x41cdcd65
 8007b78:	2000000c 	.word	0x2000000c
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	20000010 	.word	0x20000010

08007b84 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8007b84:	b5b0      	push	{r4, r5, r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d002      	beq.n	8007b9a <case_insensitive_strcmp+0x16>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e07e      	b.n	8007c9c <case_insensitive_strcmp+0x118>
    }

    if (string1 == string2)
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d10d      	bne.n	8007bc2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e078      	b.n	8007c9c <case_insensitive_strcmp+0x118>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d101      	bne.n	8007bb6 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	e072      	b.n	8007c9c <case_insensitive_strcmp+0x118>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	603b      	str	r3, [r7, #0]
 8007bc2:	240f      	movs	r4, #15
 8007bc4:	193b      	adds	r3, r7, r4
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	7812      	ldrb	r2, [r2, #0]
 8007bca:	701a      	strb	r2, [r3, #0]
 8007bcc:	f002 fe96 	bl	800a8fc <__locale_ctype_ptr>
 8007bd0:	0002      	movs	r2, r0
 8007bd2:	193b      	adds	r3, r7, r4
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	781b      	ldrb	r3, [r3, #0]
 8007bdc:	001a      	movs	r2, r3
 8007bde:	2303      	movs	r3, #3
 8007be0:	4013      	ands	r3, r2
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d105      	bne.n	8007bf2 <case_insensitive_strcmp+0x6e>
 8007be6:	230f      	movs	r3, #15
 8007be8:	18fb      	adds	r3, r7, r3
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	3320      	adds	r3, #32
 8007bee:	001c      	movs	r4, r3
 8007bf0:	e002      	b.n	8007bf8 <case_insensitive_strcmp+0x74>
 8007bf2:	230f      	movs	r3, #15
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	781c      	ldrb	r4, [r3, #0]
 8007bf8:	250e      	movs	r5, #14
 8007bfa:	197b      	adds	r3, r7, r5
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	7812      	ldrb	r2, [r2, #0]
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	f002 fe7b 	bl	800a8fc <__locale_ctype_ptr>
 8007c06:	0002      	movs	r2, r0
 8007c08:	197b      	adds	r3, r7, r5
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	18d3      	adds	r3, r2, r3
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	001a      	movs	r2, r3
 8007c14:	2303      	movs	r3, #3
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d104      	bne.n	8007c26 <case_insensitive_strcmp+0xa2>
 8007c1c:	230e      	movs	r3, #14
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	3320      	adds	r3, #32
 8007c24:	e002      	b.n	8007c2c <case_insensitive_strcmp+0xa8>
 8007c26:	230e      	movs	r3, #14
 8007c28:	18fb      	adds	r3, r7, r3
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	429c      	cmp	r4, r3
 8007c2e:	d0bc      	beq.n	8007baa <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8007c30:	240d      	movs	r4, #13
 8007c32:	193b      	adds	r3, r7, r4
 8007c34:	687a      	ldr	r2, [r7, #4]
 8007c36:	7812      	ldrb	r2, [r2, #0]
 8007c38:	701a      	strb	r2, [r3, #0]
 8007c3a:	f002 fe5f 	bl	800a8fc <__locale_ctype_ptr>
 8007c3e:	0002      	movs	r2, r0
 8007c40:	193b      	adds	r3, r7, r4
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	3301      	adds	r3, #1
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	001a      	movs	r2, r3
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	4013      	ands	r3, r2
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d105      	bne.n	8007c60 <case_insensitive_strcmp+0xdc>
 8007c54:	230d      	movs	r3, #13
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	3320      	adds	r3, #32
 8007c5c:	001c      	movs	r4, r3
 8007c5e:	e002      	b.n	8007c66 <case_insensitive_strcmp+0xe2>
 8007c60:	230d      	movs	r3, #13
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	781c      	ldrb	r4, [r3, #0]
 8007c66:	250c      	movs	r5, #12
 8007c68:	197b      	adds	r3, r7, r5
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	701a      	strb	r2, [r3, #0]
 8007c70:	f002 fe44 	bl	800a8fc <__locale_ctype_ptr>
 8007c74:	0002      	movs	r2, r0
 8007c76:	197b      	adds	r3, r7, r5
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	18d3      	adds	r3, r2, r3
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	001a      	movs	r2, r3
 8007c82:	2303      	movs	r3, #3
 8007c84:	4013      	ands	r3, r2
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d104      	bne.n	8007c94 <case_insensitive_strcmp+0x110>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	18fb      	adds	r3, r7, r3
 8007c8e:	781b      	ldrb	r3, [r3, #0]
 8007c90:	3320      	adds	r3, #32
 8007c92:	e002      	b.n	8007c9a <case_insensitive_strcmp+0x116>
 8007c94:	230c      	movs	r3, #12
 8007c96:	18fb      	adds	r3, r7, r3
 8007c98:	781b      	ldrb	r3, [r3, #0]
 8007c9a:	1ae3      	subs	r3, r4, r3
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	b004      	add	sp, #16
 8007ca2:	bdb0      	pop	{r4, r5, r7, pc}

08007ca4 <Jstrdup>:

static internal_hooks default_hooks = { internal_malloc, internal_free, internal_realloc };
static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* Jstrdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <Jstrdup+0x1c>
    {
        return NULL;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e019      	b.n	8007cf4 <Jstrdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7f8 fa28 	bl	8000118 <strlen>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	3301      	adds	r3, #1
 8007ccc:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	0010      	movs	r0, r2
 8007cd6:	4798      	blx	r3
 8007cd8:	0003      	movs	r3, r0
 8007cda:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <Jstrdup+0x42>
    {
        return NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e006      	b.n	8007cf4 <Jstrdup+0x50>
    }
    memcpy(copy, string, length);
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0018      	movs	r0, r3
 8007cee:	f002 fe39 	bl	800a964 <memcpy>

    return copy;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
}
 8007cf4:	0018      	movs	r0, r3
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	b004      	add	sp, #16
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <JFree>:
}

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return global_hooks.allocate(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(p);
 8007d04:	4b04      	ldr	r3, [pc, #16]	; (8007d18 <JFree+0x1c>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	0010      	movs	r0, r2
 8007d0c:	4798      	blx	r3
}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	46bd      	mov	sp, r7
 8007d12:	b002      	add	sp, #8
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	46c0      	nop			; (mov r8, r8)
 8007d18:	20000058 	.word	0x20000058

08007d1c <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item(const internal_hooks * const hooks)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
    J* node = (J*)hooks->allocate(sizeof(J));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2028      	movs	r0, #40	; 0x28
 8007d2a:	4798      	blx	r3
 8007d2c:	0003      	movs	r3, r0
 8007d2e:	60fb      	str	r3, [r7, #12]
    if (node)
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <JNew_Item+0x26>
    {
        memset(node, '\0', sizeof(J));
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2228      	movs	r2, #40	; 0x28
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f002 fe2d 	bl	800a99c <memset>
    }

    return node;
 8007d42:	68fb      	ldr	r3, [r7, #12]
}
 8007d44:	0018      	movs	r0, r3
 8007d46:	46bd      	mov	sp, r7
 8007d48:	b004      	add	sp, #16
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8007d58:	e038      	b.n	8007dcc <JDelete+0x80>
    {
        next = item->next;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	68da      	ldr	r2, [r3, #12]
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	4013      	ands	r3, r2
 8007d6a:	d108      	bne.n	8007d7e <JDelete+0x32>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d004      	beq.n	8007d7e <JDelete+0x32>
        {
            JDelete(item->child);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	0018      	movs	r0, r3
 8007d7a:	f7ff ffe7 	bl	8007d4c <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	68da      	ldr	r2, [r3, #12]
 8007d82:	2380      	movs	r3, #128	; 0x80
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4013      	ands	r3, r2
 8007d88:	d109      	bne.n	8007d9e <JDelete+0x52>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d005      	beq.n	8007d9e <JDelete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8007d92:	4b12      	ldr	r3, [pc, #72]	; (8007ddc <JDelete+0x90>)
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	0018      	movs	r0, r3
 8007d9c:	4790      	blx	r2
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68da      	ldr	r2, [r3, #12]
 8007da2:	2380      	movs	r3, #128	; 0x80
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4013      	ands	r3, r2
 8007da8:	d109      	bne.n	8007dbe <JDelete+0x72>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a1b      	ldr	r3, [r3, #32]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <JDelete+0x72>
        {
            global_hooks.deallocate(item->string);
 8007db2:	4b0a      	ldr	r3, [pc, #40]	; (8007ddc <JDelete+0x90>)
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	0018      	movs	r0, r3
 8007dbc:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 8007dbe:	4b07      	ldr	r3, [pc, #28]	; (8007ddc <JDelete+0x90>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	0010      	movs	r0, r2
 8007dc6:	4798      	blx	r3
        item = next;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1c3      	bne.n	8007d5a <JDelete+0xe>
    }
}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	b004      	add	sp, #16
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	46c0      	nop			; (mov r8, r8)
 8007ddc:	20000058 	.word	0x20000058

08007de0 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8007de4:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 8007dec:	b5b0      	push	{r4, r5, r7, lr}
 8007dee:	b098      	sub	sp, #96	; 0x60
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
    double number = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	2400      	movs	r4, #0
 8007dfa:	653b      	str	r3, [r7, #80]	; 0x50
 8007dfc:	657c      	str	r4, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8007e02:	234f      	movs	r3, #79	; 0x4f
 8007e04:	18fc      	adds	r4, r7, r3
 8007e06:	f7ff ffeb 	bl	8007de0 <get_decimal_point>
 8007e0a:	0003      	movs	r3, r0
 8007e0c:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <parse_number+0x34>
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <parse_number+0x38>
    {
        return false;
 8007e20:	2300      	movs	r3, #0
 8007e22:	e08b      	b.n	8007f3c <parse_number+0x150>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8007e24:	2300      	movs	r3, #0
 8007e26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e28:	e02a      	b.n	8007e80 <parse_number+0x94>
    {
        switch (buffer_at_offset(input_buffer)[i])
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6899      	ldr	r1, [r3, #8]
 8007e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e34:	18cb      	adds	r3, r1, r3
 8007e36:	18d3      	adds	r3, r2, r3
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	3b2b      	subs	r3, #43	; 0x2b
 8007e3c:	2b3a      	cmp	r3, #58	; 0x3a
 8007e3e:	d82e      	bhi.n	8007e9e <parse_number+0xb2>
 8007e40:	009a      	lsls	r2, r3, #2
 8007e42:	4b40      	ldr	r3, [pc, #256]	; (8007f44 <parse_number+0x158>)
 8007e44:	18d3      	adds	r3, r2, r3
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	469f      	mov	pc, r3
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	6899      	ldr	r1, [r3, #8]
 8007e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e54:	18cb      	adds	r3, r1, r3
 8007e56:	18d3      	adds	r3, r2, r3
 8007e58:	7819      	ldrb	r1, [r3, #0]
 8007e5a:	2308      	movs	r3, #8
 8007e5c:	18fa      	adds	r2, r7, r3
 8007e5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e60:	18d3      	adds	r3, r2, r3
 8007e62:	1c0a      	adds	r2, r1, #0
 8007e64:	701a      	strb	r2, [r3, #0]
                break;
 8007e66:	e008      	b.n	8007e7a <parse_number+0x8e>

            case '.':
                number_c_string[i] = decimal_point;
 8007e68:	2308      	movs	r3, #8
 8007e6a:	18fa      	adds	r2, r7, r3
 8007e6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6e:	18d3      	adds	r3, r2, r3
 8007e70:	224f      	movs	r2, #79	; 0x4f
 8007e72:	18ba      	adds	r2, r7, r2
 8007e74:	7812      	ldrb	r2, [r2, #0]
 8007e76:	701a      	strb	r2, [r3, #0]
                break;
 8007e78:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8007e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e82:	2b3e      	cmp	r3, #62	; 0x3e
 8007e84:	d80d      	bhi.n	8007ea2 <parse_number+0xb6>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <parse_number+0xb6>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e92:	18d2      	adds	r2, r2, r3
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d3c6      	bcc.n	8007e2a <parse_number+0x3e>

            default:
                goto loop_end;
        }
    }
loop_end:
 8007e9c:	e001      	b.n	8007ea2 <parse_number+0xb6>
                goto loop_end;
 8007e9e:	46c0      	nop			; (mov r8, r8)
 8007ea0:	e000      	b.n	8007ea4 <parse_number+0xb8>
loop_end:
 8007ea2:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 8007ea4:	2108      	movs	r1, #8
 8007ea6:	187a      	adds	r2, r7, r1
 8007ea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007eaa:	18d3      	adds	r3, r2, r3
 8007eac:	2200      	movs	r2, #0
 8007eae:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8007eb0:	2348      	movs	r3, #72	; 0x48
 8007eb2:	18fa      	adds	r2, r7, r3
 8007eb4:	000d      	movs	r5, r1
 8007eb6:	187b      	adds	r3, r7, r1
 8007eb8:	0011      	movs	r1, r2
 8007eba:	0018      	movs	r0, r3
 8007ebc:	f7ff fd1c 	bl	80078f8 <JAtoN>
 8007ec0:	0003      	movs	r3, r0
 8007ec2:	000c      	movs	r4, r1
 8007ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8007ec6:	657c      	str	r4, [r7, #84]	; 0x54
#endif
    if (number_c_string == after_end)
 8007ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eca:	0029      	movs	r1, r5
 8007ecc:	187b      	adds	r3, r7, r1
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d101      	bne.n	8007ed6 <parse_number+0xea>
    {
        return false; /* parse_error */
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e032      	b.n	8007f3c <parse_number+0x150>
    }

    item->valuedouble = number;
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007eda:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8007edc:	6193      	str	r3, [r2, #24]
 8007ede:	61d4      	str	r4, [r2, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8007ee0:	4a19      	ldr	r2, [pc, #100]	; (8007f48 <parse_number+0x15c>)
 8007ee2:	4b1a      	ldr	r3, [pc, #104]	; (8007f4c <parse_number+0x160>)
 8007ee4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007ee6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ee8:	f7f8 fac8 	bl	800047c <__aeabi_dcmpge>
 8007eec:	1e03      	subs	r3, r0, #0
 8007eee:	d003      	beq.n	8007ef8 <parse_number+0x10c>
    {
        item->valueint = INT_MAX;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a17      	ldr	r2, [pc, #92]	; (8007f50 <parse_number+0x164>)
 8007ef4:	615a      	str	r2, [r3, #20]
 8007ef6:	e013      	b.n	8007f20 <parse_number+0x134>
    }
    else if (number <= INT_MIN)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <parse_number+0x168>)
 8007efc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007efe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f00:	f7f8 faa8 	bl	8000454 <__aeabi_dcmple>
 8007f04:	1e03      	subs	r3, r0, #0
 8007f06:	d004      	beq.n	8007f12 <parse_number+0x126>
    {
        item->valueint = INT_MIN;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2280      	movs	r2, #128	; 0x80
 8007f0c:	0612      	lsls	r2, r2, #24
 8007f0e:	615a      	str	r2, [r3, #20]
 8007f10:	e006      	b.n	8007f20 <parse_number+0x134>
    }
    else
    {
        item->valueint = (int)number;
 8007f12:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8007f14:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f16:	f7fa f89b 	bl	8002050 <__aeabi_d2iz>
 8007f1a:	0002      	movs	r2, r0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2208      	movs	r2, #8
 8007f24:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f2c:	0011      	movs	r1, r2
 8007f2e:	2208      	movs	r2, #8
 8007f30:	18ba      	adds	r2, r7, r2
 8007f32:	1a8a      	subs	r2, r1, r2
 8007f34:	189a      	adds	r2, r3, r2
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	609a      	str	r2, [r3, #8]
    return true;
 8007f3a:	2301      	movs	r3, #1
}
 8007f3c:	0018      	movs	r0, r3
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	b018      	add	sp, #96	; 0x60
 8007f42:	bdb0      	pop	{r4, r5, r7, pc}
 8007f44:	0800b664 	.word	0x0800b664
 8007f48:	ffc00000 	.word	0xffc00000
 8007f4c:	41dfffff 	.word	0x41dfffff
 8007f50:	7fffffff 	.word	0x7fffffff
 8007f54:	c1e00000 	.word	0xc1e00000

08007f58 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <ensure+0x20>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d101      	bne.n	8007f7c <ensure+0x24>
    {
        return NULL;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e088      	b.n	800808e <ensure+0x136>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <ensure+0x3c>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d301      	bcc.n	8007f94 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8007f90:	2300      	movs	r3, #0
 8007f92:	e07c      	b.n	800808e <ensure+0x136>
    }

    if (needed > INT_MAX)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da01      	bge.n	8007f9e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	e077      	b.n	800808e <ensure+0x136>
    }

    needed += p->offset + 1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	18d3      	adds	r3, r2, r3
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d805      	bhi.n	8007fc0 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	18d3      	adds	r3, r2, r3
 8007fbe:	e066      	b.n	800808e <ensure+0x136>
    }

    if (p->noalloc) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <ensure+0x74>
        return NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e060      	b.n	800808e <ensure+0x136>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	4a32      	ldr	r2, [pc, #200]	; (8008098 <ensure+0x140>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d907      	bls.n	8007fe4 <ensure+0x8c>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	db02      	blt.n	8007fe0 <ensure+0x88>
        {
            newsize = INT_MAX;
 8007fda:	4b30      	ldr	r3, [pc, #192]	; (800809c <ensure+0x144>)
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	e004      	b.n	8007fea <ensure+0x92>
        }
        else
        {
            return NULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e054      	b.n	800808e <ensure+0x136>
        }
    }
    else
    {
        newsize = needed * 2;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d019      	beq.n	8008026 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1a      	ldr	r2, [r3, #32]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	0018      	movs	r0, r3
 8007ffe:	4790      	blx	r2
 8008000:	0003      	movs	r3, r0
 8008002:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d137      	bne.n	800807a <ensure+0x122>
        {
            p->hooks.deallocate(p->buffer);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69da      	ldr	r2, [r3, #28]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	0018      	movs	r0, r3
 8008014:	4790      	blx	r2
            p->length = 0;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]

            return NULL;
 8008022:	2300      	movs	r3, #0
 8008024:	e033      	b.n	800808e <ensure+0x136>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	0010      	movs	r0, r2
 800802e:	4798      	blx	r3
 8008030:	0003      	movs	r3, r0
 8008032:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10d      	bne.n	8008056 <ensure+0xfe>
        {
            p->hooks.deallocate(p->buffer);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	69da      	ldr	r2, [r3, #28]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	0018      	movs	r0, r3
 8008044:	4790      	blx	r2
            p->length = 0;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	601a      	str	r2, [r3, #0]

            return NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	e01b      	b.n	800808e <ensure+0x136>
        }
        if (newbuffer)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <ensure+0x116>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6819      	ldr	r1, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	0018      	movs	r0, r3
 800806a:	f002 fc7b 	bl	800a964 <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	69da      	ldr	r2, [r3, #28]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	0018      	movs	r0, r3
 8008078:	4790      	blx	r2
    }
    p->length = newsize;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	68fa      	ldr	r2, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	18d3      	adds	r3, r2, r3
}
 800808e:	0018      	movs	r0, r3
 8008090:	46bd      	mov	sp, r7
 8008092:	b004      	add	sp, #16
 8008094:	bd80      	pop	{r7, pc}
 8008096:	46c0      	nop			; (mov r8, r8)
 8008098:	3fffffff 	.word	0x3fffffff
 800809c:	7fffffff 	.word	0x7fffffff

080080a0 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 80080a0:	b590      	push	{r4, r7, lr}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 80080a8:	2300      	movs	r3, #0
 80080aa:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d014      	beq.n	80080dc <update_offset+0x3c>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d010      	beq.n	80080dc <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	18d3      	adds	r3, r2, r3
 80080c4:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689c      	ldr	r4, [r3, #8]
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	0018      	movs	r0, r3
 80080ce:	f7f8 f823 	bl	8000118 <strlen>
 80080d2:	0003      	movs	r3, r0
 80080d4:	18e2      	adds	r2, r4, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	609a      	str	r2, [r3, #8]
 80080da:	e000      	b.n	80080de <update_offset+0x3e>
        return;
 80080dc:	46c0      	nop			; (mov r8, r8)
}
 80080de:	46bd      	mov	sp, r7
 80080e0:	b005      	add	sp, #20
 80080e2:	bd90      	pop	{r4, r7, pc}

080080e4 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 80080e4:	b590      	push	{r4, r7, lr}
 80080e6:	b093      	sub	sp, #76	; 0x4c
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80080ee:	2300      	movs	r3, #0
 80080f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	69dc      	ldr	r4, [r3, #28]
 80080f6:	699b      	ldr	r3, [r3, #24]
 80080f8:	633b      	str	r3, [r7, #48]	; 0x30
 80080fa:	637c      	str	r4, [r7, #52]	; 0x34
    int length = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8008104:	232f      	movs	r3, #47	; 0x2f
 8008106:	18fc      	adds	r4, r7, r3
 8008108:	f7ff fe6a 	bl	8007de0 <get_decimal_point>
 800810c:	0003      	movs	r3, r0
 800810e:	7023      	strb	r3, [r4, #0]

    if (output_buffer == NULL)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d101      	bne.n	800811a <print_number+0x36>
    {
        return false;
 8008116:	2300      	movs	r3, #0
 8008118:	e076      	b.n	8008208 <print_number+0x124>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008122:	f7f9 f9db 	bl	80014dc <__aeabi_dmul>
 8008126:	0003      	movs	r3, r0
 8008128:	000c      	movs	r4, r1
 800812a:	0018      	movs	r0, r3
 800812c:	0021      	movs	r1, r4
 800812e:	2200      	movs	r2, #0
 8008130:	2300      	movs	r3, #0
 8008132:	f7f8 f97f 	bl	8000434 <__aeabi_dcmpeq>
 8008136:	1e03      	subs	r3, r0, #0
 8008138:	d111      	bne.n	800815e <print_number+0x7a>
    {
        char *nbuf = (char *) number_buffer;
 800813a:	2308      	movs	r3, #8
 800813c:	18fb      	adds	r3, r7, r3
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 8008140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008142:	4b33      	ldr	r3, [pc, #204]	; (8008210 <print_number+0x12c>)
 8008144:	0010      	movs	r0, r2
 8008146:	0019      	movs	r1, r3
 8008148:	2305      	movs	r3, #5
 800814a:	001a      	movs	r2, r3
 800814c:	f002 fc0a 	bl	800a964 <memcpy>
        length = strlen(nbuf);
 8008150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008152:	0018      	movs	r0, r3
 8008154:	f7f7 ffe0 	bl	8000118 <strlen>
 8008158:	0003      	movs	r3, r0
 800815a:	647b      	str	r3, [r7, #68]	; 0x44
 800815c:	e00f      	b.n	800817e <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 800815e:	2308      	movs	r3, #8
 8008160:	18fb      	adds	r3, r7, r3
 8008162:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 8008164:	2301      	movs	r3, #1
 8008166:	425b      	negs	r3, r3
 8008168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800816c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800816e:	f001 fdbd 	bl	8009cec <JNtoA>
        length = strlen(nbuf);
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	0018      	movs	r0, r3
 8008176:	f7f7 ffcf 	bl	8000118 <strlen>
 800817a:	0003      	movs	r3, r0
 800817c:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008180:	2b00      	cmp	r3, #0
 8008182:	db02      	blt.n	800818a <print_number+0xa6>
 8008184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008186:	2b19      	cmp	r3, #25
 8008188:	dd01      	ble.n	800818e <print_number+0xaa>
    {
        return false;
 800818a:	2300      	movs	r3, #0
 800818c:	e03c      	b.n	8008208 <print_number+0x124>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800818e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	0011      	movs	r1, r2
 8008196:	0018      	movs	r0, r3
 8008198:	f7ff fede 	bl	8007f58 <ensure>
 800819c:	0003      	movs	r3, r0
 800819e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 80081a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <print_number+0xc6>
    {
        return false;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e02e      	b.n	8008208 <print_number+0x124>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	643b      	str	r3, [r7, #64]	; 0x40
 80081ae:	e01b      	b.n	80081e8 <print_number+0x104>
    {
        if (number_buffer[i] == decimal_point)
 80081b0:	2308      	movs	r3, #8
 80081b2:	18fa      	adds	r2, r7, r3
 80081b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081b6:	18d3      	adds	r3, r2, r3
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	222f      	movs	r2, #47	; 0x2f
 80081bc:	18ba      	adds	r2, r7, r2
 80081be:	7812      	ldrb	r2, [r2, #0]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d105      	bne.n	80081d0 <print_number+0xec>
        {
            output_pointer[i] = '.';
 80081c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c8:	18d3      	adds	r3, r2, r3
 80081ca:	222e      	movs	r2, #46	; 0x2e
 80081cc:	701a      	strb	r2, [r3, #0]
            continue;
 80081ce:	e008      	b.n	80081e2 <print_number+0xfe>
        }

        output_pointer[i] = number_buffer[i];
 80081d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081d4:	18d3      	adds	r3, r2, r3
 80081d6:	2208      	movs	r2, #8
 80081d8:	18b9      	adds	r1, r7, r2
 80081da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081dc:	188a      	adds	r2, r1, r2
 80081de:	7812      	ldrb	r2, [r2, #0]
 80081e0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80081e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081e4:	3301      	adds	r3, #1
 80081e6:	643b      	str	r3, [r7, #64]	; 0x40
 80081e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d3df      	bcc.n	80081b0 <print_number+0xcc>
    }
    output_pointer[i] = '\0';
 80081f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081f4:	18d3      	adds	r3, r2, r3
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	689a      	ldr	r2, [r3, #8]
 80081fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008200:	18d2      	adds	r2, r2, r3
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	609a      	str	r2, [r3, #8]

    return true;
 8008206:	2301      	movs	r3, #1
}
 8008208:	0018      	movs	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	b013      	add	sp, #76	; 0x4c
 800820e:	bd90      	pop	{r4, r7, pc}
 8008210:	0800b2fc 	.word	0x0800b2fc

08008214 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800821c:	2300      	movs	r3, #0
 800821e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]
 8008228:	e04c      	b.n	80082c4 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	18d3      	adds	r3, r2, r3
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	2b2f      	cmp	r3, #47	; 0x2f
 8008234:	d90f      	bls.n	8008256 <parse_hex4+0x42>
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	18d3      	adds	r3, r2, r3
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b39      	cmp	r3, #57	; 0x39
 8008240:	d809      	bhi.n	8008256 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	18d3      	adds	r3, r2, r3
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	001a      	movs	r2, r3
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	18d3      	adds	r3, r2, r3
 8008250:	3b30      	subs	r3, #48	; 0x30
 8008252:	60fb      	str	r3, [r7, #12]
 8008254:	e02d      	b.n	80082b2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	18d3      	adds	r3, r2, r3
 800825c:	781b      	ldrb	r3, [r3, #0]
 800825e:	2b40      	cmp	r3, #64	; 0x40
 8008260:	d90f      	bls.n	8008282 <parse_hex4+0x6e>
 8008262:	687a      	ldr	r2, [r7, #4]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	18d3      	adds	r3, r2, r3
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b46      	cmp	r3, #70	; 0x46
 800826c:	d809      	bhi.n	8008282 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	18d3      	adds	r3, r2, r3
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	001a      	movs	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	18d3      	adds	r3, r2, r3
 800827c:	3b37      	subs	r3, #55	; 0x37
 800827e:	60fb      	str	r3, [r7, #12]
 8008280:	e017      	b.n	80082b2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	18d3      	adds	r3, r2, r3
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	2b60      	cmp	r3, #96	; 0x60
 800828c:	d90f      	bls.n	80082ae <parse_hex4+0x9a>
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	18d3      	adds	r3, r2, r3
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b66      	cmp	r3, #102	; 0x66
 8008298:	d809      	bhi.n	80082ae <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	18d3      	adds	r3, r2, r3
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	001a      	movs	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	18d3      	adds	r3, r2, r3
 80082a8:	3b57      	subs	r3, #87	; 0x57
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e001      	b.n	80082b2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	e00c      	b.n	80082cc <parse_hex4+0xb8>
        }

        if (i < 3)
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d802      	bhi.n	80082be <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	3301      	adds	r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d9af      	bls.n	800822a <parse_hex4+0x16>
        }
    }

    return h;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	0018      	movs	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	b004      	add	sp, #16
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08a      	sub	sp, #40	; 0x28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80082ec:	2323      	movs	r3, #35	; 0x23
 80082ee:	18fb      	adds	r3, r7, r3
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 80082f4:	2322      	movs	r3, #34	; 0x22
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	2200      	movs	r2, #0
 80082fa:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 80082fc:	2321      	movs	r3, #33	; 0x21
 80082fe:	18fb      	adds	r3, r7, r3
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 8008304:	2320      	movs	r3, #32
 8008306:	18fb      	adds	r3, r7, r3
 8008308:	2200      	movs	r2, #0
 800830a:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b05      	cmp	r3, #5
 8008314:	dc00      	bgt.n	8008318 <utf16_literal_to_utf8+0x44>
 8008316:	e0cd      	b.n	80084b4 <utf16_literal_to_utf8+0x1e0>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	3302      	adds	r3, #2
 800831c:	0018      	movs	r0, r3
 800831e:	f7ff ff79 	bl	8008214 <parse_hex4>
 8008322:	0003      	movs	r3, r0
 8008324:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	4a69      	ldr	r2, [pc, #420]	; (80084d0 <utf16_literal_to_utf8+0x1fc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d904      	bls.n	8008338 <utf16_literal_to_utf8+0x64>
 800832e:	69fb      	ldr	r3, [r7, #28]
 8008330:	4a68      	ldr	r2, [pc, #416]	; (80084d4 <utf16_literal_to_utf8+0x200>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d800      	bhi.n	8008338 <utf16_literal_to_utf8+0x64>
 8008336:	e0bf      	b.n	80084b8 <utf16_literal_to_utf8+0x1e4>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	4a67      	ldr	r2, [pc, #412]	; (80084d8 <utf16_literal_to_utf8+0x204>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d93c      	bls.n	80083ba <utf16_literal_to_utf8+0xe6>
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	4a63      	ldr	r2, [pc, #396]	; (80084d0 <utf16_literal_to_utf8+0x1fc>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d838      	bhi.n	80083ba <utf16_literal_to_utf8+0xe6>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	3306      	adds	r3, #6
 800834c:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8008352:	2321      	movs	r3, #33	; 0x21
 8008354:	18fb      	adds	r3, r7, r3
 8008356:	220c      	movs	r2, #12
 8008358:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 800835a:	68ba      	ldr	r2, [r7, #8]
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	2b05      	cmp	r3, #5
 8008362:	dc00      	bgt.n	8008366 <utf16_literal_to_utf8+0x92>
 8008364:	e0aa      	b.n	80084bc <utf16_literal_to_utf8+0x1e8>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b5c      	cmp	r3, #92	; 0x5c
 800836c:	d000      	beq.n	8008370 <utf16_literal_to_utf8+0x9c>
 800836e:	e0a7      	b.n	80084c0 <utf16_literal_to_utf8+0x1ec>
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	3301      	adds	r3, #1
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	2b75      	cmp	r3, #117	; 0x75
 8008378:	d000      	beq.n	800837c <utf16_literal_to_utf8+0xa8>
 800837a:	e0a1      	b.n	80084c0 <utf16_literal_to_utf8+0x1ec>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	3302      	adds	r3, #2
 8008380:	0018      	movs	r0, r3
 8008382:	f7ff ff47 	bl	8008214 <parse_hex4>
 8008386:	0003      	movs	r3, r0
 8008388:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	4a50      	ldr	r2, [pc, #320]	; (80084d0 <utf16_literal_to_utf8+0x1fc>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d800      	bhi.n	8008394 <utf16_literal_to_utf8+0xc0>
 8008392:	e095      	b.n	80084c0 <utf16_literal_to_utf8+0x1ec>
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	4a4f      	ldr	r2, [pc, #316]	; (80084d4 <utf16_literal_to_utf8+0x200>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d900      	bls.n	800839e <utf16_literal_to_utf8+0xca>
 800839c:	e090      	b.n	80084c0 <utf16_literal_to_utf8+0x1ec>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	029b      	lsls	r3, r3, #10
 80083a2:	4a4e      	ldr	r2, [pc, #312]	; (80084dc <utf16_literal_to_utf8+0x208>)
 80083a4:	401a      	ands	r2, r3
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	059b      	lsls	r3, r3, #22
 80083aa:	0d9b      	lsrs	r3, r3, #22
 80083ac:	4313      	orrs	r3, r2
 80083ae:	2280      	movs	r2, #128	; 0x80
 80083b0:	0252      	lsls	r2, r2, #9
 80083b2:	4694      	mov	ip, r2
 80083b4:	4463      	add	r3, ip
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80083b8:	e005      	b.n	80083c6 <utf16_literal_to_utf8+0xf2>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80083ba:	2321      	movs	r3, #33	; 0x21
 80083bc:	18fb      	adds	r3, r7, r3
 80083be:	2206      	movs	r2, #6
 80083c0:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80083c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c8:	2b7f      	cmp	r3, #127	; 0x7f
 80083ca:	d804      	bhi.n	80083d6 <utf16_literal_to_utf8+0x102>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80083cc:	2323      	movs	r3, #35	; 0x23
 80083ce:	18fb      	adds	r3, r7, r3
 80083d0:	2201      	movs	r2, #1
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	e025      	b.n	8008422 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x800)
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	4a41      	ldr	r2, [pc, #260]	; (80084e0 <utf16_literal_to_utf8+0x20c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d808      	bhi.n	80083f0 <utf16_literal_to_utf8+0x11c>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80083de:	2323      	movs	r3, #35	; 0x23
 80083e0:	18fb      	adds	r3, r7, r3
 80083e2:	2202      	movs	r2, #2
 80083e4:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 80083e6:	2320      	movs	r3, #32
 80083e8:	18fb      	adds	r3, r7, r3
 80083ea:	22c0      	movs	r2, #192	; 0xc0
 80083ec:	701a      	strb	r2, [r3, #0]
 80083ee:	e018      	b.n	8008422 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x10000)
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	4a3c      	ldr	r2, [pc, #240]	; (80084e4 <utf16_literal_to_utf8+0x210>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d808      	bhi.n	800840a <utf16_literal_to_utf8+0x136>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80083f8:	2323      	movs	r3, #35	; 0x23
 80083fa:	18fb      	adds	r3, r7, r3
 80083fc:	2203      	movs	r2, #3
 80083fe:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8008400:	2320      	movs	r3, #32
 8008402:	18fb      	adds	r3, r7, r3
 8008404:	22e0      	movs	r2, #224	; 0xe0
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e00b      	b.n	8008422 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint <= 0x10FFFF)
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	4a36      	ldr	r2, [pc, #216]	; (80084e8 <utf16_literal_to_utf8+0x214>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d858      	bhi.n	80084c4 <utf16_literal_to_utf8+0x1f0>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8008412:	2323      	movs	r3, #35	; 0x23
 8008414:	18fb      	adds	r3, r7, r3
 8008416:	2204      	movs	r2, #4
 8008418:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 800841a:	2320      	movs	r3, #32
 800841c:	18fb      	adds	r3, r7, r3
 800841e:	22f0      	movs	r2, #240	; 0xf0
 8008420:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8008422:	2322      	movs	r3, #34	; 0x22
 8008424:	18fb      	adds	r3, r7, r3
 8008426:	2223      	movs	r2, #35	; 0x23
 8008428:	18ba      	adds	r2, r7, r2
 800842a:	7812      	ldrb	r2, [r2, #0]
 800842c:	3a01      	subs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
 8008430:	e017      	b.n	8008462 <utf16_literal_to_utf8+0x18e>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8008432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008434:	b2db      	uxtb	r3, r3
 8008436:	223f      	movs	r2, #63	; 0x3f
 8008438:	4013      	ands	r3, r2
 800843a:	b2da      	uxtb	r2, r3
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	2022      	movs	r0, #34	; 0x22
 8008442:	183b      	adds	r3, r7, r0
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	18cb      	adds	r3, r1, r3
 8008448:	2180      	movs	r1, #128	; 0x80
 800844a:	4249      	negs	r1, r1
 800844c:	430a      	orrs	r2, r1
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8008452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008454:	099b      	lsrs	r3, r3, #6
 8008456:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8008458:	183b      	adds	r3, r7, r0
 800845a:	781a      	ldrb	r2, [r3, #0]
 800845c:	183b      	adds	r3, r7, r0
 800845e:	3a01      	subs	r2, #1
 8008460:	701a      	strb	r2, [r3, #0]
 8008462:	2322      	movs	r3, #34	; 0x22
 8008464:	18fb      	adds	r3, r7, r3
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d1e2      	bne.n	8008432 <utf16_literal_to_utf8+0x15e>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800846c:	2323      	movs	r3, #35	; 0x23
 800846e:	18fb      	adds	r3, r7, r3
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b01      	cmp	r3, #1
 8008474:	d90a      	bls.n	800848c <utf16_literal_to_utf8+0x1b8>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	b2d9      	uxtb	r1, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2220      	movs	r2, #32
 8008480:	18ba      	adds	r2, r7, r2
 8008482:	7812      	ldrb	r2, [r2, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	b2d2      	uxtb	r2, r2
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	e007      	b.n	800849c <utf16_literal_to_utf8+0x1c8>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	b2da      	uxtb	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	217f      	movs	r1, #127	; 0x7f
 8008496:	400a      	ands	r2, r1
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	2323      	movs	r3, #35	; 0x23
 80084a2:	18fb      	adds	r3, r7, r3
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	18d2      	adds	r2, r2, r3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80084ac:	2321      	movs	r3, #33	; 0x21
 80084ae:	18fb      	adds	r3, r7, r3
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	e009      	b.n	80084c8 <utf16_literal_to_utf8+0x1f4>
        goto fail;
 80084b4:	46c0      	nop			; (mov r8, r8)
 80084b6:	e006      	b.n	80084c6 <utf16_literal_to_utf8+0x1f2>
        goto fail;
 80084b8:	46c0      	nop			; (mov r8, r8)
 80084ba:	e004      	b.n	80084c6 <utf16_literal_to_utf8+0x1f2>
            goto fail;
 80084bc:	46c0      	nop			; (mov r8, r8)
 80084be:	e002      	b.n	80084c6 <utf16_literal_to_utf8+0x1f2>

fail:
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	e000      	b.n	80084c6 <utf16_literal_to_utf8+0x1f2>
        goto fail;
 80084c4:	46c0      	nop			; (mov r8, r8)
    return 0;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	0018      	movs	r0, r3
 80084ca:	46bd      	mov	sp, r7
 80084cc:	b00a      	add	sp, #40	; 0x28
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	0000dbff 	.word	0x0000dbff
 80084d4:	0000dfff 	.word	0x0000dfff
 80084d8:	0000d7ff 	.word	0x0000d7ff
 80084dc:	000ffc00 	.word	0x000ffc00
 80084e0:	000007ff 	.word	0x000007ff
 80084e4:	0000ffff 	.word	0x0000ffff
 80084e8:	0010ffff 	.word	0x0010ffff

080084ec <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 80084ec:	b5b0      	push	{r4, r5, r7, lr}
 80084ee:	b08a      	sub	sp, #40	; 0x28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	3301      	adds	r3, #1
 8008500:	18d3      	adds	r3, r2, r3
 8008502:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	3301      	adds	r3, #1
 800850e:	18d3      	adds	r3, r2, r3
 8008510:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8008516:	2300      	movs	r3, #0
 8008518:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689b      	ldr	r3, [r3, #8]
 8008522:	18d3      	adds	r3, r2, r3
 8008524:	781b      	ldrb	r3, [r3, #0]
 8008526:	2b22      	cmp	r3, #34	; 0x22
 8008528:	d000      	beq.n	800852c <parse_string+0x40>
 800852a:	e0ca      	b.n	80086c2 <parse_string+0x1d6>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 8008530:	2300      	movs	r3, #0
 8008532:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8008534:	e018      	b.n	8008568 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8008536:	6a3b      	ldr	r3, [r7, #32]
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2b5c      	cmp	r3, #92	; 0x5c
 800853c:	d111      	bne.n	8008562 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800853e:	6a3b      	ldr	r3, [r7, #32]
 8008540:	3301      	adds	r3, #1
 8008542:	001a      	movs	r2, r3
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	001a      	movs	r2, r3
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d300      	bcc.n	8008556 <parse_string+0x6a>
 8008554:	e0b7      	b.n	80086c6 <parse_string+0x1da>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	3301      	adds	r3, #1
 800855a:	61bb      	str	r3, [r7, #24]
                input_end++;
 800855c:	6a3b      	ldr	r3, [r7, #32]
 800855e:	3301      	adds	r3, #1
 8008560:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	3301      	adds	r3, #1
 8008566:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8008568:	6a3a      	ldr	r2, [r7, #32]
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	1ad3      	subs	r3, r2, r3
 8008570:	001a      	movs	r2, r3
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d203      	bcs.n	8008582 <parse_string+0x96>
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b22      	cmp	r3, #34	; 0x22
 8008580:	d1d9      	bne.n	8008536 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8008582:	6a3a      	ldr	r2, [r7, #32]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	1ad3      	subs	r3, r2, r3
 800858a:	001a      	movs	r2, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	429a      	cmp	r2, r3
 8008592:	d300      	bcc.n	8008596 <parse_string+0xaa>
 8008594:	e099      	b.n	80086ca <parse_string+0x1de>
 8008596:	6a3b      	ldr	r3, [r7, #32]
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	2b22      	cmp	r3, #34	; 0x22
 800859c:	d000      	beq.n	80085a0 <parse_string+0xb4>
 800859e:	e094      	b.n	80086ca <parse_string+0x1de>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 80085a0:	6a3a      	ldr	r2, [r7, #32]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6819      	ldr	r1, [r3, #0]
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	18cb      	adds	r3, r1, r3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	001a      	movs	r2, r3
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	1ad3      	subs	r3, r2, r3
 80085b4:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	693a      	ldr	r2, [r7, #16]
 80085bc:	3201      	adds	r2, #1
 80085be:	0010      	movs	r0, r2
 80085c0:	4798      	blx	r3
 80085c2:	0003      	movs	r3, r0
 80085c4:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d100      	bne.n	80085ce <parse_string+0xe2>
 80085cc:	e07f      	b.n	80086ce <parse_string+0x1e2>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80085ce:	69fb      	ldr	r3, [r7, #28]
 80085d0:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80085d2:	e05b      	b.n	800868c <parse_string+0x1a0>
    {
        if (*input_pointer != '\\')
 80085d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	2b5c      	cmp	r3, #92	; 0x5c
 80085da:	d008      	beq.n	80085ee <parse_string+0x102>
        {
            *output_pointer++ = *input_pointer++;
 80085dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085de:	1c53      	adds	r3, r2, #1
 80085e0:	627b      	str	r3, [r7, #36]	; 0x24
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1c59      	adds	r1, r3, #1
 80085e6:	60f9      	str	r1, [r7, #12]
 80085e8:	7812      	ldrb	r2, [r2, #0]
 80085ea:	701a      	strb	r2, [r3, #0]
 80085ec:	e04e      	b.n	800868c <parse_string+0x1a0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80085ee:	2317      	movs	r3, #23
 80085f0:	18fb      	adds	r3, r7, r3
 80085f2:	2202      	movs	r2, #2
 80085f4:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 80085f6:	6a3a      	ldr	r2, [r7, #32]
 80085f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	dd68      	ble.n	80086d2 <parse_string+0x1e6>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8008600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008602:	3301      	adds	r3, #1
 8008604:	781b      	ldrb	r3, [r3, #0]
 8008606:	3b22      	subs	r3, #34	; 0x22
 8008608:	2b53      	cmp	r3, #83	; 0x53
 800860a:	d864      	bhi.n	80086d6 <parse_string+0x1ea>
 800860c:	009a      	lsls	r2, r3, #2
 800860e:	4b3f      	ldr	r3, [pc, #252]	; (800870c <parse_string+0x220>)
 8008610:	18d3      	adds	r3, r2, r3
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	469f      	mov	pc, r3
            {
                case 'b':
                    *output_pointer++ = '\b';
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	60fa      	str	r2, [r7, #12]
 800861c:	2208      	movs	r2, #8
 800861e:	701a      	strb	r2, [r3, #0]
                    break;
 8008620:	e02e      	b.n	8008680 <parse_string+0x194>
                case 'f':
                    *output_pointer++ = '\f';
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	60fa      	str	r2, [r7, #12]
 8008628:	220c      	movs	r2, #12
 800862a:	701a      	strb	r2, [r3, #0]
                    break;
 800862c:	e028      	b.n	8008680 <parse_string+0x194>
                case 'n':
                    *output_pointer++ = '\n';
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1c5a      	adds	r2, r3, #1
 8008632:	60fa      	str	r2, [r7, #12]
 8008634:	220a      	movs	r2, #10
 8008636:	701a      	strb	r2, [r3, #0]
                    break;
 8008638:	e022      	b.n	8008680 <parse_string+0x194>
                case 'r':
                    *output_pointer++ = '\r';
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	1c5a      	adds	r2, r3, #1
 800863e:	60fa      	str	r2, [r7, #12]
 8008640:	220d      	movs	r2, #13
 8008642:	701a      	strb	r2, [r3, #0]
                    break;
 8008644:	e01c      	b.n	8008680 <parse_string+0x194>
                case 't':
                    *output_pointer++ = '\t';
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1c5a      	adds	r2, r3, #1
 800864a:	60fa      	str	r2, [r7, #12]
 800864c:	2209      	movs	r2, #9
 800864e:	701a      	strb	r2, [r3, #0]
                    break;
 8008650:	e016      	b.n	8008680 <parse_string+0x194>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	1c5a      	adds	r2, r3, #1
 8008656:	60fa      	str	r2, [r7, #12]
 8008658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800865a:	7852      	ldrb	r2, [r2, #1]
 800865c:	701a      	strb	r2, [r3, #0]
                    break;
 800865e:	e00f      	b.n	8008680 <parse_string+0x194>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8008660:	2517      	movs	r5, #23
 8008662:	197c      	adds	r4, r7, r5
 8008664:	230c      	movs	r3, #12
 8008666:	18fa      	adds	r2, r7, r3
 8008668:	6a39      	ldr	r1, [r7, #32]
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	0018      	movs	r0, r3
 800866e:	f7ff fe31 	bl	80082d4 <utf16_literal_to_utf8>
 8008672:	0003      	movs	r3, r0
 8008674:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 8008676:	197b      	adds	r3, r7, r5
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d02d      	beq.n	80086da <parse_string+0x1ee>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 800867e:	46c0      	nop			; (mov r8, r8)

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8008680:	2317      	movs	r3, #23
 8008682:	18fb      	adds	r3, r7, r3
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008688:	18d3      	adds	r3, r2, r3
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	6a3b      	ldr	r3, [r7, #32]
 8008690:	429a      	cmp	r2, r3
 8008692:	d39f      	bcc.n	80085d4 <parse_string+0xe8>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2210      	movs	r2, #16
 800869e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	69fa      	ldr	r2, [r7, #28]
 80086a4:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 80086a6:	6a3a      	ldr	r2, [r7, #32]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	001a      	movs	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	1c5a      	adds	r2, r3, #1
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	609a      	str	r2, [r3, #8]

    return true;
 80086be:	2301      	movs	r3, #1
 80086c0:	e01f      	b.n	8008702 <parse_string+0x216>
        goto fail;
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	e00a      	b.n	80086dc <parse_string+0x1f0>
                    goto fail;
 80086c6:	46c0      	nop			; (mov r8, r8)
 80086c8:	e008      	b.n	80086dc <parse_string+0x1f0>

fail:
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	e006      	b.n	80086dc <parse_string+0x1f0>
            goto fail; /* allocation failure */
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	e004      	b.n	80086dc <parse_string+0x1f0>
                goto fail;
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	e002      	b.n	80086dc <parse_string+0x1f0>
                    goto fail;
 80086d6:	46c0      	nop			; (mov r8, r8)
 80086d8:	e000      	b.n	80086dc <parse_string+0x1f0>
                        goto fail;
 80086da:	46c0      	nop			; (mov r8, r8)
    if (output != NULL)
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d004      	beq.n	80086ec <parse_string+0x200>
    {
        input_buffer->hooks.deallocate(output);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	695b      	ldr	r3, [r3, #20]
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	0010      	movs	r0, r2
 80086ea:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d006      	beq.n	8008700 <parse_string+0x214>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 80086f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	001a      	movs	r2, r3
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	609a      	str	r2, [r3, #8]
    }

    return false;
 8008700:	2300      	movs	r3, #0
}
 8008702:	0018      	movs	r0, r3
 8008704:	46bd      	mov	sp, r7
 8008706:	b00a      	add	sp, #40	; 0x28
 8008708:	bdb0      	pop	{r4, r5, r7, pc}
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	0800b750 	.word	0x0800b750

08008710 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	0002      	movs	r2, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	1dbb      	adds	r3, r7, #6
 800871c:	801a      	strh	r2, [r3, #0]
    int i;
    for (i=0; i<4; i++)
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e026      	b.n	8008772 <htoa16+0x62>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 8008724:	210a      	movs	r1, #10
 8008726:	187b      	adds	r3, r7, r1
 8008728:	1dba      	adds	r2, r7, #6
 800872a:	8812      	ldrh	r2, [r2, #0]
 800872c:	0b12      	lsrs	r2, r2, #12
 800872e:	801a      	strh	r2, [r3, #0]
        n = n << 4;
 8008730:	1dbb      	adds	r3, r7, #6
 8008732:	1dba      	adds	r2, r7, #6
 8008734:	8812      	ldrh	r2, [r2, #0]
 8008736:	0112      	lsls	r2, r2, #4
 8008738:	801a      	strh	r2, [r3, #0]
        if (nibble >= 10)
 800873a:	187b      	adds	r3, r7, r1
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	2b09      	cmp	r3, #9
 8008740:	d90a      	bls.n	8008758 <htoa16+0x48>
            *p++ = 'A' + (nibble-10);
 8008742:	230a      	movs	r3, #10
 8008744:	18fb      	adds	r3, r7, r3
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	b2da      	uxtb	r2, r3
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	1c59      	adds	r1, r3, #1
 800874e:	6039      	str	r1, [r7, #0]
 8008750:	3237      	adds	r2, #55	; 0x37
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e009      	b.n	800876c <htoa16+0x5c>
        else
            *p++ = '0' + nibble;
 8008758:	230a      	movs	r3, #10
 800875a:	18fb      	adds	r3, r7, r3
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	b2da      	uxtb	r2, r3
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	1c59      	adds	r1, r3, #1
 8008764:	6039      	str	r1, [r7, #0]
 8008766:	3230      	adds	r2, #48	; 0x30
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3301      	adds	r3, #1
 8008770:	60fb      	str	r3, [r7, #12]
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b03      	cmp	r3, #3
 8008776:	ddd5      	ble.n	8008724 <htoa16+0x14>
    }
    *p = '\0';
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
}
 800877e:	46c0      	nop			; (mov r8, r8)
 8008780:	46bd      	mov	sp, r7
 8008782:	b004      	add	sp, #16
 8008784:	bd80      	pop	{r7, pc}
	...

08008788 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8008792:	2300      	movs	r3, #0
 8008794:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800879a:	2300      	movs	r3, #0
 800879c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d101      	bne.n	80087b0 <print_string_ptr+0x28>
    {
        return false;
 80087ac:	2300      	movs	r3, #0
 80087ae:	e0e2      	b.n	8008976 <print_string_ptr+0x1ee>
    }

    /* empty string */
    if (input == NULL)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d115      	bne.n	80087e2 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2103      	movs	r1, #3
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7ff fbcc 	bl	8007f58 <ensure>
 80087c0:	0003      	movs	r3, r0
 80087c2:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d101      	bne.n	80087ce <print_string_ptr+0x46>
        {
            return false;
 80087ca:	2300      	movs	r3, #0
 80087cc:	e0d3      	b.n	8008976 <print_string_ptr+0x1ee>
        }
        strcpy((char*)output, "\"\"");
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	4b6b      	ldr	r3, [pc, #428]	; (8008980 <print_string_ptr+0x1f8>)
 80087d2:	0010      	movs	r0, r2
 80087d4:	0019      	movs	r1, r3
 80087d6:	2303      	movs	r3, #3
 80087d8:	001a      	movs	r2, r3
 80087da:	f002 f8c3 	bl	800a964 <memcpy>

        return true;
 80087de:	2301      	movs	r3, #1
 80087e0:	e0c9      	b.n	8008976 <print_string_ptr+0x1ee>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	61fb      	str	r3, [r7, #28]
 80087e6:	e01c      	b.n	8008822 <print_string_ptr+0x9a>
    {
        switch (*input_pointer)
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b0d      	cmp	r3, #13
 80087ee:	dc05      	bgt.n	80087fc <print_string_ptr+0x74>
 80087f0:	2b0c      	cmp	r3, #12
 80087f2:	da07      	bge.n	8008804 <print_string_ptr+0x7c>
 80087f4:	3b08      	subs	r3, #8
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d808      	bhi.n	800880c <print_string_ptr+0x84>
 80087fa:	e003      	b.n	8008804 <print_string_ptr+0x7c>
 80087fc:	2b22      	cmp	r3, #34	; 0x22
 80087fe:	d001      	beq.n	8008804 <print_string_ptr+0x7c>
 8008800:	2b5c      	cmp	r3, #92	; 0x5c
 8008802:	d103      	bne.n	800880c <print_string_ptr+0x84>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	3301      	adds	r3, #1
 8008808:	617b      	str	r3, [r7, #20]
                break;
 800880a:	e007      	b.n	800881c <print_string_ptr+0x94>
            default:
                if (*input_pointer < 32)
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	2b1f      	cmp	r3, #31
 8008812:	d802      	bhi.n	800881a <print_string_ptr+0x92>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	3305      	adds	r3, #5
 8008818:	617b      	str	r3, [r7, #20]
                }
                break;
 800881a:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	3301      	adds	r3, #1
 8008820:	61fb      	str	r3, [r7, #28]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d1de      	bne.n	80087e8 <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 800882a:	69fa      	ldr	r2, [r7, #28]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	001a      	movs	r2, r3
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	189b      	adds	r3, r3, r2
 8008836:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	1cda      	adds	r2, r3, #3
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	0011      	movs	r1, r2
 8008840:	0018      	movs	r0, r3
 8008842:	f7ff fb89 	bl	8007f58 <ensure>
 8008846:	0003      	movs	r3, r0
 8008848:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d101      	bne.n	8008854 <print_string_ptr+0xcc>
    {
        return false;
 8008850:	2300      	movs	r3, #0
 8008852:	e090      	b.n	8008976 <print_string_ptr+0x1ee>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d117      	bne.n	800888a <print_string_ptr+0x102>
    {
        output[0] = '\"';
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2222      	movs	r2, #34	; 0x22
 800885e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	3301      	adds	r3, #1
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	6879      	ldr	r1, [r7, #4]
 8008868:	0018      	movs	r0, r3
 800886a:	f002 f87b 	bl	800a964 <memcpy>
        output[output_length + 1] = '\"';
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3301      	adds	r3, #1
 8008872:	693a      	ldr	r2, [r7, #16]
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	2222      	movs	r2, #34	; 0x22
 8008878:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3302      	adds	r3, #2
 800887e:	693a      	ldr	r2, [r7, #16]
 8008880:	18d3      	adds	r3, r2, r3
 8008882:	2200      	movs	r2, #0
 8008884:	701a      	strb	r2, [r3, #0]

        return true;
 8008886:	2301      	movs	r3, #1
 8008888:	e075      	b.n	8008976 <print_string_ptr+0x1ee>
    }

    output[0] = '\"';
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	2222      	movs	r2, #34	; 0x22
 800888e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	3301      	adds	r3, #1
 8008894:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	61fb      	str	r3, [r7, #28]
 800889a:	e05b      	b.n	8008954 <print_string_ptr+0x1cc>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	2b1f      	cmp	r3, #31
 80088a2:	d90c      	bls.n	80088be <print_string_ptr+0x136>
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	2b22      	cmp	r3, #34	; 0x22
 80088aa:	d008      	beq.n	80088be <print_string_ptr+0x136>
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2b5c      	cmp	r3, #92	; 0x5c
 80088b2:	d004      	beq.n	80088be <print_string_ptr+0x136>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	781a      	ldrb	r2, [r3, #0]
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e044      	b.n	8008948 <print_string_ptr+0x1c0>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	1c5a      	adds	r2, r3, #1
 80088c2:	61ba      	str	r2, [r7, #24]
 80088c4:	225c      	movs	r2, #92	; 0x5c
 80088c6:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	d01a      	beq.n	8008906 <print_string_ptr+0x17e>
 80088d0:	dc06      	bgt.n	80088e0 <print_string_ptr+0x158>
 80088d2:	2b09      	cmp	r3, #9
 80088d4:	d023      	beq.n	800891e <print_string_ptr+0x196>
 80088d6:	2b0a      	cmp	r3, #10
 80088d8:	d019      	beq.n	800890e <print_string_ptr+0x186>
 80088da:	2b08      	cmp	r3, #8
 80088dc:	d00f      	beq.n	80088fe <print_string_ptr+0x176>
 80088de:	e022      	b.n	8008926 <print_string_ptr+0x19e>
 80088e0:	2b22      	cmp	r3, #34	; 0x22
 80088e2:	d008      	beq.n	80088f6 <print_string_ptr+0x16e>
 80088e4:	2b5c      	cmp	r3, #92	; 0x5c
 80088e6:	d002      	beq.n	80088ee <print_string_ptr+0x166>
 80088e8:	2b0d      	cmp	r3, #13
 80088ea:	d014      	beq.n	8008916 <print_string_ptr+0x18e>
 80088ec:	e01b      	b.n	8008926 <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	225c      	movs	r2, #92	; 0x5c
 80088f2:	701a      	strb	r2, [r3, #0]
                    break;
 80088f4:	e028      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\"':
                    *output_pointer = '\"';
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2222      	movs	r2, #34	; 0x22
 80088fa:	701a      	strb	r2, [r3, #0]
                    break;
 80088fc:	e024      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\b':
                    *output_pointer = 'b';
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2262      	movs	r2, #98	; 0x62
 8008902:	701a      	strb	r2, [r3, #0]
                    break;
 8008904:	e020      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\f':
                    *output_pointer = 'f';
 8008906:	69bb      	ldr	r3, [r7, #24]
 8008908:	2266      	movs	r2, #102	; 0x66
 800890a:	701a      	strb	r2, [r3, #0]
                    break;
 800890c:	e01c      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\n':
                    *output_pointer = 'n';
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	226e      	movs	r2, #110	; 0x6e
 8008912:	701a      	strb	r2, [r3, #0]
                    break;
 8008914:	e018      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\r':
                    *output_pointer = 'r';
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	2272      	movs	r2, #114	; 0x72
 800891a:	701a      	strb	r2, [r3, #0]
                    break;
 800891c:	e014      	b.n	8008948 <print_string_ptr+0x1c0>
                case '\t':
                    *output_pointer = 't';
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	2274      	movs	r2, #116	; 0x74
 8008922:	701a      	strb	r2, [r3, #0]
                    break;
 8008924:	e010      	b.n	8008948 <print_string_ptr+0x1c0>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	1c5a      	adds	r2, r3, #1
 800892a:	61ba      	str	r2, [r7, #24]
 800892c:	2275      	movs	r2, #117	; 0x75
 800892e:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	b29b      	uxth	r3, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	0011      	movs	r1, r2
 800893a:	0018      	movs	r0, r3
 800893c:	f7ff fee8 	bl	8008710 <htoa16>
                    output_pointer += 4;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	3304      	adds	r3, #4
 8008944:	61bb      	str	r3, [r7, #24]
                    break;
 8008946:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	3301      	adds	r3, #1
 800894c:	61fb      	str	r3, [r7, #28]
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	3301      	adds	r3, #1
 8008952:	61bb      	str	r3, [r7, #24]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d19f      	bne.n	800889c <print_string_ptr+0x114>
            }
        }
    }
    output[output_length + 1] = '\"';
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3301      	adds	r3, #1
 8008960:	693a      	ldr	r2, [r7, #16]
 8008962:	18d3      	adds	r3, r2, r3
 8008964:	2222      	movs	r2, #34	; 0x22
 8008966:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	3302      	adds	r3, #2
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	18d3      	adds	r3, r2, r3
 8008970:	2200      	movs	r2, #0
 8008972:	701a      	strb	r2, [r3, #0]

    return true;
 8008974:	2301      	movs	r3, #1
}
 8008976:	0018      	movs	r0, r3
 8008978:	46bd      	mov	sp, r7
 800897a:	b008      	add	sp, #32
 800897c:	bd80      	pop	{r7, pc}
 800897e:	46c0      	nop			; (mov r8, r8)
 8008980:	0800b304 	.word	0x0800b304

08008984 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	683a      	ldr	r2, [r7, #0]
 8008994:	0011      	movs	r1, r2
 8008996:	0018      	movs	r0, r3
 8008998:	f7ff fef6 	bl	8008788 <print_string_ptr>
 800899c:	0003      	movs	r3, r0
}
 800899e:	0018      	movs	r0, r3
 80089a0:	46bd      	mov	sp, r7
 80089a2:	b002      	add	sp, #8
 80089a4:	bd80      	pop	{r7, pc}

080089a6 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b082      	sub	sp, #8
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d003      	beq.n	80089bc <buffer_skip_whitespace+0x16>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d106      	bne.n	80089ca <buffer_skip_whitespace+0x24>
    {
        return NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	e021      	b.n	8008a04 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	689b      	ldr	r3, [r3, #8]
 80089c4:	1c5a      	adds	r2, r3, #1
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <buffer_skip_whitespace+0x46>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d207      	bcs.n	80089ec <buffer_skip_whitespace+0x46>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	689b      	ldr	r3, [r3, #8]
 80089e4:	18d3      	adds	r3, r2, r3
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	2b20      	cmp	r3, #32
 80089ea:	d9e9      	bls.n	80089c0 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689a      	ldr	r2, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d104      	bne.n	8008a02 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8008a02:	687b      	ldr	r3, [r7, #4]
}
 8008a04:	0018      	movs	r0, r3
 8008a06:	46bd      	mov	sp, r7
 8008a08:	b002      	add	sp, #8
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d007      	beq.n	8008a2a <skip_utf8_bom+0x1e>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <skip_utf8_bom+0x1e>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <skip_utf8_bom+0x22>
    {
        return NULL;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	e01b      	b.n	8008a66 <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d017      	beq.n	8008a64 <skip_utf8_bom+0x58>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	1d1a      	adds	r2, r3, #4
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d210      	bcs.n	8008a64 <skip_utf8_bom+0x58>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	18d3      	adds	r3, r2, r3
 8008a4c:	4908      	ldr	r1, [pc, #32]	; (8008a70 <skip_utf8_bom+0x64>)
 8008a4e:	2203      	movs	r2, #3
 8008a50:	0018      	movs	r0, r3
 8008a52:	f002 f873 	bl	800ab3c <strncmp>
 8008a56:	1e03      	subs	r3, r0, #0
 8008a58:	d104      	bne.n	8008a64 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	1cda      	adds	r2, r3, #3
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8008a64:	687b      	ldr	r3, [r7, #4]
}
 8008a66:	0018      	movs	r0, r3
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	b002      	add	sp, #8
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	46c0      	nop			; (mov r8, r8)
 8008a70:	0800b308 	.word	0x0800b308

08008a74 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8008a74:	b590      	push	{r4, r7, lr}
 8008a76:	b08f      	sub	sp, #60	; 0x3c
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8008a80:	2318      	movs	r3, #24
 8008a82:	18fb      	adds	r3, r7, r3
 8008a84:	0018      	movs	r0, r3
 8008a86:	231c      	movs	r3, #28
 8008a88:	001a      	movs	r2, r3
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	f001 ff86 	bl	800a99c <memset>
    J *item = NULL;
 8008a90:	2300      	movs	r3, #0
 8008a92:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8008a94:	4b51      	ldr	r3, [pc, #324]	; (8008bdc <JParseWithOpts+0x168>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8008a9a:	4b50      	ldr	r3, [pc, #320]	; (8008bdc <JParseWithOpts+0x168>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d053      	beq.n	8008b4e <JParseWithOpts+0xda>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8008aa6:	2418      	movs	r4, #24
 8008aa8:	193b      	adds	r3, r7, r4
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	601a      	str	r2, [r3, #0]
    buffer.length = strlen((const char*)value) + sizeof("");
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	0018      	movs	r0, r3
 8008ab2:	f7f7 fb31 	bl	8000118 <strlen>
 8008ab6:	0003      	movs	r3, r0
 8008ab8:	1c5a      	adds	r2, r3, #1
 8008aba:	193b      	adds	r3, r7, r4
 8008abc:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 8008abe:	193b      	adds	r3, r7, r4
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	609a      	str	r2, [r3, #8]
    buffer.hooks = global_hooks;
 8008ac4:	193b      	adds	r3, r7, r4
 8008ac6:	4a46      	ldr	r2, [pc, #280]	; (8008be0 <JParseWithOpts+0x16c>)
 8008ac8:	3310      	adds	r3, #16
 8008aca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8008acc:	c313      	stmia	r3!, {r0, r1, r4}

    item = JNew_Item(&global_hooks);
 8008ace:	4b44      	ldr	r3, [pc, #272]	; (8008be0 <JParseWithOpts+0x16c>)
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	f7ff f923 	bl	8007d1c <JNew_Item>
 8008ad6:	0003      	movs	r3, r0
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d038      	beq.n	8008b52 <JParseWithOpts+0xde>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8008ae0:	2318      	movs	r3, #24
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	0018      	movs	r0, r3
 8008ae6:	f7ff ff91 	bl	8008a0c <skip_utf8_bom>
 8008aea:	0003      	movs	r3, r0
 8008aec:	0018      	movs	r0, r3
 8008aee:	f7ff ff5a 	bl	80089a6 <buffer_skip_whitespace>
 8008af2:	0002      	movs	r2, r0
 8008af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008af6:	0011      	movs	r1, r2
 8008af8:	0018      	movs	r0, r3
 8008afa:	f000 f931 	bl	8008d60 <parse_value>
 8008afe:	1e03      	subs	r3, r0, #0
 8008b00:	d029      	beq.n	8008b56 <JParseWithOpts+0xe2>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d015      	beq.n	8008b34 <JParseWithOpts+0xc0>
    {
        buffer_skip_whitespace(&buffer);
 8008b08:	2118      	movs	r1, #24
 8008b0a:	000c      	movs	r4, r1
 8008b0c:	187b      	adds	r3, r7, r1
 8008b0e:	0018      	movs	r0, r3
 8008b10:	f7ff ff49 	bl	80089a6 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 8008b14:	0021      	movs	r1, r4
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	689a      	ldr	r2, [r3, #8]
 8008b1a:	187b      	adds	r3, r7, r1
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d21b      	bcs.n	8008b5a <JParseWithOpts+0xe6>
 8008b22:	2118      	movs	r1, #24
 8008b24:	187b      	adds	r3, r7, r1
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	187b      	adds	r3, r7, r1
 8008b2a:	689b      	ldr	r3, [r3, #8]
 8008b2c:	18d3      	adds	r3, r2, r3
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d112      	bne.n	8008b5a <JParseWithOpts+0xe6>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d007      	beq.n	8008b4a <JParseWithOpts+0xd6>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8008b3a:	2118      	movs	r1, #24
 8008b3c:	187b      	adds	r3, r7, r1
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	187b      	adds	r3, r7, r1
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	18d2      	adds	r2, r2, r3
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	601a      	str	r2, [r3, #0]
    }

    return item;
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	e042      	b.n	8008bd4 <JParseWithOpts+0x160>
        goto fail;
 8008b4e:	46c0      	nop			; (mov r8, r8)
 8008b50:	e004      	b.n	8008b5c <JParseWithOpts+0xe8>
        goto fail;
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	e002      	b.n	8008b5c <JParseWithOpts+0xe8>
        goto fail;
 8008b56:	46c0      	nop			; (mov r8, r8)
 8008b58:	e000      	b.n	8008b5c <JParseWithOpts+0xe8>

fail:
 8008b5a:	46c0      	nop			; (mov r8, r8)
    if (item != NULL)
 8008b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d003      	beq.n	8008b6a <JParseWithOpts+0xf6>
    {
        JDelete(item);
 8008b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b64:	0018      	movs	r0, r3
 8008b66:	f7ff f8f1 	bl	8007d4c <JDelete>
    }

    if (value != NULL)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d030      	beq.n	8008bd2 <JParseWithOpts+0x15e>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8008b70:	2110      	movs	r1, #16
 8008b72:	187b      	adds	r3, r7, r1
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 8008b7e:	2118      	movs	r1, #24
 8008b80:	187b      	adds	r3, r7, r1
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	187b      	adds	r3, r7, r1
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d206      	bcs.n	8008b9a <JParseWithOpts+0x126>
        {
            local_error.position = buffer.offset;
 8008b8c:	2318      	movs	r3, #24
 8008b8e:	18fb      	adds	r3, r7, r3
 8008b90:	689a      	ldr	r2, [r3, #8]
 8008b92:	2310      	movs	r3, #16
 8008b94:	18fb      	adds	r3, r7, r3
 8008b96:	605a      	str	r2, [r3, #4]
 8008b98:	e00b      	b.n	8008bb2 <JParseWithOpts+0x13e>
        }
        else if (buffer.length > 0)
 8008b9a:	2318      	movs	r3, #24
 8008b9c:	18fb      	adds	r3, r7, r3
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d006      	beq.n	8008bb2 <JParseWithOpts+0x13e>
        {
            local_error.position = buffer.length - 1;
 8008ba4:	2318      	movs	r3, #24
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	2310      	movs	r3, #16
 8008bae:	18fb      	adds	r3, r7, r3
 8008bb0:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d007      	beq.n	8008bc8 <JParseWithOpts+0x154>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8008bb8:	2110      	movs	r1, #16
 8008bba:	187b      	adds	r3, r7, r1
 8008bbc:	681a      	ldr	r2, [r3, #0]
 8008bbe:	187b      	adds	r3, r7, r1
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	18d2      	adds	r2, r2, r3
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8008bc8:	4b04      	ldr	r3, [pc, #16]	; (8008bdc <JParseWithOpts+0x168>)
 8008bca:	2210      	movs	r2, #16
 8008bcc:	18ba      	adds	r2, r7, r2
 8008bce:	ca03      	ldmia	r2!, {r0, r1}
 8008bd0:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	b00f      	add	sp, #60	; 0x3c
 8008bda:	bd90      	pop	{r4, r7, pc}
 8008bdc:	2000047c 	.word	0x2000047c
 8008be0:	20000058 	.word	0x20000058

08008be4 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	0018      	movs	r0, r3
 8008bf4:	f7ff ff3e 	bl	8008a74 <JParseWithOpts>
 8008bf8:	0003      	movs	r3, r0
}
 8008bfa:	0018      	movs	r0, r3
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	b002      	add	sp, #8
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format, const internal_hooks * const hooks)
{
 8008c04:	b5b0      	push	{r4, r5, r7, lr}
 8008c06:	b08e      	sub	sp, #56	; 0x38
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8008c14:	2410      	movs	r4, #16
 8008c16:	193b      	adds	r3, r7, r4
 8008c18:	2224      	movs	r2, #36	; 0x24
 8008c1a:	2100      	movs	r1, #0
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f001 febd 	bl	800a99c <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	4b44      	ldr	r3, [pc, #272]	; (8008d38 <print+0x134>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	0018      	movs	r0, r3
 8008c2c:	4790      	blx	r2
 8008c2e:	0002      	movs	r2, r0
 8008c30:	0021      	movs	r1, r4
 8008c32:	187b      	adds	r3, r7, r1
 8008c34:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8008c36:	4b40      	ldr	r3, [pc, #256]	; (8008d38 <print+0x134>)
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	187b      	adds	r3, r7, r1
 8008c3c:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8008c3e:	187b      	adds	r3, r7, r1
 8008c40:	68ba      	ldr	r2, [r7, #8]
 8008c42:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	687a      	ldr	r2, [r7, #4]
 8008c48:	3318      	adds	r3, #24
 8008c4a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8008c4c:	c331      	stmia	r3!, {r0, r4, r5}
    if (buffer->buffer == NULL)
 8008c4e:	187b      	adds	r3, r7, r1
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d050      	beq.n	8008cf8 <print+0xf4>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8008c56:	2310      	movs	r3, #16
 8008c58:	18fa      	adds	r2, r7, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	0011      	movs	r1, r2
 8008c5e:	0018      	movs	r0, r3
 8008c60:	f000 f96e 	bl	8008f40 <print_value>
 8008c64:	1e03      	subs	r3, r0, #0
 8008c66:	d049      	beq.n	8008cfc <print+0xf8>
    {
        goto fail;
    }
    update_offset(buffer);
 8008c68:	2310      	movs	r3, #16
 8008c6a:	18fb      	adds	r3, r7, r3
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f7ff fa17 	bl	80080a0 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d013      	beq.n	8008ca2 <print+0x9e>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	2110      	movs	r1, #16
 8008c80:	187b      	adds	r3, r7, r1
 8008c82:	6818      	ldr	r0, [r3, #0]
 8008c84:	187b      	adds	r3, r7, r1
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	0019      	movs	r1, r3
 8008c8c:	4790      	blx	r2
 8008c8e:	0003      	movs	r3, r0
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 8008c92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d033      	beq.n	8008d00 <print+0xfc>
            goto fail;
        }
        buffer->buffer = NULL;
 8008c98:	2310      	movs	r3, #16
 8008c9a:	18fb      	adds	r3, r7, r3
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
 8008ca0:	e028      	b.n	8008cf4 <print+0xf0>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	2310      	movs	r3, #16
 8008ca8:	18fb      	adds	r3, r7, r3
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	3301      	adds	r3, #1
 8008cae:	0018      	movs	r0, r3
 8008cb0:	4790      	blx	r2
 8008cb2:	0003      	movs	r3, r0
 8008cb4:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 8008cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d023      	beq.n	8008d04 <print+0x100>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8008cbc:	2010      	movs	r0, #16
 8008cbe:	183b      	adds	r3, r7, r0
 8008cc0:	6819      	ldr	r1, [r3, #0]
 8008cc2:	183b      	adds	r3, r7, r0
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	1c5a      	adds	r2, r3, #1
 8008cc8:	183b      	adds	r3, r7, r0
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d900      	bls.n	8008cd2 <print+0xce>
 8008cd0:	001a      	movs	r2, r3
 8008cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	f001 fe45 	bl	800a964 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8008cda:	2110      	movs	r1, #16
 8008cdc:	187b      	adds	r3, r7, r1
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ce2:	18d3      	adds	r3, r2, r3
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	685a      	ldr	r2, [r3, #4]
 8008cec:	187b      	adds	r3, r7, r1
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	0018      	movs	r0, r3
 8008cf2:	4790      	blx	r2
    }

    return printed;
 8008cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf6:	e01b      	b.n	8008d30 <print+0x12c>
        goto fail;
 8008cf8:	46c0      	nop			; (mov r8, r8)
 8008cfa:	e004      	b.n	8008d06 <print+0x102>
        goto fail;
 8008cfc:	46c0      	nop			; (mov r8, r8)
 8008cfe:	e002      	b.n	8008d06 <print+0x102>
            goto fail;
 8008d00:	46c0      	nop			; (mov r8, r8)
 8008d02:	e000      	b.n	8008d06 <print+0x102>
            goto fail;
 8008d04:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8008d06:	2310      	movs	r3, #16
 8008d08:	18fb      	adds	r3, r7, r3
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d006      	beq.n	8008d1e <print+0x11a>
    {
        hooks->deallocate(buffer->buffer);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	2310      	movs	r3, #16
 8008d16:	18fb      	adds	r3, r7, r3
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	0018      	movs	r0, r3
 8008d1c:	4790      	blx	r2
    }

    if (printed != NULL)
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d004      	beq.n	8008d2e <print+0x12a>
    {
        hooks->deallocate(printed);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2a:	0010      	movs	r0, r2
 8008d2c:	4798      	blx	r3
    }

    return NULL;
 8008d2e:	2300      	movs	r3, #0
}
 8008d30:	0018      	movs	r0, r3
 8008d32:	46bd      	mov	sp, r7
 8008d34:	b00e      	add	sp, #56	; 0x38
 8008d36:	bdb0      	pop	{r4, r5, r7, pc}
 8008d38:	0800b8a0 	.word	0x0800b8a0

08008d3c <JPrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8008d44:	4a05      	ldr	r2, [pc, #20]	; (8008d5c <JPrintUnformatted+0x20>)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2100      	movs	r1, #0
 8008d4a:	0018      	movs	r0, r3
 8008d4c:	f7ff ff5a 	bl	8008c04 <print>
 8008d50:	0003      	movs	r3, r0
}
 8008d52:	0018      	movs	r0, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b002      	add	sp, #8
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	20000058 	.word	0x20000058

08008d60 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <parse_value+0x18>
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d101      	bne.n	8008d7c <parse_value+0x1c>
    {
        return false; /* no input */
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e0d7      	b.n	8008f2c <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d01c      	beq.n	8008dbc <parse_value+0x5c>
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	1d1a      	adds	r2, r3, #4
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d815      	bhi.n	8008dbc <parse_value+0x5c>
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	18d3      	adds	r3, r2, r3
 8008d9a:	4966      	ldr	r1, [pc, #408]	; (8008f34 <parse_value+0x1d4>)
 8008d9c:	2204      	movs	r2, #4
 8008d9e:	0018      	movs	r0, r3
 8008da0:	f001 fecc 	bl	800ab3c <strncmp>
 8008da4:	1e03      	subs	r3, r0, #0
 8008da6:	d109      	bne.n	8008dbc <parse_value+0x5c>
    {
        item->type = JNULL;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2204      	movs	r2, #4
 8008dac:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	1d1a      	adds	r2, r3, #4
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	609a      	str	r2, [r3, #8]
        return true;
 8008db8:	2301      	movs	r3, #1
 8008dba:	e0b7      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d01c      	beq.n	8008dfc <parse_value+0x9c>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	1d5a      	adds	r2, r3, #5
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d815      	bhi.n	8008dfc <parse_value+0x9c>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	18d3      	adds	r3, r2, r3
 8008dda:	4957      	ldr	r1, [pc, #348]	; (8008f38 <parse_value+0x1d8>)
 8008ddc:	2205      	movs	r2, #5
 8008dde:	0018      	movs	r0, r3
 8008de0:	f001 feac 	bl	800ab3c <strncmp>
 8008de4:	1e03      	subs	r3, r0, #0
 8008de6:	d109      	bne.n	8008dfc <parse_value+0x9c>
    {
        item->type = JFalse;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	1d5a      	adds	r2, r3, #5
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	609a      	str	r2, [r3, #8]
        return true;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e097      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d01f      	beq.n	8008e42 <parse_value+0xe2>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	1d1a      	adds	r2, r3, #4
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d818      	bhi.n	8008e42 <parse_value+0xe2>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	689b      	ldr	r3, [r3, #8]
 8008e18:	18d3      	adds	r3, r2, r3
 8008e1a:	4948      	ldr	r1, [pc, #288]	; (8008f3c <parse_value+0x1dc>)
 8008e1c:	2204      	movs	r2, #4
 8008e1e:	0018      	movs	r0, r3
 8008e20:	f001 fe8c 	bl	800ab3c <strncmp>
 8008e24:	1e03      	subs	r3, r0, #0
 8008e26:	d10c      	bne.n	8008e42 <parse_value+0xe2>
    {
        item->type = JTrue;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2201      	movs	r2, #1
 8008e32:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	1d1a      	adds	r2, r3, #4
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	609a      	str	r2, [r3, #8]
        return true;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e074      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d015      	beq.n	8008e74 <parse_value+0x114>
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	689a      	ldr	r2, [r3, #8]
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d20f      	bcs.n	8008e74 <parse_value+0x114>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	689b      	ldr	r3, [r3, #8]
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	2b22      	cmp	r3, #34	; 0x22
 8008e62:	d107      	bne.n	8008e74 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	0011      	movs	r1, r2
 8008e6a:	0018      	movs	r0, r3
 8008e6c:	f7ff fb3e 	bl	80084ec <parse_string>
 8008e70:	0003      	movs	r3, r0
 8008e72:	e05b      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d025      	beq.n	8008ec6 <parse_value+0x166>
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d21f      	bcs.n	8008ec6 <parse_value+0x166>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	18d3      	adds	r3, r2, r3
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b2d      	cmp	r3, #45	; 0x2d
 8008e94:	d00f      	beq.n	8008eb6 <parse_value+0x156>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	689b      	ldr	r3, [r3, #8]
 8008e9e:	18d3      	adds	r3, r2, r3
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	2b2f      	cmp	r3, #47	; 0x2f
 8008ea4:	d90f      	bls.n	8008ec6 <parse_value+0x166>
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	18d3      	adds	r3, r2, r3
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	2b39      	cmp	r3, #57	; 0x39
 8008eb4:	d807      	bhi.n	8008ec6 <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	0011      	movs	r1, r2
 8008ebc:	0018      	movs	r0, r3
 8008ebe:	f7fe ff95 	bl	8007dec <parse_number>
 8008ec2:	0003      	movs	r3, r0
 8008ec4:	e032      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d015      	beq.n	8008ef8 <parse_value+0x198>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d20f      	bcs.n	8008ef8 <parse_value+0x198>
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681a      	ldr	r2, [r3, #0]
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	18d3      	adds	r3, r2, r3
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	2b5b      	cmp	r3, #91	; 0x5b
 8008ee6:	d107      	bne.n	8008ef8 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	0011      	movs	r1, r2
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f000 f8e4 	bl	80090bc <parse_array>
 8008ef4:	0003      	movs	r3, r0
 8008ef6:	e019      	b.n	8008f2c <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d015      	beq.n	8008f2a <parse_value+0x1ca>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	689a      	ldr	r2, [r3, #8]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d20f      	bcs.n	8008f2a <parse_value+0x1ca>
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	18d3      	adds	r3, r2, r3
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b7b      	cmp	r3, #123	; 0x7b
 8008f18:	d107      	bne.n	8008f2a <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	0011      	movs	r1, r2
 8008f20:	0018      	movs	r0, r3
 8008f22:	f000 fa1f 	bl	8009364 <parse_object>
 8008f26:	0003      	movs	r3, r0
 8008f28:	e000      	b.n	8008f2c <parse_value+0x1cc>
    }

    return false;
 8008f2a:	2300      	movs	r3, #0
}
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b002      	add	sp, #8
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	0800b2fc 	.word	0x0800b2fc
 8008f38:	0800b30c 	.word	0x0800b30c
 8008f3c:	0800b314 	.word	0x0800b314

08008f40 <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <print_value+0x1a>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d101      	bne.n	8008f5e <print_value+0x1e>
    {
        return false;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	e0a4      	b.n	80090a8 <print_value+0x168>
    }

    switch ((item->type) & 0xFF)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	22ff      	movs	r2, #255	; 0xff
 8008f64:	4013      	ands	r3, r2
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d057      	beq.n	800901a <print_value+0xda>
 8008f6a:	dc06      	bgt.n	8008f7a <print_value+0x3a>
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d03e      	beq.n	8008fee <print_value+0xae>
 8008f70:	2b04      	cmp	r3, #4
 8008f72:	d010      	beq.n	8008f96 <print_value+0x56>
 8008f74:	2b01      	cmp	r3, #1
 8008f76:	d024      	beq.n	8008fc2 <print_value+0x82>
 8008f78:	e095      	b.n	80090a6 <print_value+0x166>
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d100      	bne.n	8008f80 <print_value+0x40>
 8008f7e:	e082      	b.n	8009086 <print_value+0x146>
 8008f80:	dc03      	bgt.n	8008f8a <print_value+0x4a>
 8008f82:	2b10      	cmp	r3, #16
 8008f84:	d100      	bne.n	8008f88 <print_value+0x48>
 8008f86:	e076      	b.n	8009076 <print_value+0x136>
 8008f88:	e08d      	b.n	80090a6 <print_value+0x166>
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	d100      	bne.n	8008f90 <print_value+0x50>
 8008f8e:	e082      	b.n	8009096 <print_value+0x156>
 8008f90:	2b80      	cmp	r3, #128	; 0x80
 8008f92:	d04a      	beq.n	800902a <print_value+0xea>
 8008f94:	e087      	b.n	80090a6 <print_value+0x166>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2105      	movs	r1, #5
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f7fe ffdc 	bl	8007f58 <ensure>
 8008fa0:	0003      	movs	r3, r0
 8008fa2:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d101      	bne.n	8008fae <print_value+0x6e>
            {
                return false;
 8008faa:	2300      	movs	r3, #0
 8008fac:	e07c      	b.n	80090a8 <print_value+0x168>
            }
            strcpy((char*)output, "null");
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	4b3f      	ldr	r3, [pc, #252]	; (80090b0 <print_value+0x170>)
 8008fb2:	0010      	movs	r0, r2
 8008fb4:	0019      	movs	r1, r3
 8008fb6:	2305      	movs	r3, #5
 8008fb8:	001a      	movs	r2, r3
 8008fba:	f001 fcd3 	bl	800a964 <memcpy>
            return true;
 8008fbe:	2301      	movs	r3, #1
 8008fc0:	e072      	b.n	80090a8 <print_value+0x168>

        case JFalse:
            output = ensure(output_buffer, 6);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2106      	movs	r1, #6
 8008fc6:	0018      	movs	r0, r3
 8008fc8:	f7fe ffc6 	bl	8007f58 <ensure>
 8008fcc:	0003      	movs	r3, r0
 8008fce:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <print_value+0x9a>
            {
                return false;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	e066      	b.n	80090a8 <print_value+0x168>
            }
            strcpy((char*)output, "false");
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4b35      	ldr	r3, [pc, #212]	; (80090b4 <print_value+0x174>)
 8008fde:	0010      	movs	r0, r2
 8008fe0:	0019      	movs	r1, r3
 8008fe2:	2306      	movs	r3, #6
 8008fe4:	001a      	movs	r2, r3
 8008fe6:	f001 fcbd 	bl	800a964 <memcpy>
            return true;
 8008fea:	2301      	movs	r3, #1
 8008fec:	e05c      	b.n	80090a8 <print_value+0x168>

        case JTrue:
            output = ensure(output_buffer, 5);
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2105      	movs	r1, #5
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7fe ffb0 	bl	8007f58 <ensure>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <print_value+0xc6>
            {
                return false;
 8009002:	2300      	movs	r3, #0
 8009004:	e050      	b.n	80090a8 <print_value+0x168>
            }
            strcpy((char*)output, "true");
 8009006:	68fa      	ldr	r2, [r7, #12]
 8009008:	4b2b      	ldr	r3, [pc, #172]	; (80090b8 <print_value+0x178>)
 800900a:	0010      	movs	r0, r2
 800900c:	0019      	movs	r1, r3
 800900e:	2305      	movs	r3, #5
 8009010:	001a      	movs	r2, r3
 8009012:	f001 fca7 	bl	800a964 <memcpy>
            return true;
 8009016:	2301      	movs	r3, #1
 8009018:	e046      	b.n	80090a8 <print_value+0x168>

        case JNumber:
            return print_number(item, output_buffer);
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	0011      	movs	r1, r2
 8009020:	0018      	movs	r0, r3
 8009022:	f7ff f85f 	bl	80080e4 <print_number>
 8009026:	0003      	movs	r3, r0
 8009028:	e03e      	b.n	80090a8 <print_value+0x168>

        case JRaw:
        {
            size_t raw_length = 0;
 800902a:	2300      	movs	r3, #0
 800902c:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	691b      	ldr	r3, [r3, #16]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d101      	bne.n	800903a <print_value+0xfa>
            {
                return false;
 8009036:	2300      	movs	r3, #0
 8009038:	e036      	b.n	80090a8 <print_value+0x168>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	0018      	movs	r0, r3
 8009040:	f7f7 f86a 	bl	8000118 <strlen>
 8009044:	0003      	movs	r3, r0
 8009046:	3301      	adds	r3, #1
 8009048:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	0011      	movs	r1, r2
 8009050:	0018      	movs	r0, r3
 8009052:	f7fe ff81 	bl	8007f58 <ensure>
 8009056:	0003      	movs	r3, r0
 8009058:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d101      	bne.n	8009064 <print_value+0x124>
            {
                return false;
 8009060:	2300      	movs	r3, #0
 8009062:	e021      	b.n	80090a8 <print_value+0x168>
            }
            memcpy(output, item->valuestring, raw_length);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6919      	ldr	r1, [r3, #16]
 8009068:	68ba      	ldr	r2, [r7, #8]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	0018      	movs	r0, r3
 800906e:	f001 fc79 	bl	800a964 <memcpy>
            return true;
 8009072:	2301      	movs	r3, #1
 8009074:	e018      	b.n	80090a8 <print_value+0x168>
        }

        case JString:
            return print_string(item, output_buffer);
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	0011      	movs	r1, r2
 800907c:	0018      	movs	r0, r3
 800907e:	f7ff fc81 	bl	8008984 <print_string>
 8009082:	0003      	movs	r3, r0
 8009084:	e010      	b.n	80090a8 <print_value+0x168>

        case JArray:
            return print_array(item, output_buffer);
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	0011      	movs	r1, r2
 800908c:	0018      	movs	r0, r3
 800908e:	f000 f8db 	bl	8009248 <print_array>
 8009092:	0003      	movs	r3, r0
 8009094:	e008      	b.n	80090a8 <print_value+0x168>

        case JObject:
            return print_object(item, output_buffer);
 8009096:	683a      	ldr	r2, [r7, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	0011      	movs	r1, r2
 800909c:	0018      	movs	r0, r3
 800909e:	f000 fa63 	bl	8009568 <print_object>
 80090a2:	0003      	movs	r3, r0
 80090a4:	e000      	b.n	80090a8 <print_value+0x168>

        default:
            return false;
 80090a6:	2300      	movs	r3, #0
    }
}
 80090a8:	0018      	movs	r0, r3
 80090aa:	46bd      	mov	sp, r7
 80090ac:	b004      	add	sp, #16
 80090ae:	bd80      	pop	{r7, pc}
 80090b0:	0800b2fc 	.word	0x0800b2fc
 80090b4:	0800b30c 	.word	0x0800b30c
 80090b8:	0800b314 	.word	0x0800b314

080090bc <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 80090ca:	2300      	movs	r3, #0
 80090cc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	4a5c      	ldr	r2, [pc, #368]	; (8009244 <parse_array+0x188>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d901      	bls.n	80090dc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80090d8:	2300      	movs	r3, #0
 80090da:	e0af      	b.n	800923c <parse_array+0x180>
    }
    input_buffer->depth++;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	18d3      	adds	r3, r2, r3
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b5b      	cmp	r3, #91	; 0x5b
 80090f4:	d000      	beq.n	80090f8 <parse_array+0x3c>
 80090f6:	e092      	b.n	800921e <parse_array+0x162>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	0018      	movs	r0, r3
 8009106:	f7ff fc4e 	bl	80089a6 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00d      	beq.n	800912c <parse_array+0x70>
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	429a      	cmp	r2, r3
 800911a:	d207      	bcs.n	800912c <parse_array+0x70>
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	18d3      	adds	r3, r2, r3
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	2b5d      	cmp	r3, #93	; 0x5d
 800912a:	d065      	beq.n	80091f8 <parse_array+0x13c>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <parse_array+0x82>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	429a      	cmp	r2, r3
 800913c:	d305      	bcc.n	800914a <parse_array+0x8e>
    {
        input_buffer->offset--;
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	1e5a      	subs	r2, r3, #1
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	609a      	str	r2, [r3, #8]
        goto fail;
 8009148:	e070      	b.n	800922c <parse_array+0x170>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	1e5a      	subs	r2, r3, #1
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	3310      	adds	r3, #16
 8009158:	0018      	movs	r0, r3
 800915a:	f7fe fddf 	bl	8007d1c <JNew_Item>
 800915e:	0003      	movs	r3, r0
 8009160:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d05c      	beq.n	8009222 <parse_array+0x166>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d104      	bne.n	8009178 <parse_array+0xbc>
        {
            /* start the linked list */
            current_item = head = new_item;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	617b      	str	r3, [r7, #20]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	613b      	str	r3, [r7, #16]
 8009176:	e007      	b.n	8009188 <parse_array+0xcc>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	693a      	ldr	r2, [r7, #16]
 8009182:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	0018      	movs	r0, r3
 8009196:	f7ff fc06 	bl	80089a6 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 800919a:	683a      	ldr	r2, [r7, #0]
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	0011      	movs	r1, r2
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7ff fddd 	bl	8008d60 <parse_value>
 80091a6:	1e03      	subs	r3, r0, #0
 80091a8:	d03d      	beq.n	8009226 <parse_array+0x16a>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	0018      	movs	r0, r3
 80091ae:	f7ff fbfa 	bl	80089a6 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d00d      	beq.n	80091d4 <parse_array+0x118>
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689a      	ldr	r2, [r3, #8]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d207      	bcs.n	80091d4 <parse_array+0x118>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	18d3      	adds	r3, r2, r3
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	2b2c      	cmp	r3, #44	; 0x2c
 80091d2:	d0bf      	beq.n	8009154 <parse_array+0x98>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d027      	beq.n	800922a <parse_array+0x16e>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	689a      	ldr	r2, [r3, #8]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	429a      	cmp	r2, r3
 80091e4:	d221      	bcs.n	800922a <parse_array+0x16e>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	18d3      	adds	r3, r2, r3
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b5d      	cmp	r3, #93	; 0x5d
 80091f4:	d119      	bne.n	800922a <parse_array+0x16e>
    {
        goto fail; /* expected end of array */
    }

success:
 80091f6:	e000      	b.n	80091fa <parse_array+0x13e>
        goto success;
 80091f8:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	1e5a      	subs	r2, r3, #1
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2220      	movs	r2, #32
 8009208:	60da      	str	r2, [r3, #12]
    item->child = head;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	697a      	ldr	r2, [r7, #20]
 800920e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	1c5a      	adds	r2, r3, #1
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	609a      	str	r2, [r3, #8]

    return true;
 800921a:	2301      	movs	r3, #1
 800921c:	e00e      	b.n	800923c <parse_array+0x180>
        goto fail;
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	e004      	b.n	800922c <parse_array+0x170>
            goto fail; /* allocation failure */
 8009222:	46c0      	nop			; (mov r8, r8)
 8009224:	e002      	b.n	800922c <parse_array+0x170>
            goto fail; /* failed to parse value */
 8009226:	46c0      	nop			; (mov r8, r8)
 8009228:	e000      	b.n	800922c <parse_array+0x170>

fail:
 800922a:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d003      	beq.n	800923a <parse_array+0x17e>
    {
        JDelete(head);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	0018      	movs	r0, r3
 8009236:	f7fe fd89 	bl	8007d4c <JDelete>
    }

    return false;
 800923a:	2300      	movs	r3, #0
}
 800923c:	0018      	movs	r0, r3
 800923e:	46bd      	mov	sp, r7
 8009240:	b006      	add	sp, #24
 8009242:	bd80      	pop	{r7, pc}
 8009244:	000003e7 	.word	0x000003e7

08009248 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	689b      	ldr	r3, [r3, #8]
 800925e:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d101      	bne.n	800926a <print_array+0x22>
    {
        return false;
 8009266:	2300      	movs	r3, #0
 8009268:	e078      	b.n	800935c <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2101      	movs	r1, #1
 800926e:	0018      	movs	r0, r3
 8009270:	f7fe fe72 	bl	8007f58 <ensure>
 8009274:	0003      	movs	r3, r0
 8009276:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <print_array+0x3a>
    {
        return false;
 800927e:	2300      	movs	r3, #0
 8009280:	e06c      	b.n	800935c <print_array+0x114>
    }

    *output_pointer = '[';
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	225b      	movs	r2, #91	; 0x5b
 8009286:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	1c5a      	adds	r2, r3, #1
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	68db      	ldr	r3, [r3, #12]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 800929c:	e041      	b.n	8009322 <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	0011      	movs	r1, r2
 80092a4:	0018      	movs	r0, r3
 80092a6:	f7ff fe4b 	bl	8008f40 <print_value>
 80092aa:	1e03      	subs	r3, r0, #0
 80092ac:	d101      	bne.n	80092b2 <print_array+0x6a>
        {
            return false;
 80092ae:	2300      	movs	r3, #0
 80092b0:	e054      	b.n	800935c <print_array+0x114>
        }
        update_offset(output_buffer);
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	0018      	movs	r0, r3
 80092b6:	f7fe fef3 	bl	80080a0 <update_offset>
        if (current_element->next)
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d02c      	beq.n	800931c <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <print_array+0x86>
 80092ca:	2302      	movs	r3, #2
 80092cc:	e000      	b.n	80092d0 <print_array+0x88>
 80092ce:	2301      	movs	r3, #1
 80092d0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	0011      	movs	r1, r2
 80092da:	0018      	movs	r0, r3
 80092dc:	f7fe fe3c 	bl	8007f58 <ensure>
 80092e0:	0003      	movs	r3, r0
 80092e2:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <print_array+0xa6>
            {
                return false;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e036      	b.n	800935c <print_array+0x114>
            }
            *output_pointer++ = ',';
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	617a      	str	r2, [r7, #20]
 80092f4:	222c      	movs	r2, #44	; 0x2c
 80092f6:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	695b      	ldr	r3, [r3, #20]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d004      	beq.n	800930a <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	617a      	str	r2, [r7, #20]
 8009306:	2220      	movs	r2, #32
 8009308:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2200      	movs	r2, #0
 800930e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	689a      	ldr	r2, [r3, #8]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	18d2      	adds	r2, r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8009322:	693b      	ldr	r3, [r7, #16]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d1ba      	bne.n	800929e <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	2102      	movs	r1, #2
 800932c:	0018      	movs	r0, r3
 800932e:	f7fe fe13 	bl	8007f58 <ensure>
 8009332:	0003      	movs	r3, r0
 8009334:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d101      	bne.n	8009340 <print_array+0xf8>
    {
        return false;
 800933c:	2300      	movs	r3, #0
 800933e:	e00d      	b.n	800935c <print_array+0x114>
    }
    *output_pointer++ = ']';
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	1c5a      	adds	r2, r3, #1
 8009344:	617a      	str	r2, [r7, #20]
 8009346:	225d      	movs	r2, #93	; 0x5d
 8009348:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	1e5a      	subs	r2, r3, #1
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	60da      	str	r2, [r3, #12]

    return true;
 800935a:	2301      	movs	r3, #1
}
 800935c:	0018      	movs	r0, r3
 800935e:	46bd      	mov	sp, r7
 8009360:	b006      	add	sp, #24
 8009362:	bd80      	pop	{r7, pc}

08009364 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 800936e:	2300      	movs	r3, #0
 8009370:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8009372:	2300      	movs	r3, #0
 8009374:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	4a7a      	ldr	r2, [pc, #488]	; (8009564 <parse_object+0x200>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d901      	bls.n	8009384 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8009380:	2300      	movs	r3, #0
 8009382:	e0ea      	b.n	800955a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	1c5a      	adds	r2, r3, #1
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d100      	bne.n	8009396 <parse_object+0x32>
 8009394:	e0d2      	b.n	800953c <parse_object+0x1d8>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	689a      	ldr	r2, [r3, #8]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d300      	bcc.n	80093a4 <parse_object+0x40>
 80093a2:	e0cb      	b.n	800953c <parse_object+0x1d8>
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	689b      	ldr	r3, [r3, #8]
 80093ac:	18d3      	adds	r3, r2, r3
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b7b      	cmp	r3, #123	; 0x7b
 80093b2:	d000      	beq.n	80093b6 <parse_object+0x52>
 80093b4:	e0c2      	b.n	800953c <parse_object+0x1d8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	0018      	movs	r0, r3
 80093c4:	f7ff faef 	bl	80089a6 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00e      	beq.n	80093ec <parse_object+0x88>
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d208      	bcs.n	80093ec <parse_object+0x88>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	18d3      	adds	r3, r2, r3
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	2b7d      	cmp	r3, #125	; 0x7d
 80093e8:	d100      	bne.n	80093ec <parse_object+0x88>
 80093ea:	e094      	b.n	8009516 <parse_object+0x1b2>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <parse_object+0x9a>
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689a      	ldr	r2, [r3, #8]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d305      	bcc.n	800940a <parse_object+0xa6>
    {
        input_buffer->offset--;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	1e5a      	subs	r2, r3, #1
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	609a      	str	r2, [r3, #8]
        goto fail;
 8009408:	e09f      	b.n	800954a <parse_object+0x1e6>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	1e5a      	subs	r2, r3, #1
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	3310      	adds	r3, #16
 8009418:	0018      	movs	r0, r3
 800941a:	f7fe fc7f 	bl	8007d1c <JNew_Item>
 800941e:	0003      	movs	r3, r0
 8009420:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d100      	bne.n	800942a <parse_object+0xc6>
 8009428:	e08a      	b.n	8009540 <parse_object+0x1dc>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d104      	bne.n	800943a <parse_object+0xd6>
        {
            /* start the linked list */
            current_item = head = new_item;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	e007      	b.n	800944a <parse_object+0xe6>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	693a      	ldr	r2, [r7, #16]
 8009444:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	689b      	ldr	r3, [r3, #8]
 800944e:	1c5a      	adds	r2, r3, #1
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	0018      	movs	r0, r3
 8009458:	f7ff faa5 	bl	80089a6 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 800945c:	683a      	ldr	r2, [r7, #0]
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	0011      	movs	r1, r2
 8009462:	0018      	movs	r0, r3
 8009464:	f7ff f842 	bl	80084ec <parse_string>
 8009468:	1e03      	subs	r3, r0, #0
 800946a:	d100      	bne.n	800946e <parse_object+0x10a>
 800946c:	e06a      	b.n	8009544 <parse_object+0x1e0>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	0018      	movs	r0, r3
 8009472:	f7ff fa98 	bl	80089a6 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	2200      	movs	r2, #0
 8009482:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d058      	beq.n	800953c <parse_object+0x1d8>
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	429a      	cmp	r2, r3
 8009494:	d252      	bcs.n	800953c <parse_object+0x1d8>
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	18d3      	adds	r3, r2, r3
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b3a      	cmp	r3, #58	; 0x3a
 80094a4:	d14a      	bne.n	800953c <parse_object+0x1d8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	1c5a      	adds	r2, r3, #1
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	0018      	movs	r0, r3
 80094b4:	f7ff fa77 	bl	80089a6 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80094b8:	683a      	ldr	r2, [r7, #0]
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	0011      	movs	r1, r2
 80094be:	0018      	movs	r0, r3
 80094c0:	f7ff fc4e 	bl	8008d60 <parse_value>
 80094c4:	1e03      	subs	r3, r0, #0
 80094c6:	d03f      	beq.n	8009548 <parse_object+0x1e4>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	0018      	movs	r0, r3
 80094cc:	f7ff fa6b 	bl	80089a6 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d00d      	beq.n	80094f2 <parse_object+0x18e>
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	689a      	ldr	r2, [r3, #8]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d207      	bcs.n	80094f2 <parse_object+0x18e>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	18d3      	adds	r3, r2, r3
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	2b2c      	cmp	r3, #44	; 0x2c
 80094f0:	d090      	beq.n	8009414 <parse_object+0xb0>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d021      	beq.n	800953c <parse_object+0x1d8>
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	689a      	ldr	r2, [r3, #8]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d21b      	bcs.n	800953c <parse_object+0x1d8>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	18d3      	adds	r3, r2, r3
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	2b7d      	cmp	r3, #125	; 0x7d
 8009512:	d113      	bne.n	800953c <parse_object+0x1d8>
    {
        goto fail; /* expected end of object */
    }

success:
 8009514:	e000      	b.n	8009518 <parse_object+0x1b4>
        goto success; /* empty object */
 8009516:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	1e5a      	subs	r2, r3, #1
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2240      	movs	r2, #64	; 0x40
 8009526:	60da      	str	r2, [r3, #12]
    item->child = head;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	609a      	str	r2, [r3, #8]
    return true;
 8009538:	2301      	movs	r3, #1
 800953a:	e00e      	b.n	800955a <parse_object+0x1f6>

fail:
 800953c:	46c0      	nop			; (mov r8, r8)
 800953e:	e004      	b.n	800954a <parse_object+0x1e6>
            goto fail; /* allocation failure */
 8009540:	46c0      	nop			; (mov r8, r8)
 8009542:	e002      	b.n	800954a <parse_object+0x1e6>
            goto fail; /* faile to parse name */
 8009544:	46c0      	nop			; (mov r8, r8)
 8009546:	e000      	b.n	800954a <parse_object+0x1e6>
            goto fail; /* failed to parse value */
 8009548:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d003      	beq.n	8009558 <parse_object+0x1f4>
    {
        JDelete(head);
 8009550:	697b      	ldr	r3, [r7, #20]
 8009552:	0018      	movs	r0, r3
 8009554:	f7fe fbfa 	bl	8007d4c <JDelete>
    }

    return false;
 8009558:	2300      	movs	r3, #0
}
 800955a:	0018      	movs	r0, r3
 800955c:	46bd      	mov	sp, r7
 800955e:	b006      	add	sp, #24
 8009560:	bd80      	pop	{r7, pc}
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	000003e7 	.word	0x000003e7

08009568 <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8009572:	2300      	movs	r3, #0
 8009574:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d101      	bne.n	800958a <print_object+0x22>
    {
        return false;
 8009586:	2300      	movs	r3, #0
 8009588:	e113      	b.n	80097b2 <print_object+0x24a>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <print_object+0x2e>
 8009592:	2302      	movs	r3, #2
 8009594:	e000      	b.n	8009598 <print_object+0x30>
 8009596:	2301      	movs	r3, #1
 8009598:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	1c5a      	adds	r2, r3, #1
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	0011      	movs	r1, r2
 80095a2:	0018      	movs	r0, r3
 80095a4:	f7fe fcd8 	bl	8007f58 <ensure>
 80095a8:	0003      	movs	r3, r0
 80095aa:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d101      	bne.n	80095b6 <print_object+0x4e>
    {
        return false;
 80095b2:	2300      	movs	r3, #0
 80095b4:	e0fd      	b.n	80097b2 <print_object+0x24a>
    }

    *output_pointer++ = '{';
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	61fa      	str	r2, [r7, #28]
 80095bc:	227b      	movs	r2, #123	; 0x7b
 80095be:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	695b      	ldr	r3, [r3, #20]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d004      	beq.n	80095dc <print_object+0x74>
    {
        *output_pointer++ = '\n';
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	61fa      	str	r2, [r7, #28]
 80095d8:	220a      	movs	r2, #10
 80095da:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	689a      	ldr	r2, [r3, #8]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	18d2      	adds	r2, r2, r3
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	609a      	str	r2, [r3, #8]

    while (current_item)
 80095e8:	e0a7      	b.n	800973a <print_object+0x1d2>
    {
        if (output_buffer->format)
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d024      	beq.n	800963c <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	0011      	movs	r1, r2
 80095fa:	0018      	movs	r0, r3
 80095fc:	f7fe fcac 	bl	8007f58 <ensure>
 8009600:	0003      	movs	r3, r0
 8009602:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <print_object+0xa6>
            {
                return false;
 800960a:	2300      	movs	r3, #0
 800960c:	e0d1      	b.n	80097b2 <print_object+0x24a>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	e007      	b.n	8009624 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	61fa      	str	r2, [r7, #28]
 800961a:	2209      	movs	r2, #9
 800961c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	3301      	adds	r3, #1
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	429a      	cmp	r2, r3
 800962c:	d3f2      	bcc.n	8009614 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	689a      	ldr	r2, [r3, #8]
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	18d2      	adds	r2, r2, r3
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	6a1b      	ldr	r3, [r3, #32]
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	0011      	movs	r1, r2
 8009644:	0018      	movs	r0, r3
 8009646:	f7ff f89f 	bl	8008788 <print_string_ptr>
 800964a:	1e03      	subs	r3, r0, #0
 800964c:	d101      	bne.n	8009652 <print_object+0xea>
        {
            return false;
 800964e:	2300      	movs	r3, #0
 8009650:	e0af      	b.n	80097b2 <print_object+0x24a>
        }
        update_offset(output_buffer);
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	0018      	movs	r0, r3
 8009656:	f7fe fd23 	bl	80080a0 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	695b      	ldr	r3, [r3, #20]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d001      	beq.n	8009666 <print_object+0xfe>
 8009662:	2302      	movs	r3, #2
 8009664:	e000      	b.n	8009668 <print_object+0x100>
 8009666:	2301      	movs	r3, #1
 8009668:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 800966a:	68fa      	ldr	r2, [r7, #12]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	0011      	movs	r1, r2
 8009670:	0018      	movs	r0, r3
 8009672:	f7fe fc71 	bl	8007f58 <ensure>
 8009676:	0003      	movs	r3, r0
 8009678:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800967a:	69fb      	ldr	r3, [r7, #28]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d101      	bne.n	8009684 <print_object+0x11c>
        {
            return false;
 8009680:	2300      	movs	r3, #0
 8009682:	e096      	b.n	80097b2 <print_object+0x24a>
        }
        *output_pointer++ = ':';
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	61fa      	str	r2, [r7, #28]
 800968a:	223a      	movs	r2, #58	; 0x3a
 800968c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d004      	beq.n	80096a0 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	1c5a      	adds	r2, r3, #1
 800969a:	61fa      	str	r2, [r7, #28]
 800969c:	2209      	movs	r2, #9
 800969e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689a      	ldr	r2, [r3, #8]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	18d2      	adds	r2, r2, r3
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	69bb      	ldr	r3, [r7, #24]
 80096b0:	0011      	movs	r1, r2
 80096b2:	0018      	movs	r0, r3
 80096b4:	f7ff fc44 	bl	8008f40 <print_value>
 80096b8:	1e03      	subs	r3, r0, #0
 80096ba:	d101      	bne.n	80096c0 <print_object+0x158>
        {
            return false;
 80096bc:	2300      	movs	r3, #0
 80096be:	e078      	b.n	80097b2 <print_object+0x24a>
        }
        update_offset(output_buffer);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	0018      	movs	r0, r3
 80096c4:	f7fe fcec 	bl	80080a0 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	1e5a      	subs	r2, r3, #1
 80096ce:	4193      	sbcs	r3, r2
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	001a      	movs	r2, r3
 80096d4:	69bb      	ldr	r3, [r7, #24]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	1e59      	subs	r1, r3, #1
 80096da:	418b      	sbcs	r3, r1
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	18d3      	adds	r3, r2, r3
 80096e0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1c5a      	adds	r2, r3, #1
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	0011      	movs	r1, r2
 80096ea:	0018      	movs	r0, r3
 80096ec:	f7fe fc34 	bl	8007f58 <ensure>
 80096f0:	0003      	movs	r3, r0
 80096f2:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d101      	bne.n	80096fe <print_object+0x196>
        {
            return false;
 80096fa:	2300      	movs	r3, #0
 80096fc:	e059      	b.n	80097b2 <print_object+0x24a>
        }
        if (current_item->next)
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <print_object+0x1a8>
        {
            *output_pointer++ = ',';
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	61fa      	str	r2, [r7, #28]
 800970c:	222c      	movs	r2, #44	; 0x2c
 800970e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	695b      	ldr	r3, [r3, #20]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d004      	beq.n	8009722 <print_object+0x1ba>
        {
            *output_pointer++ = '\n';
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	1c5a      	adds	r2, r3, #1
 800971c:	61fa      	str	r2, [r7, #28]
 800971e:	220a      	movs	r2, #10
 8009720:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	2200      	movs	r2, #0
 8009726:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	18d2      	adds	r2, r2, r3
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8009734:	69bb      	ldr	r3, [r7, #24]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	61bb      	str	r3, [r7, #24]
    while (current_item)
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d000      	beq.n	8009742 <print_object+0x1da>
 8009740:	e753      	b.n	80095ea <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	695b      	ldr	r3, [r3, #20]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d003      	beq.n	8009752 <print_object+0x1ea>
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	3301      	adds	r3, #1
 8009750:	e000      	b.n	8009754 <print_object+0x1ec>
 8009752:	2302      	movs	r3, #2
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	0019      	movs	r1, r3
 8009758:	0010      	movs	r0, r2
 800975a:	f7fe fbfd 	bl	8007f58 <ensure>
 800975e:	0003      	movs	r3, r0
 8009760:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d101      	bne.n	800976c <print_object+0x204>
    {
        return false;
 8009768:	2300      	movs	r3, #0
 800976a:	e022      	b.n	80097b2 <print_object+0x24a>
    }
    if (output_buffer->format)
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d010      	beq.n	8009796 <print_object+0x22e>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8009774:	2300      	movs	r3, #0
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	e007      	b.n	800978a <print_object+0x222>
        {
            *output_pointer++ = '\t';
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	1c5a      	adds	r2, r3, #1
 800977e:	61fa      	str	r2, [r7, #28]
 8009780:	2209      	movs	r2, #9
 8009782:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	3301      	adds	r3, #1
 8009788:	613b      	str	r3, [r7, #16]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	68db      	ldr	r3, [r3, #12]
 800978e:	3b01      	subs	r3, #1
 8009790:	693a      	ldr	r2, [r7, #16]
 8009792:	429a      	cmp	r2, r3
 8009794:	d3f1      	bcc.n	800977a <print_object+0x212>
        }
    }
    *output_pointer++ = '}';
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	61fa      	str	r2, [r7, #28]
 800979c:	227d      	movs	r2, #125	; 0x7d
 800979e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	2200      	movs	r2, #0
 80097a4:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	68db      	ldr	r3, [r3, #12]
 80097aa:	1e5a      	subs	r2, r3, #1
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	60da      	str	r2, [r3, #12]

    return true;
 80097b0:	2301      	movs	r3, #1
}
 80097b2:	0018      	movs	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	b008      	add	sp, #32
 80097b8:	bd80      	pop	{r7, pc}

080097ba <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b086      	sub	sp, #24
 80097be:	af00      	add	r7, sp, #0
 80097c0:	60f8      	str	r0, [r7, #12]
 80097c2:	60b9      	str	r1, [r7, #8]
 80097c4:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 80097c6:	2300      	movs	r3, #0
 80097c8:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d002      	beq.n	80097d6 <get_object_item+0x1c>
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d101      	bne.n	80097da <get_object_item+0x20>
    {
        return NULL;
 80097d6:	2300      	movs	r3, #0
 80097d8:	e026      	b.n	8009828 <get_object_item+0x6e>
    }

    current_element = object->child;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d013      	beq.n	800980e <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80097e6:	e002      	b.n	80097ee <get_object_item+0x34>
        {
            current_element = current_element->next;
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d018      	beq.n	8009826 <get_object_item+0x6c>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	6a1a      	ldr	r2, [r3, #32]
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	0011      	movs	r1, r2
 80097fc:	0018      	movs	r0, r3
 80097fe:	f7f6 fc81 	bl	8000104 <strcmp>
 8009802:	1e03      	subs	r3, r0, #0
 8009804:	d1f0      	bne.n	80097e8 <get_object_item+0x2e>
 8009806:	e00e      	b.n	8009826 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d008      	beq.n	8009826 <get_object_item+0x6c>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	6a1a      	ldr	r2, [r3, #32]
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	0011      	movs	r1, r2
 800981c:	0018      	movs	r0, r3
 800981e:	f7fe f9b1 	bl	8007b84 <case_insensitive_strcmp>
 8009822:	1e03      	subs	r3, r0, #0
 8009824:	d1f0      	bne.n	8009808 <get_object_item+0x4e>
        }
    }

    return current_element;
 8009826:	697b      	ldr	r3, [r7, #20]
}
 8009828:	0018      	movs	r0, r3
 800982a:	46bd      	mov	sp, r7
 800982c:	b006      	add	sp, #24
 800982e:	bd80      	pop	{r7, pc}

08009830 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	0018      	movs	r0, r3
 8009842:	f7ff ffba 	bl	80097ba <get_object_item>
 8009846:	0003      	movs	r3, r0
}
 8009848:	0018      	movs	r0, r3
 800984a:	46bd      	mov	sp, r7
 800984c:	b002      	add	sp, #8
 800984e:	bd80      	pop	{r7, pc}

08009850 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	683a      	ldr	r2, [r7, #0]
 800985e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	605a      	str	r2, [r3, #4]
}
 8009866:	46c0      	nop			; (mov r8, r8)
 8009868:	46bd      	mov	sp, r7
 800986a:	b002      	add	sp, #8
 800986c:	bd80      	pop	{r7, pc}

0800986e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <add_item_to_array+0x1a>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d101      	bne.n	800988c <add_item_to_array+0x1e>
    {
        return false;
 8009888:	2300      	movs	r3, #0
 800988a:	e017      	b.n	80098bc <add_item_to_array+0x4e>
    }

    child = array->child;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d106      	bne.n	80098a6 <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	609a      	str	r2, [r3, #8]
 800989e:	e00c      	b.n	80098ba <add_item_to_array+0x4c>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	60fb      	str	r3, [r7, #12]
        while (child->next)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d1f8      	bne.n	80098a0 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	0011      	movs	r1, r2
 80098b4:	0018      	movs	r0, r3
 80098b6:	f7ff ffcb 	bl	8009850 <suffix_object>
    }

    return true;
 80098ba:	2301      	movs	r3, #1
}
 80098bc:	0018      	movs	r0, r3
 80098be:	46bd      	mov	sp, r7
 80098c0:	b004      	add	sp, #16
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80098cc:	687b      	ldr	r3, [r7, #4]
}
 80098ce:	0018      	movs	r0, r3
 80098d0:	46bd      	mov	sp, r7
 80098d2:	b002      	add	sp, #8
 80098d4:	bd80      	pop	{r7, pc}
	...

080098d8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const internal_hooks * const hooks, const Jbool constant_key)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b086      	sub	sp, #24
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
 80098e4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 80098ea:	2300      	movs	r3, #0
 80098ec:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d005      	beq.n	8009900 <add_item_to_object+0x28>
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d002      	beq.n	8009900 <add_item_to_object+0x28>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d101      	bne.n	8009904 <add_item_to_object+0x2c>
    {
        return false;
 8009900:	2300      	movs	r3, #0
 8009902:	e03e      	b.n	8009982 <add_item_to_object+0xaa>
    }

    if (constant_key)
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00c      	beq.n	8009924 <add_item_to_object+0x4c>
    {
        new_key = (char*)cast_away_const(string);
 800990a:	68bb      	ldr	r3, [r7, #8]
 800990c:	0018      	movs	r0, r3
 800990e:	f7ff ffd9 	bl	80098c4 <cast_away_const>
 8009912:	0003      	movs	r3, r0
 8009914:	617b      	str	r3, [r7, #20]
        new_type = item->type | JStringIsConst;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	2280      	movs	r2, #128	; 0x80
 800991c:	0092      	lsls	r2, r2, #2
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]
 8009922:	e011      	b.n	8009948 <add_item_to_object+0x70>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string, hooks);
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	0011      	movs	r1, r2
 800992a:	0018      	movs	r0, r3
 800992c:	f7fe f9ba 	bl	8007ca4 <Jstrdup>
 8009930:	0003      	movs	r3, r0
 8009932:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <add_item_to_object+0x66>
        {
            return false;
 800993a:	2300      	movs	r3, #0
 800993c:	e021      	b.n	8009982 <add_item_to_object+0xaa>
        }

        new_type = item->type & ~JStringIsConst;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	4a12      	ldr	r2, [pc, #72]	; (800998c <add_item_to_object+0xb4>)
 8009944:	4013      	ands	r3, r2
 8009946:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	68da      	ldr	r2, [r3, #12]
 800994c:	2380      	movs	r3, #128	; 0x80
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4013      	ands	r3, r2
 8009952:	d109      	bne.n	8009968 <add_item_to_object+0x90>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <add_item_to_object+0x90>
    {
        hooks->deallocate(item->string);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6a1b      	ldr	r3, [r3, #32]
 8009964:	0018      	movs	r0, r3
 8009966:	4790      	blx	r2
    }

    item->string = new_key;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	0011      	movs	r1, r2
 800997a:	0018      	movs	r0, r3
 800997c:	f7ff ff77 	bl	800986e <add_item_to_array>
 8009980:	0003      	movs	r3, r0
}
 8009982:	0018      	movs	r0, r3
 8009984:	46bd      	mov	sp, r7
 8009986:	b006      	add	sp, #24
 8009988:	bd80      	pop	{r7, pc}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	fffffdff 	.word	0xfffffdff

08009990 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 8009990:	b590      	push	{r4, r7, lr}
 8009992:	b087      	sub	sp, #28
 8009994:	af02      	add	r7, sp, #8
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 800999c:	4c06      	ldr	r4, [pc, #24]	; (80099b8 <JAddItemToObject+0x28>)
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	68b9      	ldr	r1, [r7, #8]
 80099a2:	68f8      	ldr	r0, [r7, #12]
 80099a4:	2300      	movs	r3, #0
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	0023      	movs	r3, r4
 80099aa:	f7ff ff95 	bl	80098d8 <add_item_to_object>
}
 80099ae:	46c0      	nop			; (mov r8, r8)
 80099b0:	46bd      	mov	sp, r7
 80099b2:	b005      	add	sp, #20
 80099b4:	bd90      	pop	{r4, r7, pc}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	20000058 	.word	0x20000058

080099bc <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 80099bc:	b590      	push	{r4, r7, lr}
 80099be:	b089      	sub	sp, #36	; 0x24
 80099c0:	af02      	add	r7, sp, #8
 80099c2:	60f8      	str	r0, [r7, #12]
 80099c4:	60b9      	str	r1, [r7, #8]
 80099c6:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	0018      	movs	r0, r3
 80099cc:	f000 f866 	bl	8009a9c <JCreateBool>
 80099d0:	0003      	movs	r3, r0
 80099d2:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 80099d4:	4c0a      	ldr	r4, [pc, #40]	; (8009a00 <JAddBoolToObject+0x44>)
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	68b9      	ldr	r1, [r7, #8]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	2300      	movs	r3, #0
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	0023      	movs	r3, r4
 80099e2:	f7ff ff79 	bl	80098d8 <add_item_to_object>
 80099e6:	1e03      	subs	r3, r0, #0
 80099e8:	d001      	beq.n	80099ee <JAddBoolToObject+0x32>
    {
        return bool_item;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	e004      	b.n	80099f8 <JAddBoolToObject+0x3c>
    }

    JDelete(bool_item);
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	0018      	movs	r0, r3
 80099f2:	f7fe f9ab 	bl	8007d4c <JDelete>
    return NULL;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	0018      	movs	r0, r3
 80099fa:	46bd      	mov	sp, r7
 80099fc:	b007      	add	sp, #28
 80099fe:	bd90      	pop	{r4, r7, pc}
 8009a00:	20000058 	.word	0x20000058

08009a04 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const double number)
{
 8009a04:	b590      	push	{r4, r7, lr}
 8009a06:	b089      	sub	sp, #36	; 0x24
 8009a08:	af02      	add	r7, sp, #8
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	603a      	str	r2, [r7, #0]
 8009a10:	607b      	str	r3, [r7, #4]
    J *number_item = JCreateNumber(number);
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	687c      	ldr	r4, [r7, #4]
 8009a16:	0018      	movs	r0, r3
 8009a18:	0021      	movs	r1, r4
 8009a1a:	f000 f85b 	bl	8009ad4 <JCreateNumber>
 8009a1e:	0003      	movs	r3, r0
 8009a20:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8009a22:	4c0b      	ldr	r4, [pc, #44]	; (8009a50 <JAddNumberToObject+0x4c>)
 8009a24:	697a      	ldr	r2, [r7, #20]
 8009a26:	68b9      	ldr	r1, [r7, #8]
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9300      	str	r3, [sp, #0]
 8009a2e:	0023      	movs	r3, r4
 8009a30:	f7ff ff52 	bl	80098d8 <add_item_to_object>
 8009a34:	1e03      	subs	r3, r0, #0
 8009a36:	d001      	beq.n	8009a3c <JAddNumberToObject+0x38>
    {
        return number_item;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	e004      	b.n	8009a46 <JAddNumberToObject+0x42>
    }

    JDelete(number_item);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	0018      	movs	r0, r3
 8009a40:	f7fe f984 	bl	8007d4c <JDelete>
    return NULL;
 8009a44:	2300      	movs	r3, #0
}
 8009a46:	0018      	movs	r0, r3
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b007      	add	sp, #28
 8009a4c:	bd90      	pop	{r4, r7, pc}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	20000058 	.word	0x20000058

08009a54 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 8009a54:	b590      	push	{r4, r7, lr}
 8009a56:	b089      	sub	sp, #36	; 0x24
 8009a58:	af02      	add	r7, sp, #8
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	0018      	movs	r0, r3
 8009a64:	f000 f87c 	bl	8009b60 <JCreateString>
 8009a68:	0003      	movs	r3, r0
 8009a6a:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8009a6c:	4c0a      	ldr	r4, [pc, #40]	; (8009a98 <JAddStringToObject+0x44>)
 8009a6e:	697a      	ldr	r2, [r7, #20]
 8009a70:	68b9      	ldr	r1, [r7, #8]
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	2300      	movs	r3, #0
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	0023      	movs	r3, r4
 8009a7a:	f7ff ff2d 	bl	80098d8 <add_item_to_object>
 8009a7e:	1e03      	subs	r3, r0, #0
 8009a80:	d001      	beq.n	8009a86 <JAddStringToObject+0x32>
    {
        return string_item;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	e004      	b.n	8009a90 <JAddStringToObject+0x3c>
    }

    JDelete(string_item);
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	0018      	movs	r0, r3
 8009a8a:	f7fe f95f 	bl	8007d4c <JDelete>
    return NULL;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	0018      	movs	r0, r3
 8009a92:	46bd      	mov	sp, r7
 8009a94:	b007      	add	sp, #28
 8009a96:	bd90      	pop	{r4, r7, pc}
 8009a98:	20000058 	.word	0x20000058

08009a9c <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <JCreateBool+0x34>)
 8009aa6:	0018      	movs	r0, r3
 8009aa8:	f7fe f938 	bl	8007d1c <JNew_Item>
 8009aac:	0003      	movs	r3, r0
 8009aae:	60fb      	str	r3, [r7, #12]
    if(item)
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <JCreateBool+0x2a>
    {
        item->type = b ? JTrue : JFalse;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <JCreateBool+0x24>
 8009abc:	2202      	movs	r2, #2
 8009abe:	e000      	b.n	8009ac2 <JCreateBool+0x26>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	60da      	str	r2, [r3, #12]
    }

    return item;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
}
 8009ac8:	0018      	movs	r0, r3
 8009aca:	46bd      	mov	sp, r7
 8009acc:	b004      	add	sp, #16
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	20000058 	.word	0x20000058

08009ad4 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(double num)
{
 8009ad4:	b590      	push	{r4, r7, lr}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6038      	str	r0, [r7, #0]
 8009adc:	6079      	str	r1, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8009ade:	4b1b      	ldr	r3, [pc, #108]	; (8009b4c <JCreateNumber+0x78>)
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	f7fe f91b 	bl	8007d1c <JNew_Item>
 8009ae6:	0003      	movs	r3, r0
 8009ae8:	60fb      	str	r3, [r7, #12]
    if(item)
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d027      	beq.n	8009b40 <JCreateNumber+0x6c>
    {
        item->type = JNumber;
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2208      	movs	r2, #8
 8009af4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	687c      	ldr	r4, [r7, #4]
 8009afc:	6193      	str	r3, [r2, #24]
 8009afe:	61d4      	str	r4, [r2, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8009b00:	4a13      	ldr	r2, [pc, #76]	; (8009b50 <JCreateNumber+0x7c>)
 8009b02:	4b14      	ldr	r3, [pc, #80]	; (8009b54 <JCreateNumber+0x80>)
 8009b04:	6838      	ldr	r0, [r7, #0]
 8009b06:	6879      	ldr	r1, [r7, #4]
 8009b08:	f7f6 fcb8 	bl	800047c <__aeabi_dcmpge>
 8009b0c:	1e03      	subs	r3, r0, #0
 8009b0e:	d003      	beq.n	8009b18 <JCreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4a11      	ldr	r2, [pc, #68]	; (8009b58 <JCreateNumber+0x84>)
 8009b14:	615a      	str	r2, [r3, #20]
 8009b16:	e013      	b.n	8009b40 <JCreateNumber+0x6c>
        }
        else if (num <= INT_MIN)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4b10      	ldr	r3, [pc, #64]	; (8009b5c <JCreateNumber+0x88>)
 8009b1c:	6838      	ldr	r0, [r7, #0]
 8009b1e:	6879      	ldr	r1, [r7, #4]
 8009b20:	f7f6 fc98 	bl	8000454 <__aeabi_dcmple>
 8009b24:	1e03      	subs	r3, r0, #0
 8009b26:	d004      	beq.n	8009b32 <JCreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2280      	movs	r2, #128	; 0x80
 8009b2c:	0612      	lsls	r2, r2, #24
 8009b2e:	615a      	str	r2, [r3, #20]
 8009b30:	e006      	b.n	8009b40 <JCreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	f7f8 fa8b 	bl	8002050 <__aeabi_d2iz>
 8009b3a:	0002      	movs	r2, r0
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8009b40:	68fb      	ldr	r3, [r7, #12]
}
 8009b42:	0018      	movs	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	b005      	add	sp, #20
 8009b48:	bd90      	pop	{r4, r7, pc}
 8009b4a:	46c0      	nop			; (mov r8, r8)
 8009b4c:	20000058 	.word	0x20000058
 8009b50:	ffc00000 	.word	0xffc00000
 8009b54:	41dfffff 	.word	0x41dfffff
 8009b58:	7fffffff 	.word	0x7fffffff
 8009b5c:	c1e00000 	.word	0xc1e00000

08009b60 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8009b68:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <JCreateString+0x50>)
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f7fe f8d6 	bl	8007d1c <JNew_Item>
 8009b70:	0003      	movs	r3, r0
 8009b72:	60fb      	str	r3, [r7, #12]
    if(item)
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d015      	beq.n	8009ba6 <JCreateString+0x46>
    {
        item->type = JString;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2210      	movs	r2, #16
 8009b7e:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string, &global_hooks);
 8009b80:	4a0b      	ldr	r2, [pc, #44]	; (8009bb0 <JCreateString+0x50>)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	0011      	movs	r1, r2
 8009b86:	0018      	movs	r0, r3
 8009b88:	f7fe f88c 	bl	8007ca4 <Jstrdup>
 8009b8c:	0002      	movs	r2, r0
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d105      	bne.n	8009ba6 <JCreateString+0x46>
        {
            JDelete(item);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	0018      	movs	r0, r3
 8009b9e:	f7fe f8d5 	bl	8007d4c <JDelete>
            return NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e000      	b.n	8009ba8 <JCreateString+0x48>
        }
    }

    return item;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	0018      	movs	r0, r3
 8009baa:	46bd      	mov	sp, r7
 8009bac:	b004      	add	sp, #16
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000058 	.word	0x20000058

08009bb4 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b082      	sub	sp, #8
 8009bb8:	af00      	add	r7, sp, #0
    J *item = JNew_Item(&global_hooks);
 8009bba:	4b08      	ldr	r3, [pc, #32]	; (8009bdc <JCreateObject+0x28>)
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f7fe f8ad 	bl	8007d1c <JNew_Item>
 8009bc2:	0003      	movs	r3, r0
 8009bc4:	607b      	str	r3, [r7, #4]
    if (item)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <JCreateObject+0x1e>
    {
        item->type = JObject;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2240      	movs	r2, #64	; 0x40
 8009bd0:	60da      	str	r2, [r3, #12]
    }

    return item;
 8009bd2:	687b      	ldr	r3, [r7, #4]
}
 8009bd4:	0018      	movs	r0, r3
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	b002      	add	sp, #8
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	20000058 	.word	0x20000058

08009be0 <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d101      	bne.n	8009bf2 <JIsNumber+0x12>
    {
        return false;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	e007      	b.n	8009c02 <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	22ff      	movs	r2, #255	; 0xff
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	3b08      	subs	r3, #8
 8009bfc:	425a      	negs	r2, r3
 8009bfe:	4153      	adcs	r3, r2
 8009c00:	b2db      	uxtb	r3, r3
}
 8009c02:	0018      	movs	r0, r3
 8009c04:	46bd      	mov	sp, r7
 8009c06:	b002      	add	sp, #8
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d101      	bne.n	8009c1c <JIsString+0x12>
    {
        return false;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	e007      	b.n	8009c2c <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	22ff      	movs	r2, #255	; 0xff
 8009c22:	4013      	ands	r3, r2
 8009c24:	3b10      	subs	r3, #16
 8009c26:	425a      	negs	r2, r3
 8009c28:	4153      	adcs	r3, r2
 8009c2a:	b2db      	uxtb	r3, r3
}
 8009c2c:	0018      	movs	r0, r3
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	b002      	add	sp, #8
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
double JGetNumber(J *rsp, const char *field) {
 8009c34:	b590      	push	{r4, r7, lr}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <JGetNumber+0x16>
        return 0.0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	2400      	movs	r4, #0
 8009c48:	e019      	b.n	8009c7e <JGetNumber+0x4a>
    J *item = JGetObjectItem(rsp, field);
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	0011      	movs	r1, r2
 8009c50:	0018      	movs	r0, r3
 8009c52:	f7ff fded 	bl	8009830 <JGetObjectItem>
 8009c56:	0003      	movs	r3, r0
 8009c58:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d102      	bne.n	8009c66 <JGetNumber+0x32>
        return 0.0;
 8009c60:	2300      	movs	r3, #0
 8009c62:	2400      	movs	r4, #0
 8009c64:	e00b      	b.n	8009c7e <JGetNumber+0x4a>
    if (!JIsNumber(item))
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	0018      	movs	r0, r3
 8009c6a:	f7ff ffb9 	bl	8009be0 <JIsNumber>
 8009c6e:	1e03      	subs	r3, r0, #0
 8009c70:	d102      	bne.n	8009c78 <JGetNumber+0x44>
        return 0.0;
 8009c72:	2300      	movs	r3, #0
 8009c74:	2400      	movs	r4, #0
 8009c76:	e002      	b.n	8009c7e <JGetNumber+0x4a>
    return item->valuedouble;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	69dc      	ldr	r4, [r3, #28]
 8009c7c:	699b      	ldr	r3, [r3, #24]
}
 8009c7e:	0018      	movs	r0, r3
 8009c80:	0021      	movs	r1, r4
 8009c82:	46bd      	mov	sp, r7
 8009c84:	b005      	add	sp, #20
 8009c86:	bd90      	pop	{r4, r7, pc}

08009c88 <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d101      	bne.n	8009c9c <JIsNullString+0x14>
        return false;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e022      	b.n	8009ce2 <JIsNullString+0x5a>
    J *item = JGetObjectItem(rsp, field);
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	0011      	movs	r1, r2
 8009ca2:	0018      	movs	r0, r3
 8009ca4:	f7ff fdc4 	bl	8009830 <JGetObjectItem>
 8009ca8:	0003      	movs	r3, r0
 8009caa:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d101      	bne.n	8009cb6 <JIsNullString+0x2e>
        return true;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e015      	b.n	8009ce2 <JIsNullString+0x5a>
    if (!JIsString(item))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	0018      	movs	r0, r3
 8009cba:	f7ff ffa6 	bl	8009c0a <JIsString>
 8009cbe:	1e03      	subs	r3, r0, #0
 8009cc0:	d101      	bne.n	8009cc6 <JIsNullString+0x3e>
        return false;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e00d      	b.n	8009ce2 <JIsNullString+0x5a>
    if (item->valuestring == NULL)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	691b      	ldr	r3, [r3, #16]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d101      	bne.n	8009cd2 <JIsNullString+0x4a>
        return true;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e007      	b.n	8009ce2 <JIsNullString+0x5a>
    if (item->valuestring[0] == '\0')
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d101      	bne.n	8009ce0 <JIsNullString+0x58>
        return true;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e000      	b.n	8009ce2 <JIsNullString+0x5a>
    return false;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	0018      	movs	r0, r3
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	b004      	add	sp, #16
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <JNtoA>:
    0.0000000005,       // 9
    0.00000000005       // 10
};

char * JNtoA(double f, char * buf, int original_precision)
{
 8009cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cee:	b08f      	sub	sp, #60	; 0x3c
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60b8      	str	r0, [r7, #8]
 8009cf4:	60f9      	str	r1, [r7, #12]
 8009cf6:	607a      	str	r2, [r7, #4]
 8009cf8:	603b      	str	r3, [r7, #0]
    char * ptr = buf;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	637b      	str	r3, [r7, #52]	; 0x34
    char * p = ptr;
 8009cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d00:	633b      	str	r3, [r7, #48]	; 0x30
    char c;
    long intPart;

    // Check specifically for uncommon but bad floating point numbers that can't be converted
    uint8_t fbytes[8];
    memcpy(&fbytes, &f, sizeof(fbytes));
 8009d02:	2310      	movs	r3, #16
 8009d04:	18fa      	adds	r2, r7, r3
 8009d06:	2308      	movs	r3, #8
 8009d08:	18fb      	adds	r3, r7, r3
 8009d0a:	0010      	movs	r0, r2
 8009d0c:	0019      	movs	r1, r3
 8009d0e:	2308      	movs	r3, #8
 8009d10:	001a      	movs	r2, r3
 8009d12:	f000 fe27 	bl	800a964 <memcpy>
    bool wasFF = true;
 8009d16:	2327      	movs	r3, #39	; 0x27
 8009d18:	18fb      	adds	r3, r7, r3
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	701a      	strb	r2, [r3, #0]
    int i;
    for (i=0; i<sizeof(fbytes); i++)
 8009d1e:	2300      	movs	r3, #0
 8009d20:	623b      	str	r3, [r7, #32]
 8009d22:	e00d      	b.n	8009d40 <JNtoA+0x54>
        if (fbytes[i] != 0xff) wasFF = false;
 8009d24:	2310      	movs	r3, #16
 8009d26:	18fa      	adds	r2, r7, r3
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	18d3      	adds	r3, r2, r3
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	2bff      	cmp	r3, #255	; 0xff
 8009d30:	d003      	beq.n	8009d3a <JNtoA+0x4e>
 8009d32:	2327      	movs	r3, #39	; 0x27
 8009d34:	18fb      	adds	r3, r7, r3
 8009d36:	2200      	movs	r2, #0
 8009d38:	701a      	strb	r2, [r3, #0]
    for (i=0; i<sizeof(fbytes); i++)
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	623b      	str	r3, [r7, #32]
 8009d40:	6a3b      	ldr	r3, [r7, #32]
 8009d42:	2b07      	cmp	r3, #7
 8009d44:	d9ee      	bls.n	8009d24 <JNtoA+0x38>
    if (wasFF)
 8009d46:	2327      	movs	r3, #39	; 0x27
 8009d48:	18fb      	adds	r3, r7, r3
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <JNtoA+0x6c>
        f = 0.0;
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	60ba      	str	r2, [r7, #8]
 8009d56:	60fb      	str	r3, [r7, #12]

    // check precision bounds
    int precision = original_precision;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	61fb      	str	r3, [r7, #28]
    if (precision < 0 || precision > JNTOA_PRECISION)
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	db02      	blt.n	8009d68 <JNtoA+0x7c>
 8009d62:	69fb      	ldr	r3, [r7, #28]
 8009d64:	2b0a      	cmp	r3, #10
 8009d66:	dd01      	ble.n	8009d6c <JNtoA+0x80>
        precision = JNTOA_PRECISION;
 8009d68:	230a      	movs	r3, #10
 8009d6a:	61fb      	str	r3, [r7, #28]

    // sign stuff
    if (f < 0)
 8009d6c:	68b8      	ldr	r0, [r7, #8]
 8009d6e:	68f9      	ldr	r1, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	2300      	movs	r3, #0
 8009d74:	f7f6 fb64 	bl	8000440 <__aeabi_dcmplt>
 8009d78:	1e03      	subs	r3, r0, #0
 8009d7a:	d00e      	beq.n	8009d9a <JNtoA+0xae>
    {
        f = -f;
 8009d7c:	68ba      	ldr	r2, [r7, #8]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	0011      	movs	r1, r2
 8009d82:	000c      	movs	r4, r1
 8009d84:	2180      	movs	r1, #128	; 0x80
 8009d86:	0609      	lsls	r1, r1, #24
 8009d88:	4059      	eors	r1, r3
 8009d8a:	000d      	movs	r5, r1
 8009d8c:	60bc      	str	r4, [r7, #8]
 8009d8e:	60fd      	str	r5, [r7, #12]
        *ptr++ = '-';
 8009d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	637a      	str	r2, [r7, #52]	; 0x34
 8009d96:	222d      	movs	r2, #45	; 0x2d
 8009d98:	701a      	strb	r2, [r3, #0]
    }

    if (original_precision < 0)  // negative precision == automatic precision guess
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	da43      	bge.n	8009e28 <JNtoA+0x13c>
    {
        if (f < 1.0) precision = 6;
 8009da0:	68b8      	ldr	r0, [r7, #8]
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	4b8c      	ldr	r3, [pc, #560]	; (8009fd8 <JNtoA+0x2ec>)
 8009da8:	f7f6 fb4a 	bl	8000440 <__aeabi_dcmplt>
 8009dac:	1e03      	subs	r3, r0, #0
 8009dae:	d002      	beq.n	8009db6 <JNtoA+0xca>
 8009db0:	2306      	movs	r3, #6
 8009db2:	61fb      	str	r3, [r7, #28]
 8009db4:	e038      	b.n	8009e28 <JNtoA+0x13c>
        else if (f < 10.0) precision = 5;
 8009db6:	68b8      	ldr	r0, [r7, #8]
 8009db8:	68f9      	ldr	r1, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	4b87      	ldr	r3, [pc, #540]	; (8009fdc <JNtoA+0x2f0>)
 8009dbe:	f7f6 fb3f 	bl	8000440 <__aeabi_dcmplt>
 8009dc2:	1e03      	subs	r3, r0, #0
 8009dc4:	d002      	beq.n	8009dcc <JNtoA+0xe0>
 8009dc6:	2305      	movs	r3, #5
 8009dc8:	61fb      	str	r3, [r7, #28]
 8009dca:	e02d      	b.n	8009e28 <JNtoA+0x13c>
        else if (f < 100.0) precision = 4;
 8009dcc:	68b8      	ldr	r0, [r7, #8]
 8009dce:	68f9      	ldr	r1, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	4b83      	ldr	r3, [pc, #524]	; (8009fe0 <JNtoA+0x2f4>)
 8009dd4:	f7f6 fb34 	bl	8000440 <__aeabi_dcmplt>
 8009dd8:	1e03      	subs	r3, r0, #0
 8009dda:	d002      	beq.n	8009de2 <JNtoA+0xf6>
 8009ddc:	2304      	movs	r3, #4
 8009dde:	61fb      	str	r3, [r7, #28]
 8009de0:	e022      	b.n	8009e28 <JNtoA+0x13c>
        else if (f < 1000.0) precision = 3;
 8009de2:	68b8      	ldr	r0, [r7, #8]
 8009de4:	68f9      	ldr	r1, [r7, #12]
 8009de6:	2200      	movs	r2, #0
 8009de8:	4b7e      	ldr	r3, [pc, #504]	; (8009fe4 <JNtoA+0x2f8>)
 8009dea:	f7f6 fb29 	bl	8000440 <__aeabi_dcmplt>
 8009dee:	1e03      	subs	r3, r0, #0
 8009df0:	d002      	beq.n	8009df8 <JNtoA+0x10c>
 8009df2:	2303      	movs	r3, #3
 8009df4:	61fb      	str	r3, [r7, #28]
 8009df6:	e017      	b.n	8009e28 <JNtoA+0x13c>
        else if (f < 10000.0) precision = 2;
 8009df8:	68b8      	ldr	r0, [r7, #8]
 8009dfa:	68f9      	ldr	r1, [r7, #12]
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	4b7a      	ldr	r3, [pc, #488]	; (8009fe8 <JNtoA+0x2fc>)
 8009e00:	f7f6 fb1e 	bl	8000440 <__aeabi_dcmplt>
 8009e04:	1e03      	subs	r3, r0, #0
 8009e06:	d002      	beq.n	8009e0e <JNtoA+0x122>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	61fb      	str	r3, [r7, #28]
 8009e0c:	e00c      	b.n	8009e28 <JNtoA+0x13c>
        else if (f < 100000.0) precision = 1;
 8009e0e:	68b8      	ldr	r0, [r7, #8]
 8009e10:	68f9      	ldr	r1, [r7, #12]
 8009e12:	2200      	movs	r2, #0
 8009e14:	4b75      	ldr	r3, [pc, #468]	; (8009fec <JNtoA+0x300>)
 8009e16:	f7f6 fb13 	bl	8000440 <__aeabi_dcmplt>
 8009e1a:	1e03      	subs	r3, r0, #0
 8009e1c:	d002      	beq.n	8009e24 <JNtoA+0x138>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	61fb      	str	r3, [r7, #28]
 8009e22:	e001      	b.n	8009e28 <JNtoA+0x13c>
        else precision = 0;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
    }

    // round value according the precision
    if (precision)
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00f      	beq.n	8009e4e <JNtoA+0x162>
        f += rounders[precision];
 8009e2e:	4a70      	ldr	r2, [pc, #448]	; (8009ff0 <JNtoA+0x304>)
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	00db      	lsls	r3, r3, #3
 8009e34:	18d3      	adds	r3, r2, r3
 8009e36:	6818      	ldr	r0, [r3, #0]
 8009e38:	6859      	ldr	r1, [r3, #4]
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	68fc      	ldr	r4, [r7, #12]
 8009e3e:	001a      	movs	r2, r3
 8009e40:	0023      	movs	r3, r4
 8009e42:	f7f6 fc25 	bl	8000690 <__aeabi_dadd>
 8009e46:	0003      	movs	r3, r0
 8009e48:	000c      	movs	r4, r1
 8009e4a:	60bb      	str	r3, [r7, #8]
 8009e4c:	60fc      	str	r4, [r7, #12]

    // integer part...
    intPart = f;
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	68fc      	ldr	r4, [r7, #12]
 8009e52:	0018      	movs	r0, r3
 8009e54:	0021      	movs	r1, r4
 8009e56:	f7f8 f8fb 	bl	8002050 <__aeabi_d2iz>
 8009e5a:	0003      	movs	r3, r0
 8009e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    f -= intPart;
 8009e5e:	68bc      	ldr	r4, [r7, #8]
 8009e60:	68fd      	ldr	r5, [r7, #12]
 8009e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e64:	f7f8 f92a 	bl	80020bc <__aeabi_i2d>
 8009e68:	0002      	movs	r2, r0
 8009e6a:	000b      	movs	r3, r1
 8009e6c:	0020      	movs	r0, r4
 8009e6e:	0029      	movs	r1, r5
 8009e70:	f7f7 fda6 	bl	80019c0 <__aeabi_dsub>
 8009e74:	0003      	movs	r3, r0
 8009e76:	000c      	movs	r4, r1
 8009e78:	60bb      	str	r3, [r7, #8]
 8009e7a:	60fc      	str	r4, [r7, #12]

    if (!intPart)
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d105      	bne.n	8009e8e <JNtoA+0x1a2>
        *ptr++ = '0';
 8009e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e84:	1c5a      	adds	r2, r3, #1
 8009e86:	637a      	str	r2, [r7, #52]	; 0x34
 8009e88:	2230      	movs	r2, #48	; 0x30
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	e034      	b.n	8009ef8 <JNtoA+0x20c>
    else
    {
        // save start pointer
        p = ptr;
 8009e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e90:	633b      	str	r3, [r7, #48]	; 0x30

        // convert (reverse order)
        while (intPart)
 8009e92:	e013      	b.n	8009ebc <JNtoA+0x1d0>
        {
            *p++ = '0' + intPart % 10;
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	210a      	movs	r1, #10
 8009e98:	0018      	movs	r0, r3
 8009e9a:	f7f6 fab5 	bl	8000408 <__aeabi_idivmod>
 8009e9e:	000b      	movs	r3, r1
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	1c59      	adds	r1, r3, #1
 8009ea6:	6339      	str	r1, [r7, #48]	; 0x30
 8009ea8:	3230      	adds	r2, #48	; 0x30
 8009eaa:	b2d2      	uxtb	r2, r2
 8009eac:	701a      	strb	r2, [r3, #0]
            intPart /= 10;
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	210a      	movs	r1, #10
 8009eb2:	0018      	movs	r0, r3
 8009eb4:	f7f6 f9c2 	bl	800023c <__divsi3>
 8009eb8:	0003      	movs	r3, r0
 8009eba:	62bb      	str	r3, [r7, #40]	; 0x28
        while (intPart)
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1e8      	bne.n	8009e94 <JNtoA+0x1a8>
        }

        // save end pos
        p1 = p;
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	61bb      	str	r3, [r7, #24]

        // reverse result
        while (p > ptr)
 8009ec6:	e011      	b.n	8009eec <JNtoA+0x200>
        {
            c = *--p;
 8009ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	633b      	str	r3, [r7, #48]	; 0x30
 8009ece:	212f      	movs	r1, #47	; 0x2f
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed4:	7812      	ldrb	r2, [r2, #0]
 8009ed6:	701a      	strb	r2, [r3, #0]
            *p = *ptr;
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	781a      	ldrb	r2, [r3, #0]
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	701a      	strb	r2, [r3, #0]
            *ptr++ = c;
 8009ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ee2:	1c5a      	adds	r2, r3, #1
 8009ee4:	637a      	str	r2, [r7, #52]	; 0x34
 8009ee6:	187a      	adds	r2, r7, r1
 8009ee8:	7812      	ldrb	r2, [r2, #0]
 8009eea:	701a      	strb	r2, [r3, #0]
        while (p > ptr)
 8009eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d8e9      	bhi.n	8009ec8 <JNtoA+0x1dc>
        }

        // restore end pos
        ptr = p1;
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	637b      	str	r3, [r7, #52]	; 0x34
    }

    // decimal part
    if (precision)
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d040      	beq.n	8009f80 <JNtoA+0x294>
    {

        // place decimal point
        *ptr++ = '.';
 8009efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	637a      	str	r2, [r7, #52]	; 0x34
 8009f04:	222e      	movs	r2, #46	; 0x2e
 8009f06:	701a      	strb	r2, [r3, #0]

        // convert
        while (precision--)
 8009f08:	e035      	b.n	8009f76 <JNtoA+0x28a>
        {
            f *= 10.0;
 8009f0a:	68b8      	ldr	r0, [r7, #8]
 8009f0c:	68f9      	ldr	r1, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	4b32      	ldr	r3, [pc, #200]	; (8009fdc <JNtoA+0x2f0>)
 8009f12:	f7f7 fae3 	bl	80014dc <__aeabi_dmul>
 8009f16:	0003      	movs	r3, r0
 8009f18:	000c      	movs	r4, r1
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	60fc      	str	r4, [r7, #12]
            c = f;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	68fc      	ldr	r4, [r7, #12]
 8009f22:	262f      	movs	r6, #47	; 0x2f
 8009f24:	19bd      	adds	r5, r7, r6
 8009f26:	0018      	movs	r0, r3
 8009f28:	0021      	movs	r1, r4
 8009f2a:	f7f6 fad1 	bl	80004d0 <__aeabi_d2uiz>
 8009f2e:	0003      	movs	r3, r0
 8009f30:	702b      	strb	r3, [r5, #0]

            // Invalid floating point numbers (specifically 0xffffff) end up at this point
            // with a c == 255 after the coercion
            if (c > 9) c = 0;
 8009f32:	19bb      	adds	r3, r7, r6
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d903      	bls.n	8009f42 <JNtoA+0x256>
 8009f3a:	232f      	movs	r3, #47	; 0x2f
 8009f3c:	18fb      	adds	r3, r7, r3
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]

            *ptr++ = '0' + c;
 8009f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f44:	1c5a      	adds	r2, r3, #1
 8009f46:	637a      	str	r2, [r7, #52]	; 0x34
 8009f48:	212f      	movs	r1, #47	; 0x2f
 8009f4a:	187a      	adds	r2, r7, r1
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	3230      	adds	r2, #48	; 0x30
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]
            f -= c;
 8009f54:	68bc      	ldr	r4, [r7, #8]
 8009f56:	68fd      	ldr	r5, [r7, #12]
 8009f58:	187b      	adds	r3, r7, r1
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	0018      	movs	r0, r3
 8009f5e:	f7f8 f8ad 	bl	80020bc <__aeabi_i2d>
 8009f62:	0002      	movs	r2, r0
 8009f64:	000b      	movs	r3, r1
 8009f66:	0020      	movs	r0, r4
 8009f68:	0029      	movs	r1, r5
 8009f6a:	f7f7 fd29 	bl	80019c0 <__aeabi_dsub>
 8009f6e:	0003      	movs	r3, r0
 8009f70:	000c      	movs	r4, r1
 8009f72:	60bb      	str	r3, [r7, #8]
 8009f74:	60fc      	str	r4, [r7, #12]
        while (precision--)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	1e5a      	subs	r2, r3, #1
 8009f7a:	61fa      	str	r2, [r7, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d1c4      	bne.n	8009f0a <JNtoA+0x21e>
        }
    }

    // terminating zero
    *ptr = 0;
 8009f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f82:	2200      	movs	r2, #0
 8009f84:	701a      	strb	r2, [r3, #0]

    // Remove trailing zero's if automatic precision
    if (NULL != strchr(buf, '.')) {
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	212e      	movs	r1, #46	; 0x2e
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 fdc8 	bl	800ab20 <strchr>
 8009f90:	1e03      	subs	r3, r0, #0
 8009f92:	d01b      	beq.n	8009fcc <JNtoA+0x2e0>
        if (original_precision < 0) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	da18      	bge.n	8009fcc <JNtoA+0x2e0>
            --ptr;
 8009f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	637b      	str	r3, [r7, #52]	; 0x34
            while (ptr > (buf+1) && *ptr == '0')
 8009fa0:	e004      	b.n	8009fac <JNtoA+0x2c0>
                *ptr-- = 0;
 8009fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa4:	1e5a      	subs	r2, r3, #1
 8009fa6:	637a      	str	r2, [r7, #52]	; 0x34
 8009fa8:	2200      	movs	r2, #0
 8009faa:	701a      	strb	r2, [r3, #0]
            while (ptr > (buf+1) && *ptr == '0')
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3301      	adds	r3, #1
 8009fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d903      	bls.n	8009fbe <JNtoA+0x2d2>
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b30      	cmp	r3, #48	; 0x30
 8009fbc:	d0f1      	beq.n	8009fa2 <JNtoA+0x2b6>
            if (*ptr == '.')
 8009fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8009fc4:	d102      	bne.n	8009fcc <JNtoA+0x2e0>
                *ptr = 0;
 8009fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fc8:	2200      	movs	r2, #0
 8009fca:	701a      	strb	r2, [r3, #0]
        }
    }

    return buf;
 8009fcc:	687b      	ldr	r3, [r7, #4]
}
 8009fce:	0018      	movs	r0, r3
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	b00f      	add	sp, #60	; 0x3c
 8009fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fd6:	46c0      	nop			; (mov r8, r8)
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	40240000 	.word	0x40240000
 8009fe0:	40590000 	.word	0x40590000
 8009fe4:	408f4000 	.word	0x408f4000
 8009fe8:	40c38800 	.word	0x40c38800
 8009fec:	40f86a00 	.word	0x40f86a00
 8009ff0:	0800b8a8 	.word	0x0800b8a8

08009ff4 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b084      	sub	sp, #16
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
 800a000:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 800a002:	4b08      	ldr	r3, [pc, #32]	; (800a024 <NoteSetFn+0x30>)
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	601a      	str	r2, [r3, #0]
    hookFree = freefn;
 800a008:	4b07      	ldr	r3, [pc, #28]	; (800a028 <NoteSetFn+0x34>)
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	601a      	str	r2, [r3, #0]
    hookDelayMs = delayfn;
 800a00e:	4b07      	ldr	r3, [pc, #28]	; (800a02c <NoteSetFn+0x38>)
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]
    hookGetMs = millisfn;
 800a014:	4b06      	ldr	r3, [pc, #24]	; (800a030 <NoteSetFn+0x3c>)
 800a016:	683a      	ldr	r2, [r7, #0]
 800a018:	601a      	str	r2, [r3, #0]
}
 800a01a:	46c0      	nop			; (mov r8, r8)
 800a01c:	46bd      	mov	sp, r7
 800a01e:	b004      	add	sp, #16
 800a020:	bd80      	pop	{r7, pc}
 800a022:	46c0      	nop			; (mov r8, r8)
 800a024:	20000490 	.word	0x20000490
 800a028:	20000494 	.word	0x20000494
 800a02c:	20000498 	.word	0x20000498
 800a030:	2000049c 	.word	0x2000049c

0800a034 <NoteSetFnSerial>:
    hookLockI2C = lockI2Cfn;
    hookUnlockI2C = unlockI2Cfn;
    hookLockNote = lockNotefn;
    hookUnlockNote = unlockNotefn;
}
void NoteSetFnSerial(serialResetFn resetfn, serialTransmitFn transmitfn, serialAvailableFn availfn, serialReceiveFn receivefn) {
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	60f8      	str	r0, [r7, #12]
 800a03c:	60b9      	str	r1, [r7, #8]
 800a03e:	607a      	str	r2, [r7, #4]
 800a040:	603b      	str	r3, [r7, #0]
    hookActiveInterface = interfaceSerial;
 800a042:	4b0c      	ldr	r3, [pc, #48]	; (800a074 <NoteSetFnSerial+0x40>)
 800a044:	2201      	movs	r2, #1
 800a046:	601a      	str	r2, [r3, #0]

    hookSerialReset = resetfn;
 800a048:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <NoteSetFnSerial+0x44>)
 800a04a:	68fa      	ldr	r2, [r7, #12]
 800a04c:	601a      	str	r2, [r3, #0]
    hookSerialTransmit = transmitfn;
 800a04e:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <NoteSetFnSerial+0x48>)
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	601a      	str	r2, [r3, #0]
    hookSerialAvailable = availfn;
 800a054:	4b0a      	ldr	r3, [pc, #40]	; (800a080 <NoteSetFnSerial+0x4c>)
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	601a      	str	r2, [r3, #0]
    hookSerialReceive = receivefn;
 800a05a:	4b0a      	ldr	r3, [pc, #40]	; (800a084 <NoteSetFnSerial+0x50>)
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	601a      	str	r2, [r3, #0]

    notecardReset = serialNoteReset;
 800a060:	4b09      	ldr	r3, [pc, #36]	; (800a088 <NoteSetFnSerial+0x54>)
 800a062:	4a0a      	ldr	r2, [pc, #40]	; (800a08c <NoteSetFnSerial+0x58>)
 800a064:	601a      	str	r2, [r3, #0]
    notecardTransaction = serialNoteTransaction;
 800a066:	4b0a      	ldr	r3, [pc, #40]	; (800a090 <NoteSetFnSerial+0x5c>)
 800a068:	4a0a      	ldr	r2, [pc, #40]	; (800a094 <NoteSetFnSerial+0x60>)
 800a06a:	601a      	str	r2, [r3, #0]
}
 800a06c:	46c0      	nop			; (mov r8, r8)
 800a06e:	46bd      	mov	sp, r7
 800a070:	b004      	add	sp, #16
 800a072:	bd80      	pop	{r7, pc}
 800a074:	200004a0 	.word	0x200004a0
 800a078:	200004a4 	.word	0x200004a4
 800a07c:	200004a8 	.word	0x200004a8
 800a080:	200004ac 	.word	0x200004ac
 800a084:	200004b0 	.word	0x200004b0
 800a088:	200004b4 	.word	0x200004b4
 800a08c:	0800a7b5 	.word	0x0800a7b5
 800a090:	200004b8 	.word	0x200004b8
 800a094:	0800a565 	.word	0x0800a565

0800a098 <NoteFnDebug>:
    notecardTransaction = i2cNoteTransaction;
}


// Runtime hook wrappers
void NoteFnDebug(const char *format, ...) {
 800a098:	b40f      	push	{r0, r1, r2, r3}
 800a09a:	b590      	push	{r4, r7, lr}
 800a09c:	b0c3      	sub	sp, #268	; 0x10c
 800a09e:	af00      	add	r7, sp, #0
    if (hookDebugOutput != NULL) {
 800a0a0:	4b11      	ldr	r3, [pc, #68]	; (800a0e8 <NoteFnDebug+0x50>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d017      	beq.n	800a0d8 <NoteFnDebug+0x40>
        char line[256];
        va_list args;
        va_start(args, format);
 800a0a8:	238e      	movs	r3, #142	; 0x8e
 800a0aa:	005b      	lsls	r3, r3, #1
 800a0ac:	18fb      	adds	r3, r7, r3
 800a0ae:	1d7a      	adds	r2, r7, #5
 800a0b0:	32ff      	adds	r2, #255	; 0xff
 800a0b2:	6013      	str	r3, [r2, #0]
        vsnprintf(line, sizeof(line), format, args);
 800a0b4:	1d7b      	adds	r3, r7, #5
 800a0b6:	33ff      	adds	r3, #255	; 0xff
 800a0b8:	681c      	ldr	r4, [r3, #0]
 800a0ba:	238c      	movs	r3, #140	; 0x8c
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	18fb      	adds	r3, r7, r3
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	2380      	movs	r3, #128	; 0x80
 800a0c4:	0059      	lsls	r1, r3, #1
 800a0c6:	1d38      	adds	r0, r7, #4
 800a0c8:	0023      	movs	r3, r4
 800a0ca:	f000 fd73 	bl	800abb4 <vsniprintf>
        va_end(args);
        hookDebugOutput(line);
 800a0ce:	4b06      	ldr	r3, [pc, #24]	; (800a0e8 <NoteFnDebug+0x50>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	1d3a      	adds	r2, r7, #4
 800a0d4:	0010      	movs	r0, r2
 800a0d6:	4798      	blx	r3
    }
}
 800a0d8:	46c0      	nop			; (mov r8, r8)
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	b043      	add	sp, #268	; 0x10c
 800a0de:	bc90      	pop	{r4, r7}
 800a0e0:	bc08      	pop	{r3}
 800a0e2:	b004      	add	sp, #16
 800a0e4:	4718      	bx	r3
 800a0e6:	46c0      	nop			; (mov r8, r8)
 800a0e8:	20000484 	.word	0x20000484

0800a0ec <NoteFnGetMs>:
long unsigned int NoteFnGetMs() {
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 800a0f0:	4b06      	ldr	r3, [pc, #24]	; (800a10c <NoteFnGetMs+0x20>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d101      	bne.n	800a0fc <NoteFnGetMs+0x10>
        return 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	e003      	b.n	800a104 <NoteFnGetMs+0x18>
    return hookGetMs();
 800a0fc:	4b03      	ldr	r3, [pc, #12]	; (800a10c <NoteFnGetMs+0x20>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4798      	blx	r3
 800a102:	0003      	movs	r3, r0
}
 800a104:	0018      	movs	r0, r3
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	46c0      	nop			; (mov r8, r8)
 800a10c:	2000049c 	.word	0x2000049c

0800a110 <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 800a118:	4b06      	ldr	r3, [pc, #24]	; (800a134 <NoteFnDelayMs+0x24>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d004      	beq.n	800a12a <NoteFnDelayMs+0x1a>
        hookDelayMs(ms);
 800a120:	4b04      	ldr	r3, [pc, #16]	; (800a134 <NoteFnDelayMs+0x24>)
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	687a      	ldr	r2, [r7, #4]
 800a126:	0010      	movs	r0, r2
 800a128:	4798      	blx	r3
}
 800a12a:	46c0      	nop			; (mov r8, r8)
 800a12c:	46bd      	mov	sp, r7
 800a12e:	b002      	add	sp, #8
 800a130:	bd80      	pop	{r7, pc}
 800a132:	46c0      	nop			; (mov r8, r8)
 800a134:	20000498 	.word	0x20000498

0800a138 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 800a140:	4b07      	ldr	r3, [pc, #28]	; (800a160 <NoteFnMalloc+0x28>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <NoteFnMalloc+0x14>
        return NULL;
 800a148:	2300      	movs	r3, #0
 800a14a:	e005      	b.n	800a158 <NoteFnMalloc+0x20>
    return hookMalloc(size);
 800a14c:	4b04      	ldr	r3, [pc, #16]	; (800a160 <NoteFnMalloc+0x28>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	0010      	movs	r0, r2
 800a154:	4798      	blx	r3
 800a156:	0003      	movs	r3, r0
}
 800a158:	0018      	movs	r0, r3
 800a15a:	46bd      	mov	sp, r7
 800a15c:	b002      	add	sp, #8
 800a15e:	bd80      	pop	{r7, pc}
 800a160:	20000490 	.word	0x20000490

0800a164 <NoteFnFree>:
void NoteFnFree(void *p) {
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <NoteFnFree+0x24>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d004      	beq.n	800a17e <NoteFnFree+0x1a>
        hookFree(p);
 800a174:	4b04      	ldr	r3, [pc, #16]	; (800a188 <NoteFnFree+0x24>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	0010      	movs	r0, r2
 800a17c:	4798      	blx	r3
}
 800a17e:	46c0      	nop			; (mov r8, r8)
 800a180:	46bd      	mov	sp, r7
 800a182:	b002      	add	sp, #8
 800a184:	bd80      	pop	{r7, pc}
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	20000494 	.word	0x20000494

0800a18c <NoteFnLockNote>:
}
void NoteFnUnlockI2C() {
    if (hookUnlockI2C != NULL)
        hookUnlockI2C();
}
void NoteFnLockNote() {
 800a18c:	b580      	push	{r7, lr}
 800a18e:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 800a190:	4b04      	ldr	r3, [pc, #16]	; (800a1a4 <NoteFnLockNote+0x18>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <NoteFnLockNote+0x12>
        hookLockNote();
 800a198:	4b02      	ldr	r3, [pc, #8]	; (800a1a4 <NoteFnLockNote+0x18>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4798      	blx	r3
}
 800a19e:	46c0      	nop			; (mov r8, r8)
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}
 800a1a4:	20000488 	.word	0x20000488

0800a1a8 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <NoteFnUnlockNote+0x18>)
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 800a1b4:	4b02      	ldr	r3, [pc, #8]	; (800a1c0 <NoteFnUnlockNote+0x18>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4798      	blx	r3
}
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	2000048c 	.word	0x2000048c

0800a1c4 <NoteFnSerialReset>:
void NoteFnSerialReset() {
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReset != NULL)
 800a1c8:	4b06      	ldr	r3, [pc, #24]	; (800a1e4 <NoteFnSerialReset+0x20>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d106      	bne.n	800a1de <NoteFnSerialReset+0x1a>
 800a1d0:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <NoteFnSerialReset+0x24>)
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <NoteFnSerialReset+0x1a>
        hookSerialReset();
 800a1d8:	4b03      	ldr	r3, [pc, #12]	; (800a1e8 <NoteFnSerialReset+0x24>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4798      	blx	r3
}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200004a0 	.word	0x200004a0
 800a1e8:	200004a4 	.word	0x200004a4

0800a1ec <NoteFnSerialTransmit>:
void NoteFnSerialTransmit(uint8_t *text, size_t len, bool flush) {
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b084      	sub	sp, #16
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	60b9      	str	r1, [r7, #8]
 800a1f6:	1dfb      	adds	r3, r7, #7
 800a1f8:	701a      	strb	r2, [r3, #0]
    if (hookActiveInterface == interfaceSerial && hookSerialTransmit != NULL)
 800a1fa:	4b09      	ldr	r3, [pc, #36]	; (800a220 <NoteFnSerialTransmit+0x34>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d10a      	bne.n	800a218 <NoteFnSerialTransmit+0x2c>
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <NoteFnSerialTransmit+0x38>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d006      	beq.n	800a218 <NoteFnSerialTransmit+0x2c>
        hookSerialTransmit(text, len, flush);
 800a20a:	4b06      	ldr	r3, [pc, #24]	; (800a224 <NoteFnSerialTransmit+0x38>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	1dfa      	adds	r2, r7, #7
 800a210:	7812      	ldrb	r2, [r2, #0]
 800a212:	68b9      	ldr	r1, [r7, #8]
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	4798      	blx	r3
}
 800a218:	46c0      	nop			; (mov r8, r8)
 800a21a:	46bd      	mov	sp, r7
 800a21c:	b004      	add	sp, #16
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	200004a0 	.word	0x200004a0
 800a224:	200004a8 	.word	0x200004a8

0800a228 <NoteFnSerialAvailable>:
bool NoteFnSerialAvailable() {
 800a228:	b580      	push	{r7, lr}
 800a22a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialAvailable != NULL)
 800a22c:	4b08      	ldr	r3, [pc, #32]	; (800a250 <NoteFnSerialAvailable+0x28>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d108      	bne.n	800a246 <NoteFnSerialAvailable+0x1e>
 800a234:	4b07      	ldr	r3, [pc, #28]	; (800a254 <NoteFnSerialAvailable+0x2c>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d004      	beq.n	800a246 <NoteFnSerialAvailable+0x1e>
        return hookSerialAvailable();
 800a23c:	4b05      	ldr	r3, [pc, #20]	; (800a254 <NoteFnSerialAvailable+0x2c>)
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4798      	blx	r3
 800a242:	0003      	movs	r3, r0
 800a244:	e000      	b.n	800a248 <NoteFnSerialAvailable+0x20>
    return false;
 800a246:	2300      	movs	r3, #0
}
 800a248:	0018      	movs	r0, r3
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	200004a0 	.word	0x200004a0
 800a254:	200004ac 	.word	0x200004ac

0800a258 <NoteFnSerialReceive>:
char NoteFnSerialReceive() {
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
 800a25c:	4b08      	ldr	r3, [pc, #32]	; (800a280 <NoteFnSerialReceive+0x28>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b01      	cmp	r3, #1
 800a262:	d108      	bne.n	800a276 <NoteFnSerialReceive+0x1e>
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <NoteFnSerialReceive+0x2c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <NoteFnSerialReceive+0x1e>
        return hookSerialReceive();
 800a26c:	4b05      	ldr	r3, [pc, #20]	; (800a284 <NoteFnSerialReceive+0x2c>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4798      	blx	r3
 800a272:	0003      	movs	r3, r0
 800a274:	e000      	b.n	800a278 <NoteFnSerialReceive+0x20>
    return 0;
 800a276:	2300      	movs	r3, #0
}
 800a278:	0018      	movs	r0, r3
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	46c0      	nop			; (mov r8, r8)
 800a280:	200004a0 	.word	0x200004a0
 800a284:	200004b0 	.word	0x200004b0

0800a288 <NoteFnNoteReset>:
    if (i2cMax > 127)
        i2cMax = 127;
    return i2cMax;
}

bool NoteFnNoteReset() {
 800a288:	b580      	push	{r7, lr}
 800a28a:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 800a28c:	4b06      	ldr	r3, [pc, #24]	; (800a2a8 <NoteFnNoteReset+0x20>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 800a294:	2301      	movs	r3, #1
 800a296:	e003      	b.n	800a2a0 <NoteFnNoteReset+0x18>
    return notecardReset();
 800a298:	4b03      	ldr	r3, [pc, #12]	; (800a2a8 <NoteFnNoteReset+0x20>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4798      	blx	r3
 800a29e:	0003      	movs	r3, r0
}
 800a2a0:	0018      	movs	r0, r3
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			; (mov r8, r8)
 800a2a8:	200004b4 	.word	0x200004b4

0800a2ac <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 800a2b6:	4b08      	ldr	r3, [pc, #32]	; (800a2d8 <NoteFnTransaction+0x2c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <NoteFnTransaction+0x16>
        return "notecard not initialized";
 800a2be:	4b07      	ldr	r3, [pc, #28]	; (800a2dc <NoteFnTransaction+0x30>)
 800a2c0:	e006      	b.n	800a2d0 <NoteFnTransaction+0x24>
    return notecardTransaction(json, jsonResponse);
 800a2c2:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <NoteFnTransaction+0x2c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	0010      	movs	r0, r2
 800a2cc:	4798      	blx	r3
 800a2ce:	0003      	movs	r3, r0
}
 800a2d0:	0018      	movs	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	b002      	add	sp, #8
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	200004b8 	.word	0x200004b8
 800a2dc:	0800b32c 	.word	0x0800b32c

0800a2e0 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 800a2e8:	f7ff fc64 	bl	8009bb4 <JCreateObject>
 800a2ec:	0003      	movs	r3, r0
 800a2ee:	60fb      	str	r3, [r7, #12]
    if (rspdoc != NULL)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d005      	beq.n	800a302 <errDoc+0x22>
        JAddStringToObject(rspdoc, "err", errmsg);
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	4907      	ldr	r1, [pc, #28]	; (800a318 <errDoc+0x38>)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	0018      	movs	r0, r3
 800a2fe:	f7ff fba9 	bl	8009a54 <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"%s\"}\n", errmsg);
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	4b05      	ldr	r3, [pc, #20]	; (800a31c <errDoc+0x3c>)
 800a306:	0011      	movs	r1, r2
 800a308:	0018      	movs	r0, r3
 800a30a:	f7ff fec5 	bl	800a098 <NoteFnDebug>
#endif
    return rspdoc;
 800a30e:	68fb      	ldr	r3, [r7, #12]
}
 800a310:	0018      	movs	r0, r3
 800a312:	46bd      	mov	sp, r7
 800a314:	b004      	add	sp, #16
 800a316:	bd80      	pop	{r7, pc}
 800a318:	0800b348 	.word	0x0800b348
 800a31c:	0800b34c 	.word	0x0800b34c

0800a320 <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 800a328:	f7ff fc44 	bl	8009bb4 <JCreateObject>
 800a32c:	0003      	movs	r3, r0
 800a32e:	60fb      	str	r3, [r7, #12]
    if (reqdoc != NULL)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, "req", request);
 800a336:	687a      	ldr	r2, [r7, #4]
 800a338:	4904      	ldr	r1, [pc, #16]	; (800a34c <NoteNewRequest+0x2c>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	0018      	movs	r0, r3
 800a33e:	f7ff fb89 	bl	8009a54 <JAddStringToObject>
    return reqdoc;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	0018      	movs	r0, r3
 800a346:	46bd      	mov	sp, r7
 800a348:	b004      	add	sp, #16
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	0800b35c 	.word	0x0800b35c

0800a350 <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 800a350:	b5b0      	push	{r4, r5, r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d101      	bne.n	800a362 <NoteRequest+0x12>
        return false;
 800a35e:	2300      	movs	r3, #0
 800a360:	e022      	b.n	800a3a8 <NoteRequest+0x58>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	0018      	movs	r0, r3
 800a366:	f000 f847 	bl	800a3f8 <NoteTransaction>
 800a36a:	0003      	movs	r3, r0
 800a36c:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d105      	bne.n	800a380 <NoteRequest+0x30>
        JDelete(req);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	0018      	movs	r0, r3
 800a378:	f7fd fce8 	bl	8007d4c <JDelete>
        return false;
 800a37c:	2300      	movs	r3, #0
 800a37e:	e013      	b.n	800a3a8 <NoteRequest+0x58>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 800a380:	250b      	movs	r5, #11
 800a382:	197c      	adds	r4, r7, r5
 800a384:	4a0a      	ldr	r2, [pc, #40]	; (800a3b0 <NoteRequest+0x60>)
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	0011      	movs	r1, r2
 800a38a:	0018      	movs	r0, r3
 800a38c:	f7ff fc7c 	bl	8009c88 <JIsNullString>
 800a390:	0003      	movs	r3, r0
 800a392:	7023      	strb	r3, [r4, #0]
    JDelete(req);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	0018      	movs	r0, r3
 800a398:	f7fd fcd8 	bl	8007d4c <JDelete>
    JDelete(rsp);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	0018      	movs	r0, r3
 800a3a0:	f7fd fcd4 	bl	8007d4c <JDelete>
    return success;
 800a3a4:	197b      	adds	r3, r7, r5
 800a3a6:	781b      	ldrb	r3, [r3, #0]
}
 800a3a8:	0018      	movs	r0, r3
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	b004      	add	sp, #16
 800a3ae:	bdb0      	pop	{r4, r5, r7, pc}
 800a3b0:	0800b348 	.word	0x0800b348

0800a3b4 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <NoteRequestResponse+0x12>
        return NULL;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e013      	b.n	800a3ee <NoteRequestResponse+0x3a>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	0018      	movs	r0, r3
 800a3ca:	f000 f815 	bl	800a3f8 <NoteTransaction>
 800a3ce:	0003      	movs	r3, r0
 800a3d0:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d105      	bne.n	800a3e4 <NoteRequestResponse+0x30>
        JDelete(req);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	0018      	movs	r0, r3
 800a3dc:	f7fd fcb6 	bl	8007d4c <JDelete>
        return NULL;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e004      	b.n	800a3ee <NoteRequestResponse+0x3a>
    }
    // Free the request and exit
    JDelete(req);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	0018      	movs	r0, r3
 800a3e8:	f7fd fcb0 	bl	8007d4c <JDelete>
    return rsp;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
}
 800a3ee:	0018      	movs	r0, r3
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	b004      	add	sp, #16
 800a3f4:	bd80      	pop	{r7, pc}
	...

0800a3f8 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b08a      	sub	sp, #40	; 0x28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 800a400:	4b3b      	ldr	r3, [pc, #236]	; (800a4f0 <NoteTransaction+0xf8>)
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d00a      	beq.n	800a41e <NoteTransaction+0x26>
        if (!NoteReset())
 800a408:	f000 f886 	bl	800a518 <NoteReset>
 800a40c:	0003      	movs	r3, r0
 800a40e:	001a      	movs	r2, r3
 800a410:	2301      	movs	r3, #1
 800a412:	4053      	eors	r3, r2
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d001      	beq.n	800a41e <NoteTransaction+0x26>
            return NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e064      	b.n	800a4e8 <NoteTransaction+0xf0>
    }

    // Lock
    _LockNote();
 800a41e:	f7ff feb5 	bl	800a18c <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	0018      	movs	r0, r3
 800a426:	f7fe fc89 	bl	8008d3c <JPrintUnformatted>
 800a42a:	0003      	movs	r3, r0
 800a42c:	627b      	str	r3, [r7, #36]	; 0x24
    if (json == NULL) {
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	2b00      	cmp	r3, #0
 800a432:	d109      	bne.n	800a448 <NoteTransaction+0x50>
        J *rsp = errDoc("can't convert to JSON");
 800a434:	4b2f      	ldr	r3, [pc, #188]	; (800a4f4 <NoteTransaction+0xfc>)
 800a436:	0018      	movs	r0, r3
 800a438:	f7ff ff52 	bl	800a2e0 <errDoc>
 800a43c:	0003      	movs	r3, r0
 800a43e:	613b      	str	r3, [r7, #16]
        _UnlockNote();
 800a440:	f7ff feb2 	bl	800a1a8 <NoteFnUnlockNote>
        return rsp;
 800a444:	693b      	ldr	r3, [r7, #16]
 800a446:	e04f      	b.n	800a4e8 <NoteTransaction+0xf0>
    }
    
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", json);
 800a448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44a:	4b2b      	ldr	r3, [pc, #172]	; (800a4f8 <NoteTransaction+0x100>)
 800a44c:	0011      	movs	r1, r2
 800a44e:	0018      	movs	r0, r3
 800a450:	f7ff fe22 	bl	800a098 <NoteFnDebug>
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 800a454:	230c      	movs	r3, #12
 800a456:	18fa      	adds	r2, r7, r3
 800a458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45a:	0011      	movs	r1, r2
 800a45c:	0018      	movs	r0, r3
 800a45e:	f7ff ff25 	bl	800a2ac <NoteFnTransaction>
 800a462:	0003      	movs	r3, r0
 800a464:	623b      	str	r3, [r7, #32]

    // Free the json
    JFree(json);
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	0018      	movs	r0, r3
 800a46a:	f7fd fc47 	bl	8007cfc <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 800a46e:	6a3b      	ldr	r3, [r7, #32]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <NoteTransaction+0x94>
		NoteResetRequired();
 800a474:	f000 f846 	bl	800a504 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 800a478:	6a3b      	ldr	r3, [r7, #32]
 800a47a:	0018      	movs	r0, r3
 800a47c:	f7ff ff30 	bl	800a2e0 <errDoc>
 800a480:	0003      	movs	r3, r0
 800a482:	617b      	str	r3, [r7, #20]
        _UnlockNote();
 800a484:	f7ff fe90 	bl	800a1a8 <NoteFnUnlockNote>
        return rsp;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	e02d      	b.n	800a4e8 <NoteTransaction+0xf0>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	0018      	movs	r0, r3
 800a490:	f7fe fba8 	bl	8008be4 <JParse>
 800a494:	0003      	movs	r3, r0
 800a496:	61fb      	str	r3, [r7, #28]
    if (rspdoc == NULL) {
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d117      	bne.n	800a4ce <NoteTransaction+0xd6>
        _Free(responseJSON);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	0018      	movs	r0, r3
 800a4a2:	f7ff fe5f 	bl	800a164 <NoteFnFree>
        _Debug("unable to parse %d-byte response JSON: \"%s\"\n", strlen(responseJSON), responseJSON);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	0018      	movs	r0, r3
 800a4aa:	f7f5 fe35 	bl	8000118 <strlen>
 800a4ae:	0001      	movs	r1, r0
 800a4b0:	68fa      	ldr	r2, [r7, #12]
 800a4b2:	4b12      	ldr	r3, [pc, #72]	; (800a4fc <NoteTransaction+0x104>)
 800a4b4:	0018      	movs	r0, r3
 800a4b6:	f7ff fdef 	bl	800a098 <NoteFnDebug>
        J *rsp = errDoc("unrecognized response from card");
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <NoteTransaction+0x108>)
 800a4bc:	0018      	movs	r0, r3
 800a4be:	f7ff ff0f 	bl	800a2e0 <errDoc>
 800a4c2:	0003      	movs	r3, r0
 800a4c4:	61bb      	str	r3, [r7, #24]
        _UnlockNote();
 800a4c6:	f7ff fe6f 	bl	800a1a8 <NoteFnUnlockNote>
        return rsp;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	e00c      	b.n	800a4e8 <NoteTransaction+0xf0>
    }

    // Debug
#ifdef SHOW_TRANSACTIONS
    _Debug("%s\n", responseJSON);
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	4b09      	ldr	r3, [pc, #36]	; (800a4f8 <NoteTransaction+0x100>)
 800a4d2:	0011      	movs	r1, r2
 800a4d4:	0018      	movs	r0, r3
 800a4d6:	f7ff fddf 	bl	800a098 <NoteFnDebug>
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f7ff fe41 	bl	800a164 <NoteFnFree>

    // Unlock
    _UnlockNote();
 800a4e2:	f7ff fe61 	bl	800a1a8 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
    
}
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	b00a      	add	sp, #40	; 0x28
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	20000064 	.word	0x20000064
 800a4f4:	0800b360 	.word	0x0800b360
 800a4f8:	0800b378 	.word	0x0800b378
 800a4fc:	0800b37c 	.word	0x0800b37c
 800a500:	0800b3ac 	.word	0x0800b3ac

0800a504 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
    resetRequired = true;
 800a508:	4b02      	ldr	r3, [pc, #8]	; (800a514 <NoteResetRequired+0x10>)
 800a50a:	2201      	movs	r2, #1
 800a50c:	701a      	strb	r2, [r3, #0]
}
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}
 800a514:	20000064 	.word	0x20000064

0800a518 <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 800a518:	b580      	push	{r7, lr}
 800a51a:	af00      	add	r7, sp, #0
    _LockNote();
 800a51c:	f7ff fe36 	bl	800a18c <NoteFnLockNote>
    resetRequired = !_NoteReset();
 800a520:	f7ff feb2 	bl	800a288 <NoteFnNoteReset>
 800a524:	0003      	movs	r3, r0
 800a526:	1e5a      	subs	r2, r3, #1
 800a528:	4193      	sbcs	r3, r2
 800a52a:	b2db      	uxtb	r3, r3
 800a52c:	2201      	movs	r2, #1
 800a52e:	4053      	eors	r3, r2
 800a530:	b2db      	uxtb	r3, r3
 800a532:	1c1a      	adds	r2, r3, #0
 800a534:	2301      	movs	r3, #1
 800a536:	4013      	ands	r3, r2
 800a538:	b2da      	uxtb	r2, r3
 800a53a:	4b09      	ldr	r3, [pc, #36]	; (800a560 <NoteReset+0x48>)
 800a53c:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 800a53e:	f7ff fe33 	bl	800a1a8 <NoteFnUnlockNote>
    return !resetRequired;
 800a542:	4b07      	ldr	r3, [pc, #28]	; (800a560 <NoteReset+0x48>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	1e5a      	subs	r2, r3, #1
 800a548:	4193      	sbcs	r3, r2
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	2201      	movs	r2, #1
 800a54e:	4053      	eors	r3, r2
 800a550:	b2db      	uxtb	r3, r3
 800a552:	1c1a      	adds	r2, r3, #0
 800a554:	2301      	movs	r3, #1
 800a556:	4013      	ands	r3, r2
 800a558:	b2db      	uxtb	r3, r3
}
 800a55a:	0018      	movs	r0, r3
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20000064 	.word	0x20000064

0800a564 <serialNoteTransaction>:
// copyright holder including that found in the LICENSE file.

#include "n_lib.h"

// Process a transaction over the serial port, returning NULL and a buffer if success, or an error string
const char *serialNoteTransaction(char *json, char **jsonResponse) {
 800a564:	b5b0      	push	{r4, r5, r7, lr}
 800a566:	b08c      	sub	sp, #48	; 0x30
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]

    // Transmit the request in segments so as not to overwhelm the notecard's interrupt buffers
    uint32_t segOff = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t segLeft = strlen(json);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	0018      	movs	r0, r3
 800a576:	f7f5 fdcf 	bl	8000118 <strlen>
 800a57a:	0003      	movs	r3, r0
 800a57c:	62bb      	str	r3, [r7, #40]	; 0x28
    while (true) {
        size_t segLen = segLeft;
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
        if (segLen > CARD_REQUEST_SEGMENT_MAX_LEN)
 800a582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a584:	23fa      	movs	r3, #250	; 0xfa
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	429a      	cmp	r2, r3
 800a58a:	d902      	bls.n	800a592 <serialNoteTransaction+0x2e>
            segLen = CARD_REQUEST_SEGMENT_MAX_LEN;
 800a58c:	23fa      	movs	r3, #250	; 0xfa
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	627b      	str	r3, [r7, #36]	; 0x24
        segLeft -= segLen;
 800a592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a596:	1ad3      	subs	r3, r2, r3
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28
        _SerialTransmit((uint8_t *)&json[segOff], segLen, false);
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	18d3      	adds	r3, r2, r3
 800a5a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	0018      	movs	r0, r3
 800a5a6:	f7ff fe21 	bl	800a1ec <NoteFnSerialTransmit>
        if (segLeft == 0) {
 800a5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10b      	bne.n	800a5c8 <serialNoteTransaction+0x64>
			_SerialTransmit((uint8_t *)"\n", 1, true);
 800a5b0:	4b75      	ldr	r3, [pc, #468]	; (800a788 <serialNoteTransaction+0x224>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	2101      	movs	r1, #1
 800a5b6:	0018      	movs	r0, r3
 800a5b8:	f7ff fe18 	bl	800a1ec <NoteFnSerialTransmit>
            break;
 800a5bc:	46c0      	nop			; (mov r8, r8)
    // Wait for something to become available, processing timeout errors up-front
    // because the json parse operation immediately following is subject to the
    // serial port timeout. We'd like more flexibility in max timeout and ultimately
    // in our error handling.
    int start;
    for (start = _GetMs(); !_SerialAvailable(); ) {
 800a5be:	f7ff fd95 	bl	800a0ec <NoteFnGetMs>
 800a5c2:	0003      	movs	r3, r0
 800a5c4:	613b      	str	r3, [r7, #16]
 800a5c6:	e01f      	b.n	800a608 <serialNoteTransaction+0xa4>
        segOff += segLen;
 800a5c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	18d3      	adds	r3, r2, r3
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        _DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 800a5d0:	20fa      	movs	r0, #250	; 0xfa
 800a5d2:	f7ff fd9d 	bl	800a110 <NoteFnDelayMs>
    while (true) {
 800a5d6:	e7d2      	b.n	800a57e <serialNoteTransaction+0x1a>
        if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 800a5d8:	f7ff fd88 	bl	800a0ec <NoteFnGetMs>
 800a5dc:	0002      	movs	r2, r0
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	496a      	ldr	r1, [pc, #424]	; (800a78c <serialNoteTransaction+0x228>)
 800a5e2:	468c      	mov	ip, r1
 800a5e4:	4463      	add	r3, ip
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d30b      	bcc.n	800a602 <serialNoteTransaction+0x9e>
            _Debug("reply to request didn't arrive from module in %dms\n", _GetMs() - start);
 800a5ea:	f7ff fd7f 	bl	800a0ec <NoteFnGetMs>
 800a5ee:	0002      	movs	r2, r0
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	1ad2      	subs	r2, r2, r3
 800a5f4:	4b66      	ldr	r3, [pc, #408]	; (800a790 <serialNoteTransaction+0x22c>)
 800a5f6:	0011      	movs	r1, r2
 800a5f8:	0018      	movs	r0, r3
 800a5fa:	f7ff fd4d 	bl	800a098 <NoteFnDebug>
            return "transaction timeout";
 800a5fe:	4b65      	ldr	r3, [pc, #404]	; (800a794 <serialNoteTransaction+0x230>)
 800a600:	e0bd      	b.n	800a77e <serialNoteTransaction+0x21a>
        }
        _DelayMs(10);
 800a602:	200a      	movs	r0, #10
 800a604:	f7ff fd84 	bl	800a110 <NoteFnDelayMs>
    for (start = _GetMs(); !_SerialAvailable(); ) {
 800a608:	f7ff fe0e 	bl	800a228 <NoteFnSerialAvailable>
 800a60c:	0003      	movs	r3, r0
 800a60e:	001a      	movs	r2, r3
 800a610:	2301      	movs	r3, #1
 800a612:	4053      	eors	r3, r2
 800a614:	b2db      	uxtb	r3, r3
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1de      	bne.n	800a5d8 <serialNoteTransaction+0x74>
    }

    // Allocate a buffer for input, noting that we always put the +1 in the alloc so we can be assured
    // that it can be null-terminated.  This must be the case because json parsing requires a
    // null-terminated string.
    int jsonbufAllocLen = 1024;
 800a61a:	2380      	movs	r3, #128	; 0x80
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	623b      	str	r3, [r7, #32]
    char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 800a620:	6a3b      	ldr	r3, [r7, #32]
 800a622:	3301      	adds	r3, #1
 800a624:	0018      	movs	r0, r3
 800a626:	f7ff fd87 	bl	800a138 <NoteFnMalloc>
 800a62a:	0003      	movs	r3, r0
 800a62c:	61fb      	str	r3, [r7, #28]
    if (jsonbuf == NULL) {
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d107      	bne.n	800a644 <serialNoteTransaction+0xe0>
        _Debug("transaction: jsonbuf malloc(%d) failed\n", jsonbufAllocLen);
 800a634:	6a3a      	ldr	r2, [r7, #32]
 800a636:	4b58      	ldr	r3, [pc, #352]	; (800a798 <serialNoteTransaction+0x234>)
 800a638:	0011      	movs	r1, r2
 800a63a:	0018      	movs	r0, r3
 800a63c:	f7ff fd2c 	bl	800a098 <NoteFnDebug>
        return "insufficient memory";
 800a640:	4b56      	ldr	r3, [pc, #344]	; (800a79c <serialNoteTransaction+0x238>)
 800a642:	e09c      	b.n	800a77e <serialNoteTransaction+0x21a>
    }
    int jsonbufLen = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	61bb      	str	r3, [r7, #24]
    char ch = 0;
 800a648:	2317      	movs	r3, #23
 800a64a:	18fb      	adds	r3, r7, r3
 800a64c:	2200      	movs	r2, #0
 800a64e:	701a      	strb	r2, [r3, #0]
    start = _GetMs();
 800a650:	f7ff fd4c 	bl	800a0ec <NoteFnGetMs>
 800a654:	0003      	movs	r3, r0
 800a656:	613b      	str	r3, [r7, #16]
    while (ch != '\n') {
 800a658:	e082      	b.n	800a760 <serialNoteTransaction+0x1fc>
        if (!_SerialAvailable()) {
 800a65a:	f7ff fde5 	bl	800a228 <NoteFnSerialAvailable>
 800a65e:	0003      	movs	r3, r0
 800a660:	001a      	movs	r2, r3
 800a662:	2301      	movs	r3, #1
 800a664:	4053      	eors	r3, r2
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d025      	beq.n	800a6b8 <serialNoteTransaction+0x154>
          ch = 0;
 800a66c:	2317      	movs	r3, #23
 800a66e:	18fb      	adds	r3, r7, r3
 800a670:	2200      	movs	r2, #0
 800a672:	701a      	strb	r2, [r3, #0]
          if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 800a674:	f7ff fd3a 	bl	800a0ec <NoteFnGetMs>
 800a678:	0002      	movs	r2, r0
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	4943      	ldr	r1, [pc, #268]	; (800a78c <serialNoteTransaction+0x228>)
 800a67e:	468c      	mov	ip, r1
 800a680:	4463      	add	r3, ip
 800a682:	429a      	cmp	r2, r3
 800a684:	d314      	bcc.n	800a6b0 <serialNoteTransaction+0x14c>
            jsonbuf[jsonbufLen] = '\0';
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	69fa      	ldr	r2, [r7, #28]
 800a68a:	18d3      	adds	r3, r2, r3
 800a68c:	2200      	movs	r2, #0
 800a68e:	701a      	strb	r2, [r3, #0]
            _Debug("received only %d-byte partial reply after %dms: %s\n", jsonbufLen, _GetMs() - start, jsonbuf);
 800a690:	f7ff fd2c 	bl	800a0ec <NoteFnGetMs>
 800a694:	0002      	movs	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad2      	subs	r2, r2, r3
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	69b9      	ldr	r1, [r7, #24]
 800a69e:	4840      	ldr	r0, [pc, #256]	; (800a7a0 <serialNoteTransaction+0x23c>)
 800a6a0:	f7ff fcfa 	bl	800a098 <NoteFnDebug>
            _Free(jsonbuf);
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	0018      	movs	r0, r3
 800a6a8:	f7ff fd5c 	bl	800a164 <NoteFnFree>
            return "transaction incomplete";
 800a6ac:	4b3d      	ldr	r3, [pc, #244]	; (800a7a4 <serialNoteTransaction+0x240>)
 800a6ae:	e066      	b.n	800a77e <serialNoteTransaction+0x21a>
          }
          _DelayMs(1);
 800a6b0:	2001      	movs	r0, #1
 800a6b2:	f7ff fd2d 	bl	800a110 <NoteFnDelayMs>
          continue;
 800a6b6:	e053      	b.n	800a760 <serialNoteTransaction+0x1fc>
        }
        ch = _SerialReceive();
 800a6b8:	2517      	movs	r5, #23
 800a6ba:	197c      	adds	r4, r7, r5
 800a6bc:	f7ff fdcc 	bl	800a258 <NoteFnSerialReceive>
 800a6c0:	0003      	movs	r3, r0
 800a6c2:	7023      	strb	r3, [r4, #0]

        // Because serial I/O can be error-prone, catch common bad data early, knowing that we only accept ASCII
        if (ch == 0 || (ch & 0x80) != 0) {
 800a6c4:	197b      	adds	r3, r7, r5
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d005      	beq.n	800a6d8 <serialNoteTransaction+0x174>
 800a6cc:	2317      	movs	r3, #23
 800a6ce:	18fb      	adds	r3, r7, r3
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	b25b      	sxtb	r3, r3
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	da0d      	bge.n	800a6f4 <serialNoteTransaction+0x190>
          _Debug("invalid data received on serial port from notecard: 0x%02x\n", ch);
 800a6d8:	2317      	movs	r3, #23
 800a6da:	18fb      	adds	r3, r7, r3
 800a6dc:	781a      	ldrb	r2, [r3, #0]
 800a6de:	4b32      	ldr	r3, [pc, #200]	; (800a7a8 <serialNoteTransaction+0x244>)
 800a6e0:	0011      	movs	r1, r2
 800a6e2:	0018      	movs	r0, r3
 800a6e4:	f7ff fcd8 	bl	800a098 <NoteFnDebug>
          _Free(jsonbuf);
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	0018      	movs	r0, r3
 800a6ec:	f7ff fd3a 	bl	800a164 <NoteFnFree>
          return "serial communications error";
 800a6f0:	4b2e      	ldr	r3, [pc, #184]	; (800a7ac <serialNoteTransaction+0x248>)
 800a6f2:	e044      	b.n	800a77e <serialNoteTransaction+0x21a>
        }

        // Append into the json buffer
        jsonbuf[jsonbufLen++] = ch;
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	61ba      	str	r2, [r7, #24]
 800a6fa:	001a      	movs	r2, r3
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	189b      	adds	r3, r3, r2
 800a700:	2217      	movs	r2, #23
 800a702:	18ba      	adds	r2, r7, r2
 800a704:	7812      	ldrb	r2, [r2, #0]
 800a706:	701a      	strb	r2, [r3, #0]
        if (jsonbufLen >= jsonbufAllocLen) {
 800a708:	69ba      	ldr	r2, [r7, #24]
 800a70a:	6a3b      	ldr	r3, [r7, #32]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	db27      	blt.n	800a760 <serialNoteTransaction+0x1fc>
            jsonbufAllocLen += 512;
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2280      	movs	r2, #128	; 0x80
 800a714:	0092      	lsls	r2, r2, #2
 800a716:	4694      	mov	ip, r2
 800a718:	4463      	add	r3, ip
 800a71a:	623b      	str	r3, [r7, #32]
            char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	3301      	adds	r3, #1
 800a720:	0018      	movs	r0, r3
 800a722:	f7ff fd09 	bl	800a138 <NoteFnMalloc>
 800a726:	0003      	movs	r3, r0
 800a728:	60fb      	str	r3, [r7, #12]
            if (jsonbufNew == NULL) {
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10b      	bne.n	800a748 <serialNoteTransaction+0x1e4>
                _Debug("transaction: jsonbuf malloc(%d) grow failed\n", jsonbufAllocLen);
 800a730:	6a3a      	ldr	r2, [r7, #32]
 800a732:	4b1f      	ldr	r3, [pc, #124]	; (800a7b0 <serialNoteTransaction+0x24c>)
 800a734:	0011      	movs	r1, r2
 800a736:	0018      	movs	r0, r3
 800a738:	f7ff fcae 	bl	800a098 <NoteFnDebug>
                _Free(jsonbuf);
 800a73c:	69fb      	ldr	r3, [r7, #28]
 800a73e:	0018      	movs	r0, r3
 800a740:	f7ff fd10 	bl	800a164 <NoteFnFree>
                return "insufficient memory";
 800a744:	4b15      	ldr	r3, [pc, #84]	; (800a79c <serialNoteTransaction+0x238>)
 800a746:	e01a      	b.n	800a77e <serialNoteTransaction+0x21a>
            }
            memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 800a748:	69ba      	ldr	r2, [r7, #24]
 800a74a:	69f9      	ldr	r1, [r7, #28]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	0018      	movs	r0, r3
 800a750:	f000 f908 	bl	800a964 <memcpy>
            _Free(jsonbuf);
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	0018      	movs	r0, r3
 800a758:	f7ff fd04 	bl	800a164 <NoteFnFree>
            jsonbuf = jsonbufNew;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	61fb      	str	r3, [r7, #28]
    while (ch != '\n') {
 800a760:	2317      	movs	r3, #23
 800a762:	18fb      	adds	r3, r7, r3
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	2b0a      	cmp	r3, #10
 800a768:	d000      	beq.n	800a76c <serialNoteTransaction+0x208>
 800a76a:	e776      	b.n	800a65a <serialNoteTransaction+0xf6>
        }
    }

    // Null-terminate it, using the +1 space that we'd allocated in the buffer
    jsonbuf[jsonbufLen] = '\0';
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	18d3      	adds	r3, r2, r3
 800a772:	2200      	movs	r2, #0
 800a774:	701a      	strb	r2, [r3, #0]

    // Return it
    *jsonResponse = jsonbuf;
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	69fa      	ldr	r2, [r7, #28]
 800a77a:	601a      	str	r2, [r3, #0]
    return NULL;
 800a77c:	2300      	movs	r3, #0

}
 800a77e:	0018      	movs	r0, r3
 800a780:	46bd      	mov	sp, r7
 800a782:	b00c      	add	sp, #48	; 0x30
 800a784:	bdb0      	pop	{r4, r5, r7, pc}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	0800b3cc 	.word	0x0800b3cc
 800a78c:	00002710 	.word	0x00002710
 800a790:	0800b3d0 	.word	0x0800b3d0
 800a794:	0800b404 	.word	0x0800b404
 800a798:	0800b418 	.word	0x0800b418
 800a79c:	0800b440 	.word	0x0800b440
 800a7a0:	0800b454 	.word	0x0800b454
 800a7a4:	0800b488 	.word	0x0800b488
 800a7a8:	0800b4a0 	.word	0x0800b4a0
 800a7ac:	0800b4dc 	.word	0x0800b4dc
 800a7b0:	0800b4f8 	.word	0x0800b4f8

0800a7b4 <serialNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool serialNoteReset() {
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b084      	sub	sp, #16
 800a7b8:	af00      	add	r7, sp, #0

    // Initialize, or re-initialize.  Because we've observed Arduino serial driver flakiness,
    _DelayMs(250);
 800a7ba:	20fa      	movs	r0, #250	; 0xfa
 800a7bc:	f7ff fca8 	bl	800a110 <NoteFnDelayMs>
    _SerialReset();
 800a7c0:	f7ff fd00 	bl	800a1c4 <NoteFnSerialReset>

    // The guaranteed behavior for robust resyncing is to send two newlines
    // and  wait for two echoed blank lines in return.
    bool notecardReady = false;
 800a7c4:	230f      	movs	r3, #15
 800a7c6:	18fb      	adds	r3, r7, r3
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	701a      	strb	r2, [r3, #0]
    int retries;
    for (retries=0; retries<10; retries++) {
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60bb      	str	r3, [r7, #8]
 800a7d0:	e057      	b.n	800a882 <serialNoteReset+0xce>

        _Debug("notecard serial reset\n");
 800a7d2:	4b31      	ldr	r3, [pc, #196]	; (800a898 <serialNoteReset+0xe4>)
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7ff fc5f 	bl	800a098 <NoteFnDebug>

        // Send a few newlines to the module to clean out request/response processing
        _SerialTransmit((uint8_t *)"\n\n", 2, true);
 800a7da:	4b30      	ldr	r3, [pc, #192]	; (800a89c <serialNoteReset+0xe8>)
 800a7dc:	2201      	movs	r2, #1
 800a7de:	2102      	movs	r1, #2
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f7ff fd03 	bl	800a1ec <NoteFnSerialTransmit>

        // Drain all serial for 500ms
        bool somethingFound = false;
 800a7e6:	1dfb      	adds	r3, r7, #7
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	701a      	strb	r2, [r3, #0]
        bool nonControlCharFound = false;
 800a7ec:	1dbb      	adds	r3, r7, #6
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	701a      	strb	r2, [r3, #0]
        int start = _GetMs();
 800a7f2:	f7ff fc7b 	bl	800a0ec <NoteFnGetMs>
 800a7f6:	0003      	movs	r3, r0
 800a7f8:	603b      	str	r3, [r7, #0]
        while (_GetMs() < start+500) {
 800a7fa:	e016      	b.n	800a82a <serialNoteReset+0x76>
            while (_SerialAvailable()) {
                somethingFound = true;
 800a7fc:	1dfb      	adds	r3, r7, #7
 800a7fe:	2201      	movs	r2, #1
 800a800:	701a      	strb	r2, [r3, #0]
                if (_SerialReceive() >= ' ')
 800a802:	f7ff fd29 	bl	800a258 <NoteFnSerialReceive>
 800a806:	0003      	movs	r3, r0
 800a808:	0019      	movs	r1, r3
 800a80a:	1dbb      	adds	r3, r7, #6
 800a80c:	1dba      	adds	r2, r7, #6
 800a80e:	7812      	ldrb	r2, [r2, #0]
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	291f      	cmp	r1, #31
 800a814:	d902      	bls.n	800a81c <serialNoteReset+0x68>
                    nonControlCharFound = true;
 800a816:	1dbb      	adds	r3, r7, #6
 800a818:	2201      	movs	r2, #1
 800a81a:	701a      	strb	r2, [r3, #0]
            while (_SerialAvailable()) {
 800a81c:	f7ff fd04 	bl	800a228 <NoteFnSerialAvailable>
 800a820:	1e03      	subs	r3, r0, #0
 800a822:	d1eb      	bne.n	800a7fc <serialNoteReset+0x48>
            }
            _DelayMs(1);
 800a824:	2001      	movs	r0, #1
 800a826:	f7ff fc73 	bl	800a110 <NoteFnDelayMs>
        while (_GetMs() < start+500) {
 800a82a:	f7ff fc5f 	bl	800a0ec <NoteFnGetMs>
 800a82e:	0002      	movs	r2, r0
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	33f5      	adds	r3, #245	; 0xf5
 800a834:	33ff      	adds	r3, #255	; 0xff
 800a836:	429a      	cmp	r2, r3
 800a838:	d3f0      	bcc.n	800a81c <serialNoteReset+0x68>
        }

        // If all we got back is newlines, we're ready
        if (somethingFound && !nonControlCharFound) {
 800a83a:	1dfb      	adds	r3, r7, #7
 800a83c:	781b      	ldrb	r3, [r3, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d00b      	beq.n	800a85a <serialNoteReset+0xa6>
 800a842:	1dbb      	adds	r3, r7, #6
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	2201      	movs	r2, #1
 800a848:	4053      	eors	r3, r2
 800a84a:	b2db      	uxtb	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d004      	beq.n	800a85a <serialNoteReset+0xa6>
          notecardReady = true;
 800a850:	230f      	movs	r3, #15
 800a852:	18fb      	adds	r3, r7, r3
 800a854:	2201      	movs	r2, #1
 800a856:	701a      	strb	r2, [r3, #0]
          break;
 800a858:	e016      	b.n	800a888 <serialNoteReset+0xd4>
        }

        _Debug(somethingFound ? "unrecognized data from notecard\n" : "notecard not responding\n");
 800a85a:	1dfb      	adds	r3, r7, #7
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <serialNoteReset+0xb2>
 800a862:	4b0f      	ldr	r3, [pc, #60]	; (800a8a0 <serialNoteReset+0xec>)
 800a864:	e000      	b.n	800a868 <serialNoteReset+0xb4>
 800a866:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <serialNoteReset+0xf0>)
 800a868:	0018      	movs	r0, r3
 800a86a:	f7ff fc15 	bl	800a098 <NoteFnDebug>
        _DelayMs(500);
 800a86e:	23fa      	movs	r3, #250	; 0xfa
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	0018      	movs	r0, r3
 800a874:	f7ff fc4c 	bl	800a110 <NoteFnDelayMs>
        _SerialReset();
 800a878:	f7ff fca4 	bl	800a1c4 <NoteFnSerialReset>
    for (retries=0; retries<10; retries++) {
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	3301      	adds	r3, #1
 800a880:	60bb      	str	r3, [r7, #8]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	2b09      	cmp	r3, #9
 800a886:	dda4      	ble.n	800a7d2 <serialNoteReset+0x1e>

    }

    // Done
    return notecardReady;
 800a888:	230f      	movs	r3, #15
 800a88a:	18fb      	adds	r3, r7, r3
 800a88c:	781b      	ldrb	r3, [r3, #0]
}
 800a88e:	0018      	movs	r0, r3
 800a890:	46bd      	mov	sp, r7
 800a892:	b004      	add	sp, #16
 800a894:	bd80      	pop	{r7, pc}
 800a896:	46c0      	nop			; (mov r8, r8)
 800a898:	0800b528 	.word	0x0800b528
 800a89c:	0800b540 	.word	0x0800b540
 800a8a0:	0800b544 	.word	0x0800b544
 800a8a4:	0800b568 	.word	0x0800b568

0800a8a8 <__errno>:
 800a8a8:	4b01      	ldr	r3, [pc, #4]	; (800a8b0 <__errno+0x8>)
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	4770      	bx	lr
 800a8ae:	46c0      	nop			; (mov r8, r8)
 800a8b0:	20000068 	.word	0x20000068

0800a8b4 <__libc_init_array>:
 800a8b4:	b570      	push	{r4, r5, r6, lr}
 800a8b6:	2600      	movs	r6, #0
 800a8b8:	4d0c      	ldr	r5, [pc, #48]	; (800a8ec <__libc_init_array+0x38>)
 800a8ba:	4c0d      	ldr	r4, [pc, #52]	; (800a8f0 <__libc_init_array+0x3c>)
 800a8bc:	1b64      	subs	r4, r4, r5
 800a8be:	10a4      	asrs	r4, r4, #2
 800a8c0:	42a6      	cmp	r6, r4
 800a8c2:	d109      	bne.n	800a8d8 <__libc_init_array+0x24>
 800a8c4:	2600      	movs	r6, #0
 800a8c6:	f000 fc9f 	bl	800b208 <_init>
 800a8ca:	4d0a      	ldr	r5, [pc, #40]	; (800a8f4 <__libc_init_array+0x40>)
 800a8cc:	4c0a      	ldr	r4, [pc, #40]	; (800a8f8 <__libc_init_array+0x44>)
 800a8ce:	1b64      	subs	r4, r4, r5
 800a8d0:	10a4      	asrs	r4, r4, #2
 800a8d2:	42a6      	cmp	r6, r4
 800a8d4:	d105      	bne.n	800a8e2 <__libc_init_array+0x2e>
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	00b3      	lsls	r3, r6, #2
 800a8da:	58eb      	ldr	r3, [r5, r3]
 800a8dc:	4798      	blx	r3
 800a8de:	3601      	adds	r6, #1
 800a8e0:	e7ee      	b.n	800a8c0 <__libc_init_array+0xc>
 800a8e2:	00b3      	lsls	r3, r6, #2
 800a8e4:	58eb      	ldr	r3, [r5, r3]
 800a8e6:	4798      	blx	r3
 800a8e8:	3601      	adds	r6, #1
 800a8ea:	e7f2      	b.n	800a8d2 <__libc_init_array+0x1e>
 800a8ec:	0800ba48 	.word	0x0800ba48
 800a8f0:	0800ba48 	.word	0x0800ba48
 800a8f4:	0800ba48 	.word	0x0800ba48
 800a8f8:	0800ba4c 	.word	0x0800ba4c

0800a8fc <__locale_ctype_ptr>:
 800a8fc:	4b04      	ldr	r3, [pc, #16]	; (800a910 <__locale_ctype_ptr+0x14>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d100      	bne.n	800a908 <__locale_ctype_ptr+0xc>
 800a906:	4b03      	ldr	r3, [pc, #12]	; (800a914 <__locale_ctype_ptr+0x18>)
 800a908:	33ec      	adds	r3, #236	; 0xec
 800a90a:	6818      	ldr	r0, [r3, #0]
 800a90c:	4770      	bx	lr
 800a90e:	46c0      	nop			; (mov r8, r8)
 800a910:	20000068 	.word	0x20000068
 800a914:	200000cc 	.word	0x200000cc

0800a918 <malloc>:
 800a918:	b510      	push	{r4, lr}
 800a91a:	4b03      	ldr	r3, [pc, #12]	; (800a928 <malloc+0x10>)
 800a91c:	0001      	movs	r1, r0
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	f000 f88e 	bl	800aa40 <_malloc_r>
 800a924:	bd10      	pop	{r4, pc}
 800a926:	46c0      	nop			; (mov r8, r8)
 800a928:	20000068 	.word	0x20000068

0800a92c <free>:
 800a92c:	b510      	push	{r4, lr}
 800a92e:	4b03      	ldr	r3, [pc, #12]	; (800a93c <free+0x10>)
 800a930:	0001      	movs	r1, r0
 800a932:	6818      	ldr	r0, [r3, #0]
 800a934:	f000 f83a 	bl	800a9ac <_free_r>
 800a938:	bd10      	pop	{r4, pc}
 800a93a:	46c0      	nop			; (mov r8, r8)
 800a93c:	20000068 	.word	0x20000068

0800a940 <__ascii_mbtowc>:
 800a940:	b082      	sub	sp, #8
 800a942:	2900      	cmp	r1, #0
 800a944:	d100      	bne.n	800a948 <__ascii_mbtowc+0x8>
 800a946:	a901      	add	r1, sp, #4
 800a948:	1e10      	subs	r0, r2, #0
 800a94a:	d006      	beq.n	800a95a <__ascii_mbtowc+0x1a>
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d006      	beq.n	800a95e <__ascii_mbtowc+0x1e>
 800a950:	7813      	ldrb	r3, [r2, #0]
 800a952:	600b      	str	r3, [r1, #0]
 800a954:	7810      	ldrb	r0, [r2, #0]
 800a956:	1e43      	subs	r3, r0, #1
 800a958:	4198      	sbcs	r0, r3
 800a95a:	b002      	add	sp, #8
 800a95c:	4770      	bx	lr
 800a95e:	2002      	movs	r0, #2
 800a960:	4240      	negs	r0, r0
 800a962:	e7fa      	b.n	800a95a <__ascii_mbtowc+0x1a>

0800a964 <memcpy>:
 800a964:	2300      	movs	r3, #0
 800a966:	b510      	push	{r4, lr}
 800a968:	429a      	cmp	r2, r3
 800a96a:	d100      	bne.n	800a96e <memcpy+0xa>
 800a96c:	bd10      	pop	{r4, pc}
 800a96e:	5ccc      	ldrb	r4, [r1, r3]
 800a970:	54c4      	strb	r4, [r0, r3]
 800a972:	3301      	adds	r3, #1
 800a974:	e7f8      	b.n	800a968 <memcpy+0x4>

0800a976 <memmove>:
 800a976:	b510      	push	{r4, lr}
 800a978:	4288      	cmp	r0, r1
 800a97a:	d902      	bls.n	800a982 <memmove+0xc>
 800a97c:	188b      	adds	r3, r1, r2
 800a97e:	4298      	cmp	r0, r3
 800a980:	d303      	bcc.n	800a98a <memmove+0x14>
 800a982:	2300      	movs	r3, #0
 800a984:	e007      	b.n	800a996 <memmove+0x20>
 800a986:	5c8b      	ldrb	r3, [r1, r2]
 800a988:	5483      	strb	r3, [r0, r2]
 800a98a:	3a01      	subs	r2, #1
 800a98c:	d2fb      	bcs.n	800a986 <memmove+0x10>
 800a98e:	bd10      	pop	{r4, pc}
 800a990:	5ccc      	ldrb	r4, [r1, r3]
 800a992:	54c4      	strb	r4, [r0, r3]
 800a994:	3301      	adds	r3, #1
 800a996:	429a      	cmp	r2, r3
 800a998:	d1fa      	bne.n	800a990 <memmove+0x1a>
 800a99a:	e7f8      	b.n	800a98e <memmove+0x18>

0800a99c <memset>:
 800a99c:	0003      	movs	r3, r0
 800a99e:	1812      	adds	r2, r2, r0
 800a9a0:	4293      	cmp	r3, r2
 800a9a2:	d100      	bne.n	800a9a6 <memset+0xa>
 800a9a4:	4770      	bx	lr
 800a9a6:	7019      	strb	r1, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	e7f9      	b.n	800a9a0 <memset+0x4>

0800a9ac <_free_r>:
 800a9ac:	b570      	push	{r4, r5, r6, lr}
 800a9ae:	0005      	movs	r5, r0
 800a9b0:	2900      	cmp	r1, #0
 800a9b2:	d010      	beq.n	800a9d6 <_free_r+0x2a>
 800a9b4:	1f0c      	subs	r4, r1, #4
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da00      	bge.n	800a9be <_free_r+0x12>
 800a9bc:	18e4      	adds	r4, r4, r3
 800a9be:	0028      	movs	r0, r5
 800a9c0:	f000 f910 	bl	800abe4 <__malloc_lock>
 800a9c4:	4a1d      	ldr	r2, [pc, #116]	; (800aa3c <_free_r+0x90>)
 800a9c6:	6813      	ldr	r3, [r2, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d105      	bne.n	800a9d8 <_free_r+0x2c>
 800a9cc:	6063      	str	r3, [r4, #4]
 800a9ce:	6014      	str	r4, [r2, #0]
 800a9d0:	0028      	movs	r0, r5
 800a9d2:	f000 f908 	bl	800abe6 <__malloc_unlock>
 800a9d6:	bd70      	pop	{r4, r5, r6, pc}
 800a9d8:	42a3      	cmp	r3, r4
 800a9da:	d909      	bls.n	800a9f0 <_free_r+0x44>
 800a9dc:	6821      	ldr	r1, [r4, #0]
 800a9de:	1860      	adds	r0, r4, r1
 800a9e0:	4283      	cmp	r3, r0
 800a9e2:	d1f3      	bne.n	800a9cc <_free_r+0x20>
 800a9e4:	6818      	ldr	r0, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	1841      	adds	r1, r0, r1
 800a9ea:	6021      	str	r1, [r4, #0]
 800a9ec:	e7ee      	b.n	800a9cc <_free_r+0x20>
 800a9ee:	0013      	movs	r3, r2
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	2a00      	cmp	r2, #0
 800a9f4:	d001      	beq.n	800a9fa <_free_r+0x4e>
 800a9f6:	42a2      	cmp	r2, r4
 800a9f8:	d9f9      	bls.n	800a9ee <_free_r+0x42>
 800a9fa:	6819      	ldr	r1, [r3, #0]
 800a9fc:	1858      	adds	r0, r3, r1
 800a9fe:	42a0      	cmp	r0, r4
 800aa00:	d10b      	bne.n	800aa1a <_free_r+0x6e>
 800aa02:	6820      	ldr	r0, [r4, #0]
 800aa04:	1809      	adds	r1, r1, r0
 800aa06:	1858      	adds	r0, r3, r1
 800aa08:	6019      	str	r1, [r3, #0]
 800aa0a:	4282      	cmp	r2, r0
 800aa0c:	d1e0      	bne.n	800a9d0 <_free_r+0x24>
 800aa0e:	6810      	ldr	r0, [r2, #0]
 800aa10:	6852      	ldr	r2, [r2, #4]
 800aa12:	1841      	adds	r1, r0, r1
 800aa14:	6019      	str	r1, [r3, #0]
 800aa16:	605a      	str	r2, [r3, #4]
 800aa18:	e7da      	b.n	800a9d0 <_free_r+0x24>
 800aa1a:	42a0      	cmp	r0, r4
 800aa1c:	d902      	bls.n	800aa24 <_free_r+0x78>
 800aa1e:	230c      	movs	r3, #12
 800aa20:	602b      	str	r3, [r5, #0]
 800aa22:	e7d5      	b.n	800a9d0 <_free_r+0x24>
 800aa24:	6821      	ldr	r1, [r4, #0]
 800aa26:	1860      	adds	r0, r4, r1
 800aa28:	4282      	cmp	r2, r0
 800aa2a:	d103      	bne.n	800aa34 <_free_r+0x88>
 800aa2c:	6810      	ldr	r0, [r2, #0]
 800aa2e:	6852      	ldr	r2, [r2, #4]
 800aa30:	1841      	adds	r1, r0, r1
 800aa32:	6021      	str	r1, [r4, #0]
 800aa34:	6062      	str	r2, [r4, #4]
 800aa36:	605c      	str	r4, [r3, #4]
 800aa38:	e7ca      	b.n	800a9d0 <_free_r+0x24>
 800aa3a:	46c0      	nop			; (mov r8, r8)
 800aa3c:	200004bc 	.word	0x200004bc

0800aa40 <_malloc_r>:
 800aa40:	2303      	movs	r3, #3
 800aa42:	b570      	push	{r4, r5, r6, lr}
 800aa44:	1ccd      	adds	r5, r1, #3
 800aa46:	439d      	bics	r5, r3
 800aa48:	3508      	adds	r5, #8
 800aa4a:	0006      	movs	r6, r0
 800aa4c:	2d0c      	cmp	r5, #12
 800aa4e:	d21e      	bcs.n	800aa8e <_malloc_r+0x4e>
 800aa50:	250c      	movs	r5, #12
 800aa52:	42a9      	cmp	r1, r5
 800aa54:	d81d      	bhi.n	800aa92 <_malloc_r+0x52>
 800aa56:	0030      	movs	r0, r6
 800aa58:	f000 f8c4 	bl	800abe4 <__malloc_lock>
 800aa5c:	4a25      	ldr	r2, [pc, #148]	; (800aaf4 <_malloc_r+0xb4>)
 800aa5e:	6814      	ldr	r4, [r2, #0]
 800aa60:	0021      	movs	r1, r4
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d119      	bne.n	800aa9a <_malloc_r+0x5a>
 800aa66:	4c24      	ldr	r4, [pc, #144]	; (800aaf8 <_malloc_r+0xb8>)
 800aa68:	6823      	ldr	r3, [r4, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d103      	bne.n	800aa76 <_malloc_r+0x36>
 800aa6e:	0030      	movs	r0, r6
 800aa70:	f000 f844 	bl	800aafc <_sbrk_r>
 800aa74:	6020      	str	r0, [r4, #0]
 800aa76:	0029      	movs	r1, r5
 800aa78:	0030      	movs	r0, r6
 800aa7a:	f000 f83f 	bl	800aafc <_sbrk_r>
 800aa7e:	1c43      	adds	r3, r0, #1
 800aa80:	d12b      	bne.n	800aada <_malloc_r+0x9a>
 800aa82:	230c      	movs	r3, #12
 800aa84:	0030      	movs	r0, r6
 800aa86:	6033      	str	r3, [r6, #0]
 800aa88:	f000 f8ad 	bl	800abe6 <__malloc_unlock>
 800aa8c:	e003      	b.n	800aa96 <_malloc_r+0x56>
 800aa8e:	2d00      	cmp	r5, #0
 800aa90:	dadf      	bge.n	800aa52 <_malloc_r+0x12>
 800aa92:	230c      	movs	r3, #12
 800aa94:	6033      	str	r3, [r6, #0]
 800aa96:	2000      	movs	r0, #0
 800aa98:	bd70      	pop	{r4, r5, r6, pc}
 800aa9a:	680b      	ldr	r3, [r1, #0]
 800aa9c:	1b5b      	subs	r3, r3, r5
 800aa9e:	d419      	bmi.n	800aad4 <_malloc_r+0x94>
 800aaa0:	2b0b      	cmp	r3, #11
 800aaa2:	d903      	bls.n	800aaac <_malloc_r+0x6c>
 800aaa4:	600b      	str	r3, [r1, #0]
 800aaa6:	18cc      	adds	r4, r1, r3
 800aaa8:	6025      	str	r5, [r4, #0]
 800aaaa:	e003      	b.n	800aab4 <_malloc_r+0x74>
 800aaac:	684b      	ldr	r3, [r1, #4]
 800aaae:	428c      	cmp	r4, r1
 800aab0:	d10d      	bne.n	800aace <_malloc_r+0x8e>
 800aab2:	6013      	str	r3, [r2, #0]
 800aab4:	0030      	movs	r0, r6
 800aab6:	f000 f896 	bl	800abe6 <__malloc_unlock>
 800aaba:	0020      	movs	r0, r4
 800aabc:	2207      	movs	r2, #7
 800aabe:	300b      	adds	r0, #11
 800aac0:	1d23      	adds	r3, r4, #4
 800aac2:	4390      	bics	r0, r2
 800aac4:	1ac3      	subs	r3, r0, r3
 800aac6:	d0e7      	beq.n	800aa98 <_malloc_r+0x58>
 800aac8:	425a      	negs	r2, r3
 800aaca:	50e2      	str	r2, [r4, r3]
 800aacc:	e7e4      	b.n	800aa98 <_malloc_r+0x58>
 800aace:	6063      	str	r3, [r4, #4]
 800aad0:	000c      	movs	r4, r1
 800aad2:	e7ef      	b.n	800aab4 <_malloc_r+0x74>
 800aad4:	000c      	movs	r4, r1
 800aad6:	6849      	ldr	r1, [r1, #4]
 800aad8:	e7c3      	b.n	800aa62 <_malloc_r+0x22>
 800aada:	2303      	movs	r3, #3
 800aadc:	1cc4      	adds	r4, r0, #3
 800aade:	439c      	bics	r4, r3
 800aae0:	42a0      	cmp	r0, r4
 800aae2:	d0e1      	beq.n	800aaa8 <_malloc_r+0x68>
 800aae4:	1a21      	subs	r1, r4, r0
 800aae6:	0030      	movs	r0, r6
 800aae8:	f000 f808 	bl	800aafc <_sbrk_r>
 800aaec:	1c43      	adds	r3, r0, #1
 800aaee:	d1db      	bne.n	800aaa8 <_malloc_r+0x68>
 800aaf0:	e7c7      	b.n	800aa82 <_malloc_r+0x42>
 800aaf2:	46c0      	nop			; (mov r8, r8)
 800aaf4:	200004bc 	.word	0x200004bc
 800aaf8:	200004c0 	.word	0x200004c0

0800aafc <_sbrk_r>:
 800aafc:	2300      	movs	r3, #0
 800aafe:	b570      	push	{r4, r5, r6, lr}
 800ab00:	4c06      	ldr	r4, [pc, #24]	; (800ab1c <_sbrk_r+0x20>)
 800ab02:	0005      	movs	r5, r0
 800ab04:	0008      	movs	r0, r1
 800ab06:	6023      	str	r3, [r4, #0]
 800ab08:	f7fc fe10 	bl	800772c <_sbrk>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d103      	bne.n	800ab18 <_sbrk_r+0x1c>
 800ab10:	6823      	ldr	r3, [r4, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d000      	beq.n	800ab18 <_sbrk_r+0x1c>
 800ab16:	602b      	str	r3, [r5, #0]
 800ab18:	bd70      	pop	{r4, r5, r6, pc}
 800ab1a:	46c0      	nop			; (mov r8, r8)
 800ab1c:	200005d8 	.word	0x200005d8

0800ab20 <strchr>:
 800ab20:	b2c9      	uxtb	r1, r1
 800ab22:	7803      	ldrb	r3, [r0, #0]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d004      	beq.n	800ab32 <strchr+0x12>
 800ab28:	428b      	cmp	r3, r1
 800ab2a:	d100      	bne.n	800ab2e <strchr+0xe>
 800ab2c:	4770      	bx	lr
 800ab2e:	3001      	adds	r0, #1
 800ab30:	e7f7      	b.n	800ab22 <strchr+0x2>
 800ab32:	424b      	negs	r3, r1
 800ab34:	4159      	adcs	r1, r3
 800ab36:	4249      	negs	r1, r1
 800ab38:	4008      	ands	r0, r1
 800ab3a:	e7f7      	b.n	800ab2c <strchr+0xc>

0800ab3c <strncmp>:
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	b530      	push	{r4, r5, lr}
 800ab40:	429a      	cmp	r2, r3
 800ab42:	d00a      	beq.n	800ab5a <strncmp+0x1e>
 800ab44:	3a01      	subs	r2, #1
 800ab46:	5cc4      	ldrb	r4, [r0, r3]
 800ab48:	5ccd      	ldrb	r5, [r1, r3]
 800ab4a:	42ac      	cmp	r4, r5
 800ab4c:	d104      	bne.n	800ab58 <strncmp+0x1c>
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d002      	beq.n	800ab58 <strncmp+0x1c>
 800ab52:	3301      	adds	r3, #1
 800ab54:	2c00      	cmp	r4, #0
 800ab56:	d1f6      	bne.n	800ab46 <strncmp+0xa>
 800ab58:	1b63      	subs	r3, r4, r5
 800ab5a:	0018      	movs	r0, r3
 800ab5c:	bd30      	pop	{r4, r5, pc}

0800ab5e <_vsniprintf_r>:
 800ab5e:	b530      	push	{r4, r5, lr}
 800ab60:	0014      	movs	r4, r2
 800ab62:	b09b      	sub	sp, #108	; 0x6c
 800ab64:	0005      	movs	r5, r0
 800ab66:	001a      	movs	r2, r3
 800ab68:	2c00      	cmp	r4, #0
 800ab6a:	da05      	bge.n	800ab78 <_vsniprintf_r+0x1a>
 800ab6c:	238b      	movs	r3, #139	; 0x8b
 800ab6e:	6003      	str	r3, [r0, #0]
 800ab70:	2001      	movs	r0, #1
 800ab72:	4240      	negs	r0, r0
 800ab74:	b01b      	add	sp, #108	; 0x6c
 800ab76:	bd30      	pop	{r4, r5, pc}
 800ab78:	2382      	movs	r3, #130	; 0x82
 800ab7a:	4668      	mov	r0, sp
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	8183      	strh	r3, [r0, #12]
 800ab80:	2300      	movs	r3, #0
 800ab82:	9100      	str	r1, [sp, #0]
 800ab84:	9104      	str	r1, [sp, #16]
 800ab86:	429c      	cmp	r4, r3
 800ab88:	d000      	beq.n	800ab8c <_vsniprintf_r+0x2e>
 800ab8a:	1e63      	subs	r3, r4, #1
 800ab8c:	9302      	str	r3, [sp, #8]
 800ab8e:	9305      	str	r3, [sp, #20]
 800ab90:	2301      	movs	r3, #1
 800ab92:	4669      	mov	r1, sp
 800ab94:	425b      	negs	r3, r3
 800ab96:	81cb      	strh	r3, [r1, #14]
 800ab98:	0028      	movs	r0, r5
 800ab9a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ab9c:	f000 f886 	bl	800acac <_svfiprintf_r>
 800aba0:	1c43      	adds	r3, r0, #1
 800aba2:	da01      	bge.n	800aba8 <_vsniprintf_r+0x4a>
 800aba4:	238b      	movs	r3, #139	; 0x8b
 800aba6:	602b      	str	r3, [r5, #0]
 800aba8:	2c00      	cmp	r4, #0
 800abaa:	d0e3      	beq.n	800ab74 <_vsniprintf_r+0x16>
 800abac:	2300      	movs	r3, #0
 800abae:	9a00      	ldr	r2, [sp, #0]
 800abb0:	7013      	strb	r3, [r2, #0]
 800abb2:	e7df      	b.n	800ab74 <_vsniprintf_r+0x16>

0800abb4 <vsniprintf>:
 800abb4:	b507      	push	{r0, r1, r2, lr}
 800abb6:	9300      	str	r3, [sp, #0]
 800abb8:	0013      	movs	r3, r2
 800abba:	000a      	movs	r2, r1
 800abbc:	0001      	movs	r1, r0
 800abbe:	4802      	ldr	r0, [pc, #8]	; (800abc8 <vsniprintf+0x14>)
 800abc0:	6800      	ldr	r0, [r0, #0]
 800abc2:	f7ff ffcc 	bl	800ab5e <_vsniprintf_r>
 800abc6:	bd0e      	pop	{r1, r2, r3, pc}
 800abc8:	20000068 	.word	0x20000068

0800abcc <__ascii_wctomb>:
 800abcc:	1e0b      	subs	r3, r1, #0
 800abce:	d004      	beq.n	800abda <__ascii_wctomb+0xe>
 800abd0:	2aff      	cmp	r2, #255	; 0xff
 800abd2:	d904      	bls.n	800abde <__ascii_wctomb+0x12>
 800abd4:	238a      	movs	r3, #138	; 0x8a
 800abd6:	6003      	str	r3, [r0, #0]
 800abd8:	3b8b      	subs	r3, #139	; 0x8b
 800abda:	0018      	movs	r0, r3
 800abdc:	4770      	bx	lr
 800abde:	700a      	strb	r2, [r1, #0]
 800abe0:	2301      	movs	r3, #1
 800abe2:	e7fa      	b.n	800abda <__ascii_wctomb+0xe>

0800abe4 <__malloc_lock>:
 800abe4:	4770      	bx	lr

0800abe6 <__malloc_unlock>:
 800abe6:	4770      	bx	lr

0800abe8 <__ssputs_r>:
 800abe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abea:	688e      	ldr	r6, [r1, #8]
 800abec:	b085      	sub	sp, #20
 800abee:	0007      	movs	r7, r0
 800abf0:	000c      	movs	r4, r1
 800abf2:	9203      	str	r2, [sp, #12]
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	429e      	cmp	r6, r3
 800abf8:	d83c      	bhi.n	800ac74 <__ssputs_r+0x8c>
 800abfa:	2390      	movs	r3, #144	; 0x90
 800abfc:	898a      	ldrh	r2, [r1, #12]
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	421a      	tst	r2, r3
 800ac02:	d034      	beq.n	800ac6e <__ssputs_r+0x86>
 800ac04:	2503      	movs	r5, #3
 800ac06:	6909      	ldr	r1, [r1, #16]
 800ac08:	6823      	ldr	r3, [r4, #0]
 800ac0a:	1a5b      	subs	r3, r3, r1
 800ac0c:	9302      	str	r3, [sp, #8]
 800ac0e:	6963      	ldr	r3, [r4, #20]
 800ac10:	9802      	ldr	r0, [sp, #8]
 800ac12:	435d      	muls	r5, r3
 800ac14:	0feb      	lsrs	r3, r5, #31
 800ac16:	195d      	adds	r5, r3, r5
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	106d      	asrs	r5, r5, #1
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	181b      	adds	r3, r3, r0
 800ac20:	42ab      	cmp	r3, r5
 800ac22:	d900      	bls.n	800ac26 <__ssputs_r+0x3e>
 800ac24:	001d      	movs	r5, r3
 800ac26:	0553      	lsls	r3, r2, #21
 800ac28:	d532      	bpl.n	800ac90 <__ssputs_r+0xa8>
 800ac2a:	0029      	movs	r1, r5
 800ac2c:	0038      	movs	r0, r7
 800ac2e:	f7ff ff07 	bl	800aa40 <_malloc_r>
 800ac32:	1e06      	subs	r6, r0, #0
 800ac34:	d109      	bne.n	800ac4a <__ssputs_r+0x62>
 800ac36:	230c      	movs	r3, #12
 800ac38:	603b      	str	r3, [r7, #0]
 800ac3a:	2340      	movs	r3, #64	; 0x40
 800ac3c:	2001      	movs	r0, #1
 800ac3e:	89a2      	ldrh	r2, [r4, #12]
 800ac40:	4240      	negs	r0, r0
 800ac42:	4313      	orrs	r3, r2
 800ac44:	81a3      	strh	r3, [r4, #12]
 800ac46:	b005      	add	sp, #20
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	9a02      	ldr	r2, [sp, #8]
 800ac4c:	6921      	ldr	r1, [r4, #16]
 800ac4e:	f7ff fe89 	bl	800a964 <memcpy>
 800ac52:	89a3      	ldrh	r3, [r4, #12]
 800ac54:	4a14      	ldr	r2, [pc, #80]	; (800aca8 <__ssputs_r+0xc0>)
 800ac56:	401a      	ands	r2, r3
 800ac58:	2380      	movs	r3, #128	; 0x80
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	81a3      	strh	r3, [r4, #12]
 800ac5e:	9b02      	ldr	r3, [sp, #8]
 800ac60:	6126      	str	r6, [r4, #16]
 800ac62:	18f6      	adds	r6, r6, r3
 800ac64:	6026      	str	r6, [r4, #0]
 800ac66:	6165      	str	r5, [r4, #20]
 800ac68:	9e01      	ldr	r6, [sp, #4]
 800ac6a:	1aed      	subs	r5, r5, r3
 800ac6c:	60a5      	str	r5, [r4, #8]
 800ac6e:	9b01      	ldr	r3, [sp, #4]
 800ac70:	429e      	cmp	r6, r3
 800ac72:	d900      	bls.n	800ac76 <__ssputs_r+0x8e>
 800ac74:	9e01      	ldr	r6, [sp, #4]
 800ac76:	0032      	movs	r2, r6
 800ac78:	9903      	ldr	r1, [sp, #12]
 800ac7a:	6820      	ldr	r0, [r4, #0]
 800ac7c:	f7ff fe7b 	bl	800a976 <memmove>
 800ac80:	68a3      	ldr	r3, [r4, #8]
 800ac82:	2000      	movs	r0, #0
 800ac84:	1b9b      	subs	r3, r3, r6
 800ac86:	60a3      	str	r3, [r4, #8]
 800ac88:	6823      	ldr	r3, [r4, #0]
 800ac8a:	199e      	adds	r6, r3, r6
 800ac8c:	6026      	str	r6, [r4, #0]
 800ac8e:	e7da      	b.n	800ac46 <__ssputs_r+0x5e>
 800ac90:	002a      	movs	r2, r5
 800ac92:	0038      	movs	r0, r7
 800ac94:	f000 fa89 	bl	800b1aa <_realloc_r>
 800ac98:	1e06      	subs	r6, r0, #0
 800ac9a:	d1e0      	bne.n	800ac5e <__ssputs_r+0x76>
 800ac9c:	6921      	ldr	r1, [r4, #16]
 800ac9e:	0038      	movs	r0, r7
 800aca0:	f7ff fe84 	bl	800a9ac <_free_r>
 800aca4:	e7c7      	b.n	800ac36 <__ssputs_r+0x4e>
 800aca6:	46c0      	nop			; (mov r8, r8)
 800aca8:	fffffb7f 	.word	0xfffffb7f

0800acac <_svfiprintf_r>:
 800acac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acae:	b0a1      	sub	sp, #132	; 0x84
 800acb0:	9003      	str	r0, [sp, #12]
 800acb2:	001d      	movs	r5, r3
 800acb4:	898b      	ldrh	r3, [r1, #12]
 800acb6:	000f      	movs	r7, r1
 800acb8:	0016      	movs	r6, r2
 800acba:	061b      	lsls	r3, r3, #24
 800acbc:	d511      	bpl.n	800ace2 <_svfiprintf_r+0x36>
 800acbe:	690b      	ldr	r3, [r1, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d10e      	bne.n	800ace2 <_svfiprintf_r+0x36>
 800acc4:	2140      	movs	r1, #64	; 0x40
 800acc6:	f7ff febb 	bl	800aa40 <_malloc_r>
 800acca:	6038      	str	r0, [r7, #0]
 800accc:	6138      	str	r0, [r7, #16]
 800acce:	2800      	cmp	r0, #0
 800acd0:	d105      	bne.n	800acde <_svfiprintf_r+0x32>
 800acd2:	230c      	movs	r3, #12
 800acd4:	9a03      	ldr	r2, [sp, #12]
 800acd6:	3801      	subs	r0, #1
 800acd8:	6013      	str	r3, [r2, #0]
 800acda:	b021      	add	sp, #132	; 0x84
 800acdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acde:	2340      	movs	r3, #64	; 0x40
 800ace0:	617b      	str	r3, [r7, #20]
 800ace2:	2300      	movs	r3, #0
 800ace4:	ac08      	add	r4, sp, #32
 800ace6:	6163      	str	r3, [r4, #20]
 800ace8:	3320      	adds	r3, #32
 800acea:	7663      	strb	r3, [r4, #25]
 800acec:	3310      	adds	r3, #16
 800acee:	76a3      	strb	r3, [r4, #26]
 800acf0:	9507      	str	r5, [sp, #28]
 800acf2:	0035      	movs	r5, r6
 800acf4:	782b      	ldrb	r3, [r5, #0]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <_svfiprintf_r+0x52>
 800acfa:	2b25      	cmp	r3, #37	; 0x25
 800acfc:	d146      	bne.n	800ad8c <_svfiprintf_r+0xe0>
 800acfe:	1bab      	subs	r3, r5, r6
 800ad00:	9305      	str	r3, [sp, #20]
 800ad02:	d00c      	beq.n	800ad1e <_svfiprintf_r+0x72>
 800ad04:	0032      	movs	r2, r6
 800ad06:	0039      	movs	r1, r7
 800ad08:	9803      	ldr	r0, [sp, #12]
 800ad0a:	f7ff ff6d 	bl	800abe8 <__ssputs_r>
 800ad0e:	1c43      	adds	r3, r0, #1
 800ad10:	d100      	bne.n	800ad14 <_svfiprintf_r+0x68>
 800ad12:	e0ae      	b.n	800ae72 <_svfiprintf_r+0x1c6>
 800ad14:	6962      	ldr	r2, [r4, #20]
 800ad16:	9b05      	ldr	r3, [sp, #20]
 800ad18:	4694      	mov	ip, r2
 800ad1a:	4463      	add	r3, ip
 800ad1c:	6163      	str	r3, [r4, #20]
 800ad1e:	782b      	ldrb	r3, [r5, #0]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d100      	bne.n	800ad26 <_svfiprintf_r+0x7a>
 800ad24:	e0a5      	b.n	800ae72 <_svfiprintf_r+0x1c6>
 800ad26:	2201      	movs	r2, #1
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4252      	negs	r2, r2
 800ad2c:	6062      	str	r2, [r4, #4]
 800ad2e:	a904      	add	r1, sp, #16
 800ad30:	3254      	adds	r2, #84	; 0x54
 800ad32:	1852      	adds	r2, r2, r1
 800ad34:	1c6e      	adds	r6, r5, #1
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	60e3      	str	r3, [r4, #12]
 800ad3a:	60a3      	str	r3, [r4, #8]
 800ad3c:	7013      	strb	r3, [r2, #0]
 800ad3e:	65a3      	str	r3, [r4, #88]	; 0x58
 800ad40:	7831      	ldrb	r1, [r6, #0]
 800ad42:	2205      	movs	r2, #5
 800ad44:	4853      	ldr	r0, [pc, #332]	; (800ae94 <_svfiprintf_r+0x1e8>)
 800ad46:	f000 fa25 	bl	800b194 <memchr>
 800ad4a:	1c75      	adds	r5, r6, #1
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d11f      	bne.n	800ad90 <_svfiprintf_r+0xe4>
 800ad50:	6822      	ldr	r2, [r4, #0]
 800ad52:	06d3      	lsls	r3, r2, #27
 800ad54:	d504      	bpl.n	800ad60 <_svfiprintf_r+0xb4>
 800ad56:	2353      	movs	r3, #83	; 0x53
 800ad58:	a904      	add	r1, sp, #16
 800ad5a:	185b      	adds	r3, r3, r1
 800ad5c:	2120      	movs	r1, #32
 800ad5e:	7019      	strb	r1, [r3, #0]
 800ad60:	0713      	lsls	r3, r2, #28
 800ad62:	d504      	bpl.n	800ad6e <_svfiprintf_r+0xc2>
 800ad64:	2353      	movs	r3, #83	; 0x53
 800ad66:	a904      	add	r1, sp, #16
 800ad68:	185b      	adds	r3, r3, r1
 800ad6a:	212b      	movs	r1, #43	; 0x2b
 800ad6c:	7019      	strb	r1, [r3, #0]
 800ad6e:	7833      	ldrb	r3, [r6, #0]
 800ad70:	2b2a      	cmp	r3, #42	; 0x2a
 800ad72:	d016      	beq.n	800ada2 <_svfiprintf_r+0xf6>
 800ad74:	0035      	movs	r5, r6
 800ad76:	2100      	movs	r1, #0
 800ad78:	200a      	movs	r0, #10
 800ad7a:	68e3      	ldr	r3, [r4, #12]
 800ad7c:	782a      	ldrb	r2, [r5, #0]
 800ad7e:	1c6e      	adds	r6, r5, #1
 800ad80:	3a30      	subs	r2, #48	; 0x30
 800ad82:	2a09      	cmp	r2, #9
 800ad84:	d94e      	bls.n	800ae24 <_svfiprintf_r+0x178>
 800ad86:	2900      	cmp	r1, #0
 800ad88:	d018      	beq.n	800adbc <_svfiprintf_r+0x110>
 800ad8a:	e010      	b.n	800adae <_svfiprintf_r+0x102>
 800ad8c:	3501      	adds	r5, #1
 800ad8e:	e7b1      	b.n	800acf4 <_svfiprintf_r+0x48>
 800ad90:	4b40      	ldr	r3, [pc, #256]	; (800ae94 <_svfiprintf_r+0x1e8>)
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	1ac0      	subs	r0, r0, r3
 800ad96:	2301      	movs	r3, #1
 800ad98:	4083      	lsls	r3, r0
 800ad9a:	4313      	orrs	r3, r2
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	002e      	movs	r6, r5
 800ada0:	e7ce      	b.n	800ad40 <_svfiprintf_r+0x94>
 800ada2:	9b07      	ldr	r3, [sp, #28]
 800ada4:	1d19      	adds	r1, r3, #4
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	9107      	str	r1, [sp, #28]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	db01      	blt.n	800adb2 <_svfiprintf_r+0x106>
 800adae:	930b      	str	r3, [sp, #44]	; 0x2c
 800adb0:	e004      	b.n	800adbc <_svfiprintf_r+0x110>
 800adb2:	425b      	negs	r3, r3
 800adb4:	60e3      	str	r3, [r4, #12]
 800adb6:	2302      	movs	r3, #2
 800adb8:	4313      	orrs	r3, r2
 800adba:	6023      	str	r3, [r4, #0]
 800adbc:	782b      	ldrb	r3, [r5, #0]
 800adbe:	2b2e      	cmp	r3, #46	; 0x2e
 800adc0:	d10a      	bne.n	800add8 <_svfiprintf_r+0x12c>
 800adc2:	786b      	ldrb	r3, [r5, #1]
 800adc4:	2b2a      	cmp	r3, #42	; 0x2a
 800adc6:	d135      	bne.n	800ae34 <_svfiprintf_r+0x188>
 800adc8:	9b07      	ldr	r3, [sp, #28]
 800adca:	3502      	adds	r5, #2
 800adcc:	1d1a      	adds	r2, r3, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	9207      	str	r2, [sp, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	db2b      	blt.n	800ae2e <_svfiprintf_r+0x182>
 800add6:	9309      	str	r3, [sp, #36]	; 0x24
 800add8:	4e2f      	ldr	r6, [pc, #188]	; (800ae98 <_svfiprintf_r+0x1ec>)
 800adda:	7829      	ldrb	r1, [r5, #0]
 800addc:	2203      	movs	r2, #3
 800adde:	0030      	movs	r0, r6
 800ade0:	f000 f9d8 	bl	800b194 <memchr>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	d006      	beq.n	800adf6 <_svfiprintf_r+0x14a>
 800ade8:	2340      	movs	r3, #64	; 0x40
 800adea:	1b80      	subs	r0, r0, r6
 800adec:	4083      	lsls	r3, r0
 800adee:	6822      	ldr	r2, [r4, #0]
 800adf0:	3501      	adds	r5, #1
 800adf2:	4313      	orrs	r3, r2
 800adf4:	6023      	str	r3, [r4, #0]
 800adf6:	7829      	ldrb	r1, [r5, #0]
 800adf8:	2206      	movs	r2, #6
 800adfa:	4828      	ldr	r0, [pc, #160]	; (800ae9c <_svfiprintf_r+0x1f0>)
 800adfc:	1c6e      	adds	r6, r5, #1
 800adfe:	7621      	strb	r1, [r4, #24]
 800ae00:	f000 f9c8 	bl	800b194 <memchr>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	d03c      	beq.n	800ae82 <_svfiprintf_r+0x1d6>
 800ae08:	4b25      	ldr	r3, [pc, #148]	; (800aea0 <_svfiprintf_r+0x1f4>)
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d125      	bne.n	800ae5a <_svfiprintf_r+0x1ae>
 800ae0e:	2207      	movs	r2, #7
 800ae10:	9b07      	ldr	r3, [sp, #28]
 800ae12:	3307      	adds	r3, #7
 800ae14:	4393      	bics	r3, r2
 800ae16:	3308      	adds	r3, #8
 800ae18:	9307      	str	r3, [sp, #28]
 800ae1a:	6963      	ldr	r3, [r4, #20]
 800ae1c:	9a04      	ldr	r2, [sp, #16]
 800ae1e:	189b      	adds	r3, r3, r2
 800ae20:	6163      	str	r3, [r4, #20]
 800ae22:	e766      	b.n	800acf2 <_svfiprintf_r+0x46>
 800ae24:	4343      	muls	r3, r0
 800ae26:	2101      	movs	r1, #1
 800ae28:	189b      	adds	r3, r3, r2
 800ae2a:	0035      	movs	r5, r6
 800ae2c:	e7a6      	b.n	800ad7c <_svfiprintf_r+0xd0>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	425b      	negs	r3, r3
 800ae32:	e7d0      	b.n	800add6 <_svfiprintf_r+0x12a>
 800ae34:	2300      	movs	r3, #0
 800ae36:	200a      	movs	r0, #10
 800ae38:	001a      	movs	r2, r3
 800ae3a:	3501      	adds	r5, #1
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	7829      	ldrb	r1, [r5, #0]
 800ae40:	1c6e      	adds	r6, r5, #1
 800ae42:	3930      	subs	r1, #48	; 0x30
 800ae44:	2909      	cmp	r1, #9
 800ae46:	d903      	bls.n	800ae50 <_svfiprintf_r+0x1a4>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d0c5      	beq.n	800add8 <_svfiprintf_r+0x12c>
 800ae4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae4e:	e7c3      	b.n	800add8 <_svfiprintf_r+0x12c>
 800ae50:	4342      	muls	r2, r0
 800ae52:	2301      	movs	r3, #1
 800ae54:	1852      	adds	r2, r2, r1
 800ae56:	0035      	movs	r5, r6
 800ae58:	e7f1      	b.n	800ae3e <_svfiprintf_r+0x192>
 800ae5a:	ab07      	add	r3, sp, #28
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	003a      	movs	r2, r7
 800ae60:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <_svfiprintf_r+0x1f8>)
 800ae62:	0021      	movs	r1, r4
 800ae64:	9803      	ldr	r0, [sp, #12]
 800ae66:	e000      	b.n	800ae6a <_svfiprintf_r+0x1be>
 800ae68:	bf00      	nop
 800ae6a:	9004      	str	r0, [sp, #16]
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	d1d3      	bne.n	800ae1a <_svfiprintf_r+0x16e>
 800ae72:	89bb      	ldrh	r3, [r7, #12]
 800ae74:	980d      	ldr	r0, [sp, #52]	; 0x34
 800ae76:	065b      	lsls	r3, r3, #25
 800ae78:	d400      	bmi.n	800ae7c <_svfiprintf_r+0x1d0>
 800ae7a:	e72e      	b.n	800acda <_svfiprintf_r+0x2e>
 800ae7c:	2001      	movs	r0, #1
 800ae7e:	4240      	negs	r0, r0
 800ae80:	e72b      	b.n	800acda <_svfiprintf_r+0x2e>
 800ae82:	ab07      	add	r3, sp, #28
 800ae84:	9300      	str	r3, [sp, #0]
 800ae86:	003a      	movs	r2, r7
 800ae88:	4b06      	ldr	r3, [pc, #24]	; (800aea4 <_svfiprintf_r+0x1f8>)
 800ae8a:	0021      	movs	r1, r4
 800ae8c:	9803      	ldr	r0, [sp, #12]
 800ae8e:	f000 f879 	bl	800af84 <_printf_i>
 800ae92:	e7ea      	b.n	800ae6a <_svfiprintf_r+0x1be>
 800ae94:	0800ba0b 	.word	0x0800ba0b
 800ae98:	0800ba11 	.word	0x0800ba11
 800ae9c:	0800ba15 	.word	0x0800ba15
 800aea0:	00000000 	.word	0x00000000
 800aea4:	0800abe9 	.word	0x0800abe9

0800aea8 <_printf_common>:
 800aea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeaa:	0015      	movs	r5, r2
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	688a      	ldr	r2, [r1, #8]
 800aeb0:	690b      	ldr	r3, [r1, #16]
 800aeb2:	9000      	str	r0, [sp, #0]
 800aeb4:	000c      	movs	r4, r1
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	da00      	bge.n	800aebc <_printf_common+0x14>
 800aeba:	0013      	movs	r3, r2
 800aebc:	0022      	movs	r2, r4
 800aebe:	602b      	str	r3, [r5, #0]
 800aec0:	3243      	adds	r2, #67	; 0x43
 800aec2:	7812      	ldrb	r2, [r2, #0]
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d001      	beq.n	800aecc <_printf_common+0x24>
 800aec8:	3301      	adds	r3, #1
 800aeca:	602b      	str	r3, [r5, #0]
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	069b      	lsls	r3, r3, #26
 800aed0:	d502      	bpl.n	800aed8 <_printf_common+0x30>
 800aed2:	682b      	ldr	r3, [r5, #0]
 800aed4:	3302      	adds	r3, #2
 800aed6:	602b      	str	r3, [r5, #0]
 800aed8:	2706      	movs	r7, #6
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	401f      	ands	r7, r3
 800aede:	d027      	beq.n	800af30 <_printf_common+0x88>
 800aee0:	0023      	movs	r3, r4
 800aee2:	3343      	adds	r3, #67	; 0x43
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	1e5a      	subs	r2, r3, #1
 800aee8:	4193      	sbcs	r3, r2
 800aeea:	6822      	ldr	r2, [r4, #0]
 800aeec:	0692      	lsls	r2, r2, #26
 800aeee:	d430      	bmi.n	800af52 <_printf_common+0xaa>
 800aef0:	0022      	movs	r2, r4
 800aef2:	9901      	ldr	r1, [sp, #4]
 800aef4:	3243      	adds	r2, #67	; 0x43
 800aef6:	9800      	ldr	r0, [sp, #0]
 800aef8:	9e08      	ldr	r6, [sp, #32]
 800aefa:	47b0      	blx	r6
 800aefc:	1c43      	adds	r3, r0, #1
 800aefe:	d025      	beq.n	800af4c <_printf_common+0xa4>
 800af00:	2306      	movs	r3, #6
 800af02:	6820      	ldr	r0, [r4, #0]
 800af04:	682a      	ldr	r2, [r5, #0]
 800af06:	68e1      	ldr	r1, [r4, #12]
 800af08:	4003      	ands	r3, r0
 800af0a:	2500      	movs	r5, #0
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d103      	bne.n	800af18 <_printf_common+0x70>
 800af10:	1a8d      	subs	r5, r1, r2
 800af12:	43eb      	mvns	r3, r5
 800af14:	17db      	asrs	r3, r3, #31
 800af16:	401d      	ands	r5, r3
 800af18:	68a3      	ldr	r3, [r4, #8]
 800af1a:	6922      	ldr	r2, [r4, #16]
 800af1c:	4293      	cmp	r3, r2
 800af1e:	dd01      	ble.n	800af24 <_printf_common+0x7c>
 800af20:	1a9b      	subs	r3, r3, r2
 800af22:	18ed      	adds	r5, r5, r3
 800af24:	2700      	movs	r7, #0
 800af26:	42bd      	cmp	r5, r7
 800af28:	d120      	bne.n	800af6c <_printf_common+0xc4>
 800af2a:	2000      	movs	r0, #0
 800af2c:	e010      	b.n	800af50 <_printf_common+0xa8>
 800af2e:	3701      	adds	r7, #1
 800af30:	68e3      	ldr	r3, [r4, #12]
 800af32:	682a      	ldr	r2, [r5, #0]
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	42bb      	cmp	r3, r7
 800af38:	ddd2      	ble.n	800aee0 <_printf_common+0x38>
 800af3a:	0022      	movs	r2, r4
 800af3c:	2301      	movs	r3, #1
 800af3e:	3219      	adds	r2, #25
 800af40:	9901      	ldr	r1, [sp, #4]
 800af42:	9800      	ldr	r0, [sp, #0]
 800af44:	9e08      	ldr	r6, [sp, #32]
 800af46:	47b0      	blx	r6
 800af48:	1c43      	adds	r3, r0, #1
 800af4a:	d1f0      	bne.n	800af2e <_printf_common+0x86>
 800af4c:	2001      	movs	r0, #1
 800af4e:	4240      	negs	r0, r0
 800af50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800af52:	2030      	movs	r0, #48	; 0x30
 800af54:	18e1      	adds	r1, r4, r3
 800af56:	3143      	adds	r1, #67	; 0x43
 800af58:	7008      	strb	r0, [r1, #0]
 800af5a:	0021      	movs	r1, r4
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	3145      	adds	r1, #69	; 0x45
 800af60:	7809      	ldrb	r1, [r1, #0]
 800af62:	18a2      	adds	r2, r4, r2
 800af64:	3243      	adds	r2, #67	; 0x43
 800af66:	3302      	adds	r3, #2
 800af68:	7011      	strb	r1, [r2, #0]
 800af6a:	e7c1      	b.n	800aef0 <_printf_common+0x48>
 800af6c:	0022      	movs	r2, r4
 800af6e:	2301      	movs	r3, #1
 800af70:	321a      	adds	r2, #26
 800af72:	9901      	ldr	r1, [sp, #4]
 800af74:	9800      	ldr	r0, [sp, #0]
 800af76:	9e08      	ldr	r6, [sp, #32]
 800af78:	47b0      	blx	r6
 800af7a:	1c43      	adds	r3, r0, #1
 800af7c:	d0e6      	beq.n	800af4c <_printf_common+0xa4>
 800af7e:	3701      	adds	r7, #1
 800af80:	e7d1      	b.n	800af26 <_printf_common+0x7e>
	...

0800af84 <_printf_i>:
 800af84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af86:	b089      	sub	sp, #36	; 0x24
 800af88:	9204      	str	r2, [sp, #16]
 800af8a:	000a      	movs	r2, r1
 800af8c:	3243      	adds	r2, #67	; 0x43
 800af8e:	9305      	str	r3, [sp, #20]
 800af90:	9003      	str	r0, [sp, #12]
 800af92:	9202      	str	r2, [sp, #8]
 800af94:	7e0a      	ldrb	r2, [r1, #24]
 800af96:	000c      	movs	r4, r1
 800af98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800af9a:	2a6e      	cmp	r2, #110	; 0x6e
 800af9c:	d100      	bne.n	800afa0 <_printf_i+0x1c>
 800af9e:	e086      	b.n	800b0ae <_printf_i+0x12a>
 800afa0:	d81f      	bhi.n	800afe2 <_printf_i+0x5e>
 800afa2:	2a63      	cmp	r2, #99	; 0x63
 800afa4:	d033      	beq.n	800b00e <_printf_i+0x8a>
 800afa6:	d808      	bhi.n	800afba <_printf_i+0x36>
 800afa8:	2a00      	cmp	r2, #0
 800afaa:	d100      	bne.n	800afae <_printf_i+0x2a>
 800afac:	e08c      	b.n	800b0c8 <_printf_i+0x144>
 800afae:	2a58      	cmp	r2, #88	; 0x58
 800afb0:	d04d      	beq.n	800b04e <_printf_i+0xca>
 800afb2:	0025      	movs	r5, r4
 800afb4:	3542      	adds	r5, #66	; 0x42
 800afb6:	702a      	strb	r2, [r5, #0]
 800afb8:	e030      	b.n	800b01c <_printf_i+0x98>
 800afba:	2a64      	cmp	r2, #100	; 0x64
 800afbc:	d001      	beq.n	800afc2 <_printf_i+0x3e>
 800afbe:	2a69      	cmp	r2, #105	; 0x69
 800afc0:	d1f7      	bne.n	800afb2 <_printf_i+0x2e>
 800afc2:	6819      	ldr	r1, [r3, #0]
 800afc4:	6825      	ldr	r5, [r4, #0]
 800afc6:	1d0a      	adds	r2, r1, #4
 800afc8:	0628      	lsls	r0, r5, #24
 800afca:	d529      	bpl.n	800b020 <_printf_i+0x9c>
 800afcc:	6808      	ldr	r0, [r1, #0]
 800afce:	601a      	str	r2, [r3, #0]
 800afd0:	2800      	cmp	r0, #0
 800afd2:	da03      	bge.n	800afdc <_printf_i+0x58>
 800afd4:	232d      	movs	r3, #45	; 0x2d
 800afd6:	9a02      	ldr	r2, [sp, #8]
 800afd8:	4240      	negs	r0, r0
 800afda:	7013      	strb	r3, [r2, #0]
 800afdc:	4e6b      	ldr	r6, [pc, #428]	; (800b18c <_printf_i+0x208>)
 800afde:	270a      	movs	r7, #10
 800afe0:	e04f      	b.n	800b082 <_printf_i+0xfe>
 800afe2:	2a73      	cmp	r2, #115	; 0x73
 800afe4:	d074      	beq.n	800b0d0 <_printf_i+0x14c>
 800afe6:	d808      	bhi.n	800affa <_printf_i+0x76>
 800afe8:	2a6f      	cmp	r2, #111	; 0x6f
 800afea:	d01f      	beq.n	800b02c <_printf_i+0xa8>
 800afec:	2a70      	cmp	r2, #112	; 0x70
 800afee:	d1e0      	bne.n	800afb2 <_printf_i+0x2e>
 800aff0:	2220      	movs	r2, #32
 800aff2:	6809      	ldr	r1, [r1, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	6022      	str	r2, [r4, #0]
 800aff8:	e003      	b.n	800b002 <_printf_i+0x7e>
 800affa:	2a75      	cmp	r2, #117	; 0x75
 800affc:	d016      	beq.n	800b02c <_printf_i+0xa8>
 800affe:	2a78      	cmp	r2, #120	; 0x78
 800b000:	d1d7      	bne.n	800afb2 <_printf_i+0x2e>
 800b002:	0022      	movs	r2, r4
 800b004:	2178      	movs	r1, #120	; 0x78
 800b006:	3245      	adds	r2, #69	; 0x45
 800b008:	7011      	strb	r1, [r2, #0]
 800b00a:	4e61      	ldr	r6, [pc, #388]	; (800b190 <_printf_i+0x20c>)
 800b00c:	e022      	b.n	800b054 <_printf_i+0xd0>
 800b00e:	0025      	movs	r5, r4
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	3542      	adds	r5, #66	; 0x42
 800b014:	1d11      	adds	r1, r2, #4
 800b016:	6019      	str	r1, [r3, #0]
 800b018:	6813      	ldr	r3, [r2, #0]
 800b01a:	702b      	strb	r3, [r5, #0]
 800b01c:	2301      	movs	r3, #1
 800b01e:	e065      	b.n	800b0ec <_printf_i+0x168>
 800b020:	6808      	ldr	r0, [r1, #0]
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	0669      	lsls	r1, r5, #25
 800b026:	d5d3      	bpl.n	800afd0 <_printf_i+0x4c>
 800b028:	b200      	sxth	r0, r0
 800b02a:	e7d1      	b.n	800afd0 <_printf_i+0x4c>
 800b02c:	6819      	ldr	r1, [r3, #0]
 800b02e:	6825      	ldr	r5, [r4, #0]
 800b030:	1d08      	adds	r0, r1, #4
 800b032:	6018      	str	r0, [r3, #0]
 800b034:	6808      	ldr	r0, [r1, #0]
 800b036:	062e      	lsls	r6, r5, #24
 800b038:	d505      	bpl.n	800b046 <_printf_i+0xc2>
 800b03a:	4e54      	ldr	r6, [pc, #336]	; (800b18c <_printf_i+0x208>)
 800b03c:	2708      	movs	r7, #8
 800b03e:	2a6f      	cmp	r2, #111	; 0x6f
 800b040:	d01b      	beq.n	800b07a <_printf_i+0xf6>
 800b042:	270a      	movs	r7, #10
 800b044:	e019      	b.n	800b07a <_printf_i+0xf6>
 800b046:	066d      	lsls	r5, r5, #25
 800b048:	d5f7      	bpl.n	800b03a <_printf_i+0xb6>
 800b04a:	b280      	uxth	r0, r0
 800b04c:	e7f5      	b.n	800b03a <_printf_i+0xb6>
 800b04e:	3145      	adds	r1, #69	; 0x45
 800b050:	4e4e      	ldr	r6, [pc, #312]	; (800b18c <_printf_i+0x208>)
 800b052:	700a      	strb	r2, [r1, #0]
 800b054:	6818      	ldr	r0, [r3, #0]
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	1d01      	adds	r1, r0, #4
 800b05a:	6800      	ldr	r0, [r0, #0]
 800b05c:	6019      	str	r1, [r3, #0]
 800b05e:	0615      	lsls	r5, r2, #24
 800b060:	d521      	bpl.n	800b0a6 <_printf_i+0x122>
 800b062:	07d3      	lsls	r3, r2, #31
 800b064:	d502      	bpl.n	800b06c <_printf_i+0xe8>
 800b066:	2320      	movs	r3, #32
 800b068:	431a      	orrs	r2, r3
 800b06a:	6022      	str	r2, [r4, #0]
 800b06c:	2710      	movs	r7, #16
 800b06e:	2800      	cmp	r0, #0
 800b070:	d103      	bne.n	800b07a <_printf_i+0xf6>
 800b072:	2320      	movs	r3, #32
 800b074:	6822      	ldr	r2, [r4, #0]
 800b076:	439a      	bics	r2, r3
 800b078:	6022      	str	r2, [r4, #0]
 800b07a:	0023      	movs	r3, r4
 800b07c:	2200      	movs	r2, #0
 800b07e:	3343      	adds	r3, #67	; 0x43
 800b080:	701a      	strb	r2, [r3, #0]
 800b082:	6863      	ldr	r3, [r4, #4]
 800b084:	60a3      	str	r3, [r4, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	db58      	blt.n	800b13c <_printf_i+0x1b8>
 800b08a:	2204      	movs	r2, #4
 800b08c:	6821      	ldr	r1, [r4, #0]
 800b08e:	4391      	bics	r1, r2
 800b090:	6021      	str	r1, [r4, #0]
 800b092:	2800      	cmp	r0, #0
 800b094:	d154      	bne.n	800b140 <_printf_i+0x1bc>
 800b096:	9d02      	ldr	r5, [sp, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d05a      	beq.n	800b152 <_printf_i+0x1ce>
 800b09c:	0025      	movs	r5, r4
 800b09e:	7833      	ldrb	r3, [r6, #0]
 800b0a0:	3542      	adds	r5, #66	; 0x42
 800b0a2:	702b      	strb	r3, [r5, #0]
 800b0a4:	e055      	b.n	800b152 <_printf_i+0x1ce>
 800b0a6:	0655      	lsls	r5, r2, #25
 800b0a8:	d5db      	bpl.n	800b062 <_printf_i+0xde>
 800b0aa:	b280      	uxth	r0, r0
 800b0ac:	e7d9      	b.n	800b062 <_printf_i+0xde>
 800b0ae:	681a      	ldr	r2, [r3, #0]
 800b0b0:	680d      	ldr	r5, [r1, #0]
 800b0b2:	1d10      	adds	r0, r2, #4
 800b0b4:	6949      	ldr	r1, [r1, #20]
 800b0b6:	6018      	str	r0, [r3, #0]
 800b0b8:	6813      	ldr	r3, [r2, #0]
 800b0ba:	062e      	lsls	r6, r5, #24
 800b0bc:	d501      	bpl.n	800b0c2 <_printf_i+0x13e>
 800b0be:	6019      	str	r1, [r3, #0]
 800b0c0:	e002      	b.n	800b0c8 <_printf_i+0x144>
 800b0c2:	066d      	lsls	r5, r5, #25
 800b0c4:	d5fb      	bpl.n	800b0be <_printf_i+0x13a>
 800b0c6:	8019      	strh	r1, [r3, #0]
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	9d02      	ldr	r5, [sp, #8]
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	e04f      	b.n	800b170 <_printf_i+0x1ec>
 800b0d0:	681a      	ldr	r2, [r3, #0]
 800b0d2:	1d11      	adds	r1, r2, #4
 800b0d4:	6019      	str	r1, [r3, #0]
 800b0d6:	6815      	ldr	r5, [r2, #0]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	6862      	ldr	r2, [r4, #4]
 800b0dc:	0028      	movs	r0, r5
 800b0de:	f000 f859 	bl	800b194 <memchr>
 800b0e2:	2800      	cmp	r0, #0
 800b0e4:	d001      	beq.n	800b0ea <_printf_i+0x166>
 800b0e6:	1b40      	subs	r0, r0, r5
 800b0e8:	6060      	str	r0, [r4, #4]
 800b0ea:	6863      	ldr	r3, [r4, #4]
 800b0ec:	6123      	str	r3, [r4, #16]
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	9a02      	ldr	r2, [sp, #8]
 800b0f2:	7013      	strb	r3, [r2, #0]
 800b0f4:	e03c      	b.n	800b170 <_printf_i+0x1ec>
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	002a      	movs	r2, r5
 800b0fa:	9904      	ldr	r1, [sp, #16]
 800b0fc:	9803      	ldr	r0, [sp, #12]
 800b0fe:	9d05      	ldr	r5, [sp, #20]
 800b100:	47a8      	blx	r5
 800b102:	1c43      	adds	r3, r0, #1
 800b104:	d03e      	beq.n	800b184 <_printf_i+0x200>
 800b106:	6823      	ldr	r3, [r4, #0]
 800b108:	079b      	lsls	r3, r3, #30
 800b10a:	d415      	bmi.n	800b138 <_printf_i+0x1b4>
 800b10c:	9b07      	ldr	r3, [sp, #28]
 800b10e:	68e0      	ldr	r0, [r4, #12]
 800b110:	4298      	cmp	r0, r3
 800b112:	da39      	bge.n	800b188 <_printf_i+0x204>
 800b114:	0018      	movs	r0, r3
 800b116:	e037      	b.n	800b188 <_printf_i+0x204>
 800b118:	0022      	movs	r2, r4
 800b11a:	2301      	movs	r3, #1
 800b11c:	3219      	adds	r2, #25
 800b11e:	9904      	ldr	r1, [sp, #16]
 800b120:	9803      	ldr	r0, [sp, #12]
 800b122:	9e05      	ldr	r6, [sp, #20]
 800b124:	47b0      	blx	r6
 800b126:	1c43      	adds	r3, r0, #1
 800b128:	d02c      	beq.n	800b184 <_printf_i+0x200>
 800b12a:	3501      	adds	r5, #1
 800b12c:	68e3      	ldr	r3, [r4, #12]
 800b12e:	9a07      	ldr	r2, [sp, #28]
 800b130:	1a9b      	subs	r3, r3, r2
 800b132:	42ab      	cmp	r3, r5
 800b134:	dcf0      	bgt.n	800b118 <_printf_i+0x194>
 800b136:	e7e9      	b.n	800b10c <_printf_i+0x188>
 800b138:	2500      	movs	r5, #0
 800b13a:	e7f7      	b.n	800b12c <_printf_i+0x1a8>
 800b13c:	2800      	cmp	r0, #0
 800b13e:	d0ad      	beq.n	800b09c <_printf_i+0x118>
 800b140:	9d02      	ldr	r5, [sp, #8]
 800b142:	0039      	movs	r1, r7
 800b144:	f7f5 f876 	bl	8000234 <__aeabi_uidivmod>
 800b148:	5c73      	ldrb	r3, [r6, r1]
 800b14a:	3d01      	subs	r5, #1
 800b14c:	702b      	strb	r3, [r5, #0]
 800b14e:	2800      	cmp	r0, #0
 800b150:	d1f7      	bne.n	800b142 <_printf_i+0x1be>
 800b152:	2f08      	cmp	r7, #8
 800b154:	d109      	bne.n	800b16a <_printf_i+0x1e6>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	07db      	lsls	r3, r3, #31
 800b15a:	d506      	bpl.n	800b16a <_printf_i+0x1e6>
 800b15c:	6863      	ldr	r3, [r4, #4]
 800b15e:	6922      	ldr	r2, [r4, #16]
 800b160:	4293      	cmp	r3, r2
 800b162:	dc02      	bgt.n	800b16a <_printf_i+0x1e6>
 800b164:	2330      	movs	r3, #48	; 0x30
 800b166:	3d01      	subs	r5, #1
 800b168:	702b      	strb	r3, [r5, #0]
 800b16a:	9b02      	ldr	r3, [sp, #8]
 800b16c:	1b5b      	subs	r3, r3, r5
 800b16e:	6123      	str	r3, [r4, #16]
 800b170:	9b05      	ldr	r3, [sp, #20]
 800b172:	aa07      	add	r2, sp, #28
 800b174:	9300      	str	r3, [sp, #0]
 800b176:	0021      	movs	r1, r4
 800b178:	9b04      	ldr	r3, [sp, #16]
 800b17a:	9803      	ldr	r0, [sp, #12]
 800b17c:	f7ff fe94 	bl	800aea8 <_printf_common>
 800b180:	1c43      	adds	r3, r0, #1
 800b182:	d1b8      	bne.n	800b0f6 <_printf_i+0x172>
 800b184:	2001      	movs	r0, #1
 800b186:	4240      	negs	r0, r0
 800b188:	b009      	add	sp, #36	; 0x24
 800b18a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b18c:	0800ba1c 	.word	0x0800ba1c
 800b190:	0800ba2d 	.word	0x0800ba2d

0800b194 <memchr>:
 800b194:	b2c9      	uxtb	r1, r1
 800b196:	1882      	adds	r2, r0, r2
 800b198:	4290      	cmp	r0, r2
 800b19a:	d101      	bne.n	800b1a0 <memchr+0xc>
 800b19c:	2000      	movs	r0, #0
 800b19e:	4770      	bx	lr
 800b1a0:	7803      	ldrb	r3, [r0, #0]
 800b1a2:	428b      	cmp	r3, r1
 800b1a4:	d0fb      	beq.n	800b19e <memchr+0xa>
 800b1a6:	3001      	adds	r0, #1
 800b1a8:	e7f6      	b.n	800b198 <memchr+0x4>

0800b1aa <_realloc_r>:
 800b1aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ac:	0007      	movs	r7, r0
 800b1ae:	000d      	movs	r5, r1
 800b1b0:	0016      	movs	r6, r2
 800b1b2:	2900      	cmp	r1, #0
 800b1b4:	d105      	bne.n	800b1c2 <_realloc_r+0x18>
 800b1b6:	0011      	movs	r1, r2
 800b1b8:	f7ff fc42 	bl	800aa40 <_malloc_r>
 800b1bc:	0004      	movs	r4, r0
 800b1be:	0020      	movs	r0, r4
 800b1c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1c2:	2a00      	cmp	r2, #0
 800b1c4:	d103      	bne.n	800b1ce <_realloc_r+0x24>
 800b1c6:	f7ff fbf1 	bl	800a9ac <_free_r>
 800b1ca:	0034      	movs	r4, r6
 800b1cc:	e7f7      	b.n	800b1be <_realloc_r+0x14>
 800b1ce:	f000 f812 	bl	800b1f6 <_malloc_usable_size_r>
 800b1d2:	002c      	movs	r4, r5
 800b1d4:	42b0      	cmp	r0, r6
 800b1d6:	d2f2      	bcs.n	800b1be <_realloc_r+0x14>
 800b1d8:	0031      	movs	r1, r6
 800b1da:	0038      	movs	r0, r7
 800b1dc:	f7ff fc30 	bl	800aa40 <_malloc_r>
 800b1e0:	1e04      	subs	r4, r0, #0
 800b1e2:	d0ec      	beq.n	800b1be <_realloc_r+0x14>
 800b1e4:	0029      	movs	r1, r5
 800b1e6:	0032      	movs	r2, r6
 800b1e8:	f7ff fbbc 	bl	800a964 <memcpy>
 800b1ec:	0029      	movs	r1, r5
 800b1ee:	0038      	movs	r0, r7
 800b1f0:	f7ff fbdc 	bl	800a9ac <_free_r>
 800b1f4:	e7e3      	b.n	800b1be <_realloc_r+0x14>

0800b1f6 <_malloc_usable_size_r>:
 800b1f6:	1f0b      	subs	r3, r1, #4
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	1f18      	subs	r0, r3, #4
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	da01      	bge.n	800b204 <_malloc_usable_size_r+0xe>
 800b200:	580b      	ldr	r3, [r1, r0]
 800b202:	18c0      	adds	r0, r0, r3
 800b204:	4770      	bx	lr
	...

0800b208 <_init>:
 800b208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b20a:	46c0      	nop			; (mov r8, r8)
 800b20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20e:	bc08      	pop	{r3}
 800b210:	469e      	mov	lr, r3
 800b212:	4770      	bx	lr

0800b214 <_fini>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	46c0      	nop			; (mov r8, r8)
 800b218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b21a:	bc08      	pop	{r3}
 800b21c:	469e      	mov	lr, r3
 800b21e:	4770      	bx	lr
