
note-stm32g0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000869c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08008758  08008758  00018758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd4  08008dd4  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  08008dd4  08008dd4  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008dd4  08008dd4  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008dd8  08008dd8  00018dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08008ddc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000238  08009014  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08009014  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001138b  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c47  00000000  00000000  000315eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ed0  00000000  00000000  00034238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e48  00000000  00000000  00035108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000167c3  00000000  00000000  00035f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ce32  00000000  00000000  0004c713  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008abd9  00000000  00000000  00059545  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e411e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000387c  00000000  00000000  000e419c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000238 	.word	0x20000238
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008740 	.word	0x08008740

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000023c 	.word	0x2000023c
 8000100:	08008740 	.word	0x08008740

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 ff0f 	bl	8001248 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fe67 	bl	8001108 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff01 	bl	8001248 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fef7 	bl	8001248 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fe89 	bl	8001180 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 fe7f 	bl	8001180 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_d2uiz>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2200      	movs	r2, #0
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <__aeabi_d2uiz+0x38>)
 8000496:	0004      	movs	r4, r0
 8000498:	000d      	movs	r5, r1
 800049a:	f7ff ffef 	bl	800047c <__aeabi_dcmpge>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d104      	bne.n	80004ac <__aeabi_d2uiz+0x1c>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f001 fcf1 	bl	8001e8c <__aeabi_d2iz>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <__aeabi_d2uiz+0x38>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0020      	movs	r0, r4
 80004b2:	0029      	movs	r1, r5
 80004b4:	f001 f9a2 	bl	80017fc <__aeabi_dsub>
 80004b8:	f001 fce8 	bl	8001e8c <__aeabi_d2iz>
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	061b      	lsls	r3, r3, #24
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	e7f1      	b.n	80004aa <__aeabi_d2uiz+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	41e00000 	.word	0x41e00000

080004cc <__aeabi_dadd>:
 80004cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ce:	464f      	mov	r7, r9
 80004d0:	4646      	mov	r6, r8
 80004d2:	46d6      	mov	lr, sl
 80004d4:	000c      	movs	r4, r1
 80004d6:	0309      	lsls	r1, r1, #12
 80004d8:	b5c0      	push	{r6, r7, lr}
 80004da:	0a49      	lsrs	r1, r1, #9
 80004dc:	0f47      	lsrs	r7, r0, #29
 80004de:	005e      	lsls	r6, r3, #1
 80004e0:	4339      	orrs	r1, r7
 80004e2:	031f      	lsls	r7, r3, #12
 80004e4:	0fdb      	lsrs	r3, r3, #31
 80004e6:	469c      	mov	ip, r3
 80004e8:	0065      	lsls	r5, r4, #1
 80004ea:	0a7b      	lsrs	r3, r7, #9
 80004ec:	0f57      	lsrs	r7, r2, #29
 80004ee:	431f      	orrs	r7, r3
 80004f0:	0d6d      	lsrs	r5, r5, #21
 80004f2:	0fe4      	lsrs	r4, r4, #31
 80004f4:	0d76      	lsrs	r6, r6, #21
 80004f6:	46a1      	mov	r9, r4
 80004f8:	00c0      	lsls	r0, r0, #3
 80004fa:	46b8      	mov	r8, r7
 80004fc:	00d2      	lsls	r2, r2, #3
 80004fe:	1bab      	subs	r3, r5, r6
 8000500:	4564      	cmp	r4, ip
 8000502:	d07b      	beq.n	80005fc <__aeabi_dadd+0x130>
 8000504:	2b00      	cmp	r3, #0
 8000506:	dd5f      	ble.n	80005c8 <__aeabi_dadd+0xfc>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d000      	beq.n	800050e <__aeabi_dadd+0x42>
 800050c:	e0a4      	b.n	8000658 <__aeabi_dadd+0x18c>
 800050e:	003e      	movs	r6, r7
 8000510:	4316      	orrs	r6, r2
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0x4a>
 8000514:	e112      	b.n	800073c <__aeabi_dadd+0x270>
 8000516:	1e5e      	subs	r6, r3, #1
 8000518:	2e00      	cmp	r6, #0
 800051a:	d000      	beq.n	800051e <__aeabi_dadd+0x52>
 800051c:	e19e      	b.n	800085c <__aeabi_dadd+0x390>
 800051e:	1a87      	subs	r7, r0, r2
 8000520:	4643      	mov	r3, r8
 8000522:	42b8      	cmp	r0, r7
 8000524:	4180      	sbcs	r0, r0
 8000526:	2501      	movs	r5, #1
 8000528:	1ac9      	subs	r1, r1, r3
 800052a:	4240      	negs	r0, r0
 800052c:	1a09      	subs	r1, r1, r0
 800052e:	020b      	lsls	r3, r1, #8
 8000530:	d400      	bmi.n	8000534 <__aeabi_dadd+0x68>
 8000532:	e131      	b.n	8000798 <__aeabi_dadd+0x2cc>
 8000534:	0249      	lsls	r1, r1, #9
 8000536:	0a4e      	lsrs	r6, r1, #9
 8000538:	2e00      	cmp	r6, #0
 800053a:	d100      	bne.n	800053e <__aeabi_dadd+0x72>
 800053c:	e16e      	b.n	800081c <__aeabi_dadd+0x350>
 800053e:	0030      	movs	r0, r6
 8000540:	f001 fd46 	bl	8001fd0 <__clzsi2>
 8000544:	0003      	movs	r3, r0
 8000546:	3b08      	subs	r3, #8
 8000548:	2b1f      	cmp	r3, #31
 800054a:	dd00      	ble.n	800054e <__aeabi_dadd+0x82>
 800054c:	e161      	b.n	8000812 <__aeabi_dadd+0x346>
 800054e:	2220      	movs	r2, #32
 8000550:	0039      	movs	r1, r7
 8000552:	1ad2      	subs	r2, r2, r3
 8000554:	409e      	lsls	r6, r3
 8000556:	40d1      	lsrs	r1, r2
 8000558:	409f      	lsls	r7, r3
 800055a:	430e      	orrs	r6, r1
 800055c:	429d      	cmp	r5, r3
 800055e:	dd00      	ble.n	8000562 <__aeabi_dadd+0x96>
 8000560:	e151      	b.n	8000806 <__aeabi_dadd+0x33a>
 8000562:	1b5d      	subs	r5, r3, r5
 8000564:	1c6b      	adds	r3, r5, #1
 8000566:	2b1f      	cmp	r3, #31
 8000568:	dd00      	ble.n	800056c <__aeabi_dadd+0xa0>
 800056a:	e17c      	b.n	8000866 <__aeabi_dadd+0x39a>
 800056c:	2120      	movs	r1, #32
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	003d      	movs	r5, r7
 8000572:	0030      	movs	r0, r6
 8000574:	408f      	lsls	r7, r1
 8000576:	4088      	lsls	r0, r1
 8000578:	40dd      	lsrs	r5, r3
 800057a:	1e79      	subs	r1, r7, #1
 800057c:	418f      	sbcs	r7, r1
 800057e:	0031      	movs	r1, r6
 8000580:	2207      	movs	r2, #7
 8000582:	4328      	orrs	r0, r5
 8000584:	40d9      	lsrs	r1, r3
 8000586:	2500      	movs	r5, #0
 8000588:	4307      	orrs	r7, r0
 800058a:	403a      	ands	r2, r7
 800058c:	2a00      	cmp	r2, #0
 800058e:	d009      	beq.n	80005a4 <__aeabi_dadd+0xd8>
 8000590:	230f      	movs	r3, #15
 8000592:	403b      	ands	r3, r7
 8000594:	2b04      	cmp	r3, #4
 8000596:	d005      	beq.n	80005a4 <__aeabi_dadd+0xd8>
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	42bb      	cmp	r3, r7
 800059c:	41bf      	sbcs	r7, r7
 800059e:	427f      	negs	r7, r7
 80005a0:	19c9      	adds	r1, r1, r7
 80005a2:	001f      	movs	r7, r3
 80005a4:	020b      	lsls	r3, r1, #8
 80005a6:	d400      	bmi.n	80005aa <__aeabi_dadd+0xde>
 80005a8:	e226      	b.n	80009f8 <__aeabi_dadd+0x52c>
 80005aa:	1c6a      	adds	r2, r5, #1
 80005ac:	4bc6      	ldr	r3, [pc, #792]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80005ae:	0555      	lsls	r5, r2, #21
 80005b0:	0d6d      	lsrs	r5, r5, #21
 80005b2:	429a      	cmp	r2, r3
 80005b4:	d100      	bne.n	80005b8 <__aeabi_dadd+0xec>
 80005b6:	e106      	b.n	80007c6 <__aeabi_dadd+0x2fa>
 80005b8:	4ac4      	ldr	r2, [pc, #784]	; (80008cc <__aeabi_dadd+0x400>)
 80005ba:	08ff      	lsrs	r7, r7, #3
 80005bc:	400a      	ands	r2, r1
 80005be:	0753      	lsls	r3, r2, #29
 80005c0:	0252      	lsls	r2, r2, #9
 80005c2:	433b      	orrs	r3, r7
 80005c4:	0b12      	lsrs	r2, r2, #12
 80005c6:	e08e      	b.n	80006e6 <__aeabi_dadd+0x21a>
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d000      	beq.n	80005ce <__aeabi_dadd+0x102>
 80005cc:	e0b8      	b.n	8000740 <__aeabi_dadd+0x274>
 80005ce:	1c6b      	adds	r3, r5, #1
 80005d0:	055b      	lsls	r3, r3, #21
 80005d2:	0d5b      	lsrs	r3, r3, #21
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	dc00      	bgt.n	80005da <__aeabi_dadd+0x10e>
 80005d8:	e130      	b.n	800083c <__aeabi_dadd+0x370>
 80005da:	1a87      	subs	r7, r0, r2
 80005dc:	4643      	mov	r3, r8
 80005de:	42b8      	cmp	r0, r7
 80005e0:	41b6      	sbcs	r6, r6
 80005e2:	1acb      	subs	r3, r1, r3
 80005e4:	4276      	negs	r6, r6
 80005e6:	1b9e      	subs	r6, r3, r6
 80005e8:	0233      	lsls	r3, r6, #8
 80005ea:	d500      	bpl.n	80005ee <__aeabi_dadd+0x122>
 80005ec:	e14c      	b.n	8000888 <__aeabi_dadd+0x3bc>
 80005ee:	003b      	movs	r3, r7
 80005f0:	4333      	orrs	r3, r6
 80005f2:	d1a1      	bne.n	8000538 <__aeabi_dadd+0x6c>
 80005f4:	2200      	movs	r2, #0
 80005f6:	2400      	movs	r4, #0
 80005f8:	2500      	movs	r5, #0
 80005fa:	e070      	b.n	80006de <__aeabi_dadd+0x212>
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_dadd+0x136>
 8000600:	e0e5      	b.n	80007ce <__aeabi_dadd+0x302>
 8000602:	2e00      	cmp	r6, #0
 8000604:	d100      	bne.n	8000608 <__aeabi_dadd+0x13c>
 8000606:	e083      	b.n	8000710 <__aeabi_dadd+0x244>
 8000608:	4eaf      	ldr	r6, [pc, #700]	; (80008c8 <__aeabi_dadd+0x3fc>)
 800060a:	42b5      	cmp	r5, r6
 800060c:	d060      	beq.n	80006d0 <__aeabi_dadd+0x204>
 800060e:	2680      	movs	r6, #128	; 0x80
 8000610:	0436      	lsls	r6, r6, #16
 8000612:	4337      	orrs	r7, r6
 8000614:	46b8      	mov	r8, r7
 8000616:	2b38      	cmp	r3, #56	; 0x38
 8000618:	dc00      	bgt.n	800061c <__aeabi_dadd+0x150>
 800061a:	e13e      	b.n	800089a <__aeabi_dadd+0x3ce>
 800061c:	4643      	mov	r3, r8
 800061e:	4313      	orrs	r3, r2
 8000620:	001f      	movs	r7, r3
 8000622:	1e7a      	subs	r2, r7, #1
 8000624:	4197      	sbcs	r7, r2
 8000626:	183f      	adds	r7, r7, r0
 8000628:	4287      	cmp	r7, r0
 800062a:	4180      	sbcs	r0, r0
 800062c:	4240      	negs	r0, r0
 800062e:	1809      	adds	r1, r1, r0
 8000630:	020b      	lsls	r3, r1, #8
 8000632:	d400      	bmi.n	8000636 <__aeabi_dadd+0x16a>
 8000634:	e0b0      	b.n	8000798 <__aeabi_dadd+0x2cc>
 8000636:	4ba4      	ldr	r3, [pc, #656]	; (80008c8 <__aeabi_dadd+0x3fc>)
 8000638:	3501      	adds	r5, #1
 800063a:	429d      	cmp	r5, r3
 800063c:	d100      	bne.n	8000640 <__aeabi_dadd+0x174>
 800063e:	e0c3      	b.n	80007c8 <__aeabi_dadd+0x2fc>
 8000640:	4aa2      	ldr	r2, [pc, #648]	; (80008cc <__aeabi_dadd+0x400>)
 8000642:	087b      	lsrs	r3, r7, #1
 8000644:	400a      	ands	r2, r1
 8000646:	2101      	movs	r1, #1
 8000648:	400f      	ands	r7, r1
 800064a:	431f      	orrs	r7, r3
 800064c:	0851      	lsrs	r1, r2, #1
 800064e:	07d3      	lsls	r3, r2, #31
 8000650:	2207      	movs	r2, #7
 8000652:	431f      	orrs	r7, r3
 8000654:	403a      	ands	r2, r7
 8000656:	e799      	b.n	800058c <__aeabi_dadd+0xc0>
 8000658:	4e9b      	ldr	r6, [pc, #620]	; (80008c8 <__aeabi_dadd+0x3fc>)
 800065a:	42b5      	cmp	r5, r6
 800065c:	d038      	beq.n	80006d0 <__aeabi_dadd+0x204>
 800065e:	2680      	movs	r6, #128	; 0x80
 8000660:	0436      	lsls	r6, r6, #16
 8000662:	4337      	orrs	r7, r6
 8000664:	46b8      	mov	r8, r7
 8000666:	2b38      	cmp	r3, #56	; 0x38
 8000668:	dd00      	ble.n	800066c <__aeabi_dadd+0x1a0>
 800066a:	e0dc      	b.n	8000826 <__aeabi_dadd+0x35a>
 800066c:	2b1f      	cmp	r3, #31
 800066e:	dc00      	bgt.n	8000672 <__aeabi_dadd+0x1a6>
 8000670:	e130      	b.n	80008d4 <__aeabi_dadd+0x408>
 8000672:	001e      	movs	r6, r3
 8000674:	4647      	mov	r7, r8
 8000676:	3e20      	subs	r6, #32
 8000678:	40f7      	lsrs	r7, r6
 800067a:	46bc      	mov	ip, r7
 800067c:	2b20      	cmp	r3, #32
 800067e:	d004      	beq.n	800068a <__aeabi_dadd+0x1be>
 8000680:	2640      	movs	r6, #64	; 0x40
 8000682:	1af3      	subs	r3, r6, r3
 8000684:	4646      	mov	r6, r8
 8000686:	409e      	lsls	r6, r3
 8000688:	4332      	orrs	r2, r6
 800068a:	0017      	movs	r7, r2
 800068c:	4663      	mov	r3, ip
 800068e:	1e7a      	subs	r2, r7, #1
 8000690:	4197      	sbcs	r7, r2
 8000692:	431f      	orrs	r7, r3
 8000694:	e0cc      	b.n	8000830 <__aeabi_dadd+0x364>
 8000696:	2b00      	cmp	r3, #0
 8000698:	d100      	bne.n	800069c <__aeabi_dadd+0x1d0>
 800069a:	e204      	b.n	8000aa6 <__aeabi_dadd+0x5da>
 800069c:	4643      	mov	r3, r8
 800069e:	4313      	orrs	r3, r2
 80006a0:	d100      	bne.n	80006a4 <__aeabi_dadd+0x1d8>
 80006a2:	e159      	b.n	8000958 <__aeabi_dadd+0x48c>
 80006a4:	074b      	lsls	r3, r1, #29
 80006a6:	08c0      	lsrs	r0, r0, #3
 80006a8:	4318      	orrs	r0, r3
 80006aa:	2380      	movs	r3, #128	; 0x80
 80006ac:	08c9      	lsrs	r1, r1, #3
 80006ae:	031b      	lsls	r3, r3, #12
 80006b0:	4219      	tst	r1, r3
 80006b2:	d008      	beq.n	80006c6 <__aeabi_dadd+0x1fa>
 80006b4:	4645      	mov	r5, r8
 80006b6:	08ed      	lsrs	r5, r5, #3
 80006b8:	421d      	tst	r5, r3
 80006ba:	d104      	bne.n	80006c6 <__aeabi_dadd+0x1fa>
 80006bc:	4643      	mov	r3, r8
 80006be:	08d0      	lsrs	r0, r2, #3
 80006c0:	0759      	lsls	r1, r3, #29
 80006c2:	4308      	orrs	r0, r1
 80006c4:	0029      	movs	r1, r5
 80006c6:	0f42      	lsrs	r2, r0, #29
 80006c8:	00c9      	lsls	r1, r1, #3
 80006ca:	4d7f      	ldr	r5, [pc, #508]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80006cc:	4311      	orrs	r1, r2
 80006ce:	00c0      	lsls	r0, r0, #3
 80006d0:	074b      	lsls	r3, r1, #29
 80006d2:	08ca      	lsrs	r2, r1, #3
 80006d4:	497c      	ldr	r1, [pc, #496]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80006d6:	08c0      	lsrs	r0, r0, #3
 80006d8:	4303      	orrs	r3, r0
 80006da:	428d      	cmp	r5, r1
 80006dc:	d068      	beq.n	80007b0 <__aeabi_dadd+0x2e4>
 80006de:	0312      	lsls	r2, r2, #12
 80006e0:	056d      	lsls	r5, r5, #21
 80006e2:	0b12      	lsrs	r2, r2, #12
 80006e4:	0d6d      	lsrs	r5, r5, #21
 80006e6:	2100      	movs	r1, #0
 80006e8:	0312      	lsls	r2, r2, #12
 80006ea:	0018      	movs	r0, r3
 80006ec:	0b13      	lsrs	r3, r2, #12
 80006ee:	0d0a      	lsrs	r2, r1, #20
 80006f0:	0512      	lsls	r2, r2, #20
 80006f2:	431a      	orrs	r2, r3
 80006f4:	4b76      	ldr	r3, [pc, #472]	; (80008d0 <__aeabi_dadd+0x404>)
 80006f6:	052d      	lsls	r5, r5, #20
 80006f8:	4013      	ands	r3, r2
 80006fa:	432b      	orrs	r3, r5
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	07e4      	lsls	r4, r4, #31
 8000700:	085b      	lsrs	r3, r3, #1
 8000702:	4323      	orrs	r3, r4
 8000704:	0019      	movs	r1, r3
 8000706:	bc1c      	pop	{r2, r3, r4}
 8000708:	4690      	mov	r8, r2
 800070a:	4699      	mov	r9, r3
 800070c:	46a2      	mov	sl, r4
 800070e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000710:	003e      	movs	r6, r7
 8000712:	4316      	orrs	r6, r2
 8000714:	d012      	beq.n	800073c <__aeabi_dadd+0x270>
 8000716:	1e5e      	subs	r6, r3, #1
 8000718:	2e00      	cmp	r6, #0
 800071a:	d000      	beq.n	800071e <__aeabi_dadd+0x252>
 800071c:	e100      	b.n	8000920 <__aeabi_dadd+0x454>
 800071e:	1887      	adds	r7, r0, r2
 8000720:	4287      	cmp	r7, r0
 8000722:	4180      	sbcs	r0, r0
 8000724:	4441      	add	r1, r8
 8000726:	4240      	negs	r0, r0
 8000728:	1809      	adds	r1, r1, r0
 800072a:	2501      	movs	r5, #1
 800072c:	020b      	lsls	r3, r1, #8
 800072e:	d533      	bpl.n	8000798 <__aeabi_dadd+0x2cc>
 8000730:	2502      	movs	r5, #2
 8000732:	e785      	b.n	8000640 <__aeabi_dadd+0x174>
 8000734:	4664      	mov	r4, ip
 8000736:	0033      	movs	r3, r6
 8000738:	4641      	mov	r1, r8
 800073a:	0010      	movs	r0, r2
 800073c:	001d      	movs	r5, r3
 800073e:	e7c7      	b.n	80006d0 <__aeabi_dadd+0x204>
 8000740:	2d00      	cmp	r5, #0
 8000742:	d000      	beq.n	8000746 <__aeabi_dadd+0x27a>
 8000744:	e0da      	b.n	80008fc <__aeabi_dadd+0x430>
 8000746:	000c      	movs	r4, r1
 8000748:	4304      	orrs	r4, r0
 800074a:	d0f3      	beq.n	8000734 <__aeabi_dadd+0x268>
 800074c:	1c5c      	adds	r4, r3, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x286>
 8000750:	e19f      	b.n	8000a92 <__aeabi_dadd+0x5c6>
 8000752:	4c5d      	ldr	r4, [pc, #372]	; (80008c8 <__aeabi_dadd+0x3fc>)
 8000754:	42a6      	cmp	r6, r4
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x28e>
 8000758:	e12f      	b.n	80009ba <__aeabi_dadd+0x4ee>
 800075a:	43db      	mvns	r3, r3
 800075c:	2b38      	cmp	r3, #56	; 0x38
 800075e:	dd00      	ble.n	8000762 <__aeabi_dadd+0x296>
 8000760:	e166      	b.n	8000a30 <__aeabi_dadd+0x564>
 8000762:	2b1f      	cmp	r3, #31
 8000764:	dd00      	ble.n	8000768 <__aeabi_dadd+0x29c>
 8000766:	e183      	b.n	8000a70 <__aeabi_dadd+0x5a4>
 8000768:	2420      	movs	r4, #32
 800076a:	0005      	movs	r5, r0
 800076c:	1ae4      	subs	r4, r4, r3
 800076e:	000f      	movs	r7, r1
 8000770:	40dd      	lsrs	r5, r3
 8000772:	40d9      	lsrs	r1, r3
 8000774:	40a0      	lsls	r0, r4
 8000776:	4643      	mov	r3, r8
 8000778:	40a7      	lsls	r7, r4
 800077a:	1a5b      	subs	r3, r3, r1
 800077c:	1e44      	subs	r4, r0, #1
 800077e:	41a0      	sbcs	r0, r4
 8000780:	4698      	mov	r8, r3
 8000782:	432f      	orrs	r7, r5
 8000784:	4338      	orrs	r0, r7
 8000786:	1a17      	subs	r7, r2, r0
 8000788:	42ba      	cmp	r2, r7
 800078a:	4192      	sbcs	r2, r2
 800078c:	4643      	mov	r3, r8
 800078e:	4252      	negs	r2, r2
 8000790:	1a99      	subs	r1, r3, r2
 8000792:	4664      	mov	r4, ip
 8000794:	0035      	movs	r5, r6
 8000796:	e6ca      	b.n	800052e <__aeabi_dadd+0x62>
 8000798:	2207      	movs	r2, #7
 800079a:	403a      	ands	r2, r7
 800079c:	2a00      	cmp	r2, #0
 800079e:	d000      	beq.n	80007a2 <__aeabi_dadd+0x2d6>
 80007a0:	e6f6      	b.n	8000590 <__aeabi_dadd+0xc4>
 80007a2:	074b      	lsls	r3, r1, #29
 80007a4:	08ca      	lsrs	r2, r1, #3
 80007a6:	4948      	ldr	r1, [pc, #288]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80007a8:	08ff      	lsrs	r7, r7, #3
 80007aa:	433b      	orrs	r3, r7
 80007ac:	428d      	cmp	r5, r1
 80007ae:	d196      	bne.n	80006de <__aeabi_dadd+0x212>
 80007b0:	0019      	movs	r1, r3
 80007b2:	4311      	orrs	r1, r2
 80007b4:	d100      	bne.n	80007b8 <__aeabi_dadd+0x2ec>
 80007b6:	e19e      	b.n	8000af6 <__aeabi_dadd+0x62a>
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0309      	lsls	r1, r1, #12
 80007bc:	430a      	orrs	r2, r1
 80007be:	0312      	lsls	r2, r2, #12
 80007c0:	0b12      	lsrs	r2, r2, #12
 80007c2:	4d41      	ldr	r5, [pc, #260]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80007c4:	e78f      	b.n	80006e6 <__aeabi_dadd+0x21a>
 80007c6:	0015      	movs	r5, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	2300      	movs	r3, #0
 80007cc:	e78b      	b.n	80006e6 <__aeabi_dadd+0x21a>
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_dadd+0x308>
 80007d2:	e0c7      	b.n	8000964 <__aeabi_dadd+0x498>
 80007d4:	1c6b      	adds	r3, r5, #1
 80007d6:	055f      	lsls	r7, r3, #21
 80007d8:	0d7f      	lsrs	r7, r7, #21
 80007da:	2f01      	cmp	r7, #1
 80007dc:	dc00      	bgt.n	80007e0 <__aeabi_dadd+0x314>
 80007de:	e0f1      	b.n	80009c4 <__aeabi_dadd+0x4f8>
 80007e0:	4d39      	ldr	r5, [pc, #228]	; (80008c8 <__aeabi_dadd+0x3fc>)
 80007e2:	42ab      	cmp	r3, r5
 80007e4:	d100      	bne.n	80007e8 <__aeabi_dadd+0x31c>
 80007e6:	e0b9      	b.n	800095c <__aeabi_dadd+0x490>
 80007e8:	1885      	adds	r5, r0, r2
 80007ea:	000a      	movs	r2, r1
 80007ec:	4285      	cmp	r5, r0
 80007ee:	4189      	sbcs	r1, r1
 80007f0:	4442      	add	r2, r8
 80007f2:	4249      	negs	r1, r1
 80007f4:	1851      	adds	r1, r2, r1
 80007f6:	2207      	movs	r2, #7
 80007f8:	07cf      	lsls	r7, r1, #31
 80007fa:	086d      	lsrs	r5, r5, #1
 80007fc:	432f      	orrs	r7, r5
 80007fe:	0849      	lsrs	r1, r1, #1
 8000800:	403a      	ands	r2, r7
 8000802:	001d      	movs	r5, r3
 8000804:	e6c2      	b.n	800058c <__aeabi_dadd+0xc0>
 8000806:	2207      	movs	r2, #7
 8000808:	4930      	ldr	r1, [pc, #192]	; (80008cc <__aeabi_dadd+0x400>)
 800080a:	1aed      	subs	r5, r5, r3
 800080c:	4031      	ands	r1, r6
 800080e:	403a      	ands	r2, r7
 8000810:	e6bc      	b.n	800058c <__aeabi_dadd+0xc0>
 8000812:	003e      	movs	r6, r7
 8000814:	3828      	subs	r0, #40	; 0x28
 8000816:	4086      	lsls	r6, r0
 8000818:	2700      	movs	r7, #0
 800081a:	e69f      	b.n	800055c <__aeabi_dadd+0x90>
 800081c:	0038      	movs	r0, r7
 800081e:	f001 fbd7 	bl	8001fd0 <__clzsi2>
 8000822:	3020      	adds	r0, #32
 8000824:	e68e      	b.n	8000544 <__aeabi_dadd+0x78>
 8000826:	4643      	mov	r3, r8
 8000828:	4313      	orrs	r3, r2
 800082a:	001f      	movs	r7, r3
 800082c:	1e7a      	subs	r2, r7, #1
 800082e:	4197      	sbcs	r7, r2
 8000830:	1bc7      	subs	r7, r0, r7
 8000832:	42b8      	cmp	r0, r7
 8000834:	4180      	sbcs	r0, r0
 8000836:	4240      	negs	r0, r0
 8000838:	1a09      	subs	r1, r1, r0
 800083a:	e678      	b.n	800052e <__aeabi_dadd+0x62>
 800083c:	000e      	movs	r6, r1
 800083e:	003b      	movs	r3, r7
 8000840:	4306      	orrs	r6, r0
 8000842:	4313      	orrs	r3, r2
 8000844:	2d00      	cmp	r5, #0
 8000846:	d161      	bne.n	800090c <__aeabi_dadd+0x440>
 8000848:	2e00      	cmp	r6, #0
 800084a:	d000      	beq.n	800084e <__aeabi_dadd+0x382>
 800084c:	e0f4      	b.n	8000a38 <__aeabi_dadd+0x56c>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d100      	bne.n	8000854 <__aeabi_dadd+0x388>
 8000852:	e11b      	b.n	8000a8c <__aeabi_dadd+0x5c0>
 8000854:	4664      	mov	r4, ip
 8000856:	0039      	movs	r1, r7
 8000858:	0010      	movs	r0, r2
 800085a:	e739      	b.n	80006d0 <__aeabi_dadd+0x204>
 800085c:	4f1a      	ldr	r7, [pc, #104]	; (80008c8 <__aeabi_dadd+0x3fc>)
 800085e:	42bb      	cmp	r3, r7
 8000860:	d07a      	beq.n	8000958 <__aeabi_dadd+0x48c>
 8000862:	0033      	movs	r3, r6
 8000864:	e6ff      	b.n	8000666 <__aeabi_dadd+0x19a>
 8000866:	0030      	movs	r0, r6
 8000868:	3d1f      	subs	r5, #31
 800086a:	40e8      	lsrs	r0, r5
 800086c:	2b20      	cmp	r3, #32
 800086e:	d003      	beq.n	8000878 <__aeabi_dadd+0x3ac>
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	1acb      	subs	r3, r1, r3
 8000874:	409e      	lsls	r6, r3
 8000876:	4337      	orrs	r7, r6
 8000878:	1e7b      	subs	r3, r7, #1
 800087a:	419f      	sbcs	r7, r3
 800087c:	2207      	movs	r2, #7
 800087e:	4307      	orrs	r7, r0
 8000880:	403a      	ands	r2, r7
 8000882:	2100      	movs	r1, #0
 8000884:	2500      	movs	r5, #0
 8000886:	e789      	b.n	800079c <__aeabi_dadd+0x2d0>
 8000888:	1a17      	subs	r7, r2, r0
 800088a:	4643      	mov	r3, r8
 800088c:	42ba      	cmp	r2, r7
 800088e:	41b6      	sbcs	r6, r6
 8000890:	1a59      	subs	r1, r3, r1
 8000892:	4276      	negs	r6, r6
 8000894:	1b8e      	subs	r6, r1, r6
 8000896:	4664      	mov	r4, ip
 8000898:	e64e      	b.n	8000538 <__aeabi_dadd+0x6c>
 800089a:	2b1f      	cmp	r3, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dadd+0x3d4>
 800089e:	e0ad      	b.n	80009fc <__aeabi_dadd+0x530>
 80008a0:	2620      	movs	r6, #32
 80008a2:	4647      	mov	r7, r8
 80008a4:	1af6      	subs	r6, r6, r3
 80008a6:	40b7      	lsls	r7, r6
 80008a8:	46b9      	mov	r9, r7
 80008aa:	0017      	movs	r7, r2
 80008ac:	46b2      	mov	sl, r6
 80008ae:	40df      	lsrs	r7, r3
 80008b0:	464e      	mov	r6, r9
 80008b2:	433e      	orrs	r6, r7
 80008b4:	0037      	movs	r7, r6
 80008b6:	4656      	mov	r6, sl
 80008b8:	40b2      	lsls	r2, r6
 80008ba:	1e56      	subs	r6, r2, #1
 80008bc:	41b2      	sbcs	r2, r6
 80008be:	4317      	orrs	r7, r2
 80008c0:	4642      	mov	r2, r8
 80008c2:	40da      	lsrs	r2, r3
 80008c4:	1889      	adds	r1, r1, r2
 80008c6:	e6ae      	b.n	8000626 <__aeabi_dadd+0x15a>
 80008c8:	000007ff 	.word	0x000007ff
 80008cc:	ff7fffff 	.word	0xff7fffff
 80008d0:	800fffff 	.word	0x800fffff
 80008d4:	2620      	movs	r6, #32
 80008d6:	4647      	mov	r7, r8
 80008d8:	1af6      	subs	r6, r6, r3
 80008da:	40b7      	lsls	r7, r6
 80008dc:	46b9      	mov	r9, r7
 80008de:	0017      	movs	r7, r2
 80008e0:	46b2      	mov	sl, r6
 80008e2:	40df      	lsrs	r7, r3
 80008e4:	464e      	mov	r6, r9
 80008e6:	433e      	orrs	r6, r7
 80008e8:	0037      	movs	r7, r6
 80008ea:	4656      	mov	r6, sl
 80008ec:	40b2      	lsls	r2, r6
 80008ee:	1e56      	subs	r6, r2, #1
 80008f0:	41b2      	sbcs	r2, r6
 80008f2:	4317      	orrs	r7, r2
 80008f4:	4642      	mov	r2, r8
 80008f6:	40da      	lsrs	r2, r3
 80008f8:	1a89      	subs	r1, r1, r2
 80008fa:	e799      	b.n	8000830 <__aeabi_dadd+0x364>
 80008fc:	4c7f      	ldr	r4, [pc, #508]	; (8000afc <__aeabi_dadd+0x630>)
 80008fe:	42a6      	cmp	r6, r4
 8000900:	d05b      	beq.n	80009ba <__aeabi_dadd+0x4ee>
 8000902:	2480      	movs	r4, #128	; 0x80
 8000904:	0424      	lsls	r4, r4, #16
 8000906:	425b      	negs	r3, r3
 8000908:	4321      	orrs	r1, r4
 800090a:	e727      	b.n	800075c <__aeabi_dadd+0x290>
 800090c:	2e00      	cmp	r6, #0
 800090e:	d10c      	bne.n	800092a <__aeabi_dadd+0x45e>
 8000910:	2b00      	cmp	r3, #0
 8000912:	d100      	bne.n	8000916 <__aeabi_dadd+0x44a>
 8000914:	e0cb      	b.n	8000aae <__aeabi_dadd+0x5e2>
 8000916:	4664      	mov	r4, ip
 8000918:	0039      	movs	r1, r7
 800091a:	0010      	movs	r0, r2
 800091c:	4d77      	ldr	r5, [pc, #476]	; (8000afc <__aeabi_dadd+0x630>)
 800091e:	e6d7      	b.n	80006d0 <__aeabi_dadd+0x204>
 8000920:	4f76      	ldr	r7, [pc, #472]	; (8000afc <__aeabi_dadd+0x630>)
 8000922:	42bb      	cmp	r3, r7
 8000924:	d018      	beq.n	8000958 <__aeabi_dadd+0x48c>
 8000926:	0033      	movs	r3, r6
 8000928:	e675      	b.n	8000616 <__aeabi_dadd+0x14a>
 800092a:	2b00      	cmp	r3, #0
 800092c:	d014      	beq.n	8000958 <__aeabi_dadd+0x48c>
 800092e:	074b      	lsls	r3, r1, #29
 8000930:	08c0      	lsrs	r0, r0, #3
 8000932:	4318      	orrs	r0, r3
 8000934:	2380      	movs	r3, #128	; 0x80
 8000936:	08c9      	lsrs	r1, r1, #3
 8000938:	031b      	lsls	r3, r3, #12
 800093a:	4219      	tst	r1, r3
 800093c:	d007      	beq.n	800094e <__aeabi_dadd+0x482>
 800093e:	08fc      	lsrs	r4, r7, #3
 8000940:	421c      	tst	r4, r3
 8000942:	d104      	bne.n	800094e <__aeabi_dadd+0x482>
 8000944:	0779      	lsls	r1, r7, #29
 8000946:	08d0      	lsrs	r0, r2, #3
 8000948:	4308      	orrs	r0, r1
 800094a:	46e1      	mov	r9, ip
 800094c:	0021      	movs	r1, r4
 800094e:	464c      	mov	r4, r9
 8000950:	0f42      	lsrs	r2, r0, #29
 8000952:	00c9      	lsls	r1, r1, #3
 8000954:	4311      	orrs	r1, r2
 8000956:	00c0      	lsls	r0, r0, #3
 8000958:	4d68      	ldr	r5, [pc, #416]	; (8000afc <__aeabi_dadd+0x630>)
 800095a:	e6b9      	b.n	80006d0 <__aeabi_dadd+0x204>
 800095c:	001d      	movs	r5, r3
 800095e:	2200      	movs	r2, #0
 8000960:	2300      	movs	r3, #0
 8000962:	e6c0      	b.n	80006e6 <__aeabi_dadd+0x21a>
 8000964:	2d00      	cmp	r5, #0
 8000966:	d15b      	bne.n	8000a20 <__aeabi_dadd+0x554>
 8000968:	000d      	movs	r5, r1
 800096a:	4305      	orrs	r5, r0
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x4a4>
 800096e:	e6e2      	b.n	8000736 <__aeabi_dadd+0x26a>
 8000970:	1c5d      	adds	r5, r3, #1
 8000972:	d100      	bne.n	8000976 <__aeabi_dadd+0x4aa>
 8000974:	e0b0      	b.n	8000ad8 <__aeabi_dadd+0x60c>
 8000976:	4d61      	ldr	r5, [pc, #388]	; (8000afc <__aeabi_dadd+0x630>)
 8000978:	42ae      	cmp	r6, r5
 800097a:	d01f      	beq.n	80009bc <__aeabi_dadd+0x4f0>
 800097c:	43db      	mvns	r3, r3
 800097e:	2b38      	cmp	r3, #56	; 0x38
 8000980:	dc71      	bgt.n	8000a66 <__aeabi_dadd+0x59a>
 8000982:	2b1f      	cmp	r3, #31
 8000984:	dd00      	ble.n	8000988 <__aeabi_dadd+0x4bc>
 8000986:	e096      	b.n	8000ab6 <__aeabi_dadd+0x5ea>
 8000988:	2520      	movs	r5, #32
 800098a:	000f      	movs	r7, r1
 800098c:	1aed      	subs	r5, r5, r3
 800098e:	40af      	lsls	r7, r5
 8000990:	46b9      	mov	r9, r7
 8000992:	0007      	movs	r7, r0
 8000994:	46aa      	mov	sl, r5
 8000996:	40df      	lsrs	r7, r3
 8000998:	464d      	mov	r5, r9
 800099a:	433d      	orrs	r5, r7
 800099c:	002f      	movs	r7, r5
 800099e:	4655      	mov	r5, sl
 80009a0:	40a8      	lsls	r0, r5
 80009a2:	40d9      	lsrs	r1, r3
 80009a4:	1e45      	subs	r5, r0, #1
 80009a6:	41a8      	sbcs	r0, r5
 80009a8:	4488      	add	r8, r1
 80009aa:	4307      	orrs	r7, r0
 80009ac:	18bf      	adds	r7, r7, r2
 80009ae:	4297      	cmp	r7, r2
 80009b0:	4192      	sbcs	r2, r2
 80009b2:	4251      	negs	r1, r2
 80009b4:	4441      	add	r1, r8
 80009b6:	0035      	movs	r5, r6
 80009b8:	e63a      	b.n	8000630 <__aeabi_dadd+0x164>
 80009ba:	4664      	mov	r4, ip
 80009bc:	0035      	movs	r5, r6
 80009be:	4641      	mov	r1, r8
 80009c0:	0010      	movs	r0, r2
 80009c2:	e685      	b.n	80006d0 <__aeabi_dadd+0x204>
 80009c4:	000b      	movs	r3, r1
 80009c6:	4303      	orrs	r3, r0
 80009c8:	2d00      	cmp	r5, #0
 80009ca:	d000      	beq.n	80009ce <__aeabi_dadd+0x502>
 80009cc:	e663      	b.n	8000696 <__aeabi_dadd+0x1ca>
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f5      	beq.n	80009be <__aeabi_dadd+0x4f2>
 80009d2:	4643      	mov	r3, r8
 80009d4:	4313      	orrs	r3, r2
 80009d6:	d100      	bne.n	80009da <__aeabi_dadd+0x50e>
 80009d8:	e67a      	b.n	80006d0 <__aeabi_dadd+0x204>
 80009da:	1887      	adds	r7, r0, r2
 80009dc:	4287      	cmp	r7, r0
 80009de:	4180      	sbcs	r0, r0
 80009e0:	2207      	movs	r2, #7
 80009e2:	4441      	add	r1, r8
 80009e4:	4240      	negs	r0, r0
 80009e6:	1809      	adds	r1, r1, r0
 80009e8:	403a      	ands	r2, r7
 80009ea:	020b      	lsls	r3, r1, #8
 80009ec:	d400      	bmi.n	80009f0 <__aeabi_dadd+0x524>
 80009ee:	e6d5      	b.n	800079c <__aeabi_dadd+0x2d0>
 80009f0:	4b43      	ldr	r3, [pc, #268]	; (8000b00 <__aeabi_dadd+0x634>)
 80009f2:	3501      	adds	r5, #1
 80009f4:	4019      	ands	r1, r3
 80009f6:	e5c9      	b.n	800058c <__aeabi_dadd+0xc0>
 80009f8:	0038      	movs	r0, r7
 80009fa:	e669      	b.n	80006d0 <__aeabi_dadd+0x204>
 80009fc:	001e      	movs	r6, r3
 80009fe:	4647      	mov	r7, r8
 8000a00:	3e20      	subs	r6, #32
 8000a02:	40f7      	lsrs	r7, r6
 8000a04:	46bc      	mov	ip, r7
 8000a06:	2b20      	cmp	r3, #32
 8000a08:	d004      	beq.n	8000a14 <__aeabi_dadd+0x548>
 8000a0a:	2640      	movs	r6, #64	; 0x40
 8000a0c:	1af3      	subs	r3, r6, r3
 8000a0e:	4646      	mov	r6, r8
 8000a10:	409e      	lsls	r6, r3
 8000a12:	4332      	orrs	r2, r6
 8000a14:	0017      	movs	r7, r2
 8000a16:	4663      	mov	r3, ip
 8000a18:	1e7a      	subs	r2, r7, #1
 8000a1a:	4197      	sbcs	r7, r2
 8000a1c:	431f      	orrs	r7, r3
 8000a1e:	e602      	b.n	8000626 <__aeabi_dadd+0x15a>
 8000a20:	4d36      	ldr	r5, [pc, #216]	; (8000afc <__aeabi_dadd+0x630>)
 8000a22:	42ae      	cmp	r6, r5
 8000a24:	d0ca      	beq.n	80009bc <__aeabi_dadd+0x4f0>
 8000a26:	2580      	movs	r5, #128	; 0x80
 8000a28:	042d      	lsls	r5, r5, #16
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	4329      	orrs	r1, r5
 8000a2e:	e7a6      	b.n	800097e <__aeabi_dadd+0x4b2>
 8000a30:	4308      	orrs	r0, r1
 8000a32:	1e41      	subs	r1, r0, #1
 8000a34:	4188      	sbcs	r0, r1
 8000a36:	e6a6      	b.n	8000786 <__aeabi_dadd+0x2ba>
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x572>
 8000a3c:	e648      	b.n	80006d0 <__aeabi_dadd+0x204>
 8000a3e:	1a87      	subs	r7, r0, r2
 8000a40:	4643      	mov	r3, r8
 8000a42:	42b8      	cmp	r0, r7
 8000a44:	41b6      	sbcs	r6, r6
 8000a46:	1acb      	subs	r3, r1, r3
 8000a48:	4276      	negs	r6, r6
 8000a4a:	1b9e      	subs	r6, r3, r6
 8000a4c:	0233      	lsls	r3, r6, #8
 8000a4e:	d54b      	bpl.n	8000ae8 <__aeabi_dadd+0x61c>
 8000a50:	1a17      	subs	r7, r2, r0
 8000a52:	4643      	mov	r3, r8
 8000a54:	42ba      	cmp	r2, r7
 8000a56:	4192      	sbcs	r2, r2
 8000a58:	1a59      	subs	r1, r3, r1
 8000a5a:	4252      	negs	r2, r2
 8000a5c:	1a89      	subs	r1, r1, r2
 8000a5e:	2207      	movs	r2, #7
 8000a60:	4664      	mov	r4, ip
 8000a62:	403a      	ands	r2, r7
 8000a64:	e592      	b.n	800058c <__aeabi_dadd+0xc0>
 8000a66:	4301      	orrs	r1, r0
 8000a68:	000f      	movs	r7, r1
 8000a6a:	1e79      	subs	r1, r7, #1
 8000a6c:	418f      	sbcs	r7, r1
 8000a6e:	e79d      	b.n	80009ac <__aeabi_dadd+0x4e0>
 8000a70:	001c      	movs	r4, r3
 8000a72:	000f      	movs	r7, r1
 8000a74:	3c20      	subs	r4, #32
 8000a76:	40e7      	lsrs	r7, r4
 8000a78:	2b20      	cmp	r3, #32
 8000a7a:	d003      	beq.n	8000a84 <__aeabi_dadd+0x5b8>
 8000a7c:	2440      	movs	r4, #64	; 0x40
 8000a7e:	1ae3      	subs	r3, r4, r3
 8000a80:	4099      	lsls	r1, r3
 8000a82:	4308      	orrs	r0, r1
 8000a84:	1e41      	subs	r1, r0, #1
 8000a86:	4188      	sbcs	r0, r1
 8000a88:	4338      	orrs	r0, r7
 8000a8a:	e67c      	b.n	8000786 <__aeabi_dadd+0x2ba>
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2400      	movs	r4, #0
 8000a90:	e625      	b.n	80006de <__aeabi_dadd+0x212>
 8000a92:	1a17      	subs	r7, r2, r0
 8000a94:	4643      	mov	r3, r8
 8000a96:	42ba      	cmp	r2, r7
 8000a98:	4192      	sbcs	r2, r2
 8000a9a:	1a59      	subs	r1, r3, r1
 8000a9c:	4252      	negs	r2, r2
 8000a9e:	1a89      	subs	r1, r1, r2
 8000aa0:	4664      	mov	r4, ip
 8000aa2:	0035      	movs	r5, r6
 8000aa4:	e543      	b.n	800052e <__aeabi_dadd+0x62>
 8000aa6:	4641      	mov	r1, r8
 8000aa8:	0010      	movs	r0, r2
 8000aaa:	4d14      	ldr	r5, [pc, #80]	; (8000afc <__aeabi_dadd+0x630>)
 8000aac:	e610      	b.n	80006d0 <__aeabi_dadd+0x204>
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	0312      	lsls	r2, r2, #12
 8000ab4:	e680      	b.n	80007b8 <__aeabi_dadd+0x2ec>
 8000ab6:	001d      	movs	r5, r3
 8000ab8:	000f      	movs	r7, r1
 8000aba:	3d20      	subs	r5, #32
 8000abc:	40ef      	lsrs	r7, r5
 8000abe:	46bc      	mov	ip, r7
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	d003      	beq.n	8000acc <__aeabi_dadd+0x600>
 8000ac4:	2540      	movs	r5, #64	; 0x40
 8000ac6:	1aeb      	subs	r3, r5, r3
 8000ac8:	4099      	lsls	r1, r3
 8000aca:	4308      	orrs	r0, r1
 8000acc:	0007      	movs	r7, r0
 8000ace:	4663      	mov	r3, ip
 8000ad0:	1e78      	subs	r0, r7, #1
 8000ad2:	4187      	sbcs	r7, r0
 8000ad4:	431f      	orrs	r7, r3
 8000ad6:	e769      	b.n	80009ac <__aeabi_dadd+0x4e0>
 8000ad8:	1887      	adds	r7, r0, r2
 8000ada:	4297      	cmp	r7, r2
 8000adc:	419b      	sbcs	r3, r3
 8000ade:	4441      	add	r1, r8
 8000ae0:	425b      	negs	r3, r3
 8000ae2:	18c9      	adds	r1, r1, r3
 8000ae4:	0035      	movs	r5, r6
 8000ae6:	e5a3      	b.n	8000630 <__aeabi_dadd+0x164>
 8000ae8:	003b      	movs	r3, r7
 8000aea:	4333      	orrs	r3, r6
 8000aec:	d0ce      	beq.n	8000a8c <__aeabi_dadd+0x5c0>
 8000aee:	2207      	movs	r2, #7
 8000af0:	0031      	movs	r1, r6
 8000af2:	403a      	ands	r2, r7
 8000af4:	e652      	b.n	800079c <__aeabi_dadd+0x2d0>
 8000af6:	2300      	movs	r3, #0
 8000af8:	001a      	movs	r2, r3
 8000afa:	e5f4      	b.n	80006e6 <__aeabi_dadd+0x21a>
 8000afc:	000007ff 	.word	0x000007ff
 8000b00:	ff7fffff 	.word	0xff7fffff

08000b04 <__aeabi_ddiv>:
 8000b04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b06:	4657      	mov	r7, sl
 8000b08:	46de      	mov	lr, fp
 8000b0a:	464e      	mov	r6, r9
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	b5e0      	push	{r5, r6, r7, lr}
 8000b10:	4683      	mov	fp, r0
 8000b12:	0007      	movs	r7, r0
 8000b14:	030e      	lsls	r6, r1, #12
 8000b16:	0048      	lsls	r0, r1, #1
 8000b18:	b085      	sub	sp, #20
 8000b1a:	4692      	mov	sl, r2
 8000b1c:	001c      	movs	r4, r3
 8000b1e:	0b36      	lsrs	r6, r6, #12
 8000b20:	0d40      	lsrs	r0, r0, #21
 8000b22:	0fcd      	lsrs	r5, r1, #31
 8000b24:	2800      	cmp	r0, #0
 8000b26:	d100      	bne.n	8000b2a <__aeabi_ddiv+0x26>
 8000b28:	e09d      	b.n	8000c66 <__aeabi_ddiv+0x162>
 8000b2a:	4b95      	ldr	r3, [pc, #596]	; (8000d80 <__aeabi_ddiv+0x27c>)
 8000b2c:	4298      	cmp	r0, r3
 8000b2e:	d039      	beq.n	8000ba4 <__aeabi_ddiv+0xa0>
 8000b30:	2380      	movs	r3, #128	; 0x80
 8000b32:	00f6      	lsls	r6, r6, #3
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	431e      	orrs	r6, r3
 8000b38:	4a92      	ldr	r2, [pc, #584]	; (8000d84 <__aeabi_ddiv+0x280>)
 8000b3a:	0f7b      	lsrs	r3, r7, #29
 8000b3c:	4333      	orrs	r3, r6
 8000b3e:	4699      	mov	r9, r3
 8000b40:	4694      	mov	ip, r2
 8000b42:	0003      	movs	r3, r0
 8000b44:	4463      	add	r3, ip
 8000b46:	9300      	str	r3, [sp, #0]
 8000b48:	2300      	movs	r3, #0
 8000b4a:	2600      	movs	r6, #0
 8000b4c:	00ff      	lsls	r7, r7, #3
 8000b4e:	9302      	str	r3, [sp, #8]
 8000b50:	0323      	lsls	r3, r4, #12
 8000b52:	0b1b      	lsrs	r3, r3, #12
 8000b54:	4698      	mov	r8, r3
 8000b56:	0063      	lsls	r3, r4, #1
 8000b58:	0fe4      	lsrs	r4, r4, #31
 8000b5a:	4652      	mov	r2, sl
 8000b5c:	0d5b      	lsrs	r3, r3, #21
 8000b5e:	9401      	str	r4, [sp, #4]
 8000b60:	d100      	bne.n	8000b64 <__aeabi_ddiv+0x60>
 8000b62:	e0b3      	b.n	8000ccc <__aeabi_ddiv+0x1c8>
 8000b64:	4986      	ldr	r1, [pc, #536]	; (8000d80 <__aeabi_ddiv+0x27c>)
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d100      	bne.n	8000b6c <__aeabi_ddiv+0x68>
 8000b6a:	e09e      	b.n	8000caa <__aeabi_ddiv+0x1a6>
 8000b6c:	4642      	mov	r2, r8
 8000b6e:	00d1      	lsls	r1, r2, #3
 8000b70:	2280      	movs	r2, #128	; 0x80
 8000b72:	0412      	lsls	r2, r2, #16
 8000b74:	430a      	orrs	r2, r1
 8000b76:	4651      	mov	r1, sl
 8000b78:	0f49      	lsrs	r1, r1, #29
 8000b7a:	4311      	orrs	r1, r2
 8000b7c:	468b      	mov	fp, r1
 8000b7e:	4981      	ldr	r1, [pc, #516]	; (8000d84 <__aeabi_ddiv+0x280>)
 8000b80:	4652      	mov	r2, sl
 8000b82:	468c      	mov	ip, r1
 8000b84:	9900      	ldr	r1, [sp, #0]
 8000b86:	4463      	add	r3, ip
 8000b88:	1acb      	subs	r3, r1, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	00d2      	lsls	r2, r2, #3
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	002b      	movs	r3, r5
 8000b92:	4063      	eors	r3, r4
 8000b94:	469a      	mov	sl, r3
 8000b96:	2e0f      	cmp	r6, #15
 8000b98:	d900      	bls.n	8000b9c <__aeabi_ddiv+0x98>
 8000b9a:	e105      	b.n	8000da8 <__aeabi_ddiv+0x2a4>
 8000b9c:	4b7a      	ldr	r3, [pc, #488]	; (8000d88 <__aeabi_ddiv+0x284>)
 8000b9e:	00b6      	lsls	r6, r6, #2
 8000ba0:	599b      	ldr	r3, [r3, r6]
 8000ba2:	469f      	mov	pc, r3
 8000ba4:	465b      	mov	r3, fp
 8000ba6:	4333      	orrs	r3, r6
 8000ba8:	4699      	mov	r9, r3
 8000baa:	d000      	beq.n	8000bae <__aeabi_ddiv+0xaa>
 8000bac:	e0b8      	b.n	8000d20 <__aeabi_ddiv+0x21c>
 8000bae:	2302      	movs	r3, #2
 8000bb0:	2608      	movs	r6, #8
 8000bb2:	2700      	movs	r7, #0
 8000bb4:	9000      	str	r0, [sp, #0]
 8000bb6:	9302      	str	r3, [sp, #8]
 8000bb8:	e7ca      	b.n	8000b50 <__aeabi_ddiv+0x4c>
 8000bba:	46cb      	mov	fp, r9
 8000bbc:	003a      	movs	r2, r7
 8000bbe:	9902      	ldr	r1, [sp, #8]
 8000bc0:	9501      	str	r5, [sp, #4]
 8000bc2:	9b01      	ldr	r3, [sp, #4]
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	2902      	cmp	r1, #2
 8000bc8:	d027      	beq.n	8000c1a <__aeabi_ddiv+0x116>
 8000bca:	2903      	cmp	r1, #3
 8000bcc:	d100      	bne.n	8000bd0 <__aeabi_ddiv+0xcc>
 8000bce:	e280      	b.n	80010d2 <__aeabi_ddiv+0x5ce>
 8000bd0:	2901      	cmp	r1, #1
 8000bd2:	d044      	beq.n	8000c5e <__aeabi_ddiv+0x15a>
 8000bd4:	496d      	ldr	r1, [pc, #436]	; (8000d8c <__aeabi_ddiv+0x288>)
 8000bd6:	9b00      	ldr	r3, [sp, #0]
 8000bd8:	468c      	mov	ip, r1
 8000bda:	4463      	add	r3, ip
 8000bdc:	001c      	movs	r4, r3
 8000bde:	2c00      	cmp	r4, #0
 8000be0:	dd38      	ble.n	8000c54 <__aeabi_ddiv+0x150>
 8000be2:	0753      	lsls	r3, r2, #29
 8000be4:	d000      	beq.n	8000be8 <__aeabi_ddiv+0xe4>
 8000be6:	e213      	b.n	8001010 <__aeabi_ddiv+0x50c>
 8000be8:	08d2      	lsrs	r2, r2, #3
 8000bea:	465b      	mov	r3, fp
 8000bec:	01db      	lsls	r3, r3, #7
 8000bee:	d509      	bpl.n	8000c04 <__aeabi_ddiv+0x100>
 8000bf0:	4659      	mov	r1, fp
 8000bf2:	4b67      	ldr	r3, [pc, #412]	; (8000d90 <__aeabi_ddiv+0x28c>)
 8000bf4:	4019      	ands	r1, r3
 8000bf6:	468b      	mov	fp, r1
 8000bf8:	2180      	movs	r1, #128	; 0x80
 8000bfa:	00c9      	lsls	r1, r1, #3
 8000bfc:	468c      	mov	ip, r1
 8000bfe:	9b00      	ldr	r3, [sp, #0]
 8000c00:	4463      	add	r3, ip
 8000c02:	001c      	movs	r4, r3
 8000c04:	4b63      	ldr	r3, [pc, #396]	; (8000d94 <__aeabi_ddiv+0x290>)
 8000c06:	429c      	cmp	r4, r3
 8000c08:	dc07      	bgt.n	8000c1a <__aeabi_ddiv+0x116>
 8000c0a:	465b      	mov	r3, fp
 8000c0c:	0564      	lsls	r4, r4, #21
 8000c0e:	075f      	lsls	r7, r3, #29
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	4317      	orrs	r7, r2
 8000c14:	0b1b      	lsrs	r3, r3, #12
 8000c16:	0d62      	lsrs	r2, r4, #21
 8000c18:	e002      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	2700      	movs	r7, #0
 8000c1e:	4a58      	ldr	r2, [pc, #352]	; (8000d80 <__aeabi_ddiv+0x27c>)
 8000c20:	2100      	movs	r1, #0
 8000c22:	031b      	lsls	r3, r3, #12
 8000c24:	0b1c      	lsrs	r4, r3, #12
 8000c26:	0d0b      	lsrs	r3, r1, #20
 8000c28:	051b      	lsls	r3, r3, #20
 8000c2a:	4323      	orrs	r3, r4
 8000c2c:	0514      	lsls	r4, r2, #20
 8000c2e:	4a5a      	ldr	r2, [pc, #360]	; (8000d98 <__aeabi_ddiv+0x294>)
 8000c30:	0038      	movs	r0, r7
 8000c32:	4013      	ands	r3, r2
 8000c34:	431c      	orrs	r4, r3
 8000c36:	4653      	mov	r3, sl
 8000c38:	0064      	lsls	r4, r4, #1
 8000c3a:	07db      	lsls	r3, r3, #31
 8000c3c:	0864      	lsrs	r4, r4, #1
 8000c3e:	431c      	orrs	r4, r3
 8000c40:	0021      	movs	r1, r4
 8000c42:	b005      	add	sp, #20
 8000c44:	bc3c      	pop	{r2, r3, r4, r5}
 8000c46:	4690      	mov	r8, r2
 8000c48:	4699      	mov	r9, r3
 8000c4a:	46a2      	mov	sl, r4
 8000c4c:	46ab      	mov	fp, r5
 8000c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c50:	2201      	movs	r2, #1
 8000c52:	4252      	negs	r2, r2
 8000c54:	2301      	movs	r3, #1
 8000c56:	1b1b      	subs	r3, r3, r4
 8000c58:	2b38      	cmp	r3, #56	; 0x38
 8000c5a:	dc00      	bgt.n	8000c5e <__aeabi_ddiv+0x15a>
 8000c5c:	e1ad      	b.n	8000fba <__aeabi_ddiv+0x4b6>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	2700      	movs	r7, #0
 8000c64:	e7dc      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8000c66:	465b      	mov	r3, fp
 8000c68:	4333      	orrs	r3, r6
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	d05e      	beq.n	8000d2c <__aeabi_ddiv+0x228>
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_ddiv+0x170>
 8000c72:	e18a      	b.n	8000f8a <__aeabi_ddiv+0x486>
 8000c74:	0030      	movs	r0, r6
 8000c76:	f001 f9ab 	bl	8001fd0 <__clzsi2>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	3b0b      	subs	r3, #11
 8000c7e:	2b1c      	cmp	r3, #28
 8000c80:	dd00      	ble.n	8000c84 <__aeabi_ddiv+0x180>
 8000c82:	e17b      	b.n	8000f7c <__aeabi_ddiv+0x478>
 8000c84:	221d      	movs	r2, #29
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	465a      	mov	r2, fp
 8000c8a:	0001      	movs	r1, r0
 8000c8c:	40da      	lsrs	r2, r3
 8000c8e:	3908      	subs	r1, #8
 8000c90:	408e      	lsls	r6, r1
 8000c92:	0013      	movs	r3, r2
 8000c94:	465f      	mov	r7, fp
 8000c96:	4333      	orrs	r3, r6
 8000c98:	4699      	mov	r9, r3
 8000c9a:	408f      	lsls	r7, r1
 8000c9c:	4b3f      	ldr	r3, [pc, #252]	; (8000d9c <__aeabi_ddiv+0x298>)
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	1a1b      	subs	r3, r3, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9302      	str	r3, [sp, #8]
 8000ca8:	e752      	b.n	8000b50 <__aeabi_ddiv+0x4c>
 8000caa:	4641      	mov	r1, r8
 8000cac:	4653      	mov	r3, sl
 8000cae:	430b      	orrs	r3, r1
 8000cb0:	493b      	ldr	r1, [pc, #236]	; (8000da0 <__aeabi_ddiv+0x29c>)
 8000cb2:	469b      	mov	fp, r3
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	9b00      	ldr	r3, [sp, #0]
 8000cb8:	4463      	add	r3, ip
 8000cba:	9300      	str	r3, [sp, #0]
 8000cbc:	465b      	mov	r3, fp
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d13b      	bne.n	8000d3a <__aeabi_ddiv+0x236>
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	431e      	orrs	r6, r3
 8000cc8:	2102      	movs	r1, #2
 8000cca:	e761      	b.n	8000b90 <__aeabi_ddiv+0x8c>
 8000ccc:	4643      	mov	r3, r8
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	d037      	beq.n	8000d44 <__aeabi_ddiv+0x240>
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_ddiv+0x1d8>
 8000cda:	e162      	b.n	8000fa2 <__aeabi_ddiv+0x49e>
 8000cdc:	4640      	mov	r0, r8
 8000cde:	f001 f977 	bl	8001fd0 <__clzsi2>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	3b0b      	subs	r3, #11
 8000ce6:	2b1c      	cmp	r3, #28
 8000ce8:	dd00      	ble.n	8000cec <__aeabi_ddiv+0x1e8>
 8000cea:	e153      	b.n	8000f94 <__aeabi_ddiv+0x490>
 8000cec:	0002      	movs	r2, r0
 8000cee:	4641      	mov	r1, r8
 8000cf0:	3a08      	subs	r2, #8
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	4688      	mov	r8, r1
 8000cf6:	211d      	movs	r1, #29
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	4651      	mov	r1, sl
 8000cfc:	40d9      	lsrs	r1, r3
 8000cfe:	000b      	movs	r3, r1
 8000d00:	4641      	mov	r1, r8
 8000d02:	430b      	orrs	r3, r1
 8000d04:	469b      	mov	fp, r3
 8000d06:	4653      	mov	r3, sl
 8000d08:	4093      	lsls	r3, r2
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	9b00      	ldr	r3, [sp, #0]
 8000d0e:	4925      	ldr	r1, [pc, #148]	; (8000da4 <__aeabi_ddiv+0x2a0>)
 8000d10:	469c      	mov	ip, r3
 8000d12:	4460      	add	r0, ip
 8000d14:	0003      	movs	r3, r0
 8000d16:	468c      	mov	ip, r1
 8000d18:	4463      	add	r3, ip
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e737      	b.n	8000b90 <__aeabi_ddiv+0x8c>
 8000d20:	2303      	movs	r3, #3
 8000d22:	46b1      	mov	r9, r6
 8000d24:	9000      	str	r0, [sp, #0]
 8000d26:	260c      	movs	r6, #12
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	e711      	b.n	8000b50 <__aeabi_ddiv+0x4c>
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	3301      	adds	r3, #1
 8000d32:	2604      	movs	r6, #4
 8000d34:	2700      	movs	r7, #0
 8000d36:	9302      	str	r3, [sp, #8]
 8000d38:	e70a      	b.n	8000b50 <__aeabi_ddiv+0x4c>
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	46c3      	mov	fp, r8
 8000d3e:	431e      	orrs	r6, r3
 8000d40:	2103      	movs	r1, #3
 8000d42:	e725      	b.n	8000b90 <__aeabi_ddiv+0x8c>
 8000d44:	3301      	adds	r3, #1
 8000d46:	431e      	orrs	r6, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	e720      	b.n	8000b90 <__aeabi_ddiv+0x8c>
 8000d4e:	2300      	movs	r3, #0
 8000d50:	469a      	mov	sl, r3
 8000d52:	2380      	movs	r3, #128	; 0x80
 8000d54:	2700      	movs	r7, #0
 8000d56:	031b      	lsls	r3, r3, #12
 8000d58:	4a09      	ldr	r2, [pc, #36]	; (8000d80 <__aeabi_ddiv+0x27c>)
 8000d5a:	e761      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	4649      	mov	r1, r9
 8000d60:	031b      	lsls	r3, r3, #12
 8000d62:	4219      	tst	r1, r3
 8000d64:	d100      	bne.n	8000d68 <__aeabi_ddiv+0x264>
 8000d66:	e0e2      	b.n	8000f2e <__aeabi_ddiv+0x42a>
 8000d68:	4659      	mov	r1, fp
 8000d6a:	4219      	tst	r1, r3
 8000d6c:	d000      	beq.n	8000d70 <__aeabi_ddiv+0x26c>
 8000d6e:	e0de      	b.n	8000f2e <__aeabi_ddiv+0x42a>
 8000d70:	430b      	orrs	r3, r1
 8000d72:	031b      	lsls	r3, r3, #12
 8000d74:	0017      	movs	r7, r2
 8000d76:	0b1b      	lsrs	r3, r3, #12
 8000d78:	46a2      	mov	sl, r4
 8000d7a:	4a01      	ldr	r2, [pc, #4]	; (8000d80 <__aeabi_ddiv+0x27c>)
 8000d7c:	e750      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	000007ff 	.word	0x000007ff
 8000d84:	fffffc01 	.word	0xfffffc01
 8000d88:	0800896c 	.word	0x0800896c
 8000d8c:	000003ff 	.word	0x000003ff
 8000d90:	feffffff 	.word	0xfeffffff
 8000d94:	000007fe 	.word	0x000007fe
 8000d98:	800fffff 	.word	0x800fffff
 8000d9c:	fffffc0d 	.word	0xfffffc0d
 8000da0:	fffff801 	.word	0xfffff801
 8000da4:	000003f3 	.word	0x000003f3
 8000da8:	45d9      	cmp	r9, fp
 8000daa:	d900      	bls.n	8000dae <__aeabi_ddiv+0x2aa>
 8000dac:	e0cb      	b.n	8000f46 <__aeabi_ddiv+0x442>
 8000dae:	d100      	bne.n	8000db2 <__aeabi_ddiv+0x2ae>
 8000db0:	e0c6      	b.n	8000f40 <__aeabi_ddiv+0x43c>
 8000db2:	003c      	movs	r4, r7
 8000db4:	4648      	mov	r0, r9
 8000db6:	2700      	movs	r7, #0
 8000db8:	9b00      	ldr	r3, [sp, #0]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	465b      	mov	r3, fp
 8000dc0:	0e16      	lsrs	r6, r2, #24
 8000dc2:	021b      	lsls	r3, r3, #8
 8000dc4:	431e      	orrs	r6, r3
 8000dc6:	0213      	lsls	r3, r2, #8
 8000dc8:	4698      	mov	r8, r3
 8000dca:	0433      	lsls	r3, r6, #16
 8000dcc:	0c1b      	lsrs	r3, r3, #16
 8000dce:	4699      	mov	r9, r3
 8000dd0:	0c31      	lsrs	r1, r6, #16
 8000dd2:	9101      	str	r1, [sp, #4]
 8000dd4:	f7ff fa2e 	bl	8000234 <__aeabi_uidivmod>
 8000dd8:	464a      	mov	r2, r9
 8000dda:	4342      	muls	r2, r0
 8000ddc:	040b      	lsls	r3, r1, #16
 8000dde:	0c21      	lsrs	r1, r4, #16
 8000de0:	0005      	movs	r5, r0
 8000de2:	4319      	orrs	r1, r3
 8000de4:	428a      	cmp	r2, r1
 8000de6:	d907      	bls.n	8000df8 <__aeabi_ddiv+0x2f4>
 8000de8:	1989      	adds	r1, r1, r6
 8000dea:	3d01      	subs	r5, #1
 8000dec:	428e      	cmp	r6, r1
 8000dee:	d803      	bhi.n	8000df8 <__aeabi_ddiv+0x2f4>
 8000df0:	428a      	cmp	r2, r1
 8000df2:	d901      	bls.n	8000df8 <__aeabi_ddiv+0x2f4>
 8000df4:	1e85      	subs	r5, r0, #2
 8000df6:	1989      	adds	r1, r1, r6
 8000df8:	1a88      	subs	r0, r1, r2
 8000dfa:	9901      	ldr	r1, [sp, #4]
 8000dfc:	f7ff fa1a 	bl	8000234 <__aeabi_uidivmod>
 8000e00:	0409      	lsls	r1, r1, #16
 8000e02:	468c      	mov	ip, r1
 8000e04:	464a      	mov	r2, r9
 8000e06:	0421      	lsls	r1, r4, #16
 8000e08:	4664      	mov	r4, ip
 8000e0a:	4342      	muls	r2, r0
 8000e0c:	0c09      	lsrs	r1, r1, #16
 8000e0e:	0003      	movs	r3, r0
 8000e10:	4321      	orrs	r1, r4
 8000e12:	428a      	cmp	r2, r1
 8000e14:	d904      	bls.n	8000e20 <__aeabi_ddiv+0x31c>
 8000e16:	1989      	adds	r1, r1, r6
 8000e18:	3b01      	subs	r3, #1
 8000e1a:	428e      	cmp	r6, r1
 8000e1c:	d800      	bhi.n	8000e20 <__aeabi_ddiv+0x31c>
 8000e1e:	e0f1      	b.n	8001004 <__aeabi_ddiv+0x500>
 8000e20:	042d      	lsls	r5, r5, #16
 8000e22:	431d      	orrs	r5, r3
 8000e24:	46ab      	mov	fp, r5
 8000e26:	4643      	mov	r3, r8
 8000e28:	1a89      	subs	r1, r1, r2
 8000e2a:	4642      	mov	r2, r8
 8000e2c:	0c28      	lsrs	r0, r5, #16
 8000e2e:	0412      	lsls	r2, r2, #16
 8000e30:	0c1d      	lsrs	r5, r3, #16
 8000e32:	465b      	mov	r3, fp
 8000e34:	0c14      	lsrs	r4, r2, #16
 8000e36:	0022      	movs	r2, r4
 8000e38:	041b      	lsls	r3, r3, #16
 8000e3a:	0c1b      	lsrs	r3, r3, #16
 8000e3c:	435a      	muls	r2, r3
 8000e3e:	9403      	str	r4, [sp, #12]
 8000e40:	436b      	muls	r3, r5
 8000e42:	4344      	muls	r4, r0
 8000e44:	9502      	str	r5, [sp, #8]
 8000e46:	4368      	muls	r0, r5
 8000e48:	191b      	adds	r3, r3, r4
 8000e4a:	0c15      	lsrs	r5, r2, #16
 8000e4c:	18eb      	adds	r3, r5, r3
 8000e4e:	429c      	cmp	r4, r3
 8000e50:	d903      	bls.n	8000e5a <__aeabi_ddiv+0x356>
 8000e52:	2480      	movs	r4, #128	; 0x80
 8000e54:	0264      	lsls	r4, r4, #9
 8000e56:	46a4      	mov	ip, r4
 8000e58:	4460      	add	r0, ip
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	0415      	lsls	r5, r2, #16
 8000e5e:	041b      	lsls	r3, r3, #16
 8000e60:	0c2d      	lsrs	r5, r5, #16
 8000e62:	1820      	adds	r0, r4, r0
 8000e64:	195d      	adds	r5, r3, r5
 8000e66:	4281      	cmp	r1, r0
 8000e68:	d377      	bcc.n	8000f5a <__aeabi_ddiv+0x456>
 8000e6a:	d073      	beq.n	8000f54 <__aeabi_ddiv+0x450>
 8000e6c:	1a0c      	subs	r4, r1, r0
 8000e6e:	4aa2      	ldr	r2, [pc, #648]	; (80010f8 <__aeabi_ddiv+0x5f4>)
 8000e70:	1b7d      	subs	r5, r7, r5
 8000e72:	42af      	cmp	r7, r5
 8000e74:	41bf      	sbcs	r7, r7
 8000e76:	4694      	mov	ip, r2
 8000e78:	9b00      	ldr	r3, [sp, #0]
 8000e7a:	427f      	negs	r7, r7
 8000e7c:	4463      	add	r3, ip
 8000e7e:	1be0      	subs	r0, r4, r7
 8000e80:	001c      	movs	r4, r3
 8000e82:	4286      	cmp	r6, r0
 8000e84:	d100      	bne.n	8000e88 <__aeabi_ddiv+0x384>
 8000e86:	e0db      	b.n	8001040 <__aeabi_ddiv+0x53c>
 8000e88:	9901      	ldr	r1, [sp, #4]
 8000e8a:	f7ff f9d3 	bl	8000234 <__aeabi_uidivmod>
 8000e8e:	464a      	mov	r2, r9
 8000e90:	4342      	muls	r2, r0
 8000e92:	040b      	lsls	r3, r1, #16
 8000e94:	0c29      	lsrs	r1, r5, #16
 8000e96:	0007      	movs	r7, r0
 8000e98:	4319      	orrs	r1, r3
 8000e9a:	428a      	cmp	r2, r1
 8000e9c:	d907      	bls.n	8000eae <__aeabi_ddiv+0x3aa>
 8000e9e:	1989      	adds	r1, r1, r6
 8000ea0:	3f01      	subs	r7, #1
 8000ea2:	428e      	cmp	r6, r1
 8000ea4:	d803      	bhi.n	8000eae <__aeabi_ddiv+0x3aa>
 8000ea6:	428a      	cmp	r2, r1
 8000ea8:	d901      	bls.n	8000eae <__aeabi_ddiv+0x3aa>
 8000eaa:	1e87      	subs	r7, r0, #2
 8000eac:	1989      	adds	r1, r1, r6
 8000eae:	1a88      	subs	r0, r1, r2
 8000eb0:	9901      	ldr	r1, [sp, #4]
 8000eb2:	f7ff f9bf 	bl	8000234 <__aeabi_uidivmod>
 8000eb6:	0409      	lsls	r1, r1, #16
 8000eb8:	464a      	mov	r2, r9
 8000eba:	4689      	mov	r9, r1
 8000ebc:	0429      	lsls	r1, r5, #16
 8000ebe:	464d      	mov	r5, r9
 8000ec0:	4342      	muls	r2, r0
 8000ec2:	0c09      	lsrs	r1, r1, #16
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	4329      	orrs	r1, r5
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	d907      	bls.n	8000edc <__aeabi_ddiv+0x3d8>
 8000ecc:	1989      	adds	r1, r1, r6
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	428e      	cmp	r6, r1
 8000ed2:	d803      	bhi.n	8000edc <__aeabi_ddiv+0x3d8>
 8000ed4:	428a      	cmp	r2, r1
 8000ed6:	d901      	bls.n	8000edc <__aeabi_ddiv+0x3d8>
 8000ed8:	1e83      	subs	r3, r0, #2
 8000eda:	1989      	adds	r1, r1, r6
 8000edc:	043f      	lsls	r7, r7, #16
 8000ede:	1a89      	subs	r1, r1, r2
 8000ee0:	003a      	movs	r2, r7
 8000ee2:	9f03      	ldr	r7, [sp, #12]
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	0038      	movs	r0, r7
 8000ee8:	0413      	lsls	r3, r2, #16
 8000eea:	0c1b      	lsrs	r3, r3, #16
 8000eec:	4358      	muls	r0, r3
 8000eee:	4681      	mov	r9, r0
 8000ef0:	9802      	ldr	r0, [sp, #8]
 8000ef2:	0c15      	lsrs	r5, r2, #16
 8000ef4:	436f      	muls	r7, r5
 8000ef6:	4343      	muls	r3, r0
 8000ef8:	4345      	muls	r5, r0
 8000efa:	4648      	mov	r0, r9
 8000efc:	0c00      	lsrs	r0, r0, #16
 8000efe:	4684      	mov	ip, r0
 8000f00:	19db      	adds	r3, r3, r7
 8000f02:	4463      	add	r3, ip
 8000f04:	429f      	cmp	r7, r3
 8000f06:	d903      	bls.n	8000f10 <__aeabi_ddiv+0x40c>
 8000f08:	2080      	movs	r0, #128	; 0x80
 8000f0a:	0240      	lsls	r0, r0, #9
 8000f0c:	4684      	mov	ip, r0
 8000f0e:	4465      	add	r5, ip
 8000f10:	4648      	mov	r0, r9
 8000f12:	0c1f      	lsrs	r7, r3, #16
 8000f14:	0400      	lsls	r0, r0, #16
 8000f16:	041b      	lsls	r3, r3, #16
 8000f18:	0c00      	lsrs	r0, r0, #16
 8000f1a:	197d      	adds	r5, r7, r5
 8000f1c:	1818      	adds	r0, r3, r0
 8000f1e:	42a9      	cmp	r1, r5
 8000f20:	d200      	bcs.n	8000f24 <__aeabi_ddiv+0x420>
 8000f22:	e084      	b.n	800102e <__aeabi_ddiv+0x52a>
 8000f24:	d100      	bne.n	8000f28 <__aeabi_ddiv+0x424>
 8000f26:	e07f      	b.n	8001028 <__aeabi_ddiv+0x524>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	431a      	orrs	r2, r3
 8000f2c:	e657      	b.n	8000bde <__aeabi_ddiv+0xda>
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	464a      	mov	r2, r9
 8000f32:	031b      	lsls	r3, r3, #12
 8000f34:	4313      	orrs	r3, r2
 8000f36:	031b      	lsls	r3, r3, #12
 8000f38:	0b1b      	lsrs	r3, r3, #12
 8000f3a:	46aa      	mov	sl, r5
 8000f3c:	4a6f      	ldr	r2, [pc, #444]	; (80010fc <__aeabi_ddiv+0x5f8>)
 8000f3e:	e66f      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8000f40:	42ba      	cmp	r2, r7
 8000f42:	d900      	bls.n	8000f46 <__aeabi_ddiv+0x442>
 8000f44:	e735      	b.n	8000db2 <__aeabi_ddiv+0x2ae>
 8000f46:	464b      	mov	r3, r9
 8000f48:	07dc      	lsls	r4, r3, #31
 8000f4a:	0858      	lsrs	r0, r3, #1
 8000f4c:	087b      	lsrs	r3, r7, #1
 8000f4e:	431c      	orrs	r4, r3
 8000f50:	07ff      	lsls	r7, r7, #31
 8000f52:	e734      	b.n	8000dbe <__aeabi_ddiv+0x2ba>
 8000f54:	2400      	movs	r4, #0
 8000f56:	42af      	cmp	r7, r5
 8000f58:	d289      	bcs.n	8000e6e <__aeabi_ddiv+0x36a>
 8000f5a:	4447      	add	r7, r8
 8000f5c:	4547      	cmp	r7, r8
 8000f5e:	41a4      	sbcs	r4, r4
 8000f60:	465b      	mov	r3, fp
 8000f62:	4264      	negs	r4, r4
 8000f64:	19a4      	adds	r4, r4, r6
 8000f66:	1864      	adds	r4, r4, r1
 8000f68:	3b01      	subs	r3, #1
 8000f6a:	42a6      	cmp	r6, r4
 8000f6c:	d21e      	bcs.n	8000fac <__aeabi_ddiv+0x4a8>
 8000f6e:	42a0      	cmp	r0, r4
 8000f70:	d86d      	bhi.n	800104e <__aeabi_ddiv+0x54a>
 8000f72:	d100      	bne.n	8000f76 <__aeabi_ddiv+0x472>
 8000f74:	e0b6      	b.n	80010e4 <__aeabi_ddiv+0x5e0>
 8000f76:	1a24      	subs	r4, r4, r0
 8000f78:	469b      	mov	fp, r3
 8000f7a:	e778      	b.n	8000e6e <__aeabi_ddiv+0x36a>
 8000f7c:	0003      	movs	r3, r0
 8000f7e:	465a      	mov	r2, fp
 8000f80:	3b28      	subs	r3, #40	; 0x28
 8000f82:	409a      	lsls	r2, r3
 8000f84:	2700      	movs	r7, #0
 8000f86:	4691      	mov	r9, r2
 8000f88:	e688      	b.n	8000c9c <__aeabi_ddiv+0x198>
 8000f8a:	4658      	mov	r0, fp
 8000f8c:	f001 f820 	bl	8001fd0 <__clzsi2>
 8000f90:	3020      	adds	r0, #32
 8000f92:	e672      	b.n	8000c7a <__aeabi_ddiv+0x176>
 8000f94:	0003      	movs	r3, r0
 8000f96:	4652      	mov	r2, sl
 8000f98:	3b28      	subs	r3, #40	; 0x28
 8000f9a:	409a      	lsls	r2, r3
 8000f9c:	4693      	mov	fp, r2
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	e6b4      	b.n	8000d0c <__aeabi_ddiv+0x208>
 8000fa2:	4650      	mov	r0, sl
 8000fa4:	f001 f814 	bl	8001fd0 <__clzsi2>
 8000fa8:	3020      	adds	r0, #32
 8000faa:	e69a      	b.n	8000ce2 <__aeabi_ddiv+0x1de>
 8000fac:	42a6      	cmp	r6, r4
 8000fae:	d1e2      	bne.n	8000f76 <__aeabi_ddiv+0x472>
 8000fb0:	45b8      	cmp	r8, r7
 8000fb2:	d9dc      	bls.n	8000f6e <__aeabi_ddiv+0x46a>
 8000fb4:	1a34      	subs	r4, r6, r0
 8000fb6:	469b      	mov	fp, r3
 8000fb8:	e759      	b.n	8000e6e <__aeabi_ddiv+0x36a>
 8000fba:	2b1f      	cmp	r3, #31
 8000fbc:	dc65      	bgt.n	800108a <__aeabi_ddiv+0x586>
 8000fbe:	4c50      	ldr	r4, [pc, #320]	; (8001100 <__aeabi_ddiv+0x5fc>)
 8000fc0:	9900      	ldr	r1, [sp, #0]
 8000fc2:	46a4      	mov	ip, r4
 8000fc4:	465c      	mov	r4, fp
 8000fc6:	4461      	add	r1, ip
 8000fc8:	0008      	movs	r0, r1
 8000fca:	408c      	lsls	r4, r1
 8000fcc:	0011      	movs	r1, r2
 8000fce:	4082      	lsls	r2, r0
 8000fd0:	40d9      	lsrs	r1, r3
 8000fd2:	1e50      	subs	r0, r2, #1
 8000fd4:	4182      	sbcs	r2, r0
 8000fd6:	430c      	orrs	r4, r1
 8000fd8:	4314      	orrs	r4, r2
 8000fda:	465a      	mov	r2, fp
 8000fdc:	40da      	lsrs	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	0762      	lsls	r2, r4, #29
 8000fe2:	d009      	beq.n	8000ff8 <__aeabi_ddiv+0x4f4>
 8000fe4:	220f      	movs	r2, #15
 8000fe6:	4022      	ands	r2, r4
 8000fe8:	2a04      	cmp	r2, #4
 8000fea:	d005      	beq.n	8000ff8 <__aeabi_ddiv+0x4f4>
 8000fec:	0022      	movs	r2, r4
 8000fee:	1d14      	adds	r4, r2, #4
 8000ff0:	4294      	cmp	r4, r2
 8000ff2:	4189      	sbcs	r1, r1
 8000ff4:	4249      	negs	r1, r1
 8000ff6:	185b      	adds	r3, r3, r1
 8000ff8:	021a      	lsls	r2, r3, #8
 8000ffa:	d562      	bpl.n	80010c2 <__aeabi_ddiv+0x5be>
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2300      	movs	r3, #0
 8001000:	2700      	movs	r7, #0
 8001002:	e60d      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 8001004:	428a      	cmp	r2, r1
 8001006:	d800      	bhi.n	800100a <__aeabi_ddiv+0x506>
 8001008:	e70a      	b.n	8000e20 <__aeabi_ddiv+0x31c>
 800100a:	1e83      	subs	r3, r0, #2
 800100c:	1989      	adds	r1, r1, r6
 800100e:	e707      	b.n	8000e20 <__aeabi_ddiv+0x31c>
 8001010:	230f      	movs	r3, #15
 8001012:	4013      	ands	r3, r2
 8001014:	2b04      	cmp	r3, #4
 8001016:	d100      	bne.n	800101a <__aeabi_ddiv+0x516>
 8001018:	e5e6      	b.n	8000be8 <__aeabi_ddiv+0xe4>
 800101a:	1d17      	adds	r7, r2, #4
 800101c:	4297      	cmp	r7, r2
 800101e:	4192      	sbcs	r2, r2
 8001020:	4253      	negs	r3, r2
 8001022:	449b      	add	fp, r3
 8001024:	08fa      	lsrs	r2, r7, #3
 8001026:	e5e0      	b.n	8000bea <__aeabi_ddiv+0xe6>
 8001028:	2800      	cmp	r0, #0
 800102a:	d100      	bne.n	800102e <__aeabi_ddiv+0x52a>
 800102c:	e5d7      	b.n	8000bde <__aeabi_ddiv+0xda>
 800102e:	1871      	adds	r1, r6, r1
 8001030:	1e53      	subs	r3, r2, #1
 8001032:	42b1      	cmp	r1, r6
 8001034:	d327      	bcc.n	8001086 <__aeabi_ddiv+0x582>
 8001036:	42a9      	cmp	r1, r5
 8001038:	d315      	bcc.n	8001066 <__aeabi_ddiv+0x562>
 800103a:	d058      	beq.n	80010ee <__aeabi_ddiv+0x5ea>
 800103c:	001a      	movs	r2, r3
 800103e:	e773      	b.n	8000f28 <__aeabi_ddiv+0x424>
 8001040:	2b00      	cmp	r3, #0
 8001042:	dc00      	bgt.n	8001046 <__aeabi_ddiv+0x542>
 8001044:	e604      	b.n	8000c50 <__aeabi_ddiv+0x14c>
 8001046:	2301      	movs	r3, #1
 8001048:	2200      	movs	r2, #0
 800104a:	449b      	add	fp, r3
 800104c:	e5cd      	b.n	8000bea <__aeabi_ddiv+0xe6>
 800104e:	2302      	movs	r3, #2
 8001050:	4447      	add	r7, r8
 8001052:	4547      	cmp	r7, r8
 8001054:	4189      	sbcs	r1, r1
 8001056:	425b      	negs	r3, r3
 8001058:	469c      	mov	ip, r3
 800105a:	4249      	negs	r1, r1
 800105c:	1989      	adds	r1, r1, r6
 800105e:	190c      	adds	r4, r1, r4
 8001060:	44e3      	add	fp, ip
 8001062:	1a24      	subs	r4, r4, r0
 8001064:	e703      	b.n	8000e6e <__aeabi_ddiv+0x36a>
 8001066:	4643      	mov	r3, r8
 8001068:	005f      	lsls	r7, r3, #1
 800106a:	4547      	cmp	r7, r8
 800106c:	419b      	sbcs	r3, r3
 800106e:	46b8      	mov	r8, r7
 8001070:	425b      	negs	r3, r3
 8001072:	199e      	adds	r6, r3, r6
 8001074:	3a02      	subs	r2, #2
 8001076:	1989      	adds	r1, r1, r6
 8001078:	42a9      	cmp	r1, r5
 800107a:	d000      	beq.n	800107e <__aeabi_ddiv+0x57a>
 800107c:	e754      	b.n	8000f28 <__aeabi_ddiv+0x424>
 800107e:	4540      	cmp	r0, r8
 8001080:	d000      	beq.n	8001084 <__aeabi_ddiv+0x580>
 8001082:	e751      	b.n	8000f28 <__aeabi_ddiv+0x424>
 8001084:	e5ab      	b.n	8000bde <__aeabi_ddiv+0xda>
 8001086:	001a      	movs	r2, r3
 8001088:	e7f6      	b.n	8001078 <__aeabi_ddiv+0x574>
 800108a:	211f      	movs	r1, #31
 800108c:	465f      	mov	r7, fp
 800108e:	4249      	negs	r1, r1
 8001090:	1b0c      	subs	r4, r1, r4
 8001092:	40e7      	lsrs	r7, r4
 8001094:	2b20      	cmp	r3, #32
 8001096:	d007      	beq.n	80010a8 <__aeabi_ddiv+0x5a4>
 8001098:	491a      	ldr	r1, [pc, #104]	; (8001104 <__aeabi_ddiv+0x600>)
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	468c      	mov	ip, r1
 800109e:	4463      	add	r3, ip
 80010a0:	0018      	movs	r0, r3
 80010a2:	465b      	mov	r3, fp
 80010a4:	4083      	lsls	r3, r0
 80010a6:	431a      	orrs	r2, r3
 80010a8:	1e50      	subs	r0, r2, #1
 80010aa:	4182      	sbcs	r2, r0
 80010ac:	433a      	orrs	r2, r7
 80010ae:	2707      	movs	r7, #7
 80010b0:	2300      	movs	r3, #0
 80010b2:	4017      	ands	r7, r2
 80010b4:	d009      	beq.n	80010ca <__aeabi_ddiv+0x5c6>
 80010b6:	210f      	movs	r1, #15
 80010b8:	2300      	movs	r3, #0
 80010ba:	4011      	ands	r1, r2
 80010bc:	0014      	movs	r4, r2
 80010be:	2904      	cmp	r1, #4
 80010c0:	d195      	bne.n	8000fee <__aeabi_ddiv+0x4ea>
 80010c2:	0022      	movs	r2, r4
 80010c4:	075f      	lsls	r7, r3, #29
 80010c6:	025b      	lsls	r3, r3, #9
 80010c8:	0b1b      	lsrs	r3, r3, #12
 80010ca:	08d2      	lsrs	r2, r2, #3
 80010cc:	4317      	orrs	r7, r2
 80010ce:	2200      	movs	r2, #0
 80010d0:	e5a6      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	4659      	mov	r1, fp
 80010d6:	031b      	lsls	r3, r3, #12
 80010d8:	430b      	orrs	r3, r1
 80010da:	031b      	lsls	r3, r3, #12
 80010dc:	0017      	movs	r7, r2
 80010de:	0b1b      	lsrs	r3, r3, #12
 80010e0:	4a06      	ldr	r2, [pc, #24]	; (80010fc <__aeabi_ddiv+0x5f8>)
 80010e2:	e59d      	b.n	8000c20 <__aeabi_ddiv+0x11c>
 80010e4:	42bd      	cmp	r5, r7
 80010e6:	d8b2      	bhi.n	800104e <__aeabi_ddiv+0x54a>
 80010e8:	469b      	mov	fp, r3
 80010ea:	2400      	movs	r4, #0
 80010ec:	e6bf      	b.n	8000e6e <__aeabi_ddiv+0x36a>
 80010ee:	4580      	cmp	r8, r0
 80010f0:	d3b9      	bcc.n	8001066 <__aeabi_ddiv+0x562>
 80010f2:	001a      	movs	r2, r3
 80010f4:	e7c3      	b.n	800107e <__aeabi_ddiv+0x57a>
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	000003ff 	.word	0x000003ff
 80010fc:	000007ff 	.word	0x000007ff
 8001100:	0000041e 	.word	0x0000041e
 8001104:	0000043e 	.word	0x0000043e

08001108 <__eqdf2>:
 8001108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110a:	464f      	mov	r7, r9
 800110c:	4646      	mov	r6, r8
 800110e:	46d6      	mov	lr, sl
 8001110:	4684      	mov	ip, r0
 8001112:	b5c0      	push	{r6, r7, lr}
 8001114:	4680      	mov	r8, r0
 8001116:	4e19      	ldr	r6, [pc, #100]	; (800117c <__eqdf2+0x74>)
 8001118:	0318      	lsls	r0, r3, #12
 800111a:	030f      	lsls	r7, r1, #12
 800111c:	004d      	lsls	r5, r1, #1
 800111e:	0b00      	lsrs	r0, r0, #12
 8001120:	005c      	lsls	r4, r3, #1
 8001122:	4682      	mov	sl, r0
 8001124:	0b3f      	lsrs	r7, r7, #12
 8001126:	0d6d      	lsrs	r5, r5, #21
 8001128:	0fc9      	lsrs	r1, r1, #31
 800112a:	4691      	mov	r9, r2
 800112c:	0d64      	lsrs	r4, r4, #21
 800112e:	0fdb      	lsrs	r3, r3, #31
 8001130:	2001      	movs	r0, #1
 8001132:	42b5      	cmp	r5, r6
 8001134:	d00a      	beq.n	800114c <__eqdf2+0x44>
 8001136:	42b4      	cmp	r4, r6
 8001138:	d003      	beq.n	8001142 <__eqdf2+0x3a>
 800113a:	42a5      	cmp	r5, r4
 800113c:	d101      	bne.n	8001142 <__eqdf2+0x3a>
 800113e:	4557      	cmp	r7, sl
 8001140:	d00c      	beq.n	800115c <__eqdf2+0x54>
 8001142:	bc1c      	pop	{r2, r3, r4}
 8001144:	4690      	mov	r8, r2
 8001146:	4699      	mov	r9, r3
 8001148:	46a2      	mov	sl, r4
 800114a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800114c:	4666      	mov	r6, ip
 800114e:	433e      	orrs	r6, r7
 8001150:	d1f7      	bne.n	8001142 <__eqdf2+0x3a>
 8001152:	42ac      	cmp	r4, r5
 8001154:	d1f5      	bne.n	8001142 <__eqdf2+0x3a>
 8001156:	4654      	mov	r4, sl
 8001158:	4314      	orrs	r4, r2
 800115a:	d1f2      	bne.n	8001142 <__eqdf2+0x3a>
 800115c:	2001      	movs	r0, #1
 800115e:	45c8      	cmp	r8, r9
 8001160:	d1ef      	bne.n	8001142 <__eqdf2+0x3a>
 8001162:	4299      	cmp	r1, r3
 8001164:	d007      	beq.n	8001176 <__eqdf2+0x6e>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d1eb      	bne.n	8001142 <__eqdf2+0x3a>
 800116a:	4663      	mov	r3, ip
 800116c:	431f      	orrs	r7, r3
 800116e:	0038      	movs	r0, r7
 8001170:	1e47      	subs	r7, r0, #1
 8001172:	41b8      	sbcs	r0, r7
 8001174:	e7e5      	b.n	8001142 <__eqdf2+0x3a>
 8001176:	2000      	movs	r0, #0
 8001178:	e7e3      	b.n	8001142 <__eqdf2+0x3a>
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	000007ff 	.word	0x000007ff

08001180 <__gedf2>:
 8001180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001182:	464f      	mov	r7, r9
 8001184:	4646      	mov	r6, r8
 8001186:	46d6      	mov	lr, sl
 8001188:	004d      	lsls	r5, r1, #1
 800118a:	b5c0      	push	{r6, r7, lr}
 800118c:	030e      	lsls	r6, r1, #12
 800118e:	0fc9      	lsrs	r1, r1, #31
 8001190:	468a      	mov	sl, r1
 8001192:	492c      	ldr	r1, [pc, #176]	; (8001244 <__gedf2+0xc4>)
 8001194:	031f      	lsls	r7, r3, #12
 8001196:	005c      	lsls	r4, r3, #1
 8001198:	4680      	mov	r8, r0
 800119a:	0b36      	lsrs	r6, r6, #12
 800119c:	0d6d      	lsrs	r5, r5, #21
 800119e:	4691      	mov	r9, r2
 80011a0:	0b3f      	lsrs	r7, r7, #12
 80011a2:	0d64      	lsrs	r4, r4, #21
 80011a4:	0fdb      	lsrs	r3, r3, #31
 80011a6:	428d      	cmp	r5, r1
 80011a8:	d01e      	beq.n	80011e8 <__gedf2+0x68>
 80011aa:	428c      	cmp	r4, r1
 80011ac:	d016      	beq.n	80011dc <__gedf2+0x5c>
 80011ae:	2d00      	cmp	r5, #0
 80011b0:	d11e      	bne.n	80011f0 <__gedf2+0x70>
 80011b2:	4330      	orrs	r0, r6
 80011b4:	4684      	mov	ip, r0
 80011b6:	2c00      	cmp	r4, #0
 80011b8:	d101      	bne.n	80011be <__gedf2+0x3e>
 80011ba:	433a      	orrs	r2, r7
 80011bc:	d023      	beq.n	8001206 <__gedf2+0x86>
 80011be:	4662      	mov	r2, ip
 80011c0:	2a00      	cmp	r2, #0
 80011c2:	d01a      	beq.n	80011fa <__gedf2+0x7a>
 80011c4:	459a      	cmp	sl, r3
 80011c6:	d029      	beq.n	800121c <__gedf2+0x9c>
 80011c8:	4651      	mov	r1, sl
 80011ca:	2002      	movs	r0, #2
 80011cc:	3901      	subs	r1, #1
 80011ce:	4008      	ands	r0, r1
 80011d0:	3801      	subs	r0, #1
 80011d2:	bc1c      	pop	{r2, r3, r4}
 80011d4:	4690      	mov	r8, r2
 80011d6:	4699      	mov	r9, r3
 80011d8:	46a2      	mov	sl, r4
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011dc:	0039      	movs	r1, r7
 80011de:	4311      	orrs	r1, r2
 80011e0:	d0e5      	beq.n	80011ae <__gedf2+0x2e>
 80011e2:	2002      	movs	r0, #2
 80011e4:	4240      	negs	r0, r0
 80011e6:	e7f4      	b.n	80011d2 <__gedf2+0x52>
 80011e8:	4330      	orrs	r0, r6
 80011ea:	d1fa      	bne.n	80011e2 <__gedf2+0x62>
 80011ec:	42ac      	cmp	r4, r5
 80011ee:	d00f      	beq.n	8001210 <__gedf2+0x90>
 80011f0:	2c00      	cmp	r4, #0
 80011f2:	d10f      	bne.n	8001214 <__gedf2+0x94>
 80011f4:	433a      	orrs	r2, r7
 80011f6:	d0e7      	beq.n	80011c8 <__gedf2+0x48>
 80011f8:	e00c      	b.n	8001214 <__gedf2+0x94>
 80011fa:	2201      	movs	r2, #1
 80011fc:	3b01      	subs	r3, #1
 80011fe:	4393      	bics	r3, r2
 8001200:	0018      	movs	r0, r3
 8001202:	3001      	adds	r0, #1
 8001204:	e7e5      	b.n	80011d2 <__gedf2+0x52>
 8001206:	4663      	mov	r3, ip
 8001208:	2000      	movs	r0, #0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0e1      	beq.n	80011d2 <__gedf2+0x52>
 800120e:	e7db      	b.n	80011c8 <__gedf2+0x48>
 8001210:	433a      	orrs	r2, r7
 8001212:	d1e6      	bne.n	80011e2 <__gedf2+0x62>
 8001214:	459a      	cmp	sl, r3
 8001216:	d1d7      	bne.n	80011c8 <__gedf2+0x48>
 8001218:	42a5      	cmp	r5, r4
 800121a:	dcd5      	bgt.n	80011c8 <__gedf2+0x48>
 800121c:	42a5      	cmp	r5, r4
 800121e:	db05      	blt.n	800122c <__gedf2+0xac>
 8001220:	42be      	cmp	r6, r7
 8001222:	d8d1      	bhi.n	80011c8 <__gedf2+0x48>
 8001224:	d008      	beq.n	8001238 <__gedf2+0xb8>
 8001226:	2000      	movs	r0, #0
 8001228:	42be      	cmp	r6, r7
 800122a:	d2d2      	bcs.n	80011d2 <__gedf2+0x52>
 800122c:	4650      	mov	r0, sl
 800122e:	2301      	movs	r3, #1
 8001230:	3801      	subs	r0, #1
 8001232:	4398      	bics	r0, r3
 8001234:	3001      	adds	r0, #1
 8001236:	e7cc      	b.n	80011d2 <__gedf2+0x52>
 8001238:	45c8      	cmp	r8, r9
 800123a:	d8c5      	bhi.n	80011c8 <__gedf2+0x48>
 800123c:	2000      	movs	r0, #0
 800123e:	45c8      	cmp	r8, r9
 8001240:	d3f4      	bcc.n	800122c <__gedf2+0xac>
 8001242:	e7c6      	b.n	80011d2 <__gedf2+0x52>
 8001244:	000007ff 	.word	0x000007ff

08001248 <__ledf2>:
 8001248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800124a:	464f      	mov	r7, r9
 800124c:	4646      	mov	r6, r8
 800124e:	46d6      	mov	lr, sl
 8001250:	004d      	lsls	r5, r1, #1
 8001252:	b5c0      	push	{r6, r7, lr}
 8001254:	030e      	lsls	r6, r1, #12
 8001256:	0fc9      	lsrs	r1, r1, #31
 8001258:	468a      	mov	sl, r1
 800125a:	492e      	ldr	r1, [pc, #184]	; (8001314 <__ledf2+0xcc>)
 800125c:	031f      	lsls	r7, r3, #12
 800125e:	005c      	lsls	r4, r3, #1
 8001260:	4680      	mov	r8, r0
 8001262:	0b36      	lsrs	r6, r6, #12
 8001264:	0d6d      	lsrs	r5, r5, #21
 8001266:	4691      	mov	r9, r2
 8001268:	0b3f      	lsrs	r7, r7, #12
 800126a:	0d64      	lsrs	r4, r4, #21
 800126c:	0fdb      	lsrs	r3, r3, #31
 800126e:	428d      	cmp	r5, r1
 8001270:	d018      	beq.n	80012a4 <__ledf2+0x5c>
 8001272:	428c      	cmp	r4, r1
 8001274:	d011      	beq.n	800129a <__ledf2+0x52>
 8001276:	2d00      	cmp	r5, #0
 8001278:	d118      	bne.n	80012ac <__ledf2+0x64>
 800127a:	4330      	orrs	r0, r6
 800127c:	4684      	mov	ip, r0
 800127e:	2c00      	cmp	r4, #0
 8001280:	d11e      	bne.n	80012c0 <__ledf2+0x78>
 8001282:	433a      	orrs	r2, r7
 8001284:	d11c      	bne.n	80012c0 <__ledf2+0x78>
 8001286:	4663      	mov	r3, ip
 8001288:	2000      	movs	r0, #0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d030      	beq.n	80012f0 <__ledf2+0xa8>
 800128e:	4651      	mov	r1, sl
 8001290:	2002      	movs	r0, #2
 8001292:	3901      	subs	r1, #1
 8001294:	4008      	ands	r0, r1
 8001296:	3801      	subs	r0, #1
 8001298:	e02a      	b.n	80012f0 <__ledf2+0xa8>
 800129a:	0039      	movs	r1, r7
 800129c:	4311      	orrs	r1, r2
 800129e:	d0ea      	beq.n	8001276 <__ledf2+0x2e>
 80012a0:	2002      	movs	r0, #2
 80012a2:	e025      	b.n	80012f0 <__ledf2+0xa8>
 80012a4:	4330      	orrs	r0, r6
 80012a6:	d1fb      	bne.n	80012a0 <__ledf2+0x58>
 80012a8:	42ac      	cmp	r4, r5
 80012aa:	d026      	beq.n	80012fa <__ledf2+0xb2>
 80012ac:	2c00      	cmp	r4, #0
 80012ae:	d126      	bne.n	80012fe <__ledf2+0xb6>
 80012b0:	433a      	orrs	r2, r7
 80012b2:	d124      	bne.n	80012fe <__ledf2+0xb6>
 80012b4:	4651      	mov	r1, sl
 80012b6:	2002      	movs	r0, #2
 80012b8:	3901      	subs	r1, #1
 80012ba:	4008      	ands	r0, r1
 80012bc:	3801      	subs	r0, #1
 80012be:	e017      	b.n	80012f0 <__ledf2+0xa8>
 80012c0:	4662      	mov	r2, ip
 80012c2:	2a00      	cmp	r2, #0
 80012c4:	d00f      	beq.n	80012e6 <__ledf2+0x9e>
 80012c6:	459a      	cmp	sl, r3
 80012c8:	d1e1      	bne.n	800128e <__ledf2+0x46>
 80012ca:	42a5      	cmp	r5, r4
 80012cc:	db05      	blt.n	80012da <__ledf2+0x92>
 80012ce:	42be      	cmp	r6, r7
 80012d0:	d8dd      	bhi.n	800128e <__ledf2+0x46>
 80012d2:	d019      	beq.n	8001308 <__ledf2+0xc0>
 80012d4:	2000      	movs	r0, #0
 80012d6:	42be      	cmp	r6, r7
 80012d8:	d20a      	bcs.n	80012f0 <__ledf2+0xa8>
 80012da:	4650      	mov	r0, sl
 80012dc:	2301      	movs	r3, #1
 80012de:	3801      	subs	r0, #1
 80012e0:	4398      	bics	r0, r3
 80012e2:	3001      	adds	r0, #1
 80012e4:	e004      	b.n	80012f0 <__ledf2+0xa8>
 80012e6:	2201      	movs	r2, #1
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4393      	bics	r3, r2
 80012ec:	0018      	movs	r0, r3
 80012ee:	3001      	adds	r0, #1
 80012f0:	bc1c      	pop	{r2, r3, r4}
 80012f2:	4690      	mov	r8, r2
 80012f4:	4699      	mov	r9, r3
 80012f6:	46a2      	mov	sl, r4
 80012f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012fa:	433a      	orrs	r2, r7
 80012fc:	d1d0      	bne.n	80012a0 <__ledf2+0x58>
 80012fe:	459a      	cmp	sl, r3
 8001300:	d1c5      	bne.n	800128e <__ledf2+0x46>
 8001302:	42a5      	cmp	r5, r4
 8001304:	dcc3      	bgt.n	800128e <__ledf2+0x46>
 8001306:	e7e0      	b.n	80012ca <__ledf2+0x82>
 8001308:	45c8      	cmp	r8, r9
 800130a:	d8c0      	bhi.n	800128e <__ledf2+0x46>
 800130c:	2000      	movs	r0, #0
 800130e:	45c8      	cmp	r8, r9
 8001310:	d3e3      	bcc.n	80012da <__ledf2+0x92>
 8001312:	e7ed      	b.n	80012f0 <__ledf2+0xa8>
 8001314:	000007ff 	.word	0x000007ff

08001318 <__aeabi_dmul>:
 8001318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131a:	4657      	mov	r7, sl
 800131c:	46de      	mov	lr, fp
 800131e:	464e      	mov	r6, r9
 8001320:	4645      	mov	r5, r8
 8001322:	b5e0      	push	{r5, r6, r7, lr}
 8001324:	4683      	mov	fp, r0
 8001326:	0006      	movs	r6, r0
 8001328:	030f      	lsls	r7, r1, #12
 800132a:	0048      	lsls	r0, r1, #1
 800132c:	b087      	sub	sp, #28
 800132e:	4692      	mov	sl, r2
 8001330:	001d      	movs	r5, r3
 8001332:	0b3f      	lsrs	r7, r7, #12
 8001334:	0d40      	lsrs	r0, r0, #21
 8001336:	0fcc      	lsrs	r4, r1, #31
 8001338:	2800      	cmp	r0, #0
 800133a:	d100      	bne.n	800133e <__aeabi_dmul+0x26>
 800133c:	e06f      	b.n	800141e <__aeabi_dmul+0x106>
 800133e:	4bde      	ldr	r3, [pc, #888]	; (80016b8 <__aeabi_dmul+0x3a0>)
 8001340:	4298      	cmp	r0, r3
 8001342:	d038      	beq.n	80013b6 <__aeabi_dmul+0x9e>
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	00ff      	lsls	r7, r7, #3
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	431f      	orrs	r7, r3
 800134c:	0f73      	lsrs	r3, r6, #29
 800134e:	433b      	orrs	r3, r7
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	4bda      	ldr	r3, [pc, #872]	; (80016bc <__aeabi_dmul+0x3a4>)
 8001354:	2700      	movs	r7, #0
 8001356:	4699      	mov	r9, r3
 8001358:	2300      	movs	r3, #0
 800135a:	469b      	mov	fp, r3
 800135c:	00f6      	lsls	r6, r6, #3
 800135e:	4481      	add	r9, r0
 8001360:	032b      	lsls	r3, r5, #12
 8001362:	0069      	lsls	r1, r5, #1
 8001364:	0b1b      	lsrs	r3, r3, #12
 8001366:	4652      	mov	r2, sl
 8001368:	4698      	mov	r8, r3
 800136a:	0d49      	lsrs	r1, r1, #21
 800136c:	0fed      	lsrs	r5, r5, #31
 800136e:	2900      	cmp	r1, #0
 8001370:	d100      	bne.n	8001374 <__aeabi_dmul+0x5c>
 8001372:	e085      	b.n	8001480 <__aeabi_dmul+0x168>
 8001374:	4bd0      	ldr	r3, [pc, #832]	; (80016b8 <__aeabi_dmul+0x3a0>)
 8001376:	4299      	cmp	r1, r3
 8001378:	d100      	bne.n	800137c <__aeabi_dmul+0x64>
 800137a:	e073      	b.n	8001464 <__aeabi_dmul+0x14c>
 800137c:	4643      	mov	r3, r8
 800137e:	00da      	lsls	r2, r3, #3
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	041b      	lsls	r3, r3, #16
 8001384:	4313      	orrs	r3, r2
 8001386:	4652      	mov	r2, sl
 8001388:	48cc      	ldr	r0, [pc, #816]	; (80016bc <__aeabi_dmul+0x3a4>)
 800138a:	0f52      	lsrs	r2, r2, #29
 800138c:	4684      	mov	ip, r0
 800138e:	4313      	orrs	r3, r2
 8001390:	4652      	mov	r2, sl
 8001392:	2000      	movs	r0, #0
 8001394:	4461      	add	r1, ip
 8001396:	00d2      	lsls	r2, r2, #3
 8001398:	4489      	add	r9, r1
 800139a:	0021      	movs	r1, r4
 800139c:	4069      	eors	r1, r5
 800139e:	9100      	str	r1, [sp, #0]
 80013a0:	468c      	mov	ip, r1
 80013a2:	2101      	movs	r1, #1
 80013a4:	4449      	add	r1, r9
 80013a6:	468a      	mov	sl, r1
 80013a8:	2f0f      	cmp	r7, #15
 80013aa:	d900      	bls.n	80013ae <__aeabi_dmul+0x96>
 80013ac:	e090      	b.n	80014d0 <__aeabi_dmul+0x1b8>
 80013ae:	49c4      	ldr	r1, [pc, #784]	; (80016c0 <__aeabi_dmul+0x3a8>)
 80013b0:	00bf      	lsls	r7, r7, #2
 80013b2:	59cf      	ldr	r7, [r1, r7]
 80013b4:	46bf      	mov	pc, r7
 80013b6:	465b      	mov	r3, fp
 80013b8:	433b      	orrs	r3, r7
 80013ba:	9301      	str	r3, [sp, #4]
 80013bc:	d000      	beq.n	80013c0 <__aeabi_dmul+0xa8>
 80013be:	e16a      	b.n	8001696 <__aeabi_dmul+0x37e>
 80013c0:	2302      	movs	r3, #2
 80013c2:	2708      	movs	r7, #8
 80013c4:	2600      	movs	r6, #0
 80013c6:	4681      	mov	r9, r0
 80013c8:	469b      	mov	fp, r3
 80013ca:	e7c9      	b.n	8001360 <__aeabi_dmul+0x48>
 80013cc:	0032      	movs	r2, r6
 80013ce:	4658      	mov	r0, fp
 80013d0:	9b01      	ldr	r3, [sp, #4]
 80013d2:	4661      	mov	r1, ip
 80013d4:	9100      	str	r1, [sp, #0]
 80013d6:	2802      	cmp	r0, #2
 80013d8:	d100      	bne.n	80013dc <__aeabi_dmul+0xc4>
 80013da:	e075      	b.n	80014c8 <__aeabi_dmul+0x1b0>
 80013dc:	2803      	cmp	r0, #3
 80013de:	d100      	bne.n	80013e2 <__aeabi_dmul+0xca>
 80013e0:	e1fe      	b.n	80017e0 <__aeabi_dmul+0x4c8>
 80013e2:	2801      	cmp	r0, #1
 80013e4:	d000      	beq.n	80013e8 <__aeabi_dmul+0xd0>
 80013e6:	e12c      	b.n	8001642 <__aeabi_dmul+0x32a>
 80013e8:	2300      	movs	r3, #0
 80013ea:	2700      	movs	r7, #0
 80013ec:	2600      	movs	r6, #0
 80013ee:	2500      	movs	r5, #0
 80013f0:	033f      	lsls	r7, r7, #12
 80013f2:	0d2a      	lsrs	r2, r5, #20
 80013f4:	0b3f      	lsrs	r7, r7, #12
 80013f6:	48b3      	ldr	r0, [pc, #716]	; (80016c4 <__aeabi_dmul+0x3ac>)
 80013f8:	0512      	lsls	r2, r2, #20
 80013fa:	433a      	orrs	r2, r7
 80013fc:	4002      	ands	r2, r0
 80013fe:	051b      	lsls	r3, r3, #20
 8001400:	4313      	orrs	r3, r2
 8001402:	9a00      	ldr	r2, [sp, #0]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	07d1      	lsls	r1, r2, #31
 8001408:	085b      	lsrs	r3, r3, #1
 800140a:	430b      	orrs	r3, r1
 800140c:	0030      	movs	r0, r6
 800140e:	0019      	movs	r1, r3
 8001410:	b007      	add	sp, #28
 8001412:	bc3c      	pop	{r2, r3, r4, r5}
 8001414:	4690      	mov	r8, r2
 8001416:	4699      	mov	r9, r3
 8001418:	46a2      	mov	sl, r4
 800141a:	46ab      	mov	fp, r5
 800141c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141e:	465b      	mov	r3, fp
 8001420:	433b      	orrs	r3, r7
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	d100      	bne.n	8001428 <__aeabi_dmul+0x110>
 8001426:	e12f      	b.n	8001688 <__aeabi_dmul+0x370>
 8001428:	2f00      	cmp	r7, #0
 800142a:	d100      	bne.n	800142e <__aeabi_dmul+0x116>
 800142c:	e1a5      	b.n	800177a <__aeabi_dmul+0x462>
 800142e:	0038      	movs	r0, r7
 8001430:	f000 fdce 	bl	8001fd0 <__clzsi2>
 8001434:	0003      	movs	r3, r0
 8001436:	3b0b      	subs	r3, #11
 8001438:	2b1c      	cmp	r3, #28
 800143a:	dd00      	ble.n	800143e <__aeabi_dmul+0x126>
 800143c:	e196      	b.n	800176c <__aeabi_dmul+0x454>
 800143e:	221d      	movs	r2, #29
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	465a      	mov	r2, fp
 8001444:	0001      	movs	r1, r0
 8001446:	40da      	lsrs	r2, r3
 8001448:	465e      	mov	r6, fp
 800144a:	3908      	subs	r1, #8
 800144c:	408f      	lsls	r7, r1
 800144e:	0013      	movs	r3, r2
 8001450:	408e      	lsls	r6, r1
 8001452:	433b      	orrs	r3, r7
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	4b9c      	ldr	r3, [pc, #624]	; (80016c8 <__aeabi_dmul+0x3b0>)
 8001458:	2700      	movs	r7, #0
 800145a:	1a1b      	subs	r3, r3, r0
 800145c:	4699      	mov	r9, r3
 800145e:	2300      	movs	r3, #0
 8001460:	469b      	mov	fp, r3
 8001462:	e77d      	b.n	8001360 <__aeabi_dmul+0x48>
 8001464:	4641      	mov	r1, r8
 8001466:	4653      	mov	r3, sl
 8001468:	430b      	orrs	r3, r1
 800146a:	4993      	ldr	r1, [pc, #588]	; (80016b8 <__aeabi_dmul+0x3a0>)
 800146c:	468c      	mov	ip, r1
 800146e:	44e1      	add	r9, ip
 8001470:	2b00      	cmp	r3, #0
 8001472:	d000      	beq.n	8001476 <__aeabi_dmul+0x15e>
 8001474:	e11a      	b.n	80016ac <__aeabi_dmul+0x394>
 8001476:	2202      	movs	r2, #2
 8001478:	2002      	movs	r0, #2
 800147a:	4317      	orrs	r7, r2
 800147c:	2200      	movs	r2, #0
 800147e:	e78c      	b.n	800139a <__aeabi_dmul+0x82>
 8001480:	4313      	orrs	r3, r2
 8001482:	d100      	bne.n	8001486 <__aeabi_dmul+0x16e>
 8001484:	e10d      	b.n	80016a2 <__aeabi_dmul+0x38a>
 8001486:	4643      	mov	r3, r8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d100      	bne.n	800148e <__aeabi_dmul+0x176>
 800148c:	e181      	b.n	8001792 <__aeabi_dmul+0x47a>
 800148e:	4640      	mov	r0, r8
 8001490:	f000 fd9e 	bl	8001fd0 <__clzsi2>
 8001494:	0002      	movs	r2, r0
 8001496:	3a0b      	subs	r2, #11
 8001498:	2a1c      	cmp	r2, #28
 800149a:	dd00      	ble.n	800149e <__aeabi_dmul+0x186>
 800149c:	e172      	b.n	8001784 <__aeabi_dmul+0x46c>
 800149e:	0001      	movs	r1, r0
 80014a0:	4643      	mov	r3, r8
 80014a2:	3908      	subs	r1, #8
 80014a4:	408b      	lsls	r3, r1
 80014a6:	4698      	mov	r8, r3
 80014a8:	231d      	movs	r3, #29
 80014aa:	1a9a      	subs	r2, r3, r2
 80014ac:	4653      	mov	r3, sl
 80014ae:	40d3      	lsrs	r3, r2
 80014b0:	001a      	movs	r2, r3
 80014b2:	4643      	mov	r3, r8
 80014b4:	4313      	orrs	r3, r2
 80014b6:	4652      	mov	r2, sl
 80014b8:	408a      	lsls	r2, r1
 80014ba:	4649      	mov	r1, r9
 80014bc:	1a08      	subs	r0, r1, r0
 80014be:	4982      	ldr	r1, [pc, #520]	; (80016c8 <__aeabi_dmul+0x3b0>)
 80014c0:	4689      	mov	r9, r1
 80014c2:	4481      	add	r9, r0
 80014c4:	2000      	movs	r0, #0
 80014c6:	e768      	b.n	800139a <__aeabi_dmul+0x82>
 80014c8:	4b7b      	ldr	r3, [pc, #492]	; (80016b8 <__aeabi_dmul+0x3a0>)
 80014ca:	2700      	movs	r7, #0
 80014cc:	2600      	movs	r6, #0
 80014ce:	e78e      	b.n	80013ee <__aeabi_dmul+0xd6>
 80014d0:	0c14      	lsrs	r4, r2, #16
 80014d2:	0412      	lsls	r2, r2, #16
 80014d4:	0c12      	lsrs	r2, r2, #16
 80014d6:	0011      	movs	r1, r2
 80014d8:	0c37      	lsrs	r7, r6, #16
 80014da:	0436      	lsls	r6, r6, #16
 80014dc:	0c35      	lsrs	r5, r6, #16
 80014de:	4379      	muls	r1, r7
 80014e0:	0028      	movs	r0, r5
 80014e2:	468c      	mov	ip, r1
 80014e4:	002e      	movs	r6, r5
 80014e6:	4360      	muls	r0, r4
 80014e8:	4460      	add	r0, ip
 80014ea:	4683      	mov	fp, r0
 80014ec:	4356      	muls	r6, r2
 80014ee:	0021      	movs	r1, r4
 80014f0:	0c30      	lsrs	r0, r6, #16
 80014f2:	4680      	mov	r8, r0
 80014f4:	4658      	mov	r0, fp
 80014f6:	4379      	muls	r1, r7
 80014f8:	4440      	add	r0, r8
 80014fa:	9102      	str	r1, [sp, #8]
 80014fc:	4584      	cmp	ip, r0
 80014fe:	d906      	bls.n	800150e <__aeabi_dmul+0x1f6>
 8001500:	4688      	mov	r8, r1
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	0249      	lsls	r1, r1, #9
 8001506:	468c      	mov	ip, r1
 8001508:	44e0      	add	r8, ip
 800150a:	4641      	mov	r1, r8
 800150c:	9102      	str	r1, [sp, #8]
 800150e:	0436      	lsls	r6, r6, #16
 8001510:	0c01      	lsrs	r1, r0, #16
 8001512:	0c36      	lsrs	r6, r6, #16
 8001514:	0400      	lsls	r0, r0, #16
 8001516:	468b      	mov	fp, r1
 8001518:	1981      	adds	r1, r0, r6
 800151a:	0c1e      	lsrs	r6, r3, #16
 800151c:	041b      	lsls	r3, r3, #16
 800151e:	0c1b      	lsrs	r3, r3, #16
 8001520:	9103      	str	r1, [sp, #12]
 8001522:	0019      	movs	r1, r3
 8001524:	4379      	muls	r1, r7
 8001526:	468c      	mov	ip, r1
 8001528:	0028      	movs	r0, r5
 800152a:	4375      	muls	r5, r6
 800152c:	4465      	add	r5, ip
 800152e:	46a8      	mov	r8, r5
 8001530:	4358      	muls	r0, r3
 8001532:	0c05      	lsrs	r5, r0, #16
 8001534:	4445      	add	r5, r8
 8001536:	4377      	muls	r7, r6
 8001538:	42a9      	cmp	r1, r5
 800153a:	d903      	bls.n	8001544 <__aeabi_dmul+0x22c>
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	0249      	lsls	r1, r1, #9
 8001540:	468c      	mov	ip, r1
 8001542:	4467      	add	r7, ip
 8001544:	0c29      	lsrs	r1, r5, #16
 8001546:	468c      	mov	ip, r1
 8001548:	0039      	movs	r1, r7
 800154a:	0400      	lsls	r0, r0, #16
 800154c:	0c00      	lsrs	r0, r0, #16
 800154e:	042d      	lsls	r5, r5, #16
 8001550:	182d      	adds	r5, r5, r0
 8001552:	4461      	add	r1, ip
 8001554:	44ab      	add	fp, r5
 8001556:	9105      	str	r1, [sp, #20]
 8001558:	4659      	mov	r1, fp
 800155a:	9104      	str	r1, [sp, #16]
 800155c:	9901      	ldr	r1, [sp, #4]
 800155e:	040f      	lsls	r7, r1, #16
 8001560:	0c3f      	lsrs	r7, r7, #16
 8001562:	0c08      	lsrs	r0, r1, #16
 8001564:	0039      	movs	r1, r7
 8001566:	4351      	muls	r1, r2
 8001568:	4342      	muls	r2, r0
 800156a:	4690      	mov	r8, r2
 800156c:	0002      	movs	r2, r0
 800156e:	468c      	mov	ip, r1
 8001570:	0c09      	lsrs	r1, r1, #16
 8001572:	468b      	mov	fp, r1
 8001574:	4362      	muls	r2, r4
 8001576:	437c      	muls	r4, r7
 8001578:	4444      	add	r4, r8
 800157a:	445c      	add	r4, fp
 800157c:	45a0      	cmp	r8, r4
 800157e:	d903      	bls.n	8001588 <__aeabi_dmul+0x270>
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	0249      	lsls	r1, r1, #9
 8001584:	4688      	mov	r8, r1
 8001586:	4442      	add	r2, r8
 8001588:	0c21      	lsrs	r1, r4, #16
 800158a:	4688      	mov	r8, r1
 800158c:	4661      	mov	r1, ip
 800158e:	0409      	lsls	r1, r1, #16
 8001590:	0c09      	lsrs	r1, r1, #16
 8001592:	468c      	mov	ip, r1
 8001594:	0039      	movs	r1, r7
 8001596:	4359      	muls	r1, r3
 8001598:	4343      	muls	r3, r0
 800159a:	4370      	muls	r0, r6
 800159c:	437e      	muls	r6, r7
 800159e:	0c0f      	lsrs	r7, r1, #16
 80015a0:	18f6      	adds	r6, r6, r3
 80015a2:	0424      	lsls	r4, r4, #16
 80015a4:	19be      	adds	r6, r7, r6
 80015a6:	4464      	add	r4, ip
 80015a8:	4442      	add	r2, r8
 80015aa:	468c      	mov	ip, r1
 80015ac:	42b3      	cmp	r3, r6
 80015ae:	d903      	bls.n	80015b8 <__aeabi_dmul+0x2a0>
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	025b      	lsls	r3, r3, #9
 80015b4:	4698      	mov	r8, r3
 80015b6:	4440      	add	r0, r8
 80015b8:	9b02      	ldr	r3, [sp, #8]
 80015ba:	4661      	mov	r1, ip
 80015bc:	4698      	mov	r8, r3
 80015be:	9b04      	ldr	r3, [sp, #16]
 80015c0:	0437      	lsls	r7, r6, #16
 80015c2:	4443      	add	r3, r8
 80015c4:	469b      	mov	fp, r3
 80015c6:	45ab      	cmp	fp, r5
 80015c8:	41ad      	sbcs	r5, r5
 80015ca:	426b      	negs	r3, r5
 80015cc:	040d      	lsls	r5, r1, #16
 80015ce:	9905      	ldr	r1, [sp, #20]
 80015d0:	0c2d      	lsrs	r5, r5, #16
 80015d2:	468c      	mov	ip, r1
 80015d4:	197f      	adds	r7, r7, r5
 80015d6:	4467      	add	r7, ip
 80015d8:	18fd      	adds	r5, r7, r3
 80015da:	46a8      	mov	r8, r5
 80015dc:	465d      	mov	r5, fp
 80015de:	192d      	adds	r5, r5, r4
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	41a4      	sbcs	r4, r4
 80015e4:	4693      	mov	fp, r2
 80015e6:	4264      	negs	r4, r4
 80015e8:	46a4      	mov	ip, r4
 80015ea:	44c3      	add	fp, r8
 80015ec:	44dc      	add	ip, fp
 80015ee:	428f      	cmp	r7, r1
 80015f0:	41bf      	sbcs	r7, r7
 80015f2:	4598      	cmp	r8, r3
 80015f4:	419b      	sbcs	r3, r3
 80015f6:	4593      	cmp	fp, r2
 80015f8:	4192      	sbcs	r2, r2
 80015fa:	45a4      	cmp	ip, r4
 80015fc:	41a4      	sbcs	r4, r4
 80015fe:	425b      	negs	r3, r3
 8001600:	427f      	negs	r7, r7
 8001602:	431f      	orrs	r7, r3
 8001604:	0c36      	lsrs	r6, r6, #16
 8001606:	4252      	negs	r2, r2
 8001608:	4264      	negs	r4, r4
 800160a:	19bf      	adds	r7, r7, r6
 800160c:	4322      	orrs	r2, r4
 800160e:	18bf      	adds	r7, r7, r2
 8001610:	4662      	mov	r2, ip
 8001612:	1838      	adds	r0, r7, r0
 8001614:	0243      	lsls	r3, r0, #9
 8001616:	0dd2      	lsrs	r2, r2, #23
 8001618:	9903      	ldr	r1, [sp, #12]
 800161a:	4313      	orrs	r3, r2
 800161c:	026a      	lsls	r2, r5, #9
 800161e:	430a      	orrs	r2, r1
 8001620:	1e50      	subs	r0, r2, #1
 8001622:	4182      	sbcs	r2, r0
 8001624:	4661      	mov	r1, ip
 8001626:	0ded      	lsrs	r5, r5, #23
 8001628:	432a      	orrs	r2, r5
 800162a:	024e      	lsls	r6, r1, #9
 800162c:	4332      	orrs	r2, r6
 800162e:	01d9      	lsls	r1, r3, #7
 8001630:	d400      	bmi.n	8001634 <__aeabi_dmul+0x31c>
 8001632:	e0b3      	b.n	800179c <__aeabi_dmul+0x484>
 8001634:	2601      	movs	r6, #1
 8001636:	0850      	lsrs	r0, r2, #1
 8001638:	4032      	ands	r2, r6
 800163a:	4302      	orrs	r2, r0
 800163c:	07de      	lsls	r6, r3, #31
 800163e:	4332      	orrs	r2, r6
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	4c22      	ldr	r4, [pc, #136]	; (80016cc <__aeabi_dmul+0x3b4>)
 8001644:	4454      	add	r4, sl
 8001646:	2c00      	cmp	r4, #0
 8001648:	dd62      	ble.n	8001710 <__aeabi_dmul+0x3f8>
 800164a:	0751      	lsls	r1, r2, #29
 800164c:	d009      	beq.n	8001662 <__aeabi_dmul+0x34a>
 800164e:	200f      	movs	r0, #15
 8001650:	4010      	ands	r0, r2
 8001652:	2804      	cmp	r0, #4
 8001654:	d005      	beq.n	8001662 <__aeabi_dmul+0x34a>
 8001656:	1d10      	adds	r0, r2, #4
 8001658:	4290      	cmp	r0, r2
 800165a:	4192      	sbcs	r2, r2
 800165c:	4252      	negs	r2, r2
 800165e:	189b      	adds	r3, r3, r2
 8001660:	0002      	movs	r2, r0
 8001662:	01d9      	lsls	r1, r3, #7
 8001664:	d504      	bpl.n	8001670 <__aeabi_dmul+0x358>
 8001666:	2480      	movs	r4, #128	; 0x80
 8001668:	4819      	ldr	r0, [pc, #100]	; (80016d0 <__aeabi_dmul+0x3b8>)
 800166a:	00e4      	lsls	r4, r4, #3
 800166c:	4003      	ands	r3, r0
 800166e:	4454      	add	r4, sl
 8001670:	4818      	ldr	r0, [pc, #96]	; (80016d4 <__aeabi_dmul+0x3bc>)
 8001672:	4284      	cmp	r4, r0
 8001674:	dd00      	ble.n	8001678 <__aeabi_dmul+0x360>
 8001676:	e727      	b.n	80014c8 <__aeabi_dmul+0x1b0>
 8001678:	075e      	lsls	r6, r3, #29
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	08d2      	lsrs	r2, r2, #3
 800167e:	0b1f      	lsrs	r7, r3, #12
 8001680:	0563      	lsls	r3, r4, #21
 8001682:	4316      	orrs	r6, r2
 8001684:	0d5b      	lsrs	r3, r3, #21
 8001686:	e6b2      	b.n	80013ee <__aeabi_dmul+0xd6>
 8001688:	2300      	movs	r3, #0
 800168a:	4699      	mov	r9, r3
 800168c:	3301      	adds	r3, #1
 800168e:	2704      	movs	r7, #4
 8001690:	2600      	movs	r6, #0
 8001692:	469b      	mov	fp, r3
 8001694:	e664      	b.n	8001360 <__aeabi_dmul+0x48>
 8001696:	2303      	movs	r3, #3
 8001698:	9701      	str	r7, [sp, #4]
 800169a:	4681      	mov	r9, r0
 800169c:	270c      	movs	r7, #12
 800169e:	469b      	mov	fp, r3
 80016a0:	e65e      	b.n	8001360 <__aeabi_dmul+0x48>
 80016a2:	2201      	movs	r2, #1
 80016a4:	2001      	movs	r0, #1
 80016a6:	4317      	orrs	r7, r2
 80016a8:	2200      	movs	r2, #0
 80016aa:	e676      	b.n	800139a <__aeabi_dmul+0x82>
 80016ac:	2303      	movs	r3, #3
 80016ae:	2003      	movs	r0, #3
 80016b0:	431f      	orrs	r7, r3
 80016b2:	4643      	mov	r3, r8
 80016b4:	e671      	b.n	800139a <__aeabi_dmul+0x82>
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	000007ff 	.word	0x000007ff
 80016bc:	fffffc01 	.word	0xfffffc01
 80016c0:	080089ac 	.word	0x080089ac
 80016c4:	800fffff 	.word	0x800fffff
 80016c8:	fffffc0d 	.word	0xfffffc0d
 80016cc:	000003ff 	.word	0x000003ff
 80016d0:	feffffff 	.word	0xfeffffff
 80016d4:	000007fe 	.word	0x000007fe
 80016d8:	2300      	movs	r3, #0
 80016da:	2780      	movs	r7, #128	; 0x80
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	033f      	lsls	r7, r7, #12
 80016e0:	2600      	movs	r6, #0
 80016e2:	4b43      	ldr	r3, [pc, #268]	; (80017f0 <__aeabi_dmul+0x4d8>)
 80016e4:	e683      	b.n	80013ee <__aeabi_dmul+0xd6>
 80016e6:	9b01      	ldr	r3, [sp, #4]
 80016e8:	0032      	movs	r2, r6
 80016ea:	46a4      	mov	ip, r4
 80016ec:	4658      	mov	r0, fp
 80016ee:	e670      	b.n	80013d2 <__aeabi_dmul+0xba>
 80016f0:	46ac      	mov	ip, r5
 80016f2:	e66e      	b.n	80013d2 <__aeabi_dmul+0xba>
 80016f4:	2780      	movs	r7, #128	; 0x80
 80016f6:	9901      	ldr	r1, [sp, #4]
 80016f8:	033f      	lsls	r7, r7, #12
 80016fa:	4239      	tst	r1, r7
 80016fc:	d02d      	beq.n	800175a <__aeabi_dmul+0x442>
 80016fe:	423b      	tst	r3, r7
 8001700:	d12b      	bne.n	800175a <__aeabi_dmul+0x442>
 8001702:	431f      	orrs	r7, r3
 8001704:	033f      	lsls	r7, r7, #12
 8001706:	0b3f      	lsrs	r7, r7, #12
 8001708:	9500      	str	r5, [sp, #0]
 800170a:	0016      	movs	r6, r2
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <__aeabi_dmul+0x4d8>)
 800170e:	e66e      	b.n	80013ee <__aeabi_dmul+0xd6>
 8001710:	2501      	movs	r5, #1
 8001712:	1b2d      	subs	r5, r5, r4
 8001714:	2d38      	cmp	r5, #56	; 0x38
 8001716:	dd00      	ble.n	800171a <__aeabi_dmul+0x402>
 8001718:	e666      	b.n	80013e8 <__aeabi_dmul+0xd0>
 800171a:	2d1f      	cmp	r5, #31
 800171c:	dc40      	bgt.n	80017a0 <__aeabi_dmul+0x488>
 800171e:	4835      	ldr	r0, [pc, #212]	; (80017f4 <__aeabi_dmul+0x4dc>)
 8001720:	001c      	movs	r4, r3
 8001722:	4450      	add	r0, sl
 8001724:	0016      	movs	r6, r2
 8001726:	4082      	lsls	r2, r0
 8001728:	4084      	lsls	r4, r0
 800172a:	40ee      	lsrs	r6, r5
 800172c:	1e50      	subs	r0, r2, #1
 800172e:	4182      	sbcs	r2, r0
 8001730:	4334      	orrs	r4, r6
 8001732:	4314      	orrs	r4, r2
 8001734:	40eb      	lsrs	r3, r5
 8001736:	0762      	lsls	r2, r4, #29
 8001738:	d009      	beq.n	800174e <__aeabi_dmul+0x436>
 800173a:	220f      	movs	r2, #15
 800173c:	4022      	ands	r2, r4
 800173e:	2a04      	cmp	r2, #4
 8001740:	d005      	beq.n	800174e <__aeabi_dmul+0x436>
 8001742:	0022      	movs	r2, r4
 8001744:	1d14      	adds	r4, r2, #4
 8001746:	4294      	cmp	r4, r2
 8001748:	4180      	sbcs	r0, r0
 800174a:	4240      	negs	r0, r0
 800174c:	181b      	adds	r3, r3, r0
 800174e:	021a      	lsls	r2, r3, #8
 8001750:	d53e      	bpl.n	80017d0 <__aeabi_dmul+0x4b8>
 8001752:	2301      	movs	r3, #1
 8001754:	2700      	movs	r7, #0
 8001756:	2600      	movs	r6, #0
 8001758:	e649      	b.n	80013ee <__aeabi_dmul+0xd6>
 800175a:	2780      	movs	r7, #128	; 0x80
 800175c:	9b01      	ldr	r3, [sp, #4]
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	431f      	orrs	r7, r3
 8001762:	033f      	lsls	r7, r7, #12
 8001764:	0b3f      	lsrs	r7, r7, #12
 8001766:	9400      	str	r4, [sp, #0]
 8001768:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <__aeabi_dmul+0x4d8>)
 800176a:	e640      	b.n	80013ee <__aeabi_dmul+0xd6>
 800176c:	0003      	movs	r3, r0
 800176e:	465a      	mov	r2, fp
 8001770:	3b28      	subs	r3, #40	; 0x28
 8001772:	409a      	lsls	r2, r3
 8001774:	2600      	movs	r6, #0
 8001776:	9201      	str	r2, [sp, #4]
 8001778:	e66d      	b.n	8001456 <__aeabi_dmul+0x13e>
 800177a:	4658      	mov	r0, fp
 800177c:	f000 fc28 	bl	8001fd0 <__clzsi2>
 8001780:	3020      	adds	r0, #32
 8001782:	e657      	b.n	8001434 <__aeabi_dmul+0x11c>
 8001784:	0003      	movs	r3, r0
 8001786:	4652      	mov	r2, sl
 8001788:	3b28      	subs	r3, #40	; 0x28
 800178a:	409a      	lsls	r2, r3
 800178c:	0013      	movs	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	e693      	b.n	80014ba <__aeabi_dmul+0x1a2>
 8001792:	4650      	mov	r0, sl
 8001794:	f000 fc1c 	bl	8001fd0 <__clzsi2>
 8001798:	3020      	adds	r0, #32
 800179a:	e67b      	b.n	8001494 <__aeabi_dmul+0x17c>
 800179c:	46ca      	mov	sl, r9
 800179e:	e750      	b.n	8001642 <__aeabi_dmul+0x32a>
 80017a0:	201f      	movs	r0, #31
 80017a2:	001e      	movs	r6, r3
 80017a4:	4240      	negs	r0, r0
 80017a6:	1b04      	subs	r4, r0, r4
 80017a8:	40e6      	lsrs	r6, r4
 80017aa:	2d20      	cmp	r5, #32
 80017ac:	d003      	beq.n	80017b6 <__aeabi_dmul+0x49e>
 80017ae:	4c12      	ldr	r4, [pc, #72]	; (80017f8 <__aeabi_dmul+0x4e0>)
 80017b0:	4454      	add	r4, sl
 80017b2:	40a3      	lsls	r3, r4
 80017b4:	431a      	orrs	r2, r3
 80017b6:	1e50      	subs	r0, r2, #1
 80017b8:	4182      	sbcs	r2, r0
 80017ba:	4332      	orrs	r2, r6
 80017bc:	2607      	movs	r6, #7
 80017be:	2700      	movs	r7, #0
 80017c0:	4016      	ands	r6, r2
 80017c2:	d009      	beq.n	80017d8 <__aeabi_dmul+0x4c0>
 80017c4:	200f      	movs	r0, #15
 80017c6:	2300      	movs	r3, #0
 80017c8:	4010      	ands	r0, r2
 80017ca:	0014      	movs	r4, r2
 80017cc:	2804      	cmp	r0, #4
 80017ce:	d1b9      	bne.n	8001744 <__aeabi_dmul+0x42c>
 80017d0:	0022      	movs	r2, r4
 80017d2:	075e      	lsls	r6, r3, #29
 80017d4:	025b      	lsls	r3, r3, #9
 80017d6:	0b1f      	lsrs	r7, r3, #12
 80017d8:	08d2      	lsrs	r2, r2, #3
 80017da:	4316      	orrs	r6, r2
 80017dc:	2300      	movs	r3, #0
 80017de:	e606      	b.n	80013ee <__aeabi_dmul+0xd6>
 80017e0:	2780      	movs	r7, #128	; 0x80
 80017e2:	033f      	lsls	r7, r7, #12
 80017e4:	431f      	orrs	r7, r3
 80017e6:	033f      	lsls	r7, r7, #12
 80017e8:	0b3f      	lsrs	r7, r7, #12
 80017ea:	0016      	movs	r6, r2
 80017ec:	4b00      	ldr	r3, [pc, #0]	; (80017f0 <__aeabi_dmul+0x4d8>)
 80017ee:	e5fe      	b.n	80013ee <__aeabi_dmul+0xd6>
 80017f0:	000007ff 	.word	0x000007ff
 80017f4:	0000041e 	.word	0x0000041e
 80017f8:	0000043e 	.word	0x0000043e

080017fc <__aeabi_dsub>:
 80017fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	000c      	movs	r4, r1
 8001808:	0309      	lsls	r1, r1, #12
 800180a:	b5e0      	push	{r5, r6, r7, lr}
 800180c:	0a49      	lsrs	r1, r1, #9
 800180e:	0f46      	lsrs	r6, r0, #29
 8001810:	005f      	lsls	r7, r3, #1
 8001812:	4331      	orrs	r1, r6
 8001814:	031e      	lsls	r6, r3, #12
 8001816:	0fdb      	lsrs	r3, r3, #31
 8001818:	0a76      	lsrs	r6, r6, #9
 800181a:	469b      	mov	fp, r3
 800181c:	0f53      	lsrs	r3, r2, #29
 800181e:	4333      	orrs	r3, r6
 8001820:	4ec8      	ldr	r6, [pc, #800]	; (8001b44 <__aeabi_dsub+0x348>)
 8001822:	0065      	lsls	r5, r4, #1
 8001824:	00c0      	lsls	r0, r0, #3
 8001826:	0fe4      	lsrs	r4, r4, #31
 8001828:	00d2      	lsls	r2, r2, #3
 800182a:	0d6d      	lsrs	r5, r5, #21
 800182c:	46a2      	mov	sl, r4
 800182e:	4681      	mov	r9, r0
 8001830:	0d7f      	lsrs	r7, r7, #21
 8001832:	469c      	mov	ip, r3
 8001834:	4690      	mov	r8, r2
 8001836:	42b7      	cmp	r7, r6
 8001838:	d100      	bne.n	800183c <__aeabi_dsub+0x40>
 800183a:	e0b9      	b.n	80019b0 <__aeabi_dsub+0x1b4>
 800183c:	465b      	mov	r3, fp
 800183e:	2601      	movs	r6, #1
 8001840:	4073      	eors	r3, r6
 8001842:	469b      	mov	fp, r3
 8001844:	1bee      	subs	r6, r5, r7
 8001846:	45a3      	cmp	fp, r4
 8001848:	d100      	bne.n	800184c <__aeabi_dsub+0x50>
 800184a:	e083      	b.n	8001954 <__aeabi_dsub+0x158>
 800184c:	2e00      	cmp	r6, #0
 800184e:	dd63      	ble.n	8001918 <__aeabi_dsub+0x11c>
 8001850:	2f00      	cmp	r7, #0
 8001852:	d000      	beq.n	8001856 <__aeabi_dsub+0x5a>
 8001854:	e0b1      	b.n	80019ba <__aeabi_dsub+0x1be>
 8001856:	4663      	mov	r3, ip
 8001858:	4313      	orrs	r3, r2
 800185a:	d100      	bne.n	800185e <__aeabi_dsub+0x62>
 800185c:	e123      	b.n	8001aa6 <__aeabi_dsub+0x2aa>
 800185e:	1e73      	subs	r3, r6, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d000      	beq.n	8001866 <__aeabi_dsub+0x6a>
 8001864:	e1ba      	b.n	8001bdc <__aeabi_dsub+0x3e0>
 8001866:	1a86      	subs	r6, r0, r2
 8001868:	4663      	mov	r3, ip
 800186a:	42b0      	cmp	r0, r6
 800186c:	4180      	sbcs	r0, r0
 800186e:	2501      	movs	r5, #1
 8001870:	1ac9      	subs	r1, r1, r3
 8001872:	4240      	negs	r0, r0
 8001874:	1a09      	subs	r1, r1, r0
 8001876:	020b      	lsls	r3, r1, #8
 8001878:	d400      	bmi.n	800187c <__aeabi_dsub+0x80>
 800187a:	e147      	b.n	8001b0c <__aeabi_dsub+0x310>
 800187c:	0249      	lsls	r1, r1, #9
 800187e:	0a4b      	lsrs	r3, r1, #9
 8001880:	4698      	mov	r8, r3
 8001882:	4643      	mov	r3, r8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d100      	bne.n	800188a <__aeabi_dsub+0x8e>
 8001888:	e189      	b.n	8001b9e <__aeabi_dsub+0x3a2>
 800188a:	4640      	mov	r0, r8
 800188c:	f000 fba0 	bl	8001fd0 <__clzsi2>
 8001890:	0003      	movs	r3, r0
 8001892:	3b08      	subs	r3, #8
 8001894:	2b1f      	cmp	r3, #31
 8001896:	dd00      	ble.n	800189a <__aeabi_dsub+0x9e>
 8001898:	e17c      	b.n	8001b94 <__aeabi_dsub+0x398>
 800189a:	2220      	movs	r2, #32
 800189c:	0030      	movs	r0, r6
 800189e:	1ad2      	subs	r2, r2, r3
 80018a0:	4641      	mov	r1, r8
 80018a2:	40d0      	lsrs	r0, r2
 80018a4:	4099      	lsls	r1, r3
 80018a6:	0002      	movs	r2, r0
 80018a8:	409e      	lsls	r6, r3
 80018aa:	430a      	orrs	r2, r1
 80018ac:	429d      	cmp	r5, r3
 80018ae:	dd00      	ble.n	80018b2 <__aeabi_dsub+0xb6>
 80018b0:	e16a      	b.n	8001b88 <__aeabi_dsub+0x38c>
 80018b2:	1b5d      	subs	r5, r3, r5
 80018b4:	1c6b      	adds	r3, r5, #1
 80018b6:	2b1f      	cmp	r3, #31
 80018b8:	dd00      	ble.n	80018bc <__aeabi_dsub+0xc0>
 80018ba:	e194      	b.n	8001be6 <__aeabi_dsub+0x3ea>
 80018bc:	2120      	movs	r1, #32
 80018be:	0010      	movs	r0, r2
 80018c0:	0035      	movs	r5, r6
 80018c2:	1ac9      	subs	r1, r1, r3
 80018c4:	408e      	lsls	r6, r1
 80018c6:	40da      	lsrs	r2, r3
 80018c8:	4088      	lsls	r0, r1
 80018ca:	40dd      	lsrs	r5, r3
 80018cc:	1e71      	subs	r1, r6, #1
 80018ce:	418e      	sbcs	r6, r1
 80018d0:	0011      	movs	r1, r2
 80018d2:	2207      	movs	r2, #7
 80018d4:	4328      	orrs	r0, r5
 80018d6:	2500      	movs	r5, #0
 80018d8:	4306      	orrs	r6, r0
 80018da:	4032      	ands	r2, r6
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d009      	beq.n	80018f4 <__aeabi_dsub+0xf8>
 80018e0:	230f      	movs	r3, #15
 80018e2:	4033      	ands	r3, r6
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d005      	beq.n	80018f4 <__aeabi_dsub+0xf8>
 80018e8:	1d33      	adds	r3, r6, #4
 80018ea:	42b3      	cmp	r3, r6
 80018ec:	41b6      	sbcs	r6, r6
 80018ee:	4276      	negs	r6, r6
 80018f0:	1989      	adds	r1, r1, r6
 80018f2:	001e      	movs	r6, r3
 80018f4:	020b      	lsls	r3, r1, #8
 80018f6:	d400      	bmi.n	80018fa <__aeabi_dsub+0xfe>
 80018f8:	e23d      	b.n	8001d76 <__aeabi_dsub+0x57a>
 80018fa:	1c6a      	adds	r2, r5, #1
 80018fc:	4b91      	ldr	r3, [pc, #580]	; (8001b44 <__aeabi_dsub+0x348>)
 80018fe:	0555      	lsls	r5, r2, #21
 8001900:	0d6d      	lsrs	r5, r5, #21
 8001902:	429a      	cmp	r2, r3
 8001904:	d100      	bne.n	8001908 <__aeabi_dsub+0x10c>
 8001906:	e119      	b.n	8001b3c <__aeabi_dsub+0x340>
 8001908:	4a8f      	ldr	r2, [pc, #572]	; (8001b48 <__aeabi_dsub+0x34c>)
 800190a:	08f6      	lsrs	r6, r6, #3
 800190c:	400a      	ands	r2, r1
 800190e:	0757      	lsls	r7, r2, #29
 8001910:	0252      	lsls	r2, r2, #9
 8001912:	4337      	orrs	r7, r6
 8001914:	0b12      	lsrs	r2, r2, #12
 8001916:	e09b      	b.n	8001a50 <__aeabi_dsub+0x254>
 8001918:	2e00      	cmp	r6, #0
 800191a:	d000      	beq.n	800191e <__aeabi_dsub+0x122>
 800191c:	e0c5      	b.n	8001aaa <__aeabi_dsub+0x2ae>
 800191e:	1c6e      	adds	r6, r5, #1
 8001920:	0576      	lsls	r6, r6, #21
 8001922:	0d76      	lsrs	r6, r6, #21
 8001924:	2e01      	cmp	r6, #1
 8001926:	dc00      	bgt.n	800192a <__aeabi_dsub+0x12e>
 8001928:	e148      	b.n	8001bbc <__aeabi_dsub+0x3c0>
 800192a:	4667      	mov	r7, ip
 800192c:	1a86      	subs	r6, r0, r2
 800192e:	1bcb      	subs	r3, r1, r7
 8001930:	42b0      	cmp	r0, r6
 8001932:	41bf      	sbcs	r7, r7
 8001934:	427f      	negs	r7, r7
 8001936:	46b8      	mov	r8, r7
 8001938:	001f      	movs	r7, r3
 800193a:	4643      	mov	r3, r8
 800193c:	1aff      	subs	r7, r7, r3
 800193e:	003b      	movs	r3, r7
 8001940:	46b8      	mov	r8, r7
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	d500      	bpl.n	8001948 <__aeabi_dsub+0x14c>
 8001946:	e15f      	b.n	8001c08 <__aeabi_dsub+0x40c>
 8001948:	4337      	orrs	r7, r6
 800194a:	d19a      	bne.n	8001882 <__aeabi_dsub+0x86>
 800194c:	2200      	movs	r2, #0
 800194e:	2400      	movs	r4, #0
 8001950:	2500      	movs	r5, #0
 8001952:	e079      	b.n	8001a48 <__aeabi_dsub+0x24c>
 8001954:	2e00      	cmp	r6, #0
 8001956:	dc00      	bgt.n	800195a <__aeabi_dsub+0x15e>
 8001958:	e0fa      	b.n	8001b50 <__aeabi_dsub+0x354>
 800195a:	2f00      	cmp	r7, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x164>
 800195e:	e08d      	b.n	8001a7c <__aeabi_dsub+0x280>
 8001960:	4b78      	ldr	r3, [pc, #480]	; (8001b44 <__aeabi_dsub+0x348>)
 8001962:	429d      	cmp	r5, r3
 8001964:	d067      	beq.n	8001a36 <__aeabi_dsub+0x23a>
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	4667      	mov	r7, ip
 800196a:	041b      	lsls	r3, r3, #16
 800196c:	431f      	orrs	r7, r3
 800196e:	46bc      	mov	ip, r7
 8001970:	2e38      	cmp	r6, #56	; 0x38
 8001972:	dc00      	bgt.n	8001976 <__aeabi_dsub+0x17a>
 8001974:	e152      	b.n	8001c1c <__aeabi_dsub+0x420>
 8001976:	4663      	mov	r3, ip
 8001978:	4313      	orrs	r3, r2
 800197a:	1e5a      	subs	r2, r3, #1
 800197c:	4193      	sbcs	r3, r2
 800197e:	181e      	adds	r6, r3, r0
 8001980:	4286      	cmp	r6, r0
 8001982:	4180      	sbcs	r0, r0
 8001984:	4240      	negs	r0, r0
 8001986:	1809      	adds	r1, r1, r0
 8001988:	020b      	lsls	r3, r1, #8
 800198a:	d400      	bmi.n	800198e <__aeabi_dsub+0x192>
 800198c:	e0be      	b.n	8001b0c <__aeabi_dsub+0x310>
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <__aeabi_dsub+0x348>)
 8001990:	3501      	adds	r5, #1
 8001992:	429d      	cmp	r5, r3
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x19c>
 8001996:	e0d2      	b.n	8001b3e <__aeabi_dsub+0x342>
 8001998:	4a6b      	ldr	r2, [pc, #428]	; (8001b48 <__aeabi_dsub+0x34c>)
 800199a:	0873      	lsrs	r3, r6, #1
 800199c:	400a      	ands	r2, r1
 800199e:	2101      	movs	r1, #1
 80019a0:	400e      	ands	r6, r1
 80019a2:	431e      	orrs	r6, r3
 80019a4:	0851      	lsrs	r1, r2, #1
 80019a6:	07d3      	lsls	r3, r2, #31
 80019a8:	2207      	movs	r2, #7
 80019aa:	431e      	orrs	r6, r3
 80019ac:	4032      	ands	r2, r6
 80019ae:	e795      	b.n	80018dc <__aeabi_dsub+0xe0>
 80019b0:	001e      	movs	r6, r3
 80019b2:	4316      	orrs	r6, r2
 80019b4:	d000      	beq.n	80019b8 <__aeabi_dsub+0x1bc>
 80019b6:	e745      	b.n	8001844 <__aeabi_dsub+0x48>
 80019b8:	e740      	b.n	800183c <__aeabi_dsub+0x40>
 80019ba:	4b62      	ldr	r3, [pc, #392]	; (8001b44 <__aeabi_dsub+0x348>)
 80019bc:	429d      	cmp	r5, r3
 80019be:	d03a      	beq.n	8001a36 <__aeabi_dsub+0x23a>
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	4667      	mov	r7, ip
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	431f      	orrs	r7, r3
 80019c8:	46bc      	mov	ip, r7
 80019ca:	2e38      	cmp	r6, #56	; 0x38
 80019cc:	dd00      	ble.n	80019d0 <__aeabi_dsub+0x1d4>
 80019ce:	e0eb      	b.n	8001ba8 <__aeabi_dsub+0x3ac>
 80019d0:	2e1f      	cmp	r6, #31
 80019d2:	dc00      	bgt.n	80019d6 <__aeabi_dsub+0x1da>
 80019d4:	e13a      	b.n	8001c4c <__aeabi_dsub+0x450>
 80019d6:	0033      	movs	r3, r6
 80019d8:	4667      	mov	r7, ip
 80019da:	3b20      	subs	r3, #32
 80019dc:	40df      	lsrs	r7, r3
 80019de:	003b      	movs	r3, r7
 80019e0:	2e20      	cmp	r6, #32
 80019e2:	d005      	beq.n	80019f0 <__aeabi_dsub+0x1f4>
 80019e4:	2740      	movs	r7, #64	; 0x40
 80019e6:	1bbf      	subs	r7, r7, r6
 80019e8:	4666      	mov	r6, ip
 80019ea:	40be      	lsls	r6, r7
 80019ec:	4332      	orrs	r2, r6
 80019ee:	4690      	mov	r8, r2
 80019f0:	4646      	mov	r6, r8
 80019f2:	1e72      	subs	r2, r6, #1
 80019f4:	4196      	sbcs	r6, r2
 80019f6:	4333      	orrs	r3, r6
 80019f8:	e0da      	b.n	8001bb0 <__aeabi_dsub+0x3b4>
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d100      	bne.n	8001a00 <__aeabi_dsub+0x204>
 80019fe:	e214      	b.n	8001e2a <__aeabi_dsub+0x62e>
 8001a00:	4663      	mov	r3, ip
 8001a02:	4313      	orrs	r3, r2
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dsub+0x20c>
 8001a06:	e168      	b.n	8001cda <__aeabi_dsub+0x4de>
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	074e      	lsls	r6, r1, #29
 8001a0c:	08c0      	lsrs	r0, r0, #3
 8001a0e:	08c9      	lsrs	r1, r1, #3
 8001a10:	031b      	lsls	r3, r3, #12
 8001a12:	4306      	orrs	r6, r0
 8001a14:	4219      	tst	r1, r3
 8001a16:	d008      	beq.n	8001a2a <__aeabi_dsub+0x22e>
 8001a18:	4660      	mov	r0, ip
 8001a1a:	08c0      	lsrs	r0, r0, #3
 8001a1c:	4218      	tst	r0, r3
 8001a1e:	d104      	bne.n	8001a2a <__aeabi_dsub+0x22e>
 8001a20:	4663      	mov	r3, ip
 8001a22:	0001      	movs	r1, r0
 8001a24:	08d2      	lsrs	r2, r2, #3
 8001a26:	075e      	lsls	r6, r3, #29
 8001a28:	4316      	orrs	r6, r2
 8001a2a:	00f3      	lsls	r3, r6, #3
 8001a2c:	4699      	mov	r9, r3
 8001a2e:	00c9      	lsls	r1, r1, #3
 8001a30:	0f72      	lsrs	r2, r6, #29
 8001a32:	4d44      	ldr	r5, [pc, #272]	; (8001b44 <__aeabi_dsub+0x348>)
 8001a34:	4311      	orrs	r1, r2
 8001a36:	464b      	mov	r3, r9
 8001a38:	08de      	lsrs	r6, r3, #3
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <__aeabi_dsub+0x348>)
 8001a3c:	074f      	lsls	r7, r1, #29
 8001a3e:	4337      	orrs	r7, r6
 8001a40:	08ca      	lsrs	r2, r1, #3
 8001a42:	429d      	cmp	r5, r3
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x24c>
 8001a46:	e06e      	b.n	8001b26 <__aeabi_dsub+0x32a>
 8001a48:	0312      	lsls	r2, r2, #12
 8001a4a:	056d      	lsls	r5, r5, #21
 8001a4c:	0b12      	lsrs	r2, r2, #12
 8001a4e:	0d6d      	lsrs	r5, r5, #21
 8001a50:	2100      	movs	r1, #0
 8001a52:	0312      	lsls	r2, r2, #12
 8001a54:	0b13      	lsrs	r3, r2, #12
 8001a56:	0d0a      	lsrs	r2, r1, #20
 8001a58:	0512      	lsls	r2, r2, #20
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	4b3b      	ldr	r3, [pc, #236]	; (8001b4c <__aeabi_dsub+0x350>)
 8001a5e:	052d      	lsls	r5, r5, #20
 8001a60:	4013      	ands	r3, r2
 8001a62:	432b      	orrs	r3, r5
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	07e4      	lsls	r4, r4, #31
 8001a68:	085b      	lsrs	r3, r3, #1
 8001a6a:	4323      	orrs	r3, r4
 8001a6c:	0038      	movs	r0, r7
 8001a6e:	0019      	movs	r1, r3
 8001a70:	bc3c      	pop	{r2, r3, r4, r5}
 8001a72:	4690      	mov	r8, r2
 8001a74:	4699      	mov	r9, r3
 8001a76:	46a2      	mov	sl, r4
 8001a78:	46ab      	mov	fp, r5
 8001a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a7c:	4663      	mov	r3, ip
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	d011      	beq.n	8001aa6 <__aeabi_dsub+0x2aa>
 8001a82:	1e73      	subs	r3, r6, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d000      	beq.n	8001a8a <__aeabi_dsub+0x28e>
 8001a88:	e107      	b.n	8001c9a <__aeabi_dsub+0x49e>
 8001a8a:	1886      	adds	r6, r0, r2
 8001a8c:	4286      	cmp	r6, r0
 8001a8e:	4180      	sbcs	r0, r0
 8001a90:	4461      	add	r1, ip
 8001a92:	4240      	negs	r0, r0
 8001a94:	1809      	adds	r1, r1, r0
 8001a96:	2501      	movs	r5, #1
 8001a98:	020b      	lsls	r3, r1, #8
 8001a9a:	d537      	bpl.n	8001b0c <__aeabi_dsub+0x310>
 8001a9c:	2502      	movs	r5, #2
 8001a9e:	e77b      	b.n	8001998 <__aeabi_dsub+0x19c>
 8001aa0:	003e      	movs	r6, r7
 8001aa2:	4661      	mov	r1, ip
 8001aa4:	4691      	mov	r9, r2
 8001aa6:	0035      	movs	r5, r6
 8001aa8:	e7c5      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001aaa:	465c      	mov	r4, fp
 8001aac:	2d00      	cmp	r5, #0
 8001aae:	d000      	beq.n	8001ab2 <__aeabi_dsub+0x2b6>
 8001ab0:	e0e1      	b.n	8001c76 <__aeabi_dsub+0x47a>
 8001ab2:	000b      	movs	r3, r1
 8001ab4:	4303      	orrs	r3, r0
 8001ab6:	d0f3      	beq.n	8001aa0 <__aeabi_dsub+0x2a4>
 8001ab8:	1c73      	adds	r3, r6, #1
 8001aba:	d100      	bne.n	8001abe <__aeabi_dsub+0x2c2>
 8001abc:	e1ac      	b.n	8001e18 <__aeabi_dsub+0x61c>
 8001abe:	4b21      	ldr	r3, [pc, #132]	; (8001b44 <__aeabi_dsub+0x348>)
 8001ac0:	429f      	cmp	r7, r3
 8001ac2:	d100      	bne.n	8001ac6 <__aeabi_dsub+0x2ca>
 8001ac4:	e13a      	b.n	8001d3c <__aeabi_dsub+0x540>
 8001ac6:	43f3      	mvns	r3, r6
 8001ac8:	2b38      	cmp	r3, #56	; 0x38
 8001aca:	dd00      	ble.n	8001ace <__aeabi_dsub+0x2d2>
 8001acc:	e16f      	b.n	8001dae <__aeabi_dsub+0x5b2>
 8001ace:	2b1f      	cmp	r3, #31
 8001ad0:	dd00      	ble.n	8001ad4 <__aeabi_dsub+0x2d8>
 8001ad2:	e18c      	b.n	8001dee <__aeabi_dsub+0x5f2>
 8001ad4:	2520      	movs	r5, #32
 8001ad6:	000e      	movs	r6, r1
 8001ad8:	1aed      	subs	r5, r5, r3
 8001ada:	40ae      	lsls	r6, r5
 8001adc:	46b0      	mov	r8, r6
 8001ade:	0006      	movs	r6, r0
 8001ae0:	46aa      	mov	sl, r5
 8001ae2:	40de      	lsrs	r6, r3
 8001ae4:	4645      	mov	r5, r8
 8001ae6:	4335      	orrs	r5, r6
 8001ae8:	002e      	movs	r6, r5
 8001aea:	4655      	mov	r5, sl
 8001aec:	40d9      	lsrs	r1, r3
 8001aee:	40a8      	lsls	r0, r5
 8001af0:	4663      	mov	r3, ip
 8001af2:	1e45      	subs	r5, r0, #1
 8001af4:	41a8      	sbcs	r0, r5
 8001af6:	1a5b      	subs	r3, r3, r1
 8001af8:	469c      	mov	ip, r3
 8001afa:	4330      	orrs	r0, r6
 8001afc:	1a16      	subs	r6, r2, r0
 8001afe:	42b2      	cmp	r2, r6
 8001b00:	4192      	sbcs	r2, r2
 8001b02:	4663      	mov	r3, ip
 8001b04:	4252      	negs	r2, r2
 8001b06:	1a99      	subs	r1, r3, r2
 8001b08:	003d      	movs	r5, r7
 8001b0a:	e6b4      	b.n	8001876 <__aeabi_dsub+0x7a>
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	4032      	ands	r2, r6
 8001b10:	2a00      	cmp	r2, #0
 8001b12:	d000      	beq.n	8001b16 <__aeabi_dsub+0x31a>
 8001b14:	e6e4      	b.n	80018e0 <__aeabi_dsub+0xe4>
 8001b16:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <__aeabi_dsub+0x348>)
 8001b18:	08f6      	lsrs	r6, r6, #3
 8001b1a:	074f      	lsls	r7, r1, #29
 8001b1c:	4337      	orrs	r7, r6
 8001b1e:	08ca      	lsrs	r2, r1, #3
 8001b20:	429d      	cmp	r5, r3
 8001b22:	d000      	beq.n	8001b26 <__aeabi_dsub+0x32a>
 8001b24:	e790      	b.n	8001a48 <__aeabi_dsub+0x24c>
 8001b26:	003b      	movs	r3, r7
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_dsub+0x332>
 8001b2c:	e1a6      	b.n	8001e7c <__aeabi_dsub+0x680>
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	031b      	lsls	r3, r3, #12
 8001b32:	431a      	orrs	r2, r3
 8001b34:	0312      	lsls	r2, r2, #12
 8001b36:	0b12      	lsrs	r2, r2, #12
 8001b38:	4d02      	ldr	r5, [pc, #8]	; (8001b44 <__aeabi_dsub+0x348>)
 8001b3a:	e789      	b.n	8001a50 <__aeabi_dsub+0x254>
 8001b3c:	0015      	movs	r5, r2
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2700      	movs	r7, #0
 8001b42:	e785      	b.n	8001a50 <__aeabi_dsub+0x254>
 8001b44:	000007ff 	.word	0x000007ff
 8001b48:	ff7fffff 	.word	0xff7fffff
 8001b4c:	800fffff 	.word	0x800fffff
 8001b50:	2e00      	cmp	r6, #0
 8001b52:	d000      	beq.n	8001b56 <__aeabi_dsub+0x35a>
 8001b54:	e0c7      	b.n	8001ce6 <__aeabi_dsub+0x4ea>
 8001b56:	1c6b      	adds	r3, r5, #1
 8001b58:	055e      	lsls	r6, r3, #21
 8001b5a:	0d76      	lsrs	r6, r6, #21
 8001b5c:	2e01      	cmp	r6, #1
 8001b5e:	dc00      	bgt.n	8001b62 <__aeabi_dsub+0x366>
 8001b60:	e0f0      	b.n	8001d44 <__aeabi_dsub+0x548>
 8001b62:	4dc8      	ldr	r5, [pc, #800]	; (8001e84 <__aeabi_dsub+0x688>)
 8001b64:	42ab      	cmp	r3, r5
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x36e>
 8001b68:	e0b9      	b.n	8001cde <__aeabi_dsub+0x4e2>
 8001b6a:	1885      	adds	r5, r0, r2
 8001b6c:	000a      	movs	r2, r1
 8001b6e:	4285      	cmp	r5, r0
 8001b70:	4189      	sbcs	r1, r1
 8001b72:	4462      	add	r2, ip
 8001b74:	4249      	negs	r1, r1
 8001b76:	1851      	adds	r1, r2, r1
 8001b78:	2207      	movs	r2, #7
 8001b7a:	07ce      	lsls	r6, r1, #31
 8001b7c:	086d      	lsrs	r5, r5, #1
 8001b7e:	432e      	orrs	r6, r5
 8001b80:	0849      	lsrs	r1, r1, #1
 8001b82:	4032      	ands	r2, r6
 8001b84:	001d      	movs	r5, r3
 8001b86:	e6a9      	b.n	80018dc <__aeabi_dsub+0xe0>
 8001b88:	49bf      	ldr	r1, [pc, #764]	; (8001e88 <__aeabi_dsub+0x68c>)
 8001b8a:	1aed      	subs	r5, r5, r3
 8001b8c:	4011      	ands	r1, r2
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4032      	ands	r2, r6
 8001b92:	e6a3      	b.n	80018dc <__aeabi_dsub+0xe0>
 8001b94:	0032      	movs	r2, r6
 8001b96:	3828      	subs	r0, #40	; 0x28
 8001b98:	4082      	lsls	r2, r0
 8001b9a:	2600      	movs	r6, #0
 8001b9c:	e686      	b.n	80018ac <__aeabi_dsub+0xb0>
 8001b9e:	0030      	movs	r0, r6
 8001ba0:	f000 fa16 	bl	8001fd0 <__clzsi2>
 8001ba4:	3020      	adds	r0, #32
 8001ba6:	e673      	b.n	8001890 <__aeabi_dsub+0x94>
 8001ba8:	4663      	mov	r3, ip
 8001baa:	4313      	orrs	r3, r2
 8001bac:	1e5a      	subs	r2, r3, #1
 8001bae:	4193      	sbcs	r3, r2
 8001bb0:	1ac6      	subs	r6, r0, r3
 8001bb2:	42b0      	cmp	r0, r6
 8001bb4:	4180      	sbcs	r0, r0
 8001bb6:	4240      	negs	r0, r0
 8001bb8:	1a09      	subs	r1, r1, r0
 8001bba:	e65c      	b.n	8001876 <__aeabi_dsub+0x7a>
 8001bbc:	000e      	movs	r6, r1
 8001bbe:	4667      	mov	r7, ip
 8001bc0:	4306      	orrs	r6, r0
 8001bc2:	4317      	orrs	r7, r2
 8001bc4:	2d00      	cmp	r5, #0
 8001bc6:	d15e      	bne.n	8001c86 <__aeabi_dsub+0x48a>
 8001bc8:	2e00      	cmp	r6, #0
 8001bca:	d000      	beq.n	8001bce <__aeabi_dsub+0x3d2>
 8001bcc:	e0f3      	b.n	8001db6 <__aeabi_dsub+0x5ba>
 8001bce:	2f00      	cmp	r7, #0
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x3d8>
 8001bd2:	e11e      	b.n	8001e12 <__aeabi_dsub+0x616>
 8001bd4:	465c      	mov	r4, fp
 8001bd6:	4661      	mov	r1, ip
 8001bd8:	4691      	mov	r9, r2
 8001bda:	e72c      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001bdc:	4fa9      	ldr	r7, [pc, #676]	; (8001e84 <__aeabi_dsub+0x688>)
 8001bde:	42be      	cmp	r6, r7
 8001be0:	d07b      	beq.n	8001cda <__aeabi_dsub+0x4de>
 8001be2:	001e      	movs	r6, r3
 8001be4:	e6f1      	b.n	80019ca <__aeabi_dsub+0x1ce>
 8001be6:	0010      	movs	r0, r2
 8001be8:	3d1f      	subs	r5, #31
 8001bea:	40e8      	lsrs	r0, r5
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d003      	beq.n	8001bf8 <__aeabi_dsub+0x3fc>
 8001bf0:	2140      	movs	r1, #64	; 0x40
 8001bf2:	1acb      	subs	r3, r1, r3
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	4316      	orrs	r6, r2
 8001bf8:	1e73      	subs	r3, r6, #1
 8001bfa:	419e      	sbcs	r6, r3
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	4306      	orrs	r6, r0
 8001c00:	4032      	ands	r2, r6
 8001c02:	2100      	movs	r1, #0
 8001c04:	2500      	movs	r5, #0
 8001c06:	e783      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001c08:	1a16      	subs	r6, r2, r0
 8001c0a:	4663      	mov	r3, ip
 8001c0c:	42b2      	cmp	r2, r6
 8001c0e:	4180      	sbcs	r0, r0
 8001c10:	1a59      	subs	r1, r3, r1
 8001c12:	4240      	negs	r0, r0
 8001c14:	1a0b      	subs	r3, r1, r0
 8001c16:	4698      	mov	r8, r3
 8001c18:	465c      	mov	r4, fp
 8001c1a:	e632      	b.n	8001882 <__aeabi_dsub+0x86>
 8001c1c:	2e1f      	cmp	r6, #31
 8001c1e:	dd00      	ble.n	8001c22 <__aeabi_dsub+0x426>
 8001c20:	e0ab      	b.n	8001d7a <__aeabi_dsub+0x57e>
 8001c22:	2720      	movs	r7, #32
 8001c24:	1bbb      	subs	r3, r7, r6
 8001c26:	469a      	mov	sl, r3
 8001c28:	4663      	mov	r3, ip
 8001c2a:	4657      	mov	r7, sl
 8001c2c:	40bb      	lsls	r3, r7
 8001c2e:	4699      	mov	r9, r3
 8001c30:	0013      	movs	r3, r2
 8001c32:	464f      	mov	r7, r9
 8001c34:	40f3      	lsrs	r3, r6
 8001c36:	431f      	orrs	r7, r3
 8001c38:	003b      	movs	r3, r7
 8001c3a:	4657      	mov	r7, sl
 8001c3c:	40ba      	lsls	r2, r7
 8001c3e:	1e57      	subs	r7, r2, #1
 8001c40:	41ba      	sbcs	r2, r7
 8001c42:	4313      	orrs	r3, r2
 8001c44:	4662      	mov	r2, ip
 8001c46:	40f2      	lsrs	r2, r6
 8001c48:	1889      	adds	r1, r1, r2
 8001c4a:	e698      	b.n	800197e <__aeabi_dsub+0x182>
 8001c4c:	2720      	movs	r7, #32
 8001c4e:	1bbb      	subs	r3, r7, r6
 8001c50:	469a      	mov	sl, r3
 8001c52:	4663      	mov	r3, ip
 8001c54:	4657      	mov	r7, sl
 8001c56:	40bb      	lsls	r3, r7
 8001c58:	4699      	mov	r9, r3
 8001c5a:	0013      	movs	r3, r2
 8001c5c:	464f      	mov	r7, r9
 8001c5e:	40f3      	lsrs	r3, r6
 8001c60:	431f      	orrs	r7, r3
 8001c62:	003b      	movs	r3, r7
 8001c64:	4657      	mov	r7, sl
 8001c66:	40ba      	lsls	r2, r7
 8001c68:	1e57      	subs	r7, r2, #1
 8001c6a:	41ba      	sbcs	r2, r7
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	4662      	mov	r2, ip
 8001c70:	40f2      	lsrs	r2, r6
 8001c72:	1a89      	subs	r1, r1, r2
 8001c74:	e79c      	b.n	8001bb0 <__aeabi_dsub+0x3b4>
 8001c76:	4b83      	ldr	r3, [pc, #524]	; (8001e84 <__aeabi_dsub+0x688>)
 8001c78:	429f      	cmp	r7, r3
 8001c7a:	d05f      	beq.n	8001d3c <__aeabi_dsub+0x540>
 8001c7c:	2580      	movs	r5, #128	; 0x80
 8001c7e:	042d      	lsls	r5, r5, #16
 8001c80:	4273      	negs	r3, r6
 8001c82:	4329      	orrs	r1, r5
 8001c84:	e720      	b.n	8001ac8 <__aeabi_dsub+0x2cc>
 8001c86:	2e00      	cmp	r6, #0
 8001c88:	d10c      	bne.n	8001ca4 <__aeabi_dsub+0x4a8>
 8001c8a:	2f00      	cmp	r7, #0
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0x494>
 8001c8e:	e0d0      	b.n	8001e32 <__aeabi_dsub+0x636>
 8001c90:	465c      	mov	r4, fp
 8001c92:	4661      	mov	r1, ip
 8001c94:	4691      	mov	r9, r2
 8001c96:	4d7b      	ldr	r5, [pc, #492]	; (8001e84 <__aeabi_dsub+0x688>)
 8001c98:	e6cd      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001c9a:	4f7a      	ldr	r7, [pc, #488]	; (8001e84 <__aeabi_dsub+0x688>)
 8001c9c:	42be      	cmp	r6, r7
 8001c9e:	d01c      	beq.n	8001cda <__aeabi_dsub+0x4de>
 8001ca0:	001e      	movs	r6, r3
 8001ca2:	e665      	b.n	8001970 <__aeabi_dsub+0x174>
 8001ca4:	2f00      	cmp	r7, #0
 8001ca6:	d018      	beq.n	8001cda <__aeabi_dsub+0x4de>
 8001ca8:	08c0      	lsrs	r0, r0, #3
 8001caa:	074e      	lsls	r6, r1, #29
 8001cac:	4306      	orrs	r6, r0
 8001cae:	2080      	movs	r0, #128	; 0x80
 8001cb0:	08c9      	lsrs	r1, r1, #3
 8001cb2:	0300      	lsls	r0, r0, #12
 8001cb4:	4201      	tst	r1, r0
 8001cb6:	d008      	beq.n	8001cca <__aeabi_dsub+0x4ce>
 8001cb8:	4663      	mov	r3, ip
 8001cba:	08dc      	lsrs	r4, r3, #3
 8001cbc:	4204      	tst	r4, r0
 8001cbe:	d104      	bne.n	8001cca <__aeabi_dsub+0x4ce>
 8001cc0:	0021      	movs	r1, r4
 8001cc2:	46da      	mov	sl, fp
 8001cc4:	08d2      	lsrs	r2, r2, #3
 8001cc6:	075e      	lsls	r6, r3, #29
 8001cc8:	4316      	orrs	r6, r2
 8001cca:	00f3      	lsls	r3, r6, #3
 8001ccc:	4699      	mov	r9, r3
 8001cce:	2401      	movs	r4, #1
 8001cd0:	4653      	mov	r3, sl
 8001cd2:	00c9      	lsls	r1, r1, #3
 8001cd4:	0f72      	lsrs	r2, r6, #29
 8001cd6:	4311      	orrs	r1, r2
 8001cd8:	401c      	ands	r4, r3
 8001cda:	4d6a      	ldr	r5, [pc, #424]	; (8001e84 <__aeabi_dsub+0x688>)
 8001cdc:	e6ab      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001cde:	001d      	movs	r5, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2700      	movs	r7, #0
 8001ce4:	e6b4      	b.n	8001a50 <__aeabi_dsub+0x254>
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	d159      	bne.n	8001d9e <__aeabi_dsub+0x5a2>
 8001cea:	000b      	movs	r3, r1
 8001cec:	4303      	orrs	r3, r0
 8001cee:	d100      	bne.n	8001cf2 <__aeabi_dsub+0x4f6>
 8001cf0:	e6d6      	b.n	8001aa0 <__aeabi_dsub+0x2a4>
 8001cf2:	1c73      	adds	r3, r6, #1
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_dsub+0x4fc>
 8001cf6:	e0b2      	b.n	8001e5e <__aeabi_dsub+0x662>
 8001cf8:	4b62      	ldr	r3, [pc, #392]	; (8001e84 <__aeabi_dsub+0x688>)
 8001cfa:	429f      	cmp	r7, r3
 8001cfc:	d01e      	beq.n	8001d3c <__aeabi_dsub+0x540>
 8001cfe:	43f3      	mvns	r3, r6
 8001d00:	2b38      	cmp	r3, #56	; 0x38
 8001d02:	dc6f      	bgt.n	8001de4 <__aeabi_dsub+0x5e8>
 8001d04:	2b1f      	cmp	r3, #31
 8001d06:	dd00      	ble.n	8001d0a <__aeabi_dsub+0x50e>
 8001d08:	e097      	b.n	8001e3a <__aeabi_dsub+0x63e>
 8001d0a:	2520      	movs	r5, #32
 8001d0c:	000e      	movs	r6, r1
 8001d0e:	1aed      	subs	r5, r5, r3
 8001d10:	40ae      	lsls	r6, r5
 8001d12:	46b0      	mov	r8, r6
 8001d14:	0006      	movs	r6, r0
 8001d16:	46aa      	mov	sl, r5
 8001d18:	40de      	lsrs	r6, r3
 8001d1a:	4645      	mov	r5, r8
 8001d1c:	4335      	orrs	r5, r6
 8001d1e:	002e      	movs	r6, r5
 8001d20:	4655      	mov	r5, sl
 8001d22:	40a8      	lsls	r0, r5
 8001d24:	40d9      	lsrs	r1, r3
 8001d26:	1e45      	subs	r5, r0, #1
 8001d28:	41a8      	sbcs	r0, r5
 8001d2a:	448c      	add	ip, r1
 8001d2c:	4306      	orrs	r6, r0
 8001d2e:	18b6      	adds	r6, r6, r2
 8001d30:	4296      	cmp	r6, r2
 8001d32:	4192      	sbcs	r2, r2
 8001d34:	4251      	negs	r1, r2
 8001d36:	4461      	add	r1, ip
 8001d38:	003d      	movs	r5, r7
 8001d3a:	e625      	b.n	8001988 <__aeabi_dsub+0x18c>
 8001d3c:	003d      	movs	r5, r7
 8001d3e:	4661      	mov	r1, ip
 8001d40:	4691      	mov	r9, r2
 8001d42:	e678      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001d44:	000b      	movs	r3, r1
 8001d46:	4303      	orrs	r3, r0
 8001d48:	2d00      	cmp	r5, #0
 8001d4a:	d000      	beq.n	8001d4e <__aeabi_dsub+0x552>
 8001d4c:	e655      	b.n	80019fa <__aeabi_dsub+0x1fe>
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f5      	beq.n	8001d3e <__aeabi_dsub+0x542>
 8001d52:	4663      	mov	r3, ip
 8001d54:	4313      	orrs	r3, r2
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x55e>
 8001d58:	e66d      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001d5a:	1886      	adds	r6, r0, r2
 8001d5c:	4286      	cmp	r6, r0
 8001d5e:	4180      	sbcs	r0, r0
 8001d60:	4461      	add	r1, ip
 8001d62:	4240      	negs	r0, r0
 8001d64:	1809      	adds	r1, r1, r0
 8001d66:	2200      	movs	r2, #0
 8001d68:	020b      	lsls	r3, r1, #8
 8001d6a:	d400      	bmi.n	8001d6e <__aeabi_dsub+0x572>
 8001d6c:	e6d0      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001d6e:	4b46      	ldr	r3, [pc, #280]	; (8001e88 <__aeabi_dsub+0x68c>)
 8001d70:	3501      	adds	r5, #1
 8001d72:	4019      	ands	r1, r3
 8001d74:	e5b2      	b.n	80018dc <__aeabi_dsub+0xe0>
 8001d76:	46b1      	mov	r9, r6
 8001d78:	e65d      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001d7a:	0033      	movs	r3, r6
 8001d7c:	4667      	mov	r7, ip
 8001d7e:	3b20      	subs	r3, #32
 8001d80:	40df      	lsrs	r7, r3
 8001d82:	003b      	movs	r3, r7
 8001d84:	2e20      	cmp	r6, #32
 8001d86:	d005      	beq.n	8001d94 <__aeabi_dsub+0x598>
 8001d88:	2740      	movs	r7, #64	; 0x40
 8001d8a:	1bbf      	subs	r7, r7, r6
 8001d8c:	4666      	mov	r6, ip
 8001d8e:	40be      	lsls	r6, r7
 8001d90:	4332      	orrs	r2, r6
 8001d92:	4690      	mov	r8, r2
 8001d94:	4646      	mov	r6, r8
 8001d96:	1e72      	subs	r2, r6, #1
 8001d98:	4196      	sbcs	r6, r2
 8001d9a:	4333      	orrs	r3, r6
 8001d9c:	e5ef      	b.n	800197e <__aeabi_dsub+0x182>
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <__aeabi_dsub+0x688>)
 8001da0:	429f      	cmp	r7, r3
 8001da2:	d0cb      	beq.n	8001d3c <__aeabi_dsub+0x540>
 8001da4:	2580      	movs	r5, #128	; 0x80
 8001da6:	042d      	lsls	r5, r5, #16
 8001da8:	4273      	negs	r3, r6
 8001daa:	4329      	orrs	r1, r5
 8001dac:	e7a8      	b.n	8001d00 <__aeabi_dsub+0x504>
 8001dae:	4308      	orrs	r0, r1
 8001db0:	1e41      	subs	r1, r0, #1
 8001db2:	4188      	sbcs	r0, r1
 8001db4:	e6a2      	b.n	8001afc <__aeabi_dsub+0x300>
 8001db6:	2f00      	cmp	r7, #0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x5c0>
 8001dba:	e63c      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001dbc:	4663      	mov	r3, ip
 8001dbe:	1a86      	subs	r6, r0, r2
 8001dc0:	1acf      	subs	r7, r1, r3
 8001dc2:	42b0      	cmp	r0, r6
 8001dc4:	419b      	sbcs	r3, r3
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	1afb      	subs	r3, r7, r3
 8001dca:	4698      	mov	r8, r3
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d54e      	bpl.n	8001e6e <__aeabi_dsub+0x672>
 8001dd0:	1a16      	subs	r6, r2, r0
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	42b2      	cmp	r2, r6
 8001dd6:	4192      	sbcs	r2, r2
 8001dd8:	1a59      	subs	r1, r3, r1
 8001dda:	4252      	negs	r2, r2
 8001ddc:	1a89      	subs	r1, r1, r2
 8001dde:	465c      	mov	r4, fp
 8001de0:	2200      	movs	r2, #0
 8001de2:	e57b      	b.n	80018dc <__aeabi_dsub+0xe0>
 8001de4:	4301      	orrs	r1, r0
 8001de6:	000e      	movs	r6, r1
 8001de8:	1e71      	subs	r1, r6, #1
 8001dea:	418e      	sbcs	r6, r1
 8001dec:	e79f      	b.n	8001d2e <__aeabi_dsub+0x532>
 8001dee:	001d      	movs	r5, r3
 8001df0:	000e      	movs	r6, r1
 8001df2:	3d20      	subs	r5, #32
 8001df4:	40ee      	lsrs	r6, r5
 8001df6:	46b0      	mov	r8, r6
 8001df8:	2b20      	cmp	r3, #32
 8001dfa:	d004      	beq.n	8001e06 <__aeabi_dsub+0x60a>
 8001dfc:	2540      	movs	r5, #64	; 0x40
 8001dfe:	1aeb      	subs	r3, r5, r3
 8001e00:	4099      	lsls	r1, r3
 8001e02:	4308      	orrs	r0, r1
 8001e04:	4681      	mov	r9, r0
 8001e06:	4648      	mov	r0, r9
 8001e08:	4643      	mov	r3, r8
 8001e0a:	1e41      	subs	r1, r0, #1
 8001e0c:	4188      	sbcs	r0, r1
 8001e0e:	4318      	orrs	r0, r3
 8001e10:	e674      	b.n	8001afc <__aeabi_dsub+0x300>
 8001e12:	2200      	movs	r2, #0
 8001e14:	2400      	movs	r4, #0
 8001e16:	e617      	b.n	8001a48 <__aeabi_dsub+0x24c>
 8001e18:	1a16      	subs	r6, r2, r0
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	42b2      	cmp	r2, r6
 8001e1e:	4192      	sbcs	r2, r2
 8001e20:	1a59      	subs	r1, r3, r1
 8001e22:	4252      	negs	r2, r2
 8001e24:	1a89      	subs	r1, r1, r2
 8001e26:	003d      	movs	r5, r7
 8001e28:	e525      	b.n	8001876 <__aeabi_dsub+0x7a>
 8001e2a:	4661      	mov	r1, ip
 8001e2c:	4691      	mov	r9, r2
 8001e2e:	4d15      	ldr	r5, [pc, #84]	; (8001e84 <__aeabi_dsub+0x688>)
 8001e30:	e601      	b.n	8001a36 <__aeabi_dsub+0x23a>
 8001e32:	2280      	movs	r2, #128	; 0x80
 8001e34:	2400      	movs	r4, #0
 8001e36:	0312      	lsls	r2, r2, #12
 8001e38:	e679      	b.n	8001b2e <__aeabi_dsub+0x332>
 8001e3a:	001d      	movs	r5, r3
 8001e3c:	000e      	movs	r6, r1
 8001e3e:	3d20      	subs	r5, #32
 8001e40:	40ee      	lsrs	r6, r5
 8001e42:	46b0      	mov	r8, r6
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d004      	beq.n	8001e52 <__aeabi_dsub+0x656>
 8001e48:	2540      	movs	r5, #64	; 0x40
 8001e4a:	1aeb      	subs	r3, r5, r3
 8001e4c:	4099      	lsls	r1, r3
 8001e4e:	4308      	orrs	r0, r1
 8001e50:	4681      	mov	r9, r0
 8001e52:	464e      	mov	r6, r9
 8001e54:	4643      	mov	r3, r8
 8001e56:	1e71      	subs	r1, r6, #1
 8001e58:	418e      	sbcs	r6, r1
 8001e5a:	431e      	orrs	r6, r3
 8001e5c:	e767      	b.n	8001d2e <__aeabi_dsub+0x532>
 8001e5e:	1886      	adds	r6, r0, r2
 8001e60:	4296      	cmp	r6, r2
 8001e62:	419b      	sbcs	r3, r3
 8001e64:	4461      	add	r1, ip
 8001e66:	425b      	negs	r3, r3
 8001e68:	18c9      	adds	r1, r1, r3
 8001e6a:	003d      	movs	r5, r7
 8001e6c:	e58c      	b.n	8001988 <__aeabi_dsub+0x18c>
 8001e6e:	4647      	mov	r7, r8
 8001e70:	4337      	orrs	r7, r6
 8001e72:	d0ce      	beq.n	8001e12 <__aeabi_dsub+0x616>
 8001e74:	2207      	movs	r2, #7
 8001e76:	4641      	mov	r1, r8
 8001e78:	4032      	ands	r2, r6
 8001e7a:	e649      	b.n	8001b10 <__aeabi_dsub+0x314>
 8001e7c:	2700      	movs	r7, #0
 8001e7e:	003a      	movs	r2, r7
 8001e80:	e5e6      	b.n	8001a50 <__aeabi_dsub+0x254>
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	000007ff 	.word	0x000007ff
 8001e88:	ff7fffff 	.word	0xff7fffff

08001e8c <__aeabi_d2iz>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	4d14      	ldr	r5, [pc, #80]	; (8001ee0 <__aeabi_d2iz+0x54>)
 8001e90:	030a      	lsls	r2, r1, #12
 8001e92:	004b      	lsls	r3, r1, #1
 8001e94:	0b12      	lsrs	r2, r2, #12
 8001e96:	0d5b      	lsrs	r3, r3, #21
 8001e98:	0fc9      	lsrs	r1, r1, #31
 8001e9a:	2400      	movs	r4, #0
 8001e9c:	42ab      	cmp	r3, r5
 8001e9e:	dd11      	ble.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ea0:	4c10      	ldr	r4, [pc, #64]	; (8001ee4 <__aeabi_d2iz+0x58>)
 8001ea2:	42a3      	cmp	r3, r4
 8001ea4:	dc10      	bgt.n	8001ec8 <__aeabi_d2iz+0x3c>
 8001ea6:	2480      	movs	r4, #128	; 0x80
 8001ea8:	0364      	lsls	r4, r4, #13
 8001eaa:	4322      	orrs	r2, r4
 8001eac:	4c0e      	ldr	r4, [pc, #56]	; (8001ee8 <__aeabi_d2iz+0x5c>)
 8001eae:	1ae4      	subs	r4, r4, r3
 8001eb0:	2c1f      	cmp	r4, #31
 8001eb2:	dd0c      	ble.n	8001ece <__aeabi_d2iz+0x42>
 8001eb4:	480d      	ldr	r0, [pc, #52]	; (8001eec <__aeabi_d2iz+0x60>)
 8001eb6:	1ac3      	subs	r3, r0, r3
 8001eb8:	40da      	lsrs	r2, r3
 8001eba:	0013      	movs	r3, r2
 8001ebc:	425c      	negs	r4, r3
 8001ebe:	2900      	cmp	r1, #0
 8001ec0:	d100      	bne.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ec2:	001c      	movs	r4, r3
 8001ec4:	0020      	movs	r0, r4
 8001ec6:	bd30      	pop	{r4, r5, pc}
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <__aeabi_d2iz+0x64>)
 8001eca:	18cc      	adds	r4, r1, r3
 8001ecc:	e7fa      	b.n	8001ec4 <__aeabi_d2iz+0x38>
 8001ece:	4d09      	ldr	r5, [pc, #36]	; (8001ef4 <__aeabi_d2iz+0x68>)
 8001ed0:	40e0      	lsrs	r0, r4
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	4463      	add	r3, ip
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	0013      	movs	r3, r2
 8001eda:	4303      	orrs	r3, r0
 8001edc:	e7ee      	b.n	8001ebc <__aeabi_d2iz+0x30>
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	000003fe 	.word	0x000003fe
 8001ee4:	0000041d 	.word	0x0000041d
 8001ee8:	00000433 	.word	0x00000433
 8001eec:	00000413 	.word	0x00000413
 8001ef0:	7fffffff 	.word	0x7fffffff
 8001ef4:	fffffbed 	.word	0xfffffbed

08001ef8 <__aeabi_i2d>:
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	2800      	cmp	r0, #0
 8001efc:	d02d      	beq.n	8001f5a <__aeabi_i2d+0x62>
 8001efe:	17c3      	asrs	r3, r0, #31
 8001f00:	18c5      	adds	r5, r0, r3
 8001f02:	405d      	eors	r5, r3
 8001f04:	0fc4      	lsrs	r4, r0, #31
 8001f06:	0028      	movs	r0, r5
 8001f08:	f000 f862 	bl	8001fd0 <__clzsi2>
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <__aeabi_i2d+0x6c>)
 8001f0e:	1a1b      	subs	r3, r3, r0
 8001f10:	055b      	lsls	r3, r3, #21
 8001f12:	0d5b      	lsrs	r3, r3, #21
 8001f14:	280a      	cmp	r0, #10
 8001f16:	dd15      	ble.n	8001f44 <__aeabi_i2d+0x4c>
 8001f18:	380b      	subs	r0, #11
 8001f1a:	4085      	lsls	r5, r0
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	032d      	lsls	r5, r5, #12
 8001f20:	0b2d      	lsrs	r5, r5, #12
 8001f22:	2100      	movs	r1, #0
 8001f24:	0010      	movs	r0, r2
 8001f26:	032d      	lsls	r5, r5, #12
 8001f28:	0d0a      	lsrs	r2, r1, #20
 8001f2a:	0b2d      	lsrs	r5, r5, #12
 8001f2c:	0512      	lsls	r2, r2, #20
 8001f2e:	432a      	orrs	r2, r5
 8001f30:	4d0d      	ldr	r5, [pc, #52]	; (8001f68 <__aeabi_i2d+0x70>)
 8001f32:	051b      	lsls	r3, r3, #20
 8001f34:	402a      	ands	r2, r5
 8001f36:	4313      	orrs	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	07e4      	lsls	r4, r4, #31
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	4323      	orrs	r3, r4
 8001f40:	0019      	movs	r1, r3
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
 8001f44:	0002      	movs	r2, r0
 8001f46:	0029      	movs	r1, r5
 8001f48:	3215      	adds	r2, #21
 8001f4a:	4091      	lsls	r1, r2
 8001f4c:	000a      	movs	r2, r1
 8001f4e:	210b      	movs	r1, #11
 8001f50:	1a08      	subs	r0, r1, r0
 8001f52:	40c5      	lsrs	r5, r0
 8001f54:	032d      	lsls	r5, r5, #12
 8001f56:	0b2d      	lsrs	r5, r5, #12
 8001f58:	e7e3      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2500      	movs	r5, #0
 8001f60:	2200      	movs	r2, #0
 8001f62:	e7de      	b.n	8001f22 <__aeabi_i2d+0x2a>
 8001f64:	0000041e 	.word	0x0000041e
 8001f68:	800fffff 	.word	0x800fffff

08001f6c <__aeabi_ui2d>:
 8001f6c:	b510      	push	{r4, lr}
 8001f6e:	1e04      	subs	r4, r0, #0
 8001f70:	d025      	beq.n	8001fbe <__aeabi_ui2d+0x52>
 8001f72:	f000 f82d 	bl	8001fd0 <__clzsi2>
 8001f76:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <__aeabi_ui2d+0x5c>)
 8001f78:	1a1b      	subs	r3, r3, r0
 8001f7a:	055b      	lsls	r3, r3, #21
 8001f7c:	0d5b      	lsrs	r3, r3, #21
 8001f7e:	280a      	cmp	r0, #10
 8001f80:	dd12      	ble.n	8001fa8 <__aeabi_ui2d+0x3c>
 8001f82:	380b      	subs	r0, #11
 8001f84:	4084      	lsls	r4, r0
 8001f86:	2200      	movs	r2, #0
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	0b24      	lsrs	r4, r4, #12
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	0010      	movs	r0, r2
 8001f90:	0324      	lsls	r4, r4, #12
 8001f92:	0d0a      	lsrs	r2, r1, #20
 8001f94:	0b24      	lsrs	r4, r4, #12
 8001f96:	0512      	lsls	r2, r2, #20
 8001f98:	4322      	orrs	r2, r4
 8001f9a:	4c0c      	ldr	r4, [pc, #48]	; (8001fcc <__aeabi_ui2d+0x60>)
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	4022      	ands	r2, r4
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	0859      	lsrs	r1, r3, #1
 8001fa6:	bd10      	pop	{r4, pc}
 8001fa8:	0002      	movs	r2, r0
 8001faa:	0021      	movs	r1, r4
 8001fac:	3215      	adds	r2, #21
 8001fae:	4091      	lsls	r1, r2
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	210b      	movs	r1, #11
 8001fb4:	1a08      	subs	r0, r1, r0
 8001fb6:	40c4      	lsrs	r4, r0
 8001fb8:	0324      	lsls	r4, r4, #12
 8001fba:	0b24      	lsrs	r4, r4, #12
 8001fbc:	e7e6      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2400      	movs	r4, #0
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	e7e2      	b.n	8001f8c <__aeabi_ui2d+0x20>
 8001fc6:	46c0      	nop			; (mov r8, r8)
 8001fc8:	0000041e 	.word	0x0000041e
 8001fcc:	800fffff 	.word	0x800fffff

08001fd0 <__clzsi2>:
 8001fd0:	211c      	movs	r1, #28
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	041b      	lsls	r3, r3, #16
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	d301      	bcc.n	8001fde <__clzsi2+0xe>
 8001fda:	0c00      	lsrs	r0, r0, #16
 8001fdc:	3910      	subs	r1, #16
 8001fde:	0a1b      	lsrs	r3, r3, #8
 8001fe0:	4298      	cmp	r0, r3
 8001fe2:	d301      	bcc.n	8001fe8 <__clzsi2+0x18>
 8001fe4:	0a00      	lsrs	r0, r0, #8
 8001fe6:	3908      	subs	r1, #8
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	4298      	cmp	r0, r3
 8001fec:	d301      	bcc.n	8001ff2 <__clzsi2+0x22>
 8001fee:	0900      	lsrs	r0, r0, #4
 8001ff0:	3904      	subs	r1, #4
 8001ff2:	a202      	add	r2, pc, #8	; (adr r2, 8001ffc <__clzsi2+0x2c>)
 8001ff4:	5c10      	ldrb	r0, [r2, r0]
 8001ff6:	1840      	adds	r0, r0, r1
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)
 8001ffc:	02020304 	.word	0x02020304
 8002000:	01010101 	.word	0x01010101
	...

0800200c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_Init+0x3c>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_Init+0x3c>)
 800201e:	2180      	movs	r1, #128	; 0x80
 8002020:	0049      	lsls	r1, r1, #1
 8002022:	430a      	orrs	r2, r1
 8002024:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f810 	bl	800204c <HAL_InitTick>
 800202c:	1e03      	subs	r3, r0, #0
 800202e:	d003      	beq.n	8002038 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	e001      	b.n	800203c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002038:	f003 f8a6 	bl	8005188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800203c:	1dfb      	adds	r3, r7, #7
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b002      	add	sp, #8
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40022000 	.word	0x40022000

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002054:	230f      	movs	r3, #15
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 800205c:	4b1d      	ldr	r3, [pc, #116]	; (80020d4 <HAL_InitTick+0x88>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d02b      	beq.n	80020bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8002064:	4b1c      	ldr	r3, [pc, #112]	; (80020d8 <HAL_InitTick+0x8c>)
 8002066:	681c      	ldr	r4, [r3, #0]
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_InitTick+0x88>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0019      	movs	r1, r3
 800206e:	23fa      	movs	r3, #250	; 0xfa
 8002070:	0098      	lsls	r0, r3, #2
 8002072:	f7fe f859 	bl	8000128 <__udivsi3>
 8002076:	0003      	movs	r3, r0
 8002078:	0019      	movs	r1, r3
 800207a:	0020      	movs	r0, r4
 800207c:	f7fe f854 	bl	8000128 <__udivsi3>
 8002080:	0003      	movs	r3, r0
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f969 	bl	800235a <HAL_SYSTICK_Config>
 8002088:	1e03      	subs	r3, r0, #0
 800208a:	d112      	bne.n	80020b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d80a      	bhi.n	80020a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
 8002098:	2200      	movs	r2, #0
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f928 	bl	80022f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_InitTick+0x90>)
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	e00d      	b.n	80020c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80020a8:	230f      	movs	r3, #15
 80020aa:	18fb      	adds	r3, r7, r3
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
 80020b0:	e008      	b.n	80020c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020b2:	230f      	movs	r3, #15
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2201      	movs	r2, #1
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020bc:	230f      	movs	r3, #15
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	2201      	movs	r2, #1
 80020c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80020c4:	230f      	movs	r3, #15
 80020c6:	18fb      	adds	r3, r7, r3
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	0018      	movs	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	b005      	add	sp, #20
 80020d0:	bd90      	pop	{r4, r7, pc}
 80020d2:	46c0      	nop			; (mov r8, r8)
 80020d4:	20000004 	.word	0x20000004
 80020d8:	20000008 	.word	0x20000008
 80020dc:	20000000 	.word	0x20000000

080020e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_IncTick+0x18>)
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <HAL_IncTick+0x1c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	18d2      	adds	r2, r2, r3
 80020ee:	4b02      	ldr	r3, [pc, #8]	; (80020f8 <HAL_IncTick+0x18>)
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200002b0 	.word	0x200002b0
 80020fc:	20000004 	.word	0x20000004

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b02      	ldr	r3, [pc, #8]	; (8002110 <HAL_GetTick+0x10>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	200002b0 	.word	0x200002b0

08002114 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800211c:	f7ff fff0 	bl	8002100 <HAL_GetTick>
 8002120:	0003      	movs	r3, r0
 8002122:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	d004      	beq.n	8002138 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_Delay+0x40>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	18d3      	adds	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	f7ff ffe1 	bl	8002100 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	429a      	cmp	r2, r3
 8002148:	d8f7      	bhi.n	800213a <HAL_Delay+0x26>
  {
  }
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	20000004 	.word	0x20000004

08002158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	0002      	movs	r2, r0
 8002160:	1dfb      	adds	r3, r7, #7
 8002162:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b7f      	cmp	r3, #127	; 0x7f
 800216a:	d809      	bhi.n	8002180 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	001a      	movs	r2, r3
 8002172:	231f      	movs	r3, #31
 8002174:	401a      	ands	r2, r3
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <__NVIC_EnableIRQ+0x30>)
 8002178:	2101      	movs	r1, #1
 800217a:	4091      	lsls	r1, r2
 800217c:	000a      	movs	r2, r1
 800217e:	601a      	str	r2, [r3, #0]
  }
}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}
 8002188:	e000e100 	.word	0xe000e100

0800218c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	0002      	movs	r2, r0
 8002194:	1dfb      	adds	r3, r7, #7
 8002196:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002198:	1dfb      	adds	r3, r7, #7
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b7f      	cmp	r3, #127	; 0x7f
 800219e:	d80e      	bhi.n	80021be <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	001a      	movs	r2, r3
 80021a6:	231f      	movs	r3, #31
 80021a8:	4013      	ands	r3, r2
 80021aa:	4907      	ldr	r1, [pc, #28]	; (80021c8 <__NVIC_DisableIRQ+0x3c>)
 80021ac:	2201      	movs	r2, #1
 80021ae:	409a      	lsls	r2, r3
 80021b0:	0013      	movs	r3, r2
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80021ba:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80021be:	46c0      	nop			; (mov r8, r8)
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	e000e100 	.word	0xe000e100

080021cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	0002      	movs	r2, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021da:	1dfb      	adds	r3, r7, #7
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	2b7f      	cmp	r3, #127	; 0x7f
 80021e0:	d828      	bhi.n	8002234 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021e2:	4a2f      	ldr	r2, [pc, #188]	; (80022a0 <__NVIC_SetPriority+0xd4>)
 80021e4:	1dfb      	adds	r3, r7, #7
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	b25b      	sxtb	r3, r3
 80021ea:	089b      	lsrs	r3, r3, #2
 80021ec:	33c0      	adds	r3, #192	; 0xc0
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	589b      	ldr	r3, [r3, r2]
 80021f2:	1dfa      	adds	r2, r7, #7
 80021f4:	7812      	ldrb	r2, [r2, #0]
 80021f6:	0011      	movs	r1, r2
 80021f8:	2203      	movs	r2, #3
 80021fa:	400a      	ands	r2, r1
 80021fc:	00d2      	lsls	r2, r2, #3
 80021fe:	21ff      	movs	r1, #255	; 0xff
 8002200:	4091      	lsls	r1, r2
 8002202:	000a      	movs	r2, r1
 8002204:	43d2      	mvns	r2, r2
 8002206:	401a      	ands	r2, r3
 8002208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	22ff      	movs	r2, #255	; 0xff
 8002210:	401a      	ands	r2, r3
 8002212:	1dfb      	adds	r3, r7, #7
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	0018      	movs	r0, r3
 8002218:	2303      	movs	r3, #3
 800221a:	4003      	ands	r3, r0
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002220:	481f      	ldr	r0, [pc, #124]	; (80022a0 <__NVIC_SetPriority+0xd4>)
 8002222:	1dfb      	adds	r3, r7, #7
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	b25b      	sxtb	r3, r3
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	430a      	orrs	r2, r1
 800222c:	33c0      	adds	r3, #192	; 0xc0
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002232:	e031      	b.n	8002298 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002234:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <__NVIC_SetPriority+0xd8>)
 8002236:	1dfb      	adds	r3, r7, #7
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	0019      	movs	r1, r3
 800223c:	230f      	movs	r3, #15
 800223e:	400b      	ands	r3, r1
 8002240:	3b08      	subs	r3, #8
 8002242:	089b      	lsrs	r3, r3, #2
 8002244:	3306      	adds	r3, #6
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	18d3      	adds	r3, r2, r3
 800224a:	3304      	adds	r3, #4
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1dfa      	adds	r2, r7, #7
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	0011      	movs	r1, r2
 8002254:	2203      	movs	r2, #3
 8002256:	400a      	ands	r2, r1
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	21ff      	movs	r1, #255	; 0xff
 800225c:	4091      	lsls	r1, r2
 800225e:	000a      	movs	r2, r1
 8002260:	43d2      	mvns	r2, r2
 8002262:	401a      	ands	r2, r3
 8002264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	019b      	lsls	r3, r3, #6
 800226a:	22ff      	movs	r2, #255	; 0xff
 800226c:	401a      	ands	r2, r3
 800226e:	1dfb      	adds	r3, r7, #7
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	0018      	movs	r0, r3
 8002274:	2303      	movs	r3, #3
 8002276:	4003      	ands	r3, r0
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800227c:	4809      	ldr	r0, [pc, #36]	; (80022a4 <__NVIC_SetPriority+0xd8>)
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	001c      	movs	r4, r3
 8002284:	230f      	movs	r3, #15
 8002286:	4023      	ands	r3, r4
 8002288:	3b08      	subs	r3, #8
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	430a      	orrs	r2, r1
 800228e:	3306      	adds	r3, #6
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	18c3      	adds	r3, r0, r3
 8002294:	3304      	adds	r3, #4
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	46c0      	nop			; (mov r8, r8)
 800229a:	46bd      	mov	sp, r7
 800229c:	b003      	add	sp, #12
 800229e:	bd90      	pop	{r4, r7, pc}
 80022a0:	e000e100 	.word	0xe000e100
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	4a0c      	ldr	r2, [pc, #48]	; (80022e8 <SysTick_Config+0x40>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e010      	b.n	80022e0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <SysTick_Config+0x44>)
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	3a01      	subs	r2, #1
 80022c4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	2301      	movs	r3, #1
 80022c8:	425b      	negs	r3, r3
 80022ca:	2103      	movs	r1, #3
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff ff7d 	bl	80021cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <SysTick_Config+0x44>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d8:	4b04      	ldr	r3, [pc, #16]	; (80022ec <SysTick_Config+0x44>)
 80022da:	2207      	movs	r2, #7
 80022dc:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022de:	2300      	movs	r3, #0
}
 80022e0:	0018      	movs	r0, r3
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b002      	add	sp, #8
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	00ffffff 	.word	0x00ffffff
 80022ec:	e000e010 	.word	0xe000e010

080022f0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60b9      	str	r1, [r7, #8]
 80022f8:	607a      	str	r2, [r7, #4]
 80022fa:	210f      	movs	r1, #15
 80022fc:	187b      	adds	r3, r7, r1
 80022fe:	1c02      	adds	r2, r0, #0
 8002300:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	187b      	adds	r3, r7, r1
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b25b      	sxtb	r3, r3
 800230a:	0011      	movs	r1, r2
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff5d 	bl	80021cc <__NVIC_SetPriority>
}
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b004      	add	sp, #16
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	0002      	movs	r2, r0
 8002322:	1dfb      	adds	r3, r7, #7
 8002324:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002326:	1dfb      	adds	r3, r7, #7
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b25b      	sxtb	r3, r3
 800232c:	0018      	movs	r0, r3
 800232e:	f7ff ff13 	bl	8002158 <__NVIC_EnableIRQ>
}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	0002      	movs	r2, r0
 8002342:	1dfb      	adds	r3, r7, #7
 8002344:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002346:	1dfb      	adds	r3, r7, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	b25b      	sxtb	r3, r3
 800234c:	0018      	movs	r0, r3
 800234e:	f7ff ff1d 	bl	800218c <__NVIC_DisableIRQ>
}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	46bd      	mov	sp, r7
 8002356:	b002      	add	sp, #8
 8002358:	bd80      	pop	{r7, pc}

0800235a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b082      	sub	sp, #8
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f7ff ff9f 	bl	80022a8 <SysTick_Config>
 800236a:	0003      	movs	r3, r0
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	b002      	add	sp, #8
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	230f      	movs	r3, #15
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2224      	movs	r2, #36	; 0x24
 8002388:	2100      	movs	r1, #0
 800238a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	5c9b      	ldrb	r3, [r3, r2]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_DMA_Abort_IT+0x26>
 8002396:	2302      	movs	r3, #2
 8002398:	e05e      	b.n	8002458 <HAL_DMA_Abort_IT+0xe4>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2224      	movs	r2, #36	; 0x24
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2225      	movs	r2, #37	; 0x25
 80023a6:	5c9b      	ldrb	r3, [r3, r2]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d007      	beq.n	80023be <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80023b4:	230f      	movs	r3, #15
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e049      	b.n	8002452 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	210e      	movs	r1, #14
 80023ca:	438a      	bics	r2, r1
 80023cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	438a      	bics	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	491d      	ldr	r1, [pc, #116]	; (8002460 <HAL_DMA_Abort_IT+0xec>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_DMA_Abort_IT+0xf0>)
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	221c      	movs	r2, #28
 80023f8:	4013      	ands	r3, r2
 80023fa:	2201      	movs	r2, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <HAL_DMA_Abort_IT+0xf0>)
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800240c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002420:	490f      	ldr	r1, [pc, #60]	; (8002460 <HAL_DMA_Abort_IT+0xec>)
 8002422:	400a      	ands	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800242e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2225      	movs	r2, #37	; 0x25
 8002434:	2101      	movs	r1, #1
 8002436:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2224      	movs	r2, #36	; 0x24
 800243c:	2100      	movs	r1, #0
 800243e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2b00      	cmp	r3, #0
 8002446:	d004      	beq.n	8002452 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	0010      	movs	r0, r2
 8002450:	4798      	blx	r3
    }
  }
  return status;
 8002452:	230f      	movs	r3, #15
 8002454:	18fb      	adds	r3, r7, r3
 8002456:	781b      	ldrb	r3, [r3, #0]
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	fffffeff 	.word	0xfffffeff
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002472:	2300      	movs	r3, #0
 8002474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002476:	e147      	b.n	8002708 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2101      	movs	r1, #1
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4091      	lsls	r1, r2
 8002482:	000a      	movs	r2, r1
 8002484:	4013      	ands	r3, r2
 8002486:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d100      	bne.n	8002490 <HAL_GPIO_Init+0x28>
 800248e:	e138      	b.n	8002702 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b02      	cmp	r3, #2
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x38>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b12      	cmp	r3, #18
 800249e:	d123      	bne.n	80024e8 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	08da      	lsrs	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3208      	adds	r2, #8
 80024a8:	0092      	lsls	r2, r2, #2
 80024aa:	58d3      	ldr	r3, [r2, r3]
 80024ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2207      	movs	r2, #7
 80024b2:	4013      	ands	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	220f      	movs	r2, #15
 80024b8:	409a      	lsls	r2, r3
 80024ba:	0013      	movs	r3, r2
 80024bc:	43da      	mvns	r2, r3
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	691a      	ldr	r2, [r3, #16]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2107      	movs	r1, #7
 80024cc:	400b      	ands	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	409a      	lsls	r2, r3
 80024d2:	0013      	movs	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	08da      	lsrs	r2, r3, #3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	3208      	adds	r2, #8
 80024e2:	0092      	lsls	r2, r2, #2
 80024e4:	6939      	ldr	r1, [r7, #16]
 80024e6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	2203      	movs	r2, #3
 80024f4:	409a      	lsls	r2, r3
 80024f6:	0013      	movs	r3, r2
 80024f8:	43da      	mvns	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2203      	movs	r2, #3
 8002506:	401a      	ands	r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	409a      	lsls	r2, r3
 800250e:	0013      	movs	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d00b      	beq.n	800253c <HAL_GPIO_Init+0xd4>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b02      	cmp	r3, #2
 800252a:	d007      	beq.n	800253c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002530:	2b11      	cmp	r3, #17
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b12      	cmp	r3, #18
 800253a:	d130      	bne.n	800259e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	409a      	lsls	r2, r3
 800254a:	0013      	movs	r3, r2
 800254c:	43da      	mvns	r2, r3
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	409a      	lsls	r2, r3
 800255e:	0013      	movs	r3, r2
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002572:	2201      	movs	r2, #1
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	091b      	lsrs	r3, r3, #4
 8002588:	2201      	movs	r2, #1
 800258a:	401a      	ands	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	409a      	lsls	r2, r3
 8002590:	0013      	movs	r3, r2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	4313      	orrs	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	2203      	movs	r2, #3
 80025aa:	409a      	lsls	r2, r3
 80025ac:	0013      	movs	r3, r2
 80025ae:	43da      	mvns	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	055b      	lsls	r3, r3, #21
 80025d6:	4013      	ands	r3, r2
 80025d8:	d100      	bne.n	80025dc <HAL_GPIO_Init+0x174>
 80025da:	e092      	b.n	8002702 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	3318      	adds	r3, #24
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	589b      	ldr	r3, [r3, r2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	2203      	movs	r2, #3
 80025ee:	4013      	ands	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	220f      	movs	r2, #15
 80025f4:	409a      	lsls	r2, r3
 80025f6:	0013      	movs	r3, r2
 80025f8:	43da      	mvns	r2, r3
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	23a0      	movs	r3, #160	; 0xa0
 8002604:	05db      	lsls	r3, r3, #23
 8002606:	429a      	cmp	r2, r3
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1ca>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a45      	ldr	r2, [pc, #276]	; (8002724 <HAL_GPIO_Init+0x2bc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1c6>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a44      	ldr	r2, [pc, #272]	; (8002728 <HAL_GPIO_Init+0x2c0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1c2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a43      	ldr	r2, [pc, #268]	; (800272c <HAL_GPIO_Init+0x2c4>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1be>
 8002622:	2303      	movs	r3, #3
 8002624:	e006      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002626:	2305      	movs	r3, #5
 8002628:	e004      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262a:	2302      	movs	r3, #2
 800262c:	e002      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <HAL_GPIO_Init+0x1cc>
 8002632:	2300      	movs	r3, #0
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	2103      	movs	r1, #3
 8002638:	400a      	ands	r2, r1
 800263a:	00d2      	lsls	r2, r2, #3
 800263c:	4093      	lsls	r3, r2
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002644:	4936      	ldr	r1, [pc, #216]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	089b      	lsrs	r3, r3, #2
 800264a:	3318      	adds	r3, #24
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002652:	4a33      	ldr	r2, [pc, #204]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002654:	2380      	movs	r3, #128	; 0x80
 8002656:	58d3      	ldr	r3, [r2, r3]
 8002658:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43da      	mvns	r2, r3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	4013      	ands	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685a      	ldr	r2, [r3, #4]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	025b      	lsls	r3, r3, #9
 800266c:	4013      	ands	r3, r2
 800266e:	d003      	beq.n	8002678 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002678:	4929      	ldr	r1, [pc, #164]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002680:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 8002682:	2384      	movs	r3, #132	; 0x84
 8002684:	58d3      	ldr	r3, [r2, r3]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	43da      	mvns	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4013      	ands	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	2380      	movs	r3, #128	; 0x80
 8002698:	029b      	lsls	r3, r3, #10
 800269a:	4013      	ands	r3, r2
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80026a6:	491e      	ldr	r1, [pc, #120]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026a8:	2284      	movs	r2, #132	; 0x84
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026ae:	4b1c      	ldr	r3, [pc, #112]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	43da      	mvns	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	2380      	movs	r3, #128	; 0x80
 80026c4:	035b      	lsls	r3, r3, #13
 80026c6:	4013      	ands	r3, r2
 80026c8:	d003      	beq.n	80026d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	43da      	mvns	r2, r3
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4013      	ands	r3, r2
 80026e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	2380      	movs	r3, #128	; 0x80
 80026ee:	039b      	lsls	r3, r3, #14
 80026f0:	4013      	ands	r3, r2
 80026f2:	d003      	beq.n	80026fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_GPIO_Init+0x2b8>)
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	40da      	lsrs	r2, r3
 8002710:	1e13      	subs	r3, r2, #0
 8002712:	d000      	beq.n	8002716 <HAL_GPIO_Init+0x2ae>
 8002714:	e6b0      	b.n	8002478 <HAL_GPIO_Init+0x10>
  }
}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	46bd      	mov	sp, r7
 800271a:	b006      	add	sp, #24
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			; (mov r8, r8)
 8002720:	40021800 	.word	0x40021800
 8002724:	50000400 	.word	0x50000400
 8002728:	50000800 	.word	0x50000800
 800272c:	50000c00 	.word	0x50000c00

08002730 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800273a:	2300      	movs	r3, #0
 800273c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800273e:	e0b4      	b.n	80028aa <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002740:	2201      	movs	r2, #1
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	409a      	lsls	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4013      	ands	r3, r2
 800274a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d100      	bne.n	8002754 <HAL_GPIO_DeInit+0x24>
 8002752:	e0a7      	b.n	80028a4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8002754:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3318      	adds	r3, #24
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	589b      	ldr	r3, [r3, r2]
 8002760:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2203      	movs	r2, #3
 8002766:	4013      	ands	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	220f      	movs	r2, #15
 800276c:	409a      	lsls	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4013      	ands	r3, r2
 8002772:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	23a0      	movs	r3, #160	; 0xa0
 8002778:	05db      	lsls	r3, r3, #23
 800277a:	429a      	cmp	r2, r3
 800277c:	d013      	beq.n	80027a6 <HAL_GPIO_DeInit+0x76>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_GPIO_DeInit+0x194>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d00d      	beq.n	80027a2 <HAL_GPIO_DeInit+0x72>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a4f      	ldr	r2, [pc, #316]	; (80028c8 <HAL_GPIO_DeInit+0x198>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d007      	beq.n	800279e <HAL_GPIO_DeInit+0x6e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_GPIO_DeInit+0x19c>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_GPIO_DeInit+0x6a>
 8002796:	2303      	movs	r3, #3
 8002798:	e006      	b.n	80027a8 <HAL_GPIO_DeInit+0x78>
 800279a:	2305      	movs	r3, #5
 800279c:	e004      	b.n	80027a8 <HAL_GPIO_DeInit+0x78>
 800279e:	2302      	movs	r3, #2
 80027a0:	e002      	b.n	80027a8 <HAL_GPIO_DeInit+0x78>
 80027a2:	2301      	movs	r3, #1
 80027a4:	e000      	b.n	80027a8 <HAL_GPIO_DeInit+0x78>
 80027a6:	2300      	movs	r3, #0
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	2103      	movs	r1, #3
 80027ac:	400a      	ands	r2, r1
 80027ae:	00d2      	lsls	r2, r2, #3
 80027b0:	4093      	lsls	r3, r2
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d136      	bne.n	8002826 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80027b8:	4a41      	ldr	r2, [pc, #260]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	58d3      	ldr	r3, [r2, r3]
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	43d2      	mvns	r2, r2
 80027c2:	493f      	ldr	r1, [pc, #252]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	2280      	movs	r2, #128	; 0x80
 80027c8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80027ca:	4a3d      	ldr	r2, [pc, #244]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027cc:	2384      	movs	r3, #132	; 0x84
 80027ce:	58d3      	ldr	r3, [r2, r3]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	43d2      	mvns	r2, r2
 80027d4:	493a      	ldr	r1, [pc, #232]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	2284      	movs	r2, #132	; 0x84
 80027da:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80027dc:	4b38      	ldr	r3, [pc, #224]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027e6:	400a      	ands	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80027ea:	4b35      	ldr	r3, [pc, #212]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027ec:	685a      	ldr	r2, [r3, #4]
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	43d9      	mvns	r1, r3
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2203      	movs	r2, #3
 80027fc:	4013      	ands	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	220f      	movs	r2, #15
 8002802:	409a      	lsls	r2, r3
 8002804:	0013      	movs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8002808:	4a2d      	ldr	r2, [pc, #180]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3318      	adds	r3, #24
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	589a      	ldr	r2, [r3, r2]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	43d9      	mvns	r1, r3
 8002818:	4829      	ldr	r0, [pc, #164]	; (80028c0 <HAL_GPIO_DeInit+0x190>)
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	089b      	lsrs	r3, r3, #2
 800281e:	400a      	ands	r2, r1
 8002820:	3318      	adds	r3, #24
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	2103      	movs	r1, #3
 8002830:	4099      	lsls	r1, r3
 8002832:	000b      	movs	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	58d3      	ldr	r3, [r2, r3]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	2107      	movs	r1, #7
 800284a:	400a      	ands	r2, r1
 800284c:	0092      	lsls	r2, r2, #2
 800284e:	210f      	movs	r1, #15
 8002850:	4091      	lsls	r1, r2
 8002852:	000a      	movs	r2, r1
 8002854:	43d1      	mvns	r1, r2
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	08d2      	lsrs	r2, r2, #3
 800285a:	4019      	ands	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3208      	adds	r2, #8
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	0052      	lsls	r2, r2, #1
 800286c:	2103      	movs	r1, #3
 800286e:	4091      	lsls	r1, r2
 8002870:	000a      	movs	r2, r1
 8002872:	43d2      	mvns	r2, r2
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2101      	movs	r1, #1
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4091      	lsls	r1, r2
 8002884:	000a      	movs	r2, r1
 8002886:	43d2      	mvns	r2, r2
 8002888:	401a      	ands	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	0052      	lsls	r2, r2, #1
 8002896:	2103      	movs	r1, #3
 8002898:	4091      	lsls	r1, r2
 800289a:	000a      	movs	r2, r1
 800289c:	43d2      	mvns	r2, r2
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	40da      	lsrs	r2, r3
 80028b0:	1e13      	subs	r3, r2, #0
 80028b2:	d000      	beq.n	80028b6 <HAL_GPIO_DeInit+0x186>
 80028b4:	e744      	b.n	8002740 <HAL_GPIO_DeInit+0x10>
  }
}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b006      	add	sp, #24
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021800 	.word	0x40021800
 80028c4:	50000400 	.word	0x50000400
 80028c8:	50000800 	.word	0x50000800
 80028cc:	50000c00 	.word	0x50000c00

080028d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e082      	b.n	80029e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2241      	movs	r2, #65	; 0x41
 80028e6:	5c9b      	ldrb	r3, [r3, r2]
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d107      	bne.n	80028fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2240      	movs	r2, #64	; 0x40
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f002 fc69 	bl	80051d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2241      	movs	r2, #65	; 0x41
 8002902:	2124      	movs	r1, #36	; 0x24
 8002904:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	438a      	bics	r2, r1
 8002914:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4934      	ldr	r1, [pc, #208]	; (80029f0 <HAL_I2C_Init+0x120>)
 8002920:	400a      	ands	r2, r1
 8002922:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4931      	ldr	r1, [pc, #196]	; (80029f4 <HAL_I2C_Init+0x124>)
 8002930:	400a      	ands	r2, r1
 8002932:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d108      	bne.n	800294e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689a      	ldr	r2, [r3, #8]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2180      	movs	r1, #128	; 0x80
 8002946:	0209      	lsls	r1, r1, #8
 8002948:	430a      	orrs	r2, r1
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e007      	b.n	800295e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2184      	movs	r1, #132	; 0x84
 8002958:	0209      	lsls	r1, r1, #8
 800295a:	430a      	orrs	r2, r1
 800295c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d104      	bne.n	8002970 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	491f      	ldr	r1, [pc, #124]	; (80029f8 <HAL_I2C_Init+0x128>)
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	491a      	ldr	r1, [pc, #104]	; (80029f4 <HAL_I2C_Init+0x124>)
 800298c:	400a      	ands	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	431a      	orrs	r2, r3
 800299a:	0011      	movs	r1, r2
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	021a      	lsls	r2, r3, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69d9      	ldr	r1, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1a      	ldr	r2, [r3, #32]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2241      	movs	r2, #65	; 0x41
 80029d4:	2120      	movs	r1, #32
 80029d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2242      	movs	r2, #66	; 0x42
 80029e2:	2100      	movs	r1, #0
 80029e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	0018      	movs	r0, r3
 80029ea:	46bd      	mov	sp, r7
 80029ec:	b002      	add	sp, #8
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	f0ffffff 	.word	0xf0ffffff
 80029f4:	ffff7fff 	.word	0xffff7fff
 80029f8:	02008000 	.word	0x02008000

080029fc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e022      	b.n	8002a54 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2241      	movs	r2, #65	; 0x41
 8002a12:	2124      	movs	r1, #36	; 0x24
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	438a      	bics	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f002 fc25 	bl	8005278 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2241      	movs	r2, #65	; 0x41
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2242      	movs	r2, #66	; 0x42
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2240      	movs	r2, #64	; 0x40
 8002a4e:	2100      	movs	r1, #0
 8002a50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b089      	sub	sp, #36	; 0x24
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	0008      	movs	r0, r1
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	0019      	movs	r1, r3
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	18fb      	adds	r3, r7, r3
 8002a6e:	1c02      	adds	r2, r0, #0
 8002a70:	801a      	strh	r2, [r3, #0]
 8002a72:	2308      	movs	r3, #8
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	1c0a      	adds	r2, r1, #0
 8002a78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2241      	movs	r2, #65	; 0x41
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d000      	beq.n	8002a88 <HAL_I2C_Master_Transmit+0x2c>
 8002a86:	e0e7      	b.n	8002c58 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2240      	movs	r2, #64	; 0x40
 8002a8c:	5c9b      	ldrb	r3, [r3, r2]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Master_Transmit+0x3a>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e0e1      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2240      	movs	r2, #64	; 0x40
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a9e:	f7ff fb2f 	bl	8002100 <HAL_GetTick>
 8002aa2:	0003      	movs	r3, r0
 8002aa4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	0219      	lsls	r1, r3, #8
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2319      	movs	r3, #25
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f000 fee4 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	1e03      	subs	r3, r0, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0cc      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2241      	movs	r2, #65	; 0x41
 8002ac4:	2121      	movs	r1, #33	; 0x21
 8002ac6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2242      	movs	r2, #66	; 0x42
 8002acc:	2110      	movs	r1, #16
 8002ace:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2208      	movs	r2, #8
 8002ae0:	18ba      	adds	r2, r7, r2
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	2bff      	cmp	r3, #255	; 0xff
 8002af4:	d911      	bls.n	8002b1a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	b2da      	uxtb	r2, r3
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	045c      	lsls	r4, r3, #17
 8002b06:	230a      	movs	r3, #10
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	8819      	ldrh	r1, [r3, #0]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	4b55      	ldr	r3, [pc, #340]	; (8002c64 <HAL_I2C_Master_Transmit+0x208>)
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	0023      	movs	r3, r4
 8002b14:	f001 f840 	bl	8003b98 <I2C_TransferConfig>
 8002b18:	e075      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	049c      	lsls	r4, r3, #18
 8002b2e:	230a      	movs	r3, #10
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	8819      	ldrh	r1, [r3, #0]
 8002b34:	68f8      	ldr	r0, [r7, #12]
 8002b36:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_I2C_Master_Transmit+0x208>)
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	0023      	movs	r3, r4
 8002b3c:	f001 f82c 	bl	8003b98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002b40:	e061      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 fed8 	bl	80038fe <I2C_WaitOnTXISFlagUntilTimeout>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e081      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	1c5a      	adds	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d03a      	beq.n	8002c06 <HAL_I2C_Master_Transmit+0x1aa>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d136      	bne.n	8002c06 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	0013      	movs	r3, r2
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	f000 fe6b 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	1e03      	subs	r3, r0, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e053      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	2bff      	cmp	r3, #255	; 0xff
 8002bba:	d911      	bls.n	8002be0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	22ff      	movs	r2, #255	; 0xff
 8002bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	2380      	movs	r3, #128	; 0x80
 8002bca:	045c      	lsls	r4, r3, #17
 8002bcc:	230a      	movs	r3, #10
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	8819      	ldrh	r1, [r3, #0]
 8002bd2:	68f8      	ldr	r0, [r7, #12]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	0023      	movs	r3, r4
 8002bda:	f000 ffdd 	bl	8003b98 <I2C_TransferConfig>
 8002bde:	e012      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	2380      	movs	r3, #128	; 0x80
 8002bf2:	049c      	lsls	r4, r3, #18
 8002bf4:	230a      	movs	r3, #10
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	8819      	ldrh	r1, [r3, #0]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	0023      	movs	r3, r4
 8002c02:	f000 ffc9 	bl	8003b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d198      	bne.n	8002b42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 feb0 	bl	800397c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e01a      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	490c      	ldr	r1, [pc, #48]	; (8002c68 <HAL_I2C_Master_Transmit+0x20c>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2241      	movs	r2, #65	; 0x41
 8002c40:	2120      	movs	r1, #32
 8002c42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2242      	movs	r2, #66	; 0x42
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2240      	movs	r2, #64	; 0x40
 8002c50:	2100      	movs	r1, #0
 8002c52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e000      	b.n	8002c5a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8002c58:	2302      	movs	r3, #2
  }
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b007      	add	sp, #28
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	80002000 	.word	0x80002000
 8002c68:	fe00e800 	.word	0xfe00e800

08002c6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b089      	sub	sp, #36	; 0x24
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	0008      	movs	r0, r1
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	0019      	movs	r1, r3
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	1c02      	adds	r2, r0, #0
 8002c80:	801a      	strh	r2, [r3, #0]
 8002c82:	2308      	movs	r3, #8
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	1c0a      	adds	r2, r1, #0
 8002c88:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2241      	movs	r2, #65	; 0x41
 8002c8e:	5c9b      	ldrb	r3, [r3, r2]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d000      	beq.n	8002c98 <HAL_I2C_Master_Receive+0x2c>
 8002c96:	e0e8      	b.n	8002e6a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	5c9b      	ldrb	r3, [r3, r2]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2C_Master_Receive+0x3a>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e0e2      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2240      	movs	r2, #64	; 0x40
 8002caa:	2101      	movs	r1, #1
 8002cac:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cae:	f7ff fa27 	bl	8002100 <HAL_GetTick>
 8002cb2:	0003      	movs	r3, r0
 8002cb4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cb6:	2380      	movs	r3, #128	; 0x80
 8002cb8:	0219      	lsls	r1, r3, #8
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f000 fddc 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8002cc8:	1e03      	subs	r3, r0, #0
 8002cca:	d001      	beq.n	8002cd0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e0cd      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2241      	movs	r2, #65	; 0x41
 8002cd4:	2122      	movs	r1, #34	; 0x22
 8002cd6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2242      	movs	r2, #66	; 0x42
 8002cdc:	2110      	movs	r1, #16
 8002cde:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2208      	movs	r2, #8
 8002cf0:	18ba      	adds	r2, r7, r2
 8002cf2:	8812      	ldrh	r2, [r2, #0]
 8002cf4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2bff      	cmp	r3, #255	; 0xff
 8002d04:	d911      	bls.n	8002d2a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	22ff      	movs	r2, #255	; 0xff
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	045c      	lsls	r4, r3, #17
 8002d16:	230a      	movs	r3, #10
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	8819      	ldrh	r1, [r3, #0]
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	4b55      	ldr	r3, [pc, #340]	; (8002e74 <HAL_I2C_Master_Receive+0x208>)
 8002d20:	9300      	str	r3, [sp, #0]
 8002d22:	0023      	movs	r3, r4
 8002d24:	f000 ff38 	bl	8003b98 <I2C_TransferConfig>
 8002d28:	e076      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1ac>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	049c      	lsls	r4, r3, #18
 8002d3e:	230a      	movs	r3, #10
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	8819      	ldrh	r1, [r3, #0]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_I2C_Master_Receive+0x208>)
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	0023      	movs	r3, r4
 8002d4c:	f000 ff24 	bl	8003b98 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002d50:	e062      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 fe4b 	bl	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d5e:	1e03      	subs	r3, r0, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e082      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d03a      	beq.n	8002e18 <HAL_I2C_Master_Receive+0x1ac>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d136      	bne.n	8002e18 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002daa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	0013      	movs	r3, r2
 8002db4:	2200      	movs	r2, #0
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	f000 fd62 	bl	8003880 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	1e03      	subs	r3, r0, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e053      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	2bff      	cmp	r3, #255	; 0xff
 8002dcc:	d911      	bls.n	8002df2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	22ff      	movs	r2, #255	; 0xff
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	045c      	lsls	r4, r3, #17
 8002dde:	230a      	movs	r3, #10
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	8819      	ldrh	r1, [r3, #0]
 8002de4:	68f8      	ldr	r0, [r7, #12]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	0023      	movs	r3, r4
 8002dec:	f000 fed4 	bl	8003b98 <I2C_TransferConfig>
 8002df0:	e012      	b.n	8002e18 <HAL_I2C_Master_Receive+0x1ac>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	049c      	lsls	r4, r3, #18
 8002e06:	230a      	movs	r3, #10
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	8819      	ldrh	r1, [r3, #0]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	0023      	movs	r3, r4
 8002e14:	f000 fec0 	bl	8003b98 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d197      	bne.n	8002d52 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 fda7 	bl	800397c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d001      	beq.n	8002e36 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e01a      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	490b      	ldr	r1, [pc, #44]	; (8002e78 <HAL_I2C_Master_Receive+0x20c>)
 8002e4a:	400a      	ands	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2241      	movs	r2, #65	; 0x41
 8002e52:	2120      	movs	r1, #32
 8002e54:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2242      	movs	r2, #66	; 0x42
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e66:	2300      	movs	r3, #0
 8002e68:	e000      	b.n	8002e6c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002e6a:	2302      	movs	r3, #2
  }
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b007      	add	sp, #28
 8002e72:	bd90      	pop	{r4, r7, pc}
 8002e74:	80002400 	.word	0x80002400
 8002e78:	fe00e800 	.word	0xfe00e800

08002e7c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d005      	beq.n	8002ea8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	68f9      	ldr	r1, [r7, #12]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
  }
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b004      	add	sp, #16
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	001a      	movs	r2, r3
 8002ece:	2301      	movs	r3, #1
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d010      	beq.n	8002ef6 <HAL_I2C_ER_IRQHandler+0x46>
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	09db      	lsrs	r3, r3, #7
 8002ed8:	001a      	movs	r2, r3
 8002eda:	2301      	movs	r3, #1
 8002edc:	4013      	ands	r3, r2
 8002ede:	d00a      	beq.n	8002ef6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	0052      	lsls	r2, r2, #1
 8002ef4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	0a9b      	lsrs	r3, r3, #10
 8002efa:	001a      	movs	r2, r3
 8002efc:	2301      	movs	r3, #1
 8002efe:	4013      	ands	r3, r2
 8002f00:	d010      	beq.n	8002f24 <HAL_I2C_ER_IRQHandler+0x74>
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	09db      	lsrs	r3, r3, #7
 8002f06:	001a      	movs	r2, r3
 8002f08:	2301      	movs	r3, #1
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d00a      	beq.n	8002f24 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	2208      	movs	r2, #8
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	00d2      	lsls	r2, r2, #3
 8002f22:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	0a5b      	lsrs	r3, r3, #9
 8002f28:	001a      	movs	r2, r3
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	d010      	beq.n	8002f52 <HAL_I2C_ER_IRQHandler+0xa2>
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	09db      	lsrs	r3, r3, #7
 8002f34:	001a      	movs	r2, r3
 8002f36:	2301      	movs	r3, #1
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d00a      	beq.n	8002f52 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	2202      	movs	r2, #2
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2280      	movs	r2, #128	; 0x80
 8002f4e:	0092      	lsls	r2, r2, #2
 8002f50:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	220b      	movs	r2, #11
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d005      	beq.n	8002f6c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	0011      	movs	r1, r2
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 fb70 	bl	800364c <I2C_ITError>
  }
}
 8002f6c:	46c0      	nop			; (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b006      	add	sp, #24
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002f7c:	46c0      	nop			; (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b002      	add	sp, #8
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	0008      	movs	r0, r1
 8002f9e:	0011      	movs	r1, r2
 8002fa0:	1cfb      	adds	r3, r7, #3
 8002fa2:	1c02      	adds	r2, r0, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	003b      	movs	r3, r7
 8002fa8:	1c0a      	adds	r2, r1, #0
 8002faa:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002fac:	46c0      	nop			; (mov r8, r8)
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	b002      	add	sp, #8
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b002      	add	sp, #8
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	b002      	add	sp, #8
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2240      	movs	r2, #64	; 0x40
 8002ffe:	5c9b      	ldrb	r3, [r3, r2]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d101      	bne.n	8003008 <I2C_Slave_ISR_IT+0x24>
 8003004:	2302      	movs	r3, #2
 8003006:	e0fe      	b.n	8003206 <I2C_Slave_ISR_IT+0x222>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	2101      	movs	r1, #1
 800300e:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	001a      	movs	r2, r3
 8003016:	2301      	movs	r3, #1
 8003018:	4013      	ands	r3, r2
 800301a:	d054      	beq.n	80030c6 <I2C_Slave_ISR_IT+0xe2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	091b      	lsrs	r3, r3, #4
 8003020:	001a      	movs	r2, r3
 8003022:	2301      	movs	r3, #1
 8003024:	4013      	ands	r3, r2
 8003026:	d04e      	beq.n	80030c6 <I2C_Slave_ISR_IT+0xe2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d12d      	bne.n	800308e <I2C_Slave_ISR_IT+0xaa>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2241      	movs	r2, #65	; 0x41
 8003036:	5c9b      	ldrb	r3, [r3, r2]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b28      	cmp	r3, #40	; 0x28
 800303c:	d10b      	bne.n	8003056 <I2C_Slave_ISR_IT+0x72>
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	049b      	lsls	r3, r3, #18
 8003044:	429a      	cmp	r2, r3
 8003046:	d106      	bne.n	8003056 <I2C_Slave_ISR_IT+0x72>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	0011      	movs	r1, r2
 800304e:	0018      	movs	r0, r3
 8003050:	f000 faa6 	bl	80035a0 <I2C_ITListenCplt>
 8003054:	e036      	b.n	80030c4 <I2C_Slave_ISR_IT+0xe0>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2241      	movs	r2, #65	; 0x41
 800305a:	5c9b      	ldrb	r3, [r3, r2]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b29      	cmp	r3, #41	; 0x29
 8003060:	d110      	bne.n	8003084 <I2C_Slave_ISR_IT+0xa0>
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4a6a      	ldr	r2, [pc, #424]	; (8003210 <I2C_Slave_ISR_IT+0x22c>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00c      	beq.n	8003084 <I2C_Slave_ISR_IT+0xa0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2210      	movs	r2, #16
 8003070:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fbbb 	bl	80037f0 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	0018      	movs	r0, r3
 800307e:	f000 f96e 	bl	800335e <I2C_ITSlaveSeqCplt>
 8003082:	e01f      	b.n	80030c4 <I2C_Slave_ISR_IT+0xe0>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800308c:	e0a1      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2210      	movs	r2, #16
 8003094:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309a:	2204      	movs	r2, #4
 800309c:	431a      	orrs	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <I2C_Slave_ISR_IT+0xd0>
 80030a8:	693a      	ldr	r2, [r7, #16]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	045b      	lsls	r3, r3, #17
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d000      	beq.n	80030b4 <I2C_Slave_ISR_IT+0xd0>
 80030b2:	e08e      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0011      	movs	r1, r2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fac5 	bl	800364c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80030c2:	e086      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1ee>
 80030c4:	e085      	b.n	80031d2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	001a      	movs	r2, r3
 80030cc:	2301      	movs	r3, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d035      	beq.n	800313e <I2C_Slave_ISR_IT+0x15a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	089b      	lsrs	r3, r3, #2
 80030d6:	001a      	movs	r2, r3
 80030d8:	2301      	movs	r3, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	d02f      	beq.n	800313e <I2C_Slave_ISR_IT+0x15a>
  {
    if (hi2c->XferCount > 0U)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01c      	beq.n	8003122 <I2C_Slave_ISR_IT+0x13e>
    {
      /* Remove RXNE flag on temporary variable as read done */
      tmpITFlags &= ~I2C_FLAG_RXNE;
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	2204      	movs	r2, #4
 80030ec:	4393      	bics	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310c:	3b01      	subs	r3, #1
 800310e:	b29a      	uxth	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3b01      	subs	r3, #1
 800311c:	b29a      	uxth	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003126:	b29b      	uxth	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d154      	bne.n	80031d6 <I2C_Slave_ISR_IT+0x1f2>
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4a38      	ldr	r2, [pc, #224]	; (8003210 <I2C_Slave_ISR_IT+0x22c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d050      	beq.n	80031d6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	0018      	movs	r0, r3
 8003138:	f000 f911 	bl	800335e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800313c:	e04b      	b.n	80031d6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	08db      	lsrs	r3, r3, #3
 8003142:	001a      	movs	r2, r3
 8003144:	2301      	movs	r3, #1
 8003146:	4013      	ands	r3, r2
 8003148:	d00c      	beq.n	8003164 <I2C_Slave_ISR_IT+0x180>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	08db      	lsrs	r3, r3, #3
 800314e:	001a      	movs	r2, r3
 8003150:	2301      	movs	r3, #1
 8003152:	4013      	ands	r3, r2
 8003154:	d006      	beq.n	8003164 <I2C_Slave_ISR_IT+0x180>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	0011      	movs	r1, r2
 800315c:	0018      	movs	r0, r3
 800315e:	f000 f859 	bl	8003214 <I2C_ITAddrCplt>
 8003162:	e039      	b.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	001a      	movs	r2, r3
 800316a:	2301      	movs	r3, #1
 800316c:	4013      	ands	r3, r2
 800316e:	d033      	beq.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	085b      	lsrs	r3, r3, #1
 8003174:	001a      	movs	r2, r3
 8003176:	2301      	movs	r3, #1
 8003178:	4013      	ands	r3, r2
 800317a:	d02d      	beq.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d018      	beq.n	80031b8 <I2C_Slave_ISR_IT+0x1d4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	781a      	ldrb	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	1c5a      	adds	r2, r3, #1
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
 80031b6:	e00f      	b.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	2380      	movs	r3, #128	; 0x80
 80031bc:	045b      	lsls	r3, r3, #17
 80031be:	429a      	cmp	r2, r3
 80031c0:	d002      	beq.n	80031c8 <I2C_Slave_ISR_IT+0x1e4>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d107      	bne.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f8c7 	bl	800335e <I2C_ITSlaveSeqCplt>
 80031d0:	e002      	b.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	e000      	b.n	80031d8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80031d6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	001a      	movs	r2, r3
 80031de:	2301      	movs	r3, #1
 80031e0:	4013      	ands	r3, r2
 80031e2:	d00b      	beq.n	80031fc <I2C_Slave_ISR_IT+0x218>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	001a      	movs	r2, r3
 80031ea:	2301      	movs	r3, #1
 80031ec:	4013      	ands	r3, r2
 80031ee:	d005      	beq.n	80031fc <I2C_Slave_ISR_IT+0x218>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	0011      	movs	r1, r2
 80031f6:	0018      	movs	r0, r3
 80031f8:	f000 f8f2 	bl	80033e0 <I2C_ITSlaveCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2240      	movs	r2, #64	; 0x40
 8003200:	2100      	movs	r1, #0
 8003202:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	0018      	movs	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	b006      	add	sp, #24
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	ffff0000 	.word	0xffff0000

08003214 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003214:	b590      	push	{r4, r7, lr}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2241      	movs	r2, #65	; 0x41
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	001a      	movs	r2, r3
 8003228:	2328      	movs	r3, #40	; 0x28
 800322a:	4013      	ands	r3, r2
 800322c:	2b28      	cmp	r3, #40	; 0x28
 800322e:	d000      	beq.n	8003232 <I2C_ITAddrCplt+0x1e>
 8003230:	e089      	b.n	8003346 <I2C_ITAddrCplt+0x132>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	0c1b      	lsrs	r3, r3, #16
 800323a:	b2da      	uxtb	r2, r3
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	2101      	movs	r1, #1
 8003242:	400a      	ands	r2, r1
 8003244:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	0c1b      	lsrs	r3, r3, #16
 800324e:	b29a      	uxth	r2, r3
 8003250:	230c      	movs	r3, #12
 8003252:	18fb      	adds	r3, r7, r3
 8003254:	21fe      	movs	r1, #254	; 0xfe
 8003256:	400a      	ands	r2, r1
 8003258:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	b29a      	uxth	r2, r3
 8003262:	230a      	movs	r3, #10
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	0592      	lsls	r2, r2, #22
 8003268:	0d92      	lsrs	r2, r2, #22
 800326a:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	b29a      	uxth	r2, r3
 8003274:	2308      	movs	r3, #8
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	21fe      	movs	r1, #254	; 0xfe
 800327a:	400a      	ands	r2, r1
 800327c:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d14b      	bne.n	800331e <I2C_ITAddrCplt+0x10a>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8003286:	230a      	movs	r3, #10
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	881b      	ldrh	r3, [r3, #0]
 800328c:	09db      	lsrs	r3, r3, #7
 800328e:	b29a      	uxth	r2, r3
 8003290:	230c      	movs	r3, #12
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	4053      	eors	r3, r2
 8003298:	b29b      	uxth	r3, r3
 800329a:	001a      	movs	r2, r3
 800329c:	2306      	movs	r3, #6
 800329e:	4013      	ands	r3, r2
 80032a0:	d124      	bne.n	80032ec <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 80032a2:	230c      	movs	r3, #12
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	220a      	movs	r2, #10
 80032a8:	18ba      	adds	r2, r7, r2
 80032aa:	8812      	ldrh	r2, [r2, #0]
 80032ac:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d14a      	bne.n	8003356 <I2C_ITAddrCplt+0x142>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2208      	movs	r2, #8
 80032cc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2240      	movs	r2, #64	; 0x40
 80032d2:	2100      	movs	r1, #0
 80032d4:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80032d6:	230c      	movs	r3, #12
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	881a      	ldrh	r2, [r3, #0]
 80032dc:	230f      	movs	r3, #15
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	7819      	ldrb	r1, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fe55 	bl	8002f94 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80032ea:	e034      	b.n	8003356 <I2C_ITAddrCplt+0x142>
        slaveaddrcode = ownadd2code;
 80032ec:	240c      	movs	r4, #12
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	2208      	movs	r2, #8
 80032f2:	18ba      	adds	r2, r7, r2
 80032f4:	8812      	ldrh	r2, [r2, #0]
 80032f6:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2104      	movs	r1, #4
 80032fc:	0018      	movs	r0, r3
 80032fe:	f000 fc81 	bl	8003c04 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	2100      	movs	r1, #0
 8003308:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800330a:	193b      	adds	r3, r7, r4
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	230f      	movs	r3, #15
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	7819      	ldrb	r1, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff fe3c 	bl	8002f94 <HAL_I2C_AddrCallback>
}
 800331c:	e01b      	b.n	8003356 <I2C_ITAddrCplt+0x142>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2104      	movs	r1, #4
 8003322:	0018      	movs	r0, r3
 8003324:	f000 fc6e 	bl	8003c04 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003330:	230c      	movs	r3, #12
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	881a      	ldrh	r2, [r3, #0]
 8003336:	230f      	movs	r3, #15
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	7819      	ldrb	r1, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	0018      	movs	r0, r3
 8003340:	f7ff fe28 	bl	8002f94 <HAL_I2C_AddrCallback>
}
 8003344:	e007      	b.n	8003356 <I2C_ITAddrCplt+0x142>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2208      	movs	r2, #8
 800334c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2240      	movs	r2, #64	; 0x40
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]
}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	46bd      	mov	sp, r7
 800335a:	b005      	add	sp, #20
 800335c:	bd90      	pop	{r4, r7, pc}

0800335e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800335e:	b580      	push	{r7, lr}
 8003360:	b082      	sub	sp, #8
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2242      	movs	r2, #66	; 0x42
 800336a:	2100      	movs	r1, #0
 800336c:	5499      	strb	r1, [r3, r2]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2241      	movs	r2, #65	; 0x41
 8003372:	5c9b      	ldrb	r3, [r3, r2]
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b29      	cmp	r3, #41	; 0x29
 8003378:	d114      	bne.n	80033a4 <I2C_ITSlaveSeqCplt+0x46>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2241      	movs	r2, #65	; 0x41
 800337e:	2128      	movs	r1, #40	; 0x28
 8003380:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2221      	movs	r2, #33	; 0x21
 8003386:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2101      	movs	r1, #1
 800338c:	0018      	movs	r0, r3
 800338e:	f000 fc39 	bl	8003c04 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	2100      	movs	r1, #0
 8003398:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0018      	movs	r0, r3
 800339e:	f7ff fde9 	bl	8002f74 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033a2:	e019      	b.n	80033d8 <I2C_ITSlaveSeqCplt+0x7a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2241      	movs	r2, #65	; 0x41
 80033a8:	5c9b      	ldrb	r3, [r3, r2]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b2a      	cmp	r3, #42	; 0x2a
 80033ae:	d113      	bne.n	80033d8 <I2C_ITSlaveSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2241      	movs	r2, #65	; 0x41
 80033b4:	2128      	movs	r1, #40	; 0x28
 80033b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2222      	movs	r2, #34	; 0x22
 80033bc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2102      	movs	r1, #2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f000 fc1e 	bl	8003c04 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	2100      	movs	r1, #0
 80033ce:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff fdd6 	bl	8002f84 <HAL_I2C_SlaveRxCpltCallback>
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2220      	movs	r2, #32
 80033fc:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2107      	movs	r1, #7
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fbfe 	bl	8003c04 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	0209      	lsls	r1, r1, #8
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	495c      	ldr	r1, [pc, #368]	; (8003598 <I2C_ITSlaveCplt+0x1b8>)
 8003426:	400a      	ands	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f9df 	bl	80037f0 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	0b9b      	lsrs	r3, r3, #14
 8003436:	001a      	movs	r2, r3
 8003438:	2301      	movs	r3, #1
 800343a:	4013      	ands	r3, r2
 800343c:	d00b      	beq.n	8003456 <I2C_ITSlaveCplt+0x76>
  {
    if (hi2c->hdmatx != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003454:	e010      	b.n	8003478 <I2C_ITSlaveCplt+0x98>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	0bdb      	lsrs	r3, r3, #15
 800345a:	001a      	movs	r2, r3
 800345c:	2301      	movs	r3, #1
 800345e:	4013      	ands	r3, r2
 8003460:	d00a      	beq.n	8003478 <I2C_ITSlaveCplt+0x98>
  {
    if (hi2c->hdmarx != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <I2C_ITSlaveCplt+0x98>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	b29a      	uxth	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	001a      	movs	r2, r3
 800347e:	2301      	movs	r3, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d020      	beq.n	80034c6 <I2C_ITSlaveCplt+0xe6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2204      	movs	r2, #4
 8003488:	4393      	bics	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	b2d2      	uxtb	r2, r2
 8003498:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00c      	beq.n	80034c6 <I2C_ITSlaveCplt+0xe6>
    {
      hi2c->XferSize--;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <I2C_ITSlaveCplt+0xfc>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d4:	2204      	movs	r2, #4
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2242      	movs	r2, #66	; 0x42
 80034e6:	2100      	movs	r1, #0
 80034e8:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d013      	beq.n	8003520 <I2C_ITSlaveCplt+0x140>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	0011      	movs	r1, r2
 8003500:	0018      	movs	r0, r3
 8003502:	f000 f8a3 	bl	800364c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2241      	movs	r2, #65	; 0x41
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b28      	cmp	r3, #40	; 0x28
 8003510:	d13e      	bne.n	8003590 <I2C_ITSlaveCplt+0x1b0>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	0011      	movs	r1, r2
 8003518:	0018      	movs	r0, r3
 800351a:	f000 f841 	bl	80035a0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800351e:	e037      	b.n	8003590 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <I2C_ITSlaveCplt+0x1bc>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d013      	beq.n	8003552 <I2C_ITSlaveCplt+0x172>
    I2C_ITSlaveSeqCplt(hi2c);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff ff16 	bl	800335e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <I2C_ITSlaveCplt+0x1bc>)
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2241      	movs	r2, #65	; 0x41
 800353c:	2120      	movs	r1, #32
 800353e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2240      	movs	r2, #64	; 0x40
 8003544:	2100      	movs	r1, #0
 8003546:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f7ff fd32 	bl	8002fb4 <HAL_I2C_ListenCpltCallback>
}
 8003550:	e01e      	b.n	8003590 <I2C_ITSlaveCplt+0x1b0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2241      	movs	r2, #65	; 0x41
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b22      	cmp	r3, #34	; 0x22
 800355c:	d10c      	bne.n	8003578 <I2C_ITSlaveCplt+0x198>
    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2241      	movs	r2, #65	; 0x41
 8003562:	2120      	movs	r1, #32
 8003564:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	0018      	movs	r0, r3
 8003572:	f7ff fd07 	bl	8002f84 <HAL_I2C_SlaveRxCpltCallback>
}
 8003576:	e00b      	b.n	8003590 <I2C_ITSlaveCplt+0x1b0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2241      	movs	r2, #65	; 0x41
 800357c:	2120      	movs	r1, #32
 800357e:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	2100      	movs	r1, #0
 8003586:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	0018      	movs	r0, r3
 800358c:	f7ff fcf2 	bl	8002f74 <HAL_I2C_SlaveTxCpltCallback>
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	fe00e800 	.word	0xfe00e800
 800359c:	ffff0000 	.word	0xffff0000

080035a0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <I2C_ITListenCplt+0xa8>)
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2241      	movs	r2, #65	; 0x41
 80035ba:	2120      	movs	r1, #32
 80035bc:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2242      	movs	r2, #66	; 0x42
 80035c2:	2100      	movs	r1, #0
 80035c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	001a      	movs	r2, r3
 80035d2:	2301      	movs	r3, #1
 80035d4:	4013      	ands	r3, r2
 80035d6:	d022      	beq.n	800361e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d012      	beq.n	800361e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	2204      	movs	r2, #4
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2107      	movs	r1, #7
 8003622:	0018      	movs	r0, r3
 8003624:	f000 faee 	bl	8003c04 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2210      	movs	r2, #16
 800362e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	; 0x40
 8003634:	2100      	movs	r1, #0
 8003636:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff fcba 	bl	8002fb4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}
 8003648:	ffff0000 	.word	0xffff0000

0800364c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003656:	200f      	movs	r0, #15
 8003658:	183b      	adds	r3, r7, r0
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	2141      	movs	r1, #65	; 0x41
 800365e:	5c52      	ldrb	r2, [r2, r1]
 8003660:	701a      	strb	r2, [r3, #0]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2242      	movs	r2, #66	; 0x42
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a5b      	ldr	r2, [pc, #364]	; (80037dc <I2C_ITError+0x190>)
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003682:	183b      	adds	r3, r7, r0
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b28      	cmp	r3, #40	; 0x28
 8003688:	d009      	beq.n	800369e <I2C_ITError+0x52>
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b29      	cmp	r3, #41	; 0x29
 8003692:	d004      	beq.n	800369e <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003694:	230f      	movs	r3, #15
 8003696:	18fb      	adds	r3, r7, r3
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b2a      	cmp	r3, #42	; 0x2a
 800369c:	d10f      	bne.n	80036be <I2C_ITError+0x72>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2103      	movs	r1, #3
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 faae 	bl	8003c04 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2241      	movs	r2, #65	; 0x41
 80036ac:	2128      	movs	r1, #40	; 0x28
 80036ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a49      	ldr	r2, [pc, #292]	; (80037e0 <I2C_ITError+0x194>)
 80036ba:	635a      	str	r2, [r3, #52]	; 0x34
 80036bc:	e014      	b.n	80036e8 <I2C_ITError+0x9c>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2107      	movs	r1, #7
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fa9e 	bl	8003c04 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2241      	movs	r2, #65	; 0x41
 80036cc:	5c9b      	ldrb	r3, [r3, r2]
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b60      	cmp	r3, #96	; 0x60
 80036d2:	d003      	beq.n	80036dc <I2C_ITError+0x90>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2241      	movs	r2, #65	; 0x41
 80036d8:	2120      	movs	r1, #32
 80036da:	5499      	strb	r1, [r3, r2]
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	2380      	movs	r3, #128	; 0x80
 80036f0:	01db      	lsls	r3, r3, #7
 80036f2:	401a      	ands	r2, r3
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	01db      	lsls	r3, r3, #7
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d122      	bne.n	8003742 <I2C_ITError+0xf6>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4937      	ldr	r1, [pc, #220]	; (80037e4 <I2C_ITError+0x198>)
 8003708:	400a      	ands	r2, r1
 800370a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	2b00      	cmp	r3, #0
 8003712:	d05e      	beq.n	80037d2 <I2C_ITError+0x186>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	4a33      	ldr	r2, [pc, #204]	; (80037e8 <I2C_ITError+0x19c>)
 800371a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	2100      	movs	r1, #0
 8003722:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	0018      	movs	r0, r3
 800372a:	f7fe fe23 	bl	8002374 <HAL_DMA_Abort_IT>
 800372e:	1e03      	subs	r3, r0, #0
 8003730:	d04f      	beq.n	80037d2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	0018      	movs	r0, r3
 800373e:	4790      	blx	r2
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003740:	e047      	b.n	80037d2 <I2C_ITError+0x186>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	2380      	movs	r3, #128	; 0x80
 800374a:	021b      	lsls	r3, r3, #8
 800374c:	401a      	ands	r2, r3
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	021b      	lsls	r3, r3, #8
 8003752:	429a      	cmp	r2, r3
 8003754:	d122      	bne.n	800379c <I2C_ITError+0x150>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4922      	ldr	r1, [pc, #136]	; (80037ec <I2C_ITError+0x1a0>)
 8003762:	400a      	ands	r2, r1
 8003764:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d031      	beq.n	80037d2 <I2C_ITError+0x186>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <I2C_ITError+0x19c>)
 8003774:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2240      	movs	r2, #64	; 0x40
 800377a:	2100      	movs	r1, #0
 800377c:	5499      	strb	r1, [r3, r2]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003782:	0018      	movs	r0, r3
 8003784:	f7fe fdf6 	bl	8002374 <HAL_DMA_Abort_IT>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d022      	beq.n	80037d2 <I2C_ITError+0x186>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003796:	0018      	movs	r0, r3
 8003798:	4790      	blx	r2
}
 800379a:	e01a      	b.n	80037d2 <I2C_ITError+0x186>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2241      	movs	r2, #65	; 0x41
 80037a0:	5c9b      	ldrb	r3, [r3, r2]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d10c      	bne.n	80037c2 <I2C_ITError+0x176>
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2241      	movs	r2, #65	; 0x41
 80037ac:	2120      	movs	r1, #32
 80037ae:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2240      	movs	r2, #64	; 0x40
 80037b4:	2100      	movs	r1, #0
 80037b6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fc0a 	bl	8002fd4 <HAL_I2C_AbortCpltCallback>
}
 80037c0:	e007      	b.n	80037d2 <I2C_ITError+0x186>
    __HAL_UNLOCK(hi2c);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	2100      	movs	r1, #0
 80037c8:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f7ff fbf9 	bl	8002fc4 <HAL_I2C_ErrorCallback>
}
 80037d2:	46c0      	nop			; (mov r8, r8)
 80037d4:	46bd      	mov	sp, r7
 80037d6:	b004      	add	sp, #16
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	46c0      	nop			; (mov r8, r8)
 80037dc:	ffff0000 	.word	0xffff0000
 80037e0:	08002fe5 	.word	0x08002fe5
 80037e4:	ffffbfff 	.word	0xffffbfff
 80037e8:	08003835 	.word	0x08003835
 80037ec:	ffff7fff 	.word	0xffff7fff

080037f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	2202      	movs	r2, #2
 8003800:	4013      	ands	r3, r2
 8003802:	2b02      	cmp	r3, #2
 8003804:	d103      	bne.n	800380e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2200      	movs	r2, #0
 800380c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2201      	movs	r2, #1
 8003816:	4013      	ands	r3, r2
 8003818:	2b01      	cmp	r3, #1
 800381a:	d007      	beq.n	800382c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	699a      	ldr	r2, [r3, #24]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2101      	movs	r1, #1
 8003828:	430a      	orrs	r2, r1
 800382a:	619a      	str	r2, [r3, #24]
  }
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	2200      	movs	r2, #0
 8003848:	639a      	str	r2, [r3, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2200      	movs	r2, #0
 8003850:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2241      	movs	r2, #65	; 0x41
 8003856:	5c9b      	ldrb	r3, [r3, r2]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b60      	cmp	r3, #96	; 0x60
 800385c:	d108      	bne.n	8003870 <I2C_DMAAbort+0x3c>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2241      	movs	r2, #65	; 0x41
 8003862:	2120      	movs	r1, #32
 8003864:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	0018      	movs	r0, r3
 800386a:	f7ff fbb3 	bl	8002fd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800386e:	e003      	b.n	8003878 <I2C_DMAAbort+0x44>
    HAL_I2C_ErrorCallback(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff fba6 	bl	8002fc4 <HAL_I2C_ErrorCallback>
}
 8003878:	46c0      	nop			; (mov r8, r8)
 800387a:	46bd      	mov	sp, r7
 800387c:	b004      	add	sp, #16
 800387e:	bd80      	pop	{r7, pc}

08003880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	1dfb      	adds	r3, r7, #7
 800388e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003890:	e021      	b.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	d01e      	beq.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fe fc32 	bl	8002100 <HAL_GetTick>
 800389c:	0002      	movs	r2, r0
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	683a      	ldr	r2, [r7, #0]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x2e>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d113      	bne.n	80038d6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	2220      	movs	r2, #32
 80038b4:	431a      	orrs	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2241      	movs	r2, #65	; 0x41
 80038be:	2120      	movs	r1, #32
 80038c0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2242      	movs	r2, #66	; 0x42
 80038c6:	2100      	movs	r1, #0
 80038c8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	2100      	movs	r1, #0
 80038d0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e00f      	b.n	80038f6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4013      	ands	r3, r2
 80038e0:	68ba      	ldr	r2, [r7, #8]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	425a      	negs	r2, r3
 80038e6:	4153      	adcs	r3, r2
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	001a      	movs	r2, r3
 80038ec:	1dfb      	adds	r3, r7, #7
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d0ce      	beq.n	8003892 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}

080038fe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	60f8      	str	r0, [r7, #12]
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800390a:	e02b      	b.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68b9      	ldr	r1, [r7, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	0018      	movs	r0, r3
 8003914:	f000 f8da 	bl	8003acc <I2C_IsAcknowledgeFailed>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d001      	beq.n	8003920 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e029      	b.n	8003974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	3301      	adds	r3, #1
 8003924:	d01e      	beq.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe fbeb 	bl	8002100 <HAL_GetTick>
 800392a:	0002      	movs	r2, r0
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	68ba      	ldr	r2, [r7, #8]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d113      	bne.n	8003964 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	2220      	movs	r2, #32
 8003942:	431a      	orrs	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2241      	movs	r2, #65	; 0x41
 800394c:	2120      	movs	r1, #32
 800394e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2242      	movs	r2, #66	; 0x42
 8003954:	2100      	movs	r1, #0
 8003956:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2240      	movs	r2, #64	; 0x40
 800395c:	2100      	movs	r1, #0
 800395e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e007      	b.n	8003974 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2202      	movs	r2, #2
 800396c:	4013      	ands	r3, r2
 800396e:	2b02      	cmp	r3, #2
 8003970:	d1cc      	bne.n	800390c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	0018      	movs	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	b004      	add	sp, #16
 800397a:	bd80      	pop	{r7, pc}

0800397c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003988:	e028      	b.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	0018      	movs	r0, r3
 8003992:	f000 f89b 	bl	8003acc <I2C_IsAcknowledgeFailed>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e026      	b.n	80039ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399e:	f7fe fbaf 	bl	8002100 <HAL_GetTick>
 80039a2:	0002      	movs	r2, r0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d302      	bcc.n	80039b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d113      	bne.n	80039dc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	2220      	movs	r2, #32
 80039ba:	431a      	orrs	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2241      	movs	r2, #65	; 0x41
 80039c4:	2120      	movs	r1, #32
 80039c6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2242      	movs	r2, #66	; 0x42
 80039cc:	2100      	movs	r1, #0
 80039ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2240      	movs	r2, #64	; 0x40
 80039d4:	2100      	movs	r1, #0
 80039d6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e007      	b.n	80039ec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2220      	movs	r2, #32
 80039e4:	4013      	ands	r3, r2
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d1cf      	bne.n	800398a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	0018      	movs	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b004      	add	sp, #16
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a00:	e055      	b.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68b9      	ldr	r1, [r7, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f85f 	bl	8003acc <I2C_IsAcknowledgeFailed>
 8003a0e:	1e03      	subs	r3, r0, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e053      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b20      	cmp	r3, #32
 8003a22:	d129      	bne.n	8003a78 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2204      	movs	r2, #4
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d105      	bne.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e03f      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2220      	movs	r2, #32
 8003a44:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	491d      	ldr	r1, [pc, #116]	; (8003ac8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8003a52:	400a      	ands	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2241      	movs	r2, #65	; 0x41
 8003a60:	2120      	movs	r1, #32
 8003a62:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2242      	movs	r2, #66	; 0x42
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2240      	movs	r2, #64	; 0x40
 8003a70:	2100      	movs	r1, #0
 8003a72:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e022      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a78:	f7fe fb42 	bl	8002100 <HAL_GetTick>
 8003a7c:	0002      	movs	r2, r0
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d302      	bcc.n	8003a8e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10f      	bne.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	2220      	movs	r2, #32
 8003a94:	431a      	orrs	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2241      	movs	r2, #65	; 0x41
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2240      	movs	r2, #64	; 0x40
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e007      	b.n	8003abe <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b04      	cmp	r3, #4
 8003aba:	d1a2      	bne.n	8003a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	0018      	movs	r0, r3
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	b004      	add	sp, #16
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	46c0      	nop			; (mov r8, r8)
 8003ac8:	fe00e800 	.word	0xfe00e800

08003acc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	2210      	movs	r2, #16
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d151      	bne.n	8003b8a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ae6:	e021      	b.n	8003b2c <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	d01e      	beq.n	8003b2c <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fe fb07 	bl	8002100 <HAL_GetTick>
 8003af2:	0002      	movs	r2, r0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_IsAcknowledgeFailed+0x38>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d113      	bne.n	8003b2c <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	2220      	movs	r2, #32
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2241      	movs	r2, #65	; 0x41
 8003b14:	2120      	movs	r1, #32
 8003b16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2242      	movs	r2, #66	; 0x42
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2240      	movs	r2, #64	; 0x40
 8003b24:	2100      	movs	r1, #0
 8003b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e02f      	b.n	8003b8c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2220      	movs	r2, #32
 8003b34:	4013      	ands	r3, r2
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	d1d6      	bne.n	8003ae8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	f7ff fe4f 	bl	80037f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	490d      	ldr	r1, [pc, #52]	; (8003b94 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b5e:	400a      	ands	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	2204      	movs	r2, #4
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2241      	movs	r2, #65	; 0x41
 8003b72:	2120      	movs	r1, #32
 8003b74:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2242      	movs	r2, #66	; 0x42
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	2100      	movs	r1, #0
 8003b84:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	b004      	add	sp, #16
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	fe00e800 	.word	0xfe00e800

08003b98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	0008      	movs	r0, r1
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	240a      	movs	r4, #10
 8003ba8:	193b      	adds	r3, r7, r4
 8003baa:	1c02      	adds	r2, r0, #0
 8003bac:	801a      	strh	r2, [r3, #0]
 8003bae:	2009      	movs	r0, #9
 8003bb0:	183b      	adds	r3, r7, r0
 8003bb2:	1c0a      	adds	r2, r1, #0
 8003bb4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	6a3a      	ldr	r2, [r7, #32]
 8003bbe:	0d51      	lsrs	r1, r2, #21
 8003bc0:	2280      	movs	r2, #128	; 0x80
 8003bc2:	00d2      	lsls	r2, r2, #3
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	490e      	ldr	r1, [pc, #56]	; (8003c00 <I2C_TransferConfig+0x68>)
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	43d2      	mvns	r2, r2
 8003bcc:	401a      	ands	r2, r3
 8003bce:	0011      	movs	r1, r2
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	881b      	ldrh	r3, [r3, #0]
 8003bd4:	059b      	lsls	r3, r3, #22
 8003bd6:	0d9a      	lsrs	r2, r3, #22
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	0418      	lsls	r0, r3, #16
 8003bde:	23ff      	movs	r3, #255	; 0xff
 8003be0:	041b      	lsls	r3, r3, #16
 8003be2:	4003      	ands	r3, r0
 8003be4:	431a      	orrs	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	b005      	add	sp, #20
 8003bfc:	bd90      	pop	{r4, r7, pc}
 8003bfe:	46c0      	nop			; (mov r8, r8)
 8003c00:	03ff63ff 	.word	0x03ff63ff

08003c04 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	000a      	movs	r2, r1
 8003c0e:	1cbb      	adds	r3, r7, #2
 8003c10:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003c16:	1cbb      	adds	r3, r7, #2
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d010      	beq.n	8003c42 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2242      	movs	r2, #66	; 0x42
 8003c24:	4313      	orrs	r3, r2
 8003c26:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2241      	movs	r2, #65	; 0x41
 8003c2c:	5c9b      	ldrb	r3, [r3, r2]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	001a      	movs	r2, r3
 8003c32:	2328      	movs	r3, #40	; 0x28
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b28      	cmp	r3, #40	; 0x28
 8003c38:	d003      	beq.n	8003c42 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	22b0      	movs	r2, #176	; 0xb0
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003c42:	1cbb      	adds	r3, r7, #2
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	2202      	movs	r2, #2
 8003c48:	4013      	ands	r3, r2
 8003c4a:	d010      	beq.n	8003c6e <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2244      	movs	r2, #68	; 0x44
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2241      	movs	r2, #65	; 0x41
 8003c58:	5c9b      	ldrb	r3, [r3, r2]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	2328      	movs	r3, #40	; 0x28
 8003c60:	4013      	ands	r3, r2
 8003c62:	2b28      	cmp	r3, #40	; 0x28
 8003c64:	d003      	beq.n	8003c6e <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	22b0      	movs	r2, #176	; 0xb0
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003c6e:	1cbb      	adds	r3, r7, #2
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	2204      	movs	r2, #4
 8003c74:	4013      	ands	r3, r2
 8003c76:	d003      	beq.n	8003c80 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	22b8      	movs	r2, #184	; 0xb8
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 8003c80:	1cbb      	adds	r3, r7, #2
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	2211      	movs	r2, #17
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b11      	cmp	r3, #17
 8003c8a:	d103      	bne.n	8003c94 <I2C_Disable_IRQ+0x90>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2290      	movs	r2, #144	; 0x90
 8003c90:	4313      	orrs	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8003c94:	1cbb      	adds	r3, r7, #2
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	2212      	movs	r2, #18
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b12      	cmp	r3, #18
 8003c9e:	d103      	bne.n	8003ca8 <I2C_Disable_IRQ+0xa4>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 8003ca8:	1cbb      	adds	r3, r7, #2
 8003caa:	881b      	ldrh	r3, [r3, #0]
 8003cac:	2212      	movs	r2, #18
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b12      	cmp	r3, #18
 8003cb2:	d103      	bne.n	8003cbc <I2C_Disable_IRQ+0xb8>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2240      	movs	r2, #64	; 0x40
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43d9      	mvns	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	400a      	ands	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b004      	add	sp, #16
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2241      	movs	r2, #65	; 0x41
 8003ce6:	5c9b      	ldrb	r3, [r3, r2]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d138      	bne.n	8003d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2240      	movs	r2, #64	; 0x40
 8003cf2:	5c9b      	ldrb	r3, [r3, r2]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d101      	bne.n	8003cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	e032      	b.n	8003d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2240      	movs	r2, #64	; 0x40
 8003d00:	2101      	movs	r1, #1
 8003d02:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2241      	movs	r2, #65	; 0x41
 8003d08:	2124      	movs	r1, #36	; 0x24
 8003d0a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2101      	movs	r1, #1
 8003d18:	438a      	bics	r2, r1
 8003d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4911      	ldr	r1, [pc, #68]	; (8003d6c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003d28:	400a      	ands	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6819      	ldr	r1, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2241      	movs	r2, #65	; 0x41
 8003d50:	2120      	movs	r1, #32
 8003d52:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2240      	movs	r2, #64	; 0x40
 8003d58:	2100      	movs	r1, #0
 8003d5a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e000      	b.n	8003d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003d60:	2302      	movs	r3, #2
  }
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b002      	add	sp, #8
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	ffffefff 	.word	0xffffefff

08003d70 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2241      	movs	r2, #65	; 0x41
 8003d7e:	5c9b      	ldrb	r3, [r3, r2]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d139      	bne.n	8003dfa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	5c9b      	ldrb	r3, [r3, r2]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e033      	b.n	8003dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2240      	movs	r2, #64	; 0x40
 8003d98:	2101      	movs	r1, #1
 8003d9a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2241      	movs	r2, #65	; 0x41
 8003da0:	2124      	movs	r1, #36	; 0x24
 8003da2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2101      	movs	r1, #1
 8003db0:	438a      	bics	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4a11      	ldr	r2, [pc, #68]	; (8003e04 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	021b      	lsls	r3, r3, #8
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2241      	movs	r2, #65	; 0x41
 8003dea:	2120      	movs	r1, #32
 8003dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2240      	movs	r2, #64	; 0x40
 8003df2:	2100      	movs	r1, #0
 8003df4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	e000      	b.n	8003dfc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003dfa:	2302      	movs	r3, #2
  }
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	fffff0ff 	.word	0xfffff0ff

08003e08 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003e10:	4b19      	ldr	r3, [pc, #100]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a19      	ldr	r2, [pc, #100]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d11f      	bne.n	8003e6c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8003e2c:	4b14      	ldr	r3, [pc, #80]	; (8003e80 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	0013      	movs	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	189b      	adds	r3, r3, r2
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	4912      	ldr	r1, [pc, #72]	; (8003e84 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003e3a:	0018      	movs	r0, r3
 8003e3c:	f7fc f974 	bl	8000128 <__udivsi3>
 8003e40:	0003      	movs	r3, r0
 8003e42:	3301      	adds	r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e46:	e008      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3b01      	subs	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	e001      	b.n	8003e5a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e009      	b.n	8003e6e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e5a:	4b07      	ldr	r3, [pc, #28]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003e5c:	695a      	ldr	r2, [r3, #20]
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	401a      	ands	r2, r3
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d0ed      	beq.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	0018      	movs	r0, r3
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	46c0      	nop			; (mov r8, r8)
 8003e78:	40007000 	.word	0x40007000
 8003e7c:	fffff9ff 	.word	0xfffff9ff
 8003e80:	20000008 	.word	0x20000008
 8003e84:	000f4240 	.word	0x000f4240

08003e88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b088      	sub	sp, #32
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e304      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x1e>
 8003ea4:	e07c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ea6:	4bc3      	ldr	r3, [pc, #780]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2238      	movs	r2, #56	; 0x38
 8003eac:	4013      	ands	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003eb0:	4bc0      	ldr	r3, [pc, #768]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b10      	cmp	r3, #16
 8003ebe:	d102      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x3e>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d002      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4bb9      	ldr	r3, [pc, #740]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	2380      	movs	r3, #128	; 0x80
 8003ed2:	029b      	lsls	r3, r3, #10
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	d062      	beq.n	8003f9e <HAL_RCC_OscConfig+0x116>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d15e      	bne.n	8003f9e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e2df      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	025b      	lsls	r3, r3, #9
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d107      	bne.n	8003f00 <HAL_RCC_OscConfig+0x78>
 8003ef0:	4bb0      	ldr	r3, [pc, #704]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4baf      	ldr	r3, [pc, #700]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	2180      	movs	r1, #128	; 0x80
 8003ef8:	0249      	lsls	r1, r1, #9
 8003efa:	430a      	orrs	r2, r1
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e020      	b.n	8003f42 <HAL_RCC_OscConfig+0xba>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	23a0      	movs	r3, #160	; 0xa0
 8003f06:	02db      	lsls	r3, r3, #11
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d10e      	bne.n	8003f2a <HAL_RCC_OscConfig+0xa2>
 8003f0c:	4ba9      	ldr	r3, [pc, #676]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	4ba8      	ldr	r3, [pc, #672]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	02c9      	lsls	r1, r1, #11
 8003f16:	430a      	orrs	r2, r1
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	4ba6      	ldr	r3, [pc, #664]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4ba5      	ldr	r3, [pc, #660]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	0249      	lsls	r1, r1, #9
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	e00b      	b.n	8003f42 <HAL_RCC_OscConfig+0xba>
 8003f2a:	4ba2      	ldr	r3, [pc, #648]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	4ba1      	ldr	r3, [pc, #644]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f30:	49a1      	ldr	r1, [pc, #644]	; (80041b8 <HAL_RCC_OscConfig+0x330>)
 8003f32:	400a      	ands	r2, r1
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	4b9f      	ldr	r3, [pc, #636]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4b9e      	ldr	r3, [pc, #632]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f3c:	499f      	ldr	r1, [pc, #636]	; (80041bc <HAL_RCC_OscConfig+0x334>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d014      	beq.n	8003f74 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fe f8d9 	bl	8002100 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f54:	f7fe f8d4 	bl	8002100 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b64      	cmp	r3, #100	; 0x64
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e29e      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f66:	4b93      	ldr	r3, [pc, #588]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	029b      	lsls	r3, r3, #10
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d0f0      	beq.n	8003f54 <HAL_RCC_OscConfig+0xcc>
 8003f72:	e015      	b.n	8003fa0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f74:	f7fe f8c4 	bl	8002100 <HAL_GetTick>
 8003f78:	0003      	movs	r3, r0
 8003f7a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f7c:	e008      	b.n	8003f90 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f8bf 	bl	8002100 <HAL_GetTick>
 8003f82:	0002      	movs	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	2b64      	cmp	r3, #100	; 0x64
 8003f8a:	d901      	bls.n	8003f90 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e289      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f90:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	029b      	lsls	r3, r3, #10
 8003f98:	4013      	ands	r3, r2
 8003f9a:	d1f0      	bne.n	8003f7e <HAL_RCC_OscConfig+0xf6>
 8003f9c:	e000      	b.n	8003fa0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f9e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2202      	movs	r2, #2
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d100      	bne.n	8003fac <HAL_RCC_OscConfig+0x124>
 8003faa:	e099      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fac:	4b81      	ldr	r3, [pc, #516]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2238      	movs	r2, #56	; 0x38
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb6:	4b7f      	ldr	r3, [pc, #508]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	2203      	movs	r2, #3
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	2b10      	cmp	r3, #16
 8003fc4:	d102      	bne.n	8003fcc <HAL_RCC_OscConfig+0x144>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d002      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x14a>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d135      	bne.n	800403e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fd2:	4b78      	ldr	r3, [pc, #480]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x162>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e25c      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b72      	ldr	r3, [pc, #456]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <HAL_RCC_OscConfig+0x338>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	021a      	lsls	r2, r3, #8
 8003ffa:	4b6e      	ldr	r3, [pc, #440]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004006:	4b6b      	ldr	r3, [pc, #428]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a6e      	ldr	r2, [pc, #440]	; (80041c4 <HAL_RCC_OscConfig+0x33c>)
 800400c:	4013      	ands	r3, r2
 800400e:	0019      	movs	r1, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	4b67      	ldr	r3, [pc, #412]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004016:	430a      	orrs	r2, r1
 8004018:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800401a:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	0adb      	lsrs	r3, r3, #11
 8004020:	2207      	movs	r2, #7
 8004022:	4013      	ands	r3, r2
 8004024:	4a68      	ldr	r2, [pc, #416]	; (80041c8 <HAL_RCC_OscConfig+0x340>)
 8004026:	40da      	lsrs	r2, r3
 8004028:	4b68      	ldr	r3, [pc, #416]	; (80041cc <HAL_RCC_OscConfig+0x344>)
 800402a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800402c:	4b68      	ldr	r3, [pc, #416]	; (80041d0 <HAL_RCC_OscConfig+0x348>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	0018      	movs	r0, r3
 8004032:	f7fe f80b 	bl	800204c <HAL_InitTick>
 8004036:	1e03      	subs	r3, r0, #0
 8004038:	d051      	beq.n	80040de <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e232      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d030      	beq.n	80040a8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004046:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a5e      	ldr	r2, [pc, #376]	; (80041c4 <HAL_RCC_OscConfig+0x33c>)
 800404c:	4013      	ands	r3, r2
 800404e:	0019      	movs	r1, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	4b57      	ldr	r3, [pc, #348]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800405a:	4b56      	ldr	r3, [pc, #344]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4b55      	ldr	r3, [pc, #340]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	0049      	lsls	r1, r1, #1
 8004064:	430a      	orrs	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe f84a 	bl	8002100 <HAL_GetTick>
 800406c:	0003      	movs	r3, r0
 800406e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004070:	e008      	b.n	8004084 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004072:	f7fe f845 	bl	8002100 <HAL_GetTick>
 8004076:	0002      	movs	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b02      	cmp	r3, #2
 800407e:	d901      	bls.n	8004084 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e20f      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004084:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4013      	ands	r3, r2
 800408e:	d0f0      	beq.n	8004072 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004090:	4b48      	ldr	r3, [pc, #288]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a4a      	ldr	r2, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x338>)
 8004096:	4013      	ands	r3, r2
 8004098:	0019      	movs	r1, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	021a      	lsls	r2, r3, #8
 80040a0:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
 80040a6:	e01b      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80040a8:	4b42      	ldr	r3, [pc, #264]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040ae:	4949      	ldr	r1, [pc, #292]	; (80041d4 <HAL_RCC_OscConfig+0x34c>)
 80040b0:	400a      	ands	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b4:	f7fe f824 	bl	8002100 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040be:	f7fe f81f 	bl	8002100 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e1e9      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d0:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4013      	ands	r3, r2
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x236>
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2208      	movs	r2, #8
 80040e6:	4013      	ands	r3, r2
 80040e8:	d047      	beq.n	800417a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80040ea:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2238      	movs	r2, #56	; 0x38
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b18      	cmp	r3, #24
 80040f4:	d10a      	bne.n	800410c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80040f6:	4b2f      	ldr	r3, [pc, #188]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fa:	2202      	movs	r2, #2
 80040fc:	4013      	ands	r3, r2
 80040fe:	d03c      	beq.n	800417a <HAL_RCC_OscConfig+0x2f2>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d138      	bne.n	800417a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e1cb      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d019      	beq.n	8004148 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004114:	4b27      	ldr	r3, [pc, #156]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004118:	4b26      	ldr	r3, [pc, #152]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800411a:	2101      	movs	r1, #1
 800411c:	430a      	orrs	r2, r1
 800411e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004120:	f7fd ffee 	bl	8002100 <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412a:	f7fd ffe9 	bl	8002100 <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e1b3      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413c:	4b1d      	ldr	r3, [pc, #116]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800413e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004140:	2202      	movs	r2, #2
 8004142:	4013      	ands	r3, r2
 8004144:	d0f1      	beq.n	800412a <HAL_RCC_OscConfig+0x2a2>
 8004146:	e018      	b.n	800417a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004148:	4b1a      	ldr	r3, [pc, #104]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800414a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800414c:	4b19      	ldr	r3, [pc, #100]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800414e:	2101      	movs	r1, #1
 8004150:	438a      	bics	r2, r1
 8004152:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004154:	f7fd ffd4 	bl	8002100 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd ffcf 	bl	8002100 <HAL_GetTick>
 8004162:	0002      	movs	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e199      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004170:	4b10      	ldr	r3, [pc, #64]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d1f1      	bne.n	800415e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2204      	movs	r2, #4
 8004180:	4013      	ands	r3, r2
 8004182:	d100      	bne.n	8004186 <HAL_RCC_OscConfig+0x2fe>
 8004184:	e0c6      	b.n	8004314 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004186:	231f      	movs	r3, #31
 8004188:	18fb      	adds	r3, r7, r3
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	2238      	movs	r2, #56	; 0x38
 8004194:	4013      	ands	r3, r2
 8004196:	2b20      	cmp	r3, #32
 8004198:	d11e      	bne.n	80041d8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <HAL_RCC_OscConfig+0x32c>)
 800419c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419e:	2202      	movs	r2, #2
 80041a0:	4013      	ands	r3, r2
 80041a2:	d100      	bne.n	80041a6 <HAL_RCC_OscConfig+0x31e>
 80041a4:	e0b6      	b.n	8004314 <HAL_RCC_OscConfig+0x48c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d000      	beq.n	80041b0 <HAL_RCC_OscConfig+0x328>
 80041ae:	e0b1      	b.n	8004314 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e177      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
 80041b4:	40021000 	.word	0x40021000
 80041b8:	fffeffff 	.word	0xfffeffff
 80041bc:	fffbffff 	.word	0xfffbffff
 80041c0:	ffff80ff 	.word	0xffff80ff
 80041c4:	ffffc7ff 	.word	0xffffc7ff
 80041c8:	00f42400 	.word	0x00f42400
 80041cc:	20000008 	.word	0x20000008
 80041d0:	20000000 	.word	0x20000000
 80041d4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041d8:	4bb4      	ldr	r3, [pc, #720]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80041da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	055b      	lsls	r3, r3, #21
 80041e0:	4013      	ands	r3, r2
 80041e2:	d101      	bne.n	80041e8 <HAL_RCC_OscConfig+0x360>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <HAL_RCC_OscConfig+0x362>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d011      	beq.n	8004212 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80041ee:	4baf      	ldr	r3, [pc, #700]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80041f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f2:	4bae      	ldr	r3, [pc, #696]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80041f4:	2180      	movs	r1, #128	; 0x80
 80041f6:	0549      	lsls	r1, r1, #21
 80041f8:	430a      	orrs	r2, r1
 80041fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80041fc:	4bab      	ldr	r3, [pc, #684]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80041fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004200:	2380      	movs	r3, #128	; 0x80
 8004202:	055b      	lsls	r3, r3, #21
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800420a:	231f      	movs	r3, #31
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004212:	4ba7      	ldr	r3, [pc, #668]	; (80044b0 <HAL_RCC_OscConfig+0x628>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	005b      	lsls	r3, r3, #1
 800421a:	4013      	ands	r3, r2
 800421c:	d11a      	bne.n	8004254 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800421e:	4ba4      	ldr	r3, [pc, #656]	; (80044b0 <HAL_RCC_OscConfig+0x628>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <HAL_RCC_OscConfig+0x628>)
 8004224:	2180      	movs	r1, #128	; 0x80
 8004226:	0049      	lsls	r1, r1, #1
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800422c:	f7fd ff68 	bl	8002100 <HAL_GetTick>
 8004230:	0003      	movs	r3, r0
 8004232:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fd ff63 	bl	8002100 <HAL_GetTick>
 800423a:	0002      	movs	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e12d      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004248:	4b99      	ldr	r3, [pc, #612]	; (80044b0 <HAL_RCC_OscConfig+0x628>)
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	4013      	ands	r3, r2
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x3e2>
 800425c:	4b93      	ldr	r3, [pc, #588]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800425e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004260:	4b92      	ldr	r3, [pc, #584]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004262:	2101      	movs	r1, #1
 8004264:	430a      	orrs	r2, r1
 8004266:	65da      	str	r2, [r3, #92]	; 0x5c
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x41c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x404>
 8004272:	4b8e      	ldr	r3, [pc, #568]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004274:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004276:	4b8d      	ldr	r3, [pc, #564]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004278:	2104      	movs	r1, #4
 800427a:	430a      	orrs	r2, r1
 800427c:	65da      	str	r2, [r3, #92]	; 0x5c
 800427e:	4b8b      	ldr	r3, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004282:	4b8a      	ldr	r3, [pc, #552]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004284:	2101      	movs	r1, #1
 8004286:	430a      	orrs	r2, r1
 8004288:	65da      	str	r2, [r3, #92]	; 0x5c
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x41c>
 800428c:	4b87      	ldr	r3, [pc, #540]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800428e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004290:	4b86      	ldr	r3, [pc, #536]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004292:	2101      	movs	r1, #1
 8004294:	438a      	bics	r2, r1
 8004296:	65da      	str	r2, [r3, #92]	; 0x5c
 8004298:	4b84      	ldr	r3, [pc, #528]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800429a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800429c:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800429e:	2104      	movs	r1, #4
 80042a0:	438a      	bics	r2, r1
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fd ff28 	bl	8002100 <HAL_GetTick>
 80042b0:	0003      	movs	r3, r0
 80042b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b4:	e009      	b.n	80042ca <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7fd ff23 	bl	8002100 <HAL_GetTick>
 80042ba:	0002      	movs	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	4a7c      	ldr	r2, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x62c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0ec      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ca:	4b78      	ldr	r3, [pc, #480]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2202      	movs	r2, #2
 80042d0:	4013      	ands	r3, r2
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x42e>
 80042d4:	e013      	b.n	80042fe <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d6:	f7fd ff13 	bl	8002100 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042de:	e009      	b.n	80042f4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fd ff0e 	bl	8002100 <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	4a72      	ldr	r2, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x62c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e0d7      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042f4:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80042f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d1f0      	bne.n	80042e0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80042fe:	231f      	movs	r3, #31
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b68      	ldr	r3, [pc, #416]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800430a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800430c:	4b67      	ldr	r3, [pc, #412]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800430e:	496a      	ldr	r1, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x630>)
 8004310:	400a      	ands	r2, r1
 8004312:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	69db      	ldr	r3, [r3, #28]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d100      	bne.n	800431e <HAL_RCC_OscConfig+0x496>
 800431c:	e0c1      	b.n	80044a2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	2238      	movs	r2, #56	; 0x38
 8004324:	4013      	ands	r3, r2
 8004326:	2b10      	cmp	r3, #16
 8004328:	d100      	bne.n	800432c <HAL_RCC_OscConfig+0x4a4>
 800432a:	e081      	b.n	8004430 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	2b02      	cmp	r3, #2
 8004332:	d156      	bne.n	80043e2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004334:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	4b5c      	ldr	r3, [pc, #368]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800433a:	4960      	ldr	r1, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x634>)
 800433c:	400a      	ands	r2, r1
 800433e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004340:	f7fd fede 	bl	8002100 <HAL_GetTick>
 8004344:	0003      	movs	r3, r0
 8004346:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fd fed9 	bl	8002100 <HAL_GetTick>
 800434e:	0002      	movs	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e0a3      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800435c:	4b53      	ldr	r3, [pc, #332]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	049b      	lsls	r3, r3, #18
 8004364:	4013      	ands	r3, r2
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004368:	4b50      	ldr	r3, [pc, #320]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a54      	ldr	r2, [pc, #336]	; (80044c0 <HAL_RCC_OscConfig+0x638>)
 800436e:	4013      	ands	r3, r2
 8004370:	0019      	movs	r1, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1a      	ldr	r2, [r3, #32]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004380:	021b      	lsls	r3, r3, #8
 8004382:	431a      	orrs	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004394:	431a      	orrs	r2, r3
 8004396:	4b45      	ldr	r3, [pc, #276]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004398:	430a      	orrs	r2, r1
 800439a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800439c:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b42      	ldr	r3, [pc, #264]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043a2:	2180      	movs	r1, #128	; 0x80
 80043a4:	0449      	lsls	r1, r1, #17
 80043a6:	430a      	orrs	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80043aa:	4b40      	ldr	r3, [pc, #256]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	4b3f      	ldr	r3, [pc, #252]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043b0:	2180      	movs	r1, #128	; 0x80
 80043b2:	0549      	lsls	r1, r1, #21
 80043b4:	430a      	orrs	r2, r1
 80043b6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b8:	f7fd fea2 	bl	8002100 <HAL_GetTick>
 80043bc:	0003      	movs	r3, r0
 80043be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd fe9d 	bl	8002100 <HAL_GetTick>
 80043c6:	0002      	movs	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e067      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d4:	4b35      	ldr	r3, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	2380      	movs	r3, #128	; 0x80
 80043da:	049b      	lsls	r3, r3, #18
 80043dc:	4013      	ands	r3, r2
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x53a>
 80043e0:	e05f      	b.n	80044a2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e2:	4b32      	ldr	r3, [pc, #200]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b31      	ldr	r3, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043e8:	4934      	ldr	r1, [pc, #208]	; (80044bc <HAL_RCC_OscConfig+0x634>)
 80043ea:	400a      	ands	r2, r1
 80043ec:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	4b2e      	ldr	r3, [pc, #184]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043f4:	2103      	movs	r1, #3
 80043f6:	438a      	bics	r2, r1
 80043f8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80043fa:	4b2c      	ldr	r3, [pc, #176]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 80043fc:	68da      	ldr	r2, [r3, #12]
 80043fe:	4b2b      	ldr	r3, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004400:	4930      	ldr	r1, [pc, #192]	; (80044c4 <HAL_RCC_OscConfig+0x63c>)
 8004402:	400a      	ands	r2, r1
 8004404:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004406:	f7fd fe7b 	bl	8002100 <HAL_GetTick>
 800440a:	0003      	movs	r3, r0
 800440c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800440e:	e008      	b.n	8004422 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004410:	f7fd fe76 	bl	8002100 <HAL_GetTick>
 8004414:	0002      	movs	r2, r0
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	2b02      	cmp	r3, #2
 800441c:	d901      	bls.n	8004422 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e040      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004422:	4b22      	ldr	r3, [pc, #136]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2380      	movs	r3, #128	; 0x80
 8004428:	049b      	lsls	r3, r3, #18
 800442a:	4013      	ands	r3, r2
 800442c:	d1f0      	bne.n	8004410 <HAL_RCC_OscConfig+0x588>
 800442e:	e038      	b.n	80044a2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e033      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800443c:	4b1b      	ldr	r3, [pc, #108]	; (80044ac <HAL_RCC_OscConfig+0x624>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2203      	movs	r2, #3
 8004446:	401a      	ands	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	429a      	cmp	r2, r3
 800444e:	d126      	bne.n	800449e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2270      	movs	r2, #112	; 0x70
 8004454:	401a      	ands	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11f      	bne.n	800449e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	23fe      	movs	r3, #254	; 0xfe
 8004462:	01db      	lsls	r3, r3, #7
 8004464:	401a      	ands	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800446c:	429a      	cmp	r2, r3
 800446e:	d116      	bne.n	800449e <HAL_RCC_OscConfig+0x616>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	23f8      	movs	r3, #248	; 0xf8
 8004474:	039b      	lsls	r3, r3, #14
 8004476:	401a      	ands	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447c:	429a      	cmp	r2, r3
 800447e:	d10e      	bne.n	800449e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	23e0      	movs	r3, #224	; 0xe0
 8004484:	051b      	lsls	r3, r3, #20
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x616>
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	0f5b      	lsrs	r3, r3, #29
 8004494:	075a      	lsls	r2, r3, #29
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d001      	beq.n	80044a2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b008      	add	sp, #32
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	40007000 	.word	0x40007000
 80044b4:	00001388 	.word	0x00001388
 80044b8:	efffffff 	.word	0xefffffff
 80044bc:	feffffff 	.word	0xfeffffff
 80044c0:	11c1808c 	.word	0x11c1808c
 80044c4:	eefeffff 	.word	0xeefeffff

080044c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0e9      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b76      	ldr	r3, [pc, #472]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2207      	movs	r2, #7
 80044e2:	4013      	ands	r3, r2
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d91e      	bls.n	8004528 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b73      	ldr	r3, [pc, #460]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2207      	movs	r2, #7
 80044f0:	4393      	bics	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	4b70      	ldr	r3, [pc, #448]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044fc:	f7fd fe00 	bl	8002100 <HAL_GetTick>
 8004500:	0003      	movs	r3, r0
 8004502:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004504:	e009      	b.n	800451a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004506:	f7fd fdfb 	bl	8002100 <HAL_GetTick>
 800450a:	0002      	movs	r2, r0
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	4a6a      	ldr	r2, [pc, #424]	; (80046bc <HAL_RCC_ClockConfig+0x1f4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e0ca      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800451a:	4b67      	ldr	r3, [pc, #412]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2207      	movs	r2, #7
 8004520:	4013      	ands	r3, r2
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d1ee      	bne.n	8004506 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2202      	movs	r2, #2
 800452e:	4013      	ands	r3, r2
 8004530:	d015      	beq.n	800455e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2204      	movs	r2, #4
 8004538:	4013      	ands	r3, r2
 800453a:	d006      	beq.n	800454a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800453c:	4b60      	ldr	r3, [pc, #384]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	4b5f      	ldr	r3, [pc, #380]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004542:	21e0      	movs	r1, #224	; 0xe0
 8004544:	01c9      	lsls	r1, r1, #7
 8004546:	430a      	orrs	r2, r1
 8004548:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454a:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	4a5d      	ldr	r2, [pc, #372]	; (80046c4 <HAL_RCC_ClockConfig+0x1fc>)
 8004550:	4013      	ands	r3, r2
 8004552:	0019      	movs	r1, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800455a:	430a      	orrs	r2, r1
 800455c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2201      	movs	r2, #1
 8004564:	4013      	ands	r3, r2
 8004566:	d057      	beq.n	8004618 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	029b      	lsls	r3, r3, #10
 8004578:	4013      	ands	r3, r2
 800457a:	d12b      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e097      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d107      	bne.n	8004598 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	2380      	movs	r3, #128	; 0x80
 800458e:	049b      	lsls	r3, r3, #18
 8004590:	4013      	ands	r3, r2
 8004592:	d11f      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e08b      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a0:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	4013      	ands	r3, r2
 80045aa:	d113      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e07f      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 80045ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045bc:	2202      	movs	r2, #2
 80045be:	4013      	ands	r3, r2
 80045c0:	d108      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e074      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b3e      	ldr	r3, [pc, #248]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 80045c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ca:	2202      	movs	r2, #2
 80045cc:	4013      	ands	r3, r2
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e06d      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b3a      	ldr	r3, [pc, #232]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	2207      	movs	r2, #7
 80045da:	4393      	bics	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685a      	ldr	r2, [r3, #4]
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 80045e4:	430a      	orrs	r2, r1
 80045e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e8:	f7fd fd8a 	bl	8002100 <HAL_GetTick>
 80045ec:	0003      	movs	r3, r0
 80045ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f0:	e009      	b.n	8004606 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045f2:	f7fd fd85 	bl	8002100 <HAL_GetTick>
 80045f6:	0002      	movs	r2, r0
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <HAL_RCC_ClockConfig+0x1f4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e054      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2238      	movs	r2, #56	; 0x38
 800460c:	401a      	ands	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	429a      	cmp	r2, r3
 8004616:	d1ec      	bne.n	80045f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004618:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2207      	movs	r2, #7
 800461e:	4013      	ands	r3, r2
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	429a      	cmp	r2, r3
 8004624:	d21e      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004626:	4b24      	ldr	r3, [pc, #144]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2207      	movs	r2, #7
 800462c:	4393      	bics	r3, r2
 800462e:	0019      	movs	r1, r3
 8004630:	4b21      	ldr	r3, [pc, #132]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004638:	f7fd fd62 	bl	8002100 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004640:	e009      	b.n	8004656 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004642:	f7fd fd5d 	bl	8002100 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <HAL_RCC_ClockConfig+0x1f4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e02c      	b.n	80046b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2207      	movs	r2, #7
 800465c:	4013      	ands	r3, r2
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d1ee      	bne.n	8004642 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2204      	movs	r2, #4
 800466a:	4013      	ands	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <HAL_RCC_ClockConfig+0x200>)
 8004674:	4013      	ands	r3, r2
 8004676:	0019      	movs	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68da      	ldr	r2, [r3, #12]
 800467c:	4b10      	ldr	r3, [pc, #64]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800467e:	430a      	orrs	r2, r1
 8004680:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004682:	f000 f829 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8004686:	0001      	movs	r1, r0
 8004688:	4b0d      	ldr	r3, [pc, #52]	; (80046c0 <HAL_RCC_ClockConfig+0x1f8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	220f      	movs	r2, #15
 8004690:	401a      	ands	r2, r3
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <HAL_RCC_ClockConfig+0x204>)
 8004694:	0092      	lsls	r2, r2, #2
 8004696:	58d3      	ldr	r3, [r2, r3]
 8004698:	221f      	movs	r2, #31
 800469a:	4013      	ands	r3, r2
 800469c:	000a      	movs	r2, r1
 800469e:	40da      	lsrs	r2, r3
 80046a0:	4b0b      	ldr	r3, [pc, #44]	; (80046d0 <HAL_RCC_ClockConfig+0x208>)
 80046a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80046a4:	4b0b      	ldr	r3, [pc, #44]	; (80046d4 <HAL_RCC_ClockConfig+0x20c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	0018      	movs	r0, r3
 80046aa:	f7fd fccf 	bl	800204c <HAL_InitTick>
 80046ae:	0003      	movs	r3, r0
}
 80046b0:	0018      	movs	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b004      	add	sp, #16
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40022000 	.word	0x40022000
 80046bc:	00001388 	.word	0x00001388
 80046c0:	40021000 	.word	0x40021000
 80046c4:	fffff0ff 	.word	0xfffff0ff
 80046c8:	ffff8fff 	.word	0xffff8fff
 80046cc:	080089ec 	.word	0x080089ec
 80046d0:	20000008 	.word	0x20000008
 80046d4:	20000000 	.word	0x20000000

080046d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80046de:	4b3c      	ldr	r3, [pc, #240]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2238      	movs	r2, #56	; 0x38
 80046e4:	4013      	ands	r3, r2
 80046e6:	d10f      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80046e8:	4b39      	ldr	r3, [pc, #228]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	0adb      	lsrs	r3, r3, #11
 80046ee:	2207      	movs	r2, #7
 80046f0:	4013      	ands	r3, r2
 80046f2:	2201      	movs	r2, #1
 80046f4:	409a      	lsls	r2, r3
 80046f6:	0013      	movs	r3, r2
 80046f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80046fa:	6839      	ldr	r1, [r7, #0]
 80046fc:	4835      	ldr	r0, [pc, #212]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046fe:	f7fb fd13 	bl	8000128 <__udivsi3>
 8004702:	0003      	movs	r3, r0
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	e05d      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004708:	4b31      	ldr	r3, [pc, #196]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	2238      	movs	r2, #56	; 0x38
 800470e:	4013      	ands	r3, r2
 8004710:	2b08      	cmp	r3, #8
 8004712:	d102      	bne.n	800471a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004714:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004716:	613b      	str	r3, [r7, #16]
 8004718:	e054      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800471a:	4b2d      	ldr	r3, [pc, #180]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2238      	movs	r2, #56	; 0x38
 8004720:	4013      	ands	r3, r2
 8004722:	2b10      	cmp	r3, #16
 8004724:	d138      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004726:	4b2a      	ldr	r3, [pc, #168]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2203      	movs	r2, #3
 800472c:	4013      	ands	r3, r2
 800472e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004730:	4b27      	ldr	r3, [pc, #156]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	091b      	lsrs	r3, r3, #4
 8004736:	2207      	movs	r2, #7
 8004738:	4013      	ands	r3, r2
 800473a:	3301      	adds	r3, #1
 800473c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b03      	cmp	r3, #3
 8004742:	d10d      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	4824      	ldr	r0, [pc, #144]	; (80047d8 <HAL_RCC_GetSysClockFreq+0x100>)
 8004748:	f7fb fcee 	bl	8000128 <__udivsi3>
 800474c:	0003      	movs	r3, r0
 800474e:	0019      	movs	r1, r3
 8004750:	4b1f      	ldr	r3, [pc, #124]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	0a1b      	lsrs	r3, r3, #8
 8004756:	227f      	movs	r2, #127	; 0x7f
 8004758:	4013      	ands	r3, r2
 800475a:	434b      	muls	r3, r1
 800475c:	617b      	str	r3, [r7, #20]
        break;
 800475e:	e00d      	b.n	800477c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	481c      	ldr	r0, [pc, #112]	; (80047d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004764:	f7fb fce0 	bl	8000128 <__udivsi3>
 8004768:	0003      	movs	r3, r0
 800476a:	0019      	movs	r1, r3
 800476c:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	0a1b      	lsrs	r3, r3, #8
 8004772:	227f      	movs	r2, #127	; 0x7f
 8004774:	4013      	ands	r3, r2
 8004776:	434b      	muls	r3, r1
 8004778:	617b      	str	r3, [r7, #20]
        break;
 800477a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800477c:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	0f5b      	lsrs	r3, r3, #29
 8004782:	2207      	movs	r2, #7
 8004784:	4013      	ands	r3, r2
 8004786:	3301      	adds	r3, #1
 8004788:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800478a:	6879      	ldr	r1, [r7, #4]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7fb fccb 	bl	8000128 <__udivsi3>
 8004792:	0003      	movs	r3, r0
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	e015      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2238      	movs	r2, #56	; 0x38
 800479e:	4013      	ands	r3, r2
 80047a0:	2b20      	cmp	r3, #32
 80047a2:	d103      	bne.n	80047ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e00b      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80047ac:	4b08      	ldr	r3, [pc, #32]	; (80047d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	2238      	movs	r2, #56	; 0x38
 80047b2:	4013      	ands	r3, r2
 80047b4:	2b18      	cmp	r3, #24
 80047b6:	d103      	bne.n	80047c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80047b8:	23fa      	movs	r3, #250	; 0xfa
 80047ba:	01db      	lsls	r3, r3, #7
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	e001      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80047c4:	693b      	ldr	r3, [r7, #16]
}
 80047c6:	0018      	movs	r0, r3
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b006      	add	sp, #24
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	46c0      	nop			; (mov r8, r8)
 80047d0:	40021000 	.word	0x40021000
 80047d4:	00f42400 	.word	0x00f42400
 80047d8:	007a1200 	.word	0x007a1200

080047dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80047e4:	2313      	movs	r3, #19
 80047e6:	18fb      	adds	r3, r7, r3
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047ec:	2312      	movs	r3, #18
 80047ee:	18fb      	adds	r3, r7, r3
 80047f0:	2200      	movs	r2, #0
 80047f2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2380      	movs	r3, #128	; 0x80
 80047fa:	029b      	lsls	r3, r3, #10
 80047fc:	4013      	ands	r3, r2
 80047fe:	d100      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004800:	e0a4      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004802:	2311      	movs	r3, #17
 8004804:	18fb      	adds	r3, r7, r3
 8004806:	2200      	movs	r2, #0
 8004808:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800480a:	4ba5      	ldr	r3, [pc, #660]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800480c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	055b      	lsls	r3, r3, #21
 8004812:	4013      	ands	r3, r2
 8004814:	d111      	bne.n	800483a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004816:	4ba2      	ldr	r3, [pc, #648]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481a:	4ba1      	ldr	r3, [pc, #644]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	0549      	lsls	r1, r1, #21
 8004820:	430a      	orrs	r2, r1
 8004822:	63da      	str	r2, [r3, #60]	; 0x3c
 8004824:	4b9e      	ldr	r3, [pc, #632]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	055b      	lsls	r3, r3, #21
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004832:	2311      	movs	r3, #17
 8004834:	18fb      	adds	r3, r7, r3
 8004836:	2201      	movs	r2, #1
 8004838:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800483a:	4b9a      	ldr	r3, [pc, #616]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b99      	ldr	r3, [pc, #612]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	0049      	lsls	r1, r1, #1
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004848:	f7fd fc5a 	bl	8002100 <HAL_GetTick>
 800484c:	0003      	movs	r3, r0
 800484e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004850:	e00b      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fd fc55 	bl	8002100 <HAL_GetTick>
 8004856:	0002      	movs	r2, r0
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d904      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004860:	2313      	movs	r3, #19
 8004862:	18fb      	adds	r3, r7, r3
 8004864:	2203      	movs	r2, #3
 8004866:	701a      	strb	r2, [r3, #0]
        break;
 8004868:	e005      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486a:	4b8e      	ldr	r3, [pc, #568]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4013      	ands	r3, r2
 8004874:	d0ed      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8004876:	2313      	movs	r3, #19
 8004878:	18fb      	adds	r3, r7, r3
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d154      	bne.n	800492a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004880:	4b87      	ldr	r3, [pc, #540]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004882:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004884:	23c0      	movs	r3, #192	; 0xc0
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4013      	ands	r3, r2
 800488a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d019      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	429a      	cmp	r2, r3
 800489a:	d014      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800489c:	4b80      	ldr	r3, [pc, #512]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	4a81      	ldr	r2, [pc, #516]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048a6:	4b7e      	ldr	r3, [pc, #504]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048aa:	4b7d      	ldr	r3, [pc, #500]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ac:	2180      	movs	r1, #128	; 0x80
 80048ae:	0249      	lsls	r1, r1, #9
 80048b0:	430a      	orrs	r2, r1
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b4:	4b7a      	ldr	r3, [pc, #488]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048b8:	4b79      	ldr	r3, [pc, #484]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048ba:	497c      	ldr	r1, [pc, #496]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 80048bc:	400a      	ands	r2, r1
 80048be:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048c0:	4b77      	ldr	r3, [pc, #476]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2201      	movs	r2, #1
 80048ca:	4013      	ands	r3, r2
 80048cc:	d016      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ce:	f7fd fc17 	bl	8002100 <HAL_GetTick>
 80048d2:	0003      	movs	r3, r0
 80048d4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d8:	f7fd fc12 	bl	8002100 <HAL_GetTick>
 80048dc:	0002      	movs	r2, r0
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	4a73      	ldr	r2, [pc, #460]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d904      	bls.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80048e8:	2313      	movs	r3, #19
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2203      	movs	r2, #3
 80048ee:	701a      	strb	r2, [r3, #0]
            break;
 80048f0:	e004      	b.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f2:	4b6b      	ldr	r3, [pc, #428]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	2202      	movs	r2, #2
 80048f8:	4013      	ands	r3, r2
 80048fa:	d0ed      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80048fc:	2313      	movs	r3, #19
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004906:	4b66      	ldr	r3, [pc, #408]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	4a67      	ldr	r2, [pc, #412]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800490c:	4013      	ands	r3, r2
 800490e:	0019      	movs	r1, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004914:	4b62      	ldr	r3, [pc, #392]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004916:	430a      	orrs	r2, r1
 8004918:	65da      	str	r2, [r3, #92]	; 0x5c
 800491a:	e00c      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800491c:	2312      	movs	r3, #18
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	2213      	movs	r2, #19
 8004922:	18ba      	adds	r2, r7, r2
 8004924:	7812      	ldrb	r2, [r2, #0]
 8004926:	701a      	strb	r2, [r3, #0]
 8004928:	e005      	b.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800492a:	2312      	movs	r3, #18
 800492c:	18fb      	adds	r3, r7, r3
 800492e:	2213      	movs	r2, #19
 8004930:	18ba      	adds	r2, r7, r2
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004936:	2311      	movs	r3, #17
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d105      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004940:	4b57      	ldr	r3, [pc, #348]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004942:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004944:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004946:	495b      	ldr	r1, [pc, #364]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004948:	400a      	ands	r2, r1
 800494a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2201      	movs	r2, #1
 8004952:	4013      	ands	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004956:	4b52      	ldr	r3, [pc, #328]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	2203      	movs	r2, #3
 800495c:	4393      	bics	r3, r2
 800495e:	0019      	movs	r1, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685a      	ldr	r2, [r3, #4]
 8004964:	4b4e      	ldr	r3, [pc, #312]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004966:	430a      	orrs	r2, r1
 8004968:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_LPUART1SEL)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2220      	movs	r2, #32
 8004970:	4013      	ands	r3, r2
 8004972:	d009      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004974:	4b4a      	ldr	r3, [pc, #296]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004978:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800497a:	4013      	ands	r3, r2
 800497c:	0019      	movs	r1, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004984:	430a      	orrs	r2, r1
 8004986:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPUART1SEL */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4013      	ands	r3, r2
 8004992:	d009      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004994:	4b42      	ldr	r3, [pc, #264]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	4a48      	ldr	r2, [pc, #288]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800499a:	4013      	ands	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	695a      	ldr	r2, [r3, #20]
 80049a2:	4b3f      	ldr	r3, [pc, #252]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049a4:	430a      	orrs	r2, r1
 80049a6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4013      	ands	r3, r2
 80049b2:	d009      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049b4:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b8:	4a41      	ldr	r2, [pc, #260]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	0019      	movs	r1, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	4b37      	ldr	r3, [pc, #220]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049c4:	430a      	orrs	r2, r1
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	4013      	ands	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049d2:	4b33      	ldr	r3, [pc, #204]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d6:	4a3b      	ldr	r2, [pc, #236]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80049d8:	4013      	ands	r3, r2
 80049da:	0019      	movs	r1, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	4b2f      	ldr	r3, [pc, #188]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049e2:	430a      	orrs	r2, r1
 80049e4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	01db      	lsls	r3, r3, #7
 80049ee:	4013      	ands	r3, r2
 80049f0:	d015      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049f2:	4b2b      	ldr	r3, [pc, #172]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	0899      	lsrs	r1, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69da      	ldr	r2, [r3, #28]
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a00:	430a      	orrs	r2, r1
 8004a02:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	05db      	lsls	r3, r3, #23
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d106      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a10:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a16:	2180      	movs	r1, #128	; 0x80
 8004a18:	0249      	lsls	r1, r1, #9
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_CECSEL */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	039b      	lsls	r3, r3, #14
 8004a26:	4013      	ands	r3, r2
 8004a28:	d016      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	4a26      	ldr	r2, [pc, #152]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	0019      	movs	r1, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a1a      	ldr	r2, [r3, #32]
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1a      	ldr	r2, [r3, #32]
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	03db      	lsls	r3, r3, #15
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d106      	bne.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a50:	2180      	movs	r1, #128	; 0x80
 8004a52:	0449      	lsls	r1, r1, #17
 8004a54:	430a      	orrs	r2, r1
 8004a56:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	4013      	ands	r3, r2
 8004a62:	d016      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004a64:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	4a18      	ldr	r2, [pc, #96]	; (8004acc <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	691a      	ldr	r2, [r3, #16]
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	01db      	lsls	r3, r3, #7
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d106      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a86:	68da      	ldr	r2, [r3, #12]
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004a8a:	2180      	movs	r1, #128	; 0x80
 8004a8c:	0249      	lsls	r1, r1, #9
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8004a92:	2312      	movs	r3, #18
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	781b      	ldrb	r3, [r3, #0]
}
 8004a98:	0018      	movs	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	b006      	add	sp, #24
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	fffffcff 	.word	0xfffffcff
 8004aac:	fffeffff 	.word	0xfffeffff
 8004ab0:	00001388 	.word	0x00001388
 8004ab4:	efffffff 	.word	0xefffffff
 8004ab8:	fffff3ff 	.word	0xfffff3ff
 8004abc:	fff3ffff 	.word	0xfff3ffff
 8004ac0:	ffcfffff 	.word	0xffcfffff
 8004ac4:	ffffcfff 	.word	0xffffcfff
 8004ac8:	ffbfffff 	.word	0xffbfffff
 8004acc:	ffff3fff 	.word	0xffff3fff

08004ad0 <setup>:
#else
#define EVENTS_TO_WAIT_FOR  0
#endif

// One-time initialization
void setup() {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0

	// "NoteNewRequest()" uses the bundled "J" json package to allocate a "req", which is a JSON object
	// for the request to which we will then add Request arguments.  The function allocates a "req"
	// request structure using malloc() and initializes its "req" field with the type of request.
	J *req = NoteNewRequest("service.set");
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <setup+0x3c>)
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f003 fbd1 	bl	8008280 <NoteNewRequest>
 8004ade:	0003      	movs	r3, r0
 8004ae0:	607b      	str	r3, [r7, #4]

	// This command (required) causes the data to be delivered to the Project on notehub.io that has claimed
	// this Product ID.  (see above)
	JAddStringToObject(req, "product", myProductID);
 8004ae2:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <setup+0x40>)
 8004ae4:	490b      	ldr	r1, [pc, #44]	; (8004b14 <setup+0x44>)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f002 fd7b 	bl	80075e4 <JAddStringToObject>
	// This command determines how often the Notecard connects to the service.  If "continuous" the Notecard
    // immediately establishes a session with the service at notehub.io, and keeps it active continuously.
    // Because of the power requirements of a continuous connection, a battery powered device would instead
    // only sample its sensors occasionally, and would only upload to the service on a periodic basis.
#if myLiveDemo
	JAddStringToObject(req, "mode", "continuous");
 8004aee:	4a0a      	ldr	r2, [pc, #40]	; (8004b18 <setup+0x48>)
 8004af0:	490a      	ldr	r1, [pc, #40]	; (8004b1c <setup+0x4c>)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	0018      	movs	r0, r3
 8004af6:	f002 fd75 	bl	80075e4 <JAddStringToObject>
	//		 "product" : myProductID,
	//		 "mode"	   : "continuous"
	//	   }
	// Note that NoteRequest() always uses free() to release the request data structure, and it
	// returns "true" if success and "false" if there is any failure.
	NoteRequest(req);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	0018      	movs	r0, r3
 8004afe:	f003 fbd7 	bl	80082b0 <NoteRequest>

}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b002      	add	sp, #8
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	08008758 	.word	0x08008758
 8004b10:	08008764 	.word	0x08008764
 8004b14:	0800878c 	.word	0x0800878c
 8004b18:	08008794 	.word	0x08008794
 8004b1c:	080087a0 	.word	0x080087a0

08004b20 <loop>:

// This  main loop which is called repeatedly, add outbound data every 15 seconds
void loop() {
 8004b20:	b590      	push	{r4, r7, lr}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0

	// Simulate an event counter of some kind
	static unsigned eventCounter = 0;
	eventCounter = eventCounter + 1;
 8004b26:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <loop+0x124>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	4b45      	ldr	r3, [pc, #276]	; (8004c44 <loop+0x124>)
 8004b2e:	601a      	str	r2, [r3, #0]
	// that we would like to examine the response of the transaction.  This method takes a "request" JSON
	// data structure as input, then processes it and returns a "response" JSON data structure with
	// the response.  Note that because the Notecard library uses malloc(), developers must always
	// check for NULL to ensure that there was enough memory available on the microcontroller to
	// satisfy the allocation request.
	double temperature = 0;
 8004b30:	2300      	movs	r3, #0
 8004b32:	2400      	movs	r4, #0
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	61fc      	str	r4, [r7, #28]
    J *rsp = NoteRequestResponse(NoteNewRequest("card.temp"));
 8004b38:	4b43      	ldr	r3, [pc, #268]	; (8004c48 <loop+0x128>)
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f003 fba0 	bl	8008280 <NoteNewRequest>
 8004b40:	0003      	movs	r3, r0
 8004b42:	0018      	movs	r0, r3
 8004b44:	f003 fbe6 	bl	8008314 <NoteRequestResponse>
 8004b48:	0003      	movs	r3, r0
 8004b4a:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00d      	beq.n	8004b6e <loop+0x4e>
        temperature = JGetNumber(rsp, "value");
 8004b52:	4a3e      	ldr	r2, [pc, #248]	; (8004c4c <loop+0x12c>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f002 fe33 	bl	80077c4 <JGetNumber>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	000c      	movs	r4, r1
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	61fc      	str	r4, [r7, #28]
        NoteDeleteResponse(rsp);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	0018      	movs	r0, r3
 8004b6a:	f000 feb7 	bl	80058dc <JDelete>
    }

	// Do the same to retrieve the voltage that is detected by the Notecard on its V+ pin.
	double voltage = 0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2400      	movs	r4, #0
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	617c      	str	r4, [r7, #20]
    rsp = NoteRequestResponse(NoteNewRequest("card.voltage"));
 8004b76:	4b36      	ldr	r3, [pc, #216]	; (8004c50 <loop+0x130>)
 8004b78:	0018      	movs	r0, r3
 8004b7a:	f003 fb81 	bl	8008280 <NoteNewRequest>
 8004b7e:	0003      	movs	r3, r0
 8004b80:	0018      	movs	r0, r3
 8004b82:	f003 fbc7 	bl	8008314 <NoteRequestResponse>
 8004b86:	0003      	movs	r3, r0
 8004b88:	60fb      	str	r3, [r7, #12]
    if (rsp != NULL) {
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00d      	beq.n	8004bac <loop+0x8c>
        voltage = JGetNumber(rsp, "value");
 8004b90:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <loop+0x12c>)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	0011      	movs	r1, r2
 8004b96:	0018      	movs	r0, r3
 8004b98:	f002 fe14 	bl	80077c4 <JGetNumber>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	000c      	movs	r4, r1
 8004ba0:	613b      	str	r3, [r7, #16]
 8004ba2:	617c      	str	r4, [r7, #20]
        NoteDeleteResponse(rsp);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f000 fe98 	bl	80058dc <JDelete>
    }

	// Enqueue the measurement to the Notecard for transmission to the Notehub, adding the "start"
	// flag for demonstration purposes to upload the data instantaneously, so that if you are looking
	// at this on notehub.io you will see the data appearing 'live'.)
    J *req = NoteNewRequest("note.add");
 8004bac:	4b29      	ldr	r3, [pc, #164]	; (8004c54 <loop+0x134>)
 8004bae:	0018      	movs	r0, r3
 8004bb0:	f003 fb66 	bl	8008280 <NoteNewRequest>
 8004bb4:	0003      	movs	r3, r0
 8004bb6:	60bb      	str	r3, [r7, #8]
	if (req != NULL) {
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d039      	beq.n	8004c32 <loop+0x112>
	    JAddStringToObject(req, "file", "sensors.qo");
 8004bbe:	4a26      	ldr	r2, [pc, #152]	; (8004c58 <loop+0x138>)
 8004bc0:	4926      	ldr	r1, [pc, #152]	; (8004c5c <loop+0x13c>)
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f002 fd0d 	bl	80075e4 <JAddStringToObject>
	    JAddBoolToObject(req, "start", true);
 8004bca:	4925      	ldr	r1, [pc, #148]	; (8004c60 <loop+0x140>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f002 fcbb 	bl	800754c <JAddBoolToObject>
		J *body = JCreateObject();
 8004bd6:	f002 fdb5 	bl	8007744 <JCreateObject>
 8004bda:	0003      	movs	r3, r0
 8004bdc:	607b      	str	r3, [r7, #4]
		if (body != NULL) {
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d022      	beq.n	8004c2a <loop+0x10a>
			JAddNumberToObject(body, "temp", temperature);
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	69fc      	ldr	r4, [r7, #28]
 8004be8:	491e      	ldr	r1, [pc, #120]	; (8004c64 <loop+0x144>)
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	001a      	movs	r2, r3
 8004bee:	0023      	movs	r3, r4
 8004bf0:	f002 fcd0 	bl	8007594 <JAddNumberToObject>
			JAddNumberToObject(body, "voltage", voltage);
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	697c      	ldr	r4, [r7, #20]
 8004bf8:	491b      	ldr	r1, [pc, #108]	; (8004c68 <loop+0x148>)
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	001a      	movs	r2, r3
 8004bfe:	0023      	movs	r3, r4
 8004c00:	f002 fcc8 	bl	8007594 <JAddNumberToObject>
			JAddNumberToObject(body, "count", eventCounter);
 8004c04:	4b0f      	ldr	r3, [pc, #60]	; (8004c44 <loop+0x124>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	0018      	movs	r0, r3
 8004c0a:	f7fd f9af 	bl	8001f6c <__aeabi_ui2d>
 8004c0e:	0003      	movs	r3, r0
 8004c10:	000c      	movs	r4, r1
 8004c12:	4916      	ldr	r1, [pc, #88]	; (8004c6c <loop+0x14c>)
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	001a      	movs	r2, r3
 8004c18:	0023      	movs	r3, r4
 8004c1a:	f002 fcbb 	bl	8007594 <JAddNumberToObject>
            if ((eventOccurred() & EVENT_BUTTON) != 0) {
                JAddBoolToObject(body, "button", true);
                eventClear(EVENT_BUTTON);
            }
#endif
		    JAddItemToObject(req, "body", body);
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	4913      	ldr	r1, [pc, #76]	; (8004c70 <loop+0x150>)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	0018      	movs	r0, r3
 8004c26:	f002 fc7b 	bl	8007520 <JAddItemToObject>
		}
	    NoteRequest(req);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	f003 fb3f 	bl	80082b0 <NoteRequest>

	// Delay between measurements
#if EVENTS
    eventWait(EVENTS_TO_WAIT_FOR, DELAY_PERIOD);
#else
	delay(DELAY_PERIOD);
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <loop+0x154>)
 8004c34:	0018      	movs	r0, r3
 8004c36:	f000 f99a 	bl	8004f6e <delay>
#endif

}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b009      	add	sp, #36	; 0x24
 8004c40:	bd90      	pop	{r4, r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	20000254 	.word	0x20000254
 8004c48:	080087a8 	.word	0x080087a8
 8004c4c:	080087b4 	.word	0x080087b4
 8004c50:	080087bc 	.word	0x080087bc
 8004c54:	080087cc 	.word	0x080087cc
 8004c58:	080087d8 	.word	0x080087d8
 8004c5c:	080087e4 	.word	0x080087e4
 8004c60:	080087ec 	.word	0x080087ec
 8004c64:	080087f4 	.word	0x080087f4
 8004c68:	080087fc 	.word	0x080087fc
 8004c6c:	08008804 	.word	0x08008804
 8004c70:	0800880c 	.word	0x0800880c
 8004c74:	00003a98 	.word	0x00003a98

08004c78 <main>:
void noteI2CReset(void);
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size);
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *avail);

// Main entry point
int main(void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af02      	add	r7, sp, #8

    // Initialize peripherals
    HAL_Init();
 8004c7e:	f7fd f9c5 	bl	800200c <HAL_Init>
    SystemClock_Config();
 8004c82:	f000 f825 	bl	8004cd0 <SystemClock_Config>
    MX_GPIO_Init();
 8004c86:	f000 f8f5 	bl	8004e74 <MX_GPIO_Init>
#ifdef EVENT_TIMER
    MX_LPTIM1_Init();
#endif

    // Register callbacks with note-c subsystem that it needs for I/O, memory, timer
    NoteSetFn(malloc, free, delay, millis);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <main+0x3c>)
 8004c8c:	4a0a      	ldr	r2, [pc, #40]	; (8004cb8 <main+0x40>)
 8004c8e:	490b      	ldr	r1, [pc, #44]	; (8004cbc <main+0x44>)
 8004c90:	480b      	ldr	r0, [pc, #44]	; (8004cc0 <main+0x48>)
 8004c92:	f002 ff77 	bl	8007b84 <NoteSetFn>

    // Register callbacks for Notecard I/O
#if NOTECARD_USE_I2C
    NoteSetFnI2C(NOTE_I2C_ADDR_DEFAULT, NOTE_I2C_MAX_DEFAULT, noteI2CReset, noteI2CTransmit, noteI2CReceive);
 8004c96:	490b      	ldr	r1, [pc, #44]	; (8004cc4 <main+0x4c>)
 8004c98:	4a0b      	ldr	r2, [pc, #44]	; (8004cc8 <main+0x50>)
 8004c9a:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <main+0x54>)
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	000b      	movs	r3, r1
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f002 ff8e 	bl	8007bc4 <NoteSetFnI2C>
#else
    NoteSetFnSerial(noteSerialReset, noteSerialTransmit, noteSerialAvailable, noteSerialReceive);
#endif

    // Use this method of invoking main app code so that we can re-use familiar Arduino examples
    setup();
 8004ca8:	f7ff ff12 	bl	8004ad0 <setup>
    while (true)
        loop();
 8004cac:	f7ff ff38 	bl	8004b20 <loop>
 8004cb0:	e7fc      	b.n	8004cac <main+0x34>
 8004cb2:	46c0      	nop			; (mov r8, r8)
 8004cb4:	08004f87 	.word	0x08004f87
 8004cb8:	08004f6f 	.word	0x08004f6f
 8004cbc:	08008515 	.word	0x08008515
 8004cc0:	08008501 	.word	0x08008501
 8004cc4:	08004fa9 	.word	0x08004fa9
 8004cc8:	08004f97 	.word	0x08004f97
 8004ccc:	08005049 	.word	0x08005049

08004cd0 <SystemClock_Config>:

}

// System clock configuration
void SystemClock_Config(void) {
 8004cd0:	b590      	push	{r4, r7, lr}
 8004cd2:	b09d      	sub	sp, #116	; 0x74
 8004cd4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cd6:	2438      	movs	r4, #56	; 0x38
 8004cd8:	193b      	adds	r3, r7, r4
 8004cda:	0018      	movs	r0, r3
 8004cdc:	2338      	movs	r3, #56	; 0x38
 8004cde:	001a      	movs	r2, r3
 8004ce0:	2100      	movs	r1, #0
 8004ce2:	f003 fc3c 	bl	800855e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ce6:	2328      	movs	r3, #40	; 0x28
 8004ce8:	18fb      	adds	r3, r7, r3
 8004cea:	0018      	movs	r0, r3
 8004cec:	2310      	movs	r3, #16
 8004cee:	001a      	movs	r2, r3
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	f003 fc34 	bl	800855e <memset>
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cf6:	003b      	movs	r3, r7
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	2328      	movs	r3, #40	; 0x28
 8004cfc:	001a      	movs	r2, r3
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f003 fc2d 	bl	800855e <memset>

    // Configure the main internal regulator output voltage
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f7ff f87d 	bl	8003e08 <HAL_PWREx_ControlVoltageScaling>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004d0e:	193b      	adds	r3, r7, r4
 8004d10:	220a      	movs	r2, #10
 8004d12:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d14:	193b      	adds	r3, r7, r4
 8004d16:	2201      	movs	r2, #1
 8004d18:	619a      	str	r2, [r3, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	2280      	movs	r2, #128	; 0x80
 8004d1e:	0052      	lsls	r2, r2, #1
 8004d20:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2200      	movs	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004d28:	193b      	adds	r3, r7, r4
 8004d2a:	2240      	movs	r2, #64	; 0x40
 8004d2c:	615a      	str	r2, [r3, #20]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d2e:	193b      	adds	r3, r7, r4
 8004d30:	2200      	movs	r2, #0
 8004d32:	61da      	str	r2, [r3, #28]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	0018      	movs	r0, r3
 8004d38:	f7ff f8a6 	bl	8003e88 <HAL_RCC_OscConfig>
 8004d3c:	1e03      	subs	r3, r0, #0
 8004d3e:	d001      	beq.n	8004d44 <SystemClock_Config+0x74>
        Error_Handler();
 8004d40:	f000 f910 	bl	8004f64 <Error_Handler>

    // Initializes the CPU, AHB and APB busses clocks
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1;
 8004d44:	2128      	movs	r1, #40	; 0x28
 8004d46:	187b      	adds	r3, r7, r1
 8004d48:	2207      	movs	r2, #7
 8004d4a:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004d4c:	187b      	adds	r3, r7, r1
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d52:	187b      	adds	r3, r7, r1
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d58:	187b      	adds	r3, r7, r1
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004d5e:	187b      	adds	r3, r7, r1
 8004d60:	2100      	movs	r1, #0
 8004d62:	0018      	movs	r0, r3
 8004d64:	f7ff fbb0 	bl	80044c8 <HAL_RCC_ClockConfig>
 8004d68:	1e03      	subs	r3, r0, #0
 8004d6a:	d001      	beq.n	8004d70 <SystemClock_Config+0xa0>
        Error_Handler();
 8004d6c:	f000 f8fa 	bl	8004f64 <Error_Handler>

    // Initializes the peripherals clocks
    PeriphClkInit.PeriphClockSelection = 0;
 8004d70:	003b      	movs	r3, r7
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]
#if USE_UART
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_USART1;
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
#endif
#if USE_I2C
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_I2C1;
 8004d76:	003b      	movs	r3, r7
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2240      	movs	r2, #64	; 0x40
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	003b      	movs	r3, r7
 8004d80:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004d82:	003b      	movs	r3, r7
 8004d84:	2200      	movs	r2, #0
 8004d86:	60da      	str	r2, [r3, #12]
#endif
#ifdef EVENT_TIMER
    PeriphClkInit.PeriphClockSelection |= RCC_PERIPHCLK_LPTIM1;
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSI;
#endif
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d88:	003b      	movs	r3, r7
 8004d8a:	0018      	movs	r0, r3
 8004d8c:	f7ff fd26 	bl	80047dc <HAL_RCCEx_PeriphCLKConfig>
 8004d90:	1e03      	subs	r3, r0, #0
 8004d92:	d001      	beq.n	8004d98 <SystemClock_Config+0xc8>
        Error_Handler();
 8004d94:	f000 f8e6 	bl	8004f64 <Error_Handler>

}
 8004d98:	46c0      	nop			; (mov r8, r8)
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	b01d      	add	sp, #116	; 0x74
 8004d9e:	bd90      	pop	{r4, r7, pc}

08004da0 <MX_I2C1_Init>:

// I2C1 Initialization
#if USE_I2C
void MX_I2C1_Init(void) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0

    // Exit if already done
    if (i2c1Initialized)
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <MX_I2C1_Init+0x84>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d138      	bne.n	8004e1e <MX_I2C1_Init+0x7e>
        return;
    i2c1Initialized = true;
 8004dac:	4b1d      	ldr	r3, [pc, #116]	; (8004e24 <MX_I2C1_Init+0x84>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]

    // Primary initialization
    hi2c1.Instance = I2C1;
 8004db2:	4b1d      	ldr	r3, [pc, #116]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004db4:	4a1d      	ldr	r2, [pc, #116]	; (8004e2c <MX_I2C1_Init+0x8c>)
 8004db6:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00303D5B;
 8004db8:	4b1b      	ldr	r3, [pc, #108]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dba:	4a1d      	ldr	r2, [pc, #116]	; (8004e30 <MX_I2C1_Init+0x90>)
 8004dbc:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8004dbe:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dc4:	4b18      	ldr	r3, [pc, #96]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8004dd0:	4b15      	ldr	r3, [pc, #84]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ddc:	4b12      	ldr	r3, [pc, #72]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004de8:	4b0f      	ldr	r3, [pc, #60]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dea:	0018      	movs	r0, r3
 8004dec:	f7fd fd70 	bl	80028d0 <HAL_I2C_Init>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d001      	beq.n	8004df8 <MX_I2C1_Init+0x58>
        Error_Handler();
 8004df4:	f000 f8b6 	bl	8004f64 <Error_Handler>

    // Configure Analogue filter
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004df8:	4b0b      	ldr	r3, [pc, #44]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f7fe ff6b 	bl	8003cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8004e02:	1e03      	subs	r3, r0, #0
 8004e04:	d001      	beq.n	8004e0a <MX_I2C1_Init+0x6a>
        Error_Handler();
 8004e06:	f000 f8ad 	bl	8004f64 <Error_Handler>

    // Configure Digital filter
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004e0a:	4b07      	ldr	r3, [pc, #28]	; (8004e28 <MX_I2C1_Init+0x88>)
 8004e0c:	2100      	movs	r1, #0
 8004e0e:	0018      	movs	r0, r3
 8004e10:	f7fe ffae 	bl	8003d70 <HAL_I2CEx_ConfigDigitalFilter>
 8004e14:	1e03      	subs	r3, r0, #0
 8004e16:	d003      	beq.n	8004e20 <MX_I2C1_Init+0x80>
        Error_Handler();
 8004e18:	f000 f8a4 	bl	8004f64 <Error_Handler>
 8004e1c:	e000      	b.n	8004e20 <MX_I2C1_Init+0x80>
        return;
 8004e1e:	46c0      	nop			; (mov r8, r8)

}
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bd80      	pop	{r7, pc}
 8004e24:	20000258 	.word	0x20000258
 8004e28:	200002b4 	.word	0x200002b4
 8004e2c:	40005400 	.word	0x40005400
 8004e30:	00303d5b 	.word	0x00303d5b

08004e34 <MX_I2C1_DeInit>:
#endif

// I2C1 De-initialization
#if USE_I2C
void MX_I2C1_DeInit(void) {
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0

    // Exit if already done
    if (!i2c1Initialized)
 8004e38:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <MX_I2C1_DeInit+0x38>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	4053      	eors	r3, r2
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10e      	bne.n	8004e64 <MX_I2C1_DeInit+0x30>
        return;
    i2c1Initialized = false;
 8004e46:	4b09      	ldr	r3, [pc, #36]	; (8004e6c <MX_I2C1_DeInit+0x38>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
    
    // Deconfigure Analogue filter
    HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_DISABLE);
 8004e4c:	2380      	movs	r3, #128	; 0x80
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	4b07      	ldr	r3, [pc, #28]	; (8004e70 <MX_I2C1_DeInit+0x3c>)
 8004e52:	0011      	movs	r1, r2
 8004e54:	0018      	movs	r0, r3
 8004e56:	f7fe ff3f 	bl	8003cd8 <HAL_I2CEx_ConfigAnalogFilter>

    // Deinitialize
    HAL_I2C_DeInit(&hi2c1);
 8004e5a:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <MX_I2C1_DeInit+0x3c>)
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fd fdcd 	bl	80029fc <HAL_I2C_DeInit>
 8004e62:	e000      	b.n	8004e66 <MX_I2C1_DeInit+0x32>
        return;
 8004e64:	46c0      	nop			; (mov r8, r8)

}
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	46c0      	nop			; (mov r8, r8)
 8004e6c:	20000258 	.word	0x20000258
 8004e70:	200002b4 	.word	0x200002b4

08004e74 <MX_GPIO_Init>:
    return totalTimerMs;
}
#endif

// GPIO initialization
void MX_GPIO_Init(void) {
 8004e74:	b590      	push	{r4, r7, lr}
 8004e76:	b08b      	sub	sp, #44	; 0x2c
 8004e78:	af00      	add	r7, sp, #0

    // GPIO Ports Clock Enable
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e7a:	2414      	movs	r4, #20
 8004e7c:	193b      	adds	r3, r7, r4
 8004e7e:	0018      	movs	r0, r3
 8004e80:	2314      	movs	r3, #20
 8004e82:	001a      	movs	r2, r3
 8004e84:	2100      	movs	r1, #0
 8004e86:	f003 fb6a 	bl	800855e <memset>

    // GPIO Ports Clock Enable
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e8a:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8e:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004e90:	2104      	movs	r1, #4
 8004e92:	430a      	orrs	r2, r1
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34
 8004e96:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	2204      	movs	r2, #4
 8004e9c:	4013      	ands	r3, r2
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004ea2:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ea6:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ea8:	2120      	movs	r1, #32
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	635a      	str	r2, [r3, #52]	; 0x34
 8004eae:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ebc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ebe:	4b21      	ldr	r3, [pc, #132]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ec6:	4b1f      	ldr	r3, [pc, #124]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eca:	2201      	movs	r2, #1
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed2:	4b1c      	ldr	r3, [pc, #112]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ed8:	2102      	movs	r1, #2
 8004eda:	430a      	orrs	r2, r1
 8004edc:	635a      	str	r2, [r3, #52]	; 0x34
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <MX_GPIO_Init+0xd0>)
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]

    // Configure GPIO pin : T_NRST_Pin
    GPIO_InitStruct.Pin = T_NRST_Pin;
 8004eea:	0021      	movs	r1, r4
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	2204      	movs	r2, #4
 8004ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <MX_GPIO_Init+0xd4>)
 8004ef6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2200      	movs	r2, #0
 8004efc:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(T_NRST_GPIO_Port, &GPIO_InitStruct);
 8004efe:	000c      	movs	r4, r1
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	4a12      	ldr	r2, [pc, #72]	; (8004f4c <MX_GPIO_Init+0xd8>)
 8004f04:	0019      	movs	r1, r3
 8004f06:	0010      	movs	r0, r2
 8004f08:	f7fd faae 	bl	8002468 <HAL_GPIO_Init>

    // Configure GPIO pins : T_VCP_TX_Pin T_VCP_RX_Pin
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8004f0c:	0021      	movs	r1, r4
 8004f0e:	187b      	adds	r3, r7, r1
 8004f10:	220c      	movs	r2, #12
 8004f12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f14:	187b      	adds	r3, r7, r1
 8004f16:	2202      	movs	r2, #2
 8004f18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f1a:	187b      	adds	r3, r7, r1
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f20:	187b      	adds	r3, r7, r1
 8004f22:	2200      	movs	r2, #0
 8004f24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004f26:	187b      	adds	r3, r7, r1
 8004f28:	2201      	movs	r2, #1
 8004f2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2c:	187a      	adds	r2, r7, r1
 8004f2e:	23a0      	movs	r3, #160	; 0xa0
 8004f30:	05db      	lsls	r3, r3, #23
 8004f32:	0011      	movs	r1, r2
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fd fa97 	bl	8002468 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIO_BUTTON_PORT, &GPIO_InitStruct);
    HAL_NVIC_SetPriority(GPIO_BUTTON_IRQ, 0, 0);
    HAL_NVIC_EnableIRQ(GPIO_BUTTON_IRQ);
#endif

}
 8004f3a:	46c0      	nop			; (mov r8, r8)
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	b00b      	add	sp, #44	; 0x2c
 8004f40:	bd90      	pop	{r4, r7, pc}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	40021000 	.word	0x40021000
 8004f48:	10110000 	.word	0x10110000
 8004f4c:	50001400 	.word	0x50001400

08004f50 <HAL_GPIO_EXTI_Rising_Callback>:

// Called when a GPIO interrupt occurs
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	0002      	movs	r2, r0
 8004f58:	1dbb      	adds	r3, r7, #6
 8004f5a:	801a      	strh	r2, [r3, #0]
#ifdef EVENT_BUTTON
    if ((GPIO_Pin & GPIO_BUTTON_PIN) != 0)
        event(EVENT_BUTTON);
#endif

}
 8004f5c:	46c0      	nop			; (mov r8, r8)
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	b002      	add	sp, #8
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <Error_Handler>:

// Primary HAL error handler
void Error_Handler(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
}
 8004f68:	46c0      	nop			; (mov r8, r8)
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <delay>:
void assert_failed(char *file, uint32_t line) {
}
#endif

// Computationally-delay the specified number of milliseconds
void delay(uint32_t ms) {
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b082      	sub	sp, #8
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	0018      	movs	r0, r3
 8004f7a:	f7fd f8cb 	bl	8002114 <HAL_Delay>
}
 8004f7e:	46c0      	nop			; (mov r8, r8)
 8004f80:	46bd      	mov	sp, r7
 8004f82:	b002      	add	sp, #8
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <millis>:

// Get the number of app milliseconds since boot (this will wrap)
long unsigned int millis() {
 8004f86:	b580      	push	{r7, lr}
 8004f88:	af00      	add	r7, sp, #0
    return (long unsigned int) HAL_GetTick();
 8004f8a:	f7fd f8b9 	bl	8002100 <HAL_GetTick>
 8004f8e:	0003      	movs	r3, r0
}
 8004f90:	0018      	movs	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <noteI2CReset>:
}
#endif

// I2C reset procedure, called before any I/O and called again upon I/O error
#if NOTECARD_USE_I2C
void noteI2CReset() {
 8004f96:	b580      	push	{r7, lr}
 8004f98:	af00      	add	r7, sp, #0
    MX_I2C1_DeInit();
 8004f9a:	f7ff ff4b 	bl	8004e34 <MX_I2C1_DeInit>
    MX_I2C1_Init();
 8004f9e:	f7ff feff 	bl	8004da0 <MX_I2C1_Init>
}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <noteI2CTransmit>:

// Transmits in master mode an amount of data, in blocking mode.     The address
// is the actual address; the caller should have shifted it right so that the
// low bit is NOT the read/write bit. An error message is returned, else NULL if success.
#if NOTECARD_USE_I2C
const char *noteI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size) {
 8004fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004faa:	b089      	sub	sp, #36	; 0x24
 8004fac:	af02      	add	r7, sp, #8
 8004fae:	6039      	str	r1, [r7, #0]
 8004fb0:	0011      	movs	r1, r2
 8004fb2:	1dbb      	adds	r3, r7, #6
 8004fb4:	1c02      	adds	r2, r0, #0
 8004fb6:	801a      	strh	r2, [r3, #0]
 8004fb8:	1d3b      	adds	r3, r7, #4
 8004fba:	1c0a      	adds	r2, r1, #0
 8004fbc:	801a      	strh	r2, [r3, #0]
    char *errstr = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	617b      	str	r3, [r7, #20]
    int writelen = sizeof(uint8_t) + Size;
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	881b      	ldrh	r3, [r3, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	613b      	str	r3, [r7, #16]
    uint8_t *writebuf = malloc(writelen);
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	0018      	movs	r0, r3
 8004fce:	f003 fa97 	bl	8008500 <malloc>
 8004fd2:	0003      	movs	r3, r0
 8004fd4:	60fb      	str	r3, [r7, #12]
    if (writebuf == NULL) {
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <noteI2CTransmit+0x3a>
        errstr = "i2c: insufficient memory (write)";
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <noteI2CTransmit+0x94>)
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	e027      	b.n	8005032 <noteI2CTransmit+0x8a>
    } else {
        writebuf[0] = Size;
 8004fe2:	1d3b      	adds	r3, r7, #4
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	701a      	strb	r2, [r3, #0]
        memcpy(&writebuf[1], pBuffer, Size);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1c58      	adds	r0, r3, #1
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	881a      	ldrh	r2, [r3, #0]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	0019      	movs	r1, r3
 8004ff8:	f003 faa8 	bl	800854c <memcpy>
        HAL_StatusTypeDef err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddress<<1, writebuf, writelen, 250);
 8004ffc:	1dbb      	adds	r3, r7, #6
 8004ffe:	881b      	ldrh	r3, [r3, #0]
 8005000:	18db      	adds	r3, r3, r3
 8005002:	b299      	uxth	r1, r3
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	b29d      	uxth	r5, r3
 8005008:	260b      	movs	r6, #11
 800500a:	19bc      	adds	r4, r7, r6
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	480c      	ldr	r0, [pc, #48]	; (8005040 <noteI2CTransmit+0x98>)
 8005010:	23fa      	movs	r3, #250	; 0xfa
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	002b      	movs	r3, r5
 8005016:	f7fd fd21 	bl	8002a5c <HAL_I2C_Master_Transmit>
 800501a:	0003      	movs	r3, r0
 800501c:	7023      	strb	r3, [r4, #0]
        free(writebuf);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	0018      	movs	r0, r3
 8005022:	f003 fa77 	bl	8008514 <free>
        if (err_code != HAL_OK) {
 8005026:	19bb      	adds	r3, r7, r6
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <noteI2CTransmit+0x8a>
            errstr = "i2c: write error";
 800502e:	4b05      	ldr	r3, [pc, #20]	; (8005044 <noteI2CTransmit+0x9c>)
 8005030:	617b      	str	r3, [r7, #20]
        }
    }
    return errstr;
 8005032:	697b      	ldr	r3, [r7, #20]
}
 8005034:	0018      	movs	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	b007      	add	sp, #28
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503c:	08008814 	.word	0x08008814
 8005040:	200002b4 	.word	0x200002b4
 8005044:	08008838 	.word	0x08008838

08005048 <noteI2CReceive>:
#endif

// Receives in master mode an amount of data in blocking mode. An error mesage returned, else NULL if success.
#if NOTECARD_USE_I2C
const char *noteI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available) {
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b08f      	sub	sp, #60	; 0x3c
 800504c:	af02      	add	r7, sp, #8
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	0011      	movs	r1, r2
 8005052:	607b      	str	r3, [r7, #4]
 8005054:	230e      	movs	r3, #14
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	1c02      	adds	r2, r0, #0
 800505a:	801a      	strh	r2, [r3, #0]
 800505c:	230c      	movs	r3, #12
 800505e:	18fb      	adds	r3, r7, r3
 8005060:	1c0a      	adds	r2, r1, #0
 8005062:	801a      	strh	r2, [r3, #0]
    const char *errstr = NULL;
 8005064:	2300      	movs	r3, #0
 8005066:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_StatusTypeDef err_code;

    // Retry transmit errors several times, because it's harmless to do so
    for (int i=0; i<3; i++) {
 8005068:	2300      	movs	r3, #0
 800506a:	62bb      	str	r3, [r7, #40]	; 0x28
 800506c:	e025      	b.n	80050ba <noteI2CReceive+0x72>
        uint8_t hdr[2];
        hdr[0] = (uint8_t) 0;
 800506e:	2014      	movs	r0, #20
 8005070:	183b      	adds	r3, r7, r0
 8005072:	2200      	movs	r2, #0
 8005074:	701a      	strb	r2, [r3, #0]
        hdr[1] = (uint8_t) Size;
 8005076:	230c      	movs	r3, #12
 8005078:	18fb      	adds	r3, r7, r3
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b2da      	uxtb	r2, r3
 800507e:	183b      	adds	r3, r7, r0
 8005080:	705a      	strb	r2, [r3, #1]
        HAL_StatusTypeDef err_code = HAL_I2C_Master_Transmit(&hi2c1, DevAddress<<1, hdr, sizeof(hdr), 250);
 8005082:	230e      	movs	r3, #14
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	881b      	ldrh	r3, [r3, #0]
 8005088:	18db      	adds	r3, r3, r3
 800508a:	b299      	uxth	r1, r3
 800508c:	2527      	movs	r5, #39	; 0x27
 800508e:	197c      	adds	r4, r7, r5
 8005090:	183a      	adds	r2, r7, r0
 8005092:	4838      	ldr	r0, [pc, #224]	; (8005174 <noteI2CReceive+0x12c>)
 8005094:	23fa      	movs	r3, #250	; 0xfa
 8005096:	9300      	str	r3, [sp, #0]
 8005098:	2302      	movs	r3, #2
 800509a:	f7fd fcdf 	bl	8002a5c <HAL_I2C_Master_Transmit>
 800509e:	0003      	movs	r3, r0
 80050a0:	7023      	strb	r3, [r4, #0]
        if (err_code == HAL_OK) {
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d102      	bne.n	80050b0 <noteI2CReceive+0x68>
            errstr = NULL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ae:	e007      	b.n	80050c0 <noteI2CReceive+0x78>
            break;
        }
        errstr = "i2c: write error";
 80050b0:	4b31      	ldr	r3, [pc, #196]	; (8005178 <noteI2CReceive+0x130>)
 80050b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i=0; i<3; i++) {
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	3301      	adds	r3, #1
 80050b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050bc:	2b02      	cmp	r3, #2
 80050be:	ddd6      	ble.n	800506e <noteI2CReceive+0x26>
    }

    // Only receive if we successfully began transmission
    if (errstr == NULL) {
 80050c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d150      	bne.n	8005168 <noteI2CReceive+0x120>

        int readlen = Size + (sizeof(uint8_t)*2);
 80050c6:	230c      	movs	r3, #12
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	881b      	ldrh	r3, [r3, #0]
 80050cc:	3302      	adds	r3, #2
 80050ce:	623b      	str	r3, [r7, #32]
        uint8_t *readbuf = malloc(readlen);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	0018      	movs	r0, r3
 80050d4:	f003 fa14 	bl	8008500 <malloc>
 80050d8:	0003      	movs	r3, r0
 80050da:	61fb      	str	r3, [r7, #28]
        if (readbuf == NULL) {
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d102      	bne.n	80050e8 <noteI2CReceive+0xa0>
            errstr = "i2c: insufficient memory (read)";
 80050e2:	4b26      	ldr	r3, [pc, #152]	; (800517c <noteI2CReceive+0x134>)
 80050e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050e6:	e03f      	b.n	8005168 <noteI2CReceive+0x120>
        } else {
            err_code = HAL_I2C_Master_Receive(&hi2c1, DevAddress<<1, readbuf, readlen, 10);
 80050e8:	230e      	movs	r3, #14
 80050ea:	18fb      	adds	r3, r7, r3
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	18db      	adds	r3, r3, r3
 80050f0:	b299      	uxth	r1, r3
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	b29d      	uxth	r5, r3
 80050f6:	261b      	movs	r6, #27
 80050f8:	19bc      	adds	r4, r7, r6
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	481d      	ldr	r0, [pc, #116]	; (8005174 <noteI2CReceive+0x12c>)
 80050fe:	230a      	movs	r3, #10
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	002b      	movs	r3, r5
 8005104:	f7fd fdb2 	bl	8002c6c <HAL_I2C_Master_Receive>
 8005108:	0003      	movs	r3, r0
 800510a:	7023      	strb	r3, [r4, #0]
            if (err_code != HAL_OK) {
 800510c:	19bb      	adds	r3, r7, r6
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <noteI2CReceive+0xd2>
                errstr = "i2c: read error";
 8005114:	4b1a      	ldr	r3, [pc, #104]	; (8005180 <noteI2CReceive+0x138>)
 8005116:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005118:	e022      	b.n	8005160 <noteI2CReceive+0x118>
            } else {
                uint8_t availbyte = readbuf[0];
 800511a:	231a      	movs	r3, #26
 800511c:	18fb      	adds	r3, r7, r3
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	7812      	ldrb	r2, [r2, #0]
 8005122:	701a      	strb	r2, [r3, #0]
                uint8_t goodbyte = readbuf[1];
 8005124:	2119      	movs	r1, #25
 8005126:	187b      	adds	r3, r7, r1
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	701a      	strb	r2, [r3, #0]
                if (goodbyte != Size) {
 800512e:	187b      	adds	r3, r7, r1
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	b29b      	uxth	r3, r3
 8005134:	220c      	movs	r2, #12
 8005136:	18ba      	adds	r2, r7, r2
 8005138:	8812      	ldrh	r2, [r2, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d002      	beq.n	8005144 <noteI2CReceive+0xfc>
                    errstr = "i2c: incorrect amount of data";
 800513e:	4b11      	ldr	r3, [pc, #68]	; (8005184 <noteI2CReceive+0x13c>)
 8005140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005142:	e00d      	b.n	8005160 <noteI2CReceive+0x118>
                } else {
                    *available = availbyte;
 8005144:	231a      	movs	r3, #26
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	781a      	ldrb	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	601a      	str	r2, [r3, #0]
                    memcpy(pBuffer, &readbuf[2], Size);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	1c99      	adds	r1, r3, #2
 8005152:	230c      	movs	r3, #12
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	881a      	ldrh	r2, [r3, #0]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	0018      	movs	r0, r3
 800515c:	f003 f9f6 	bl	800854c <memcpy>
                }
            }
            free(readbuf);
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	0018      	movs	r0, r3
 8005164:	f003 f9d6 	bl	8008514 <free>
        }
    }

    // Done
    return errstr;
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c

}
 800516a:	0018      	movs	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	b00d      	add	sp, #52	; 0x34
 8005170:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005172:	46c0      	nop			; (mov r8, r8)
 8005174:	200002b4 	.word	0x200002b4
 8005178:	08008838 	.word	0x08008838
 800517c:	0800884c 	.word	0x0800884c
 8005180:	0800886c 	.word	0x0800886c
 8005184:	0800887c 	.word	0x0800887c

08005188 <HAL_MspInit>:

#include "main.h"
#include "event.h"

// Initialize global peripheral init
void HAL_MspInit(void) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800518e:	4b0f      	ldr	r3, [pc, #60]	; (80051cc <HAL_MspInit+0x44>)
 8005190:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005192:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_MspInit+0x44>)
 8005194:	2101      	movs	r1, #1
 8005196:	430a      	orrs	r2, r1
 8005198:	641a      	str	r2, [r3, #64]	; 0x40
 800519a:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <HAL_MspInit+0x44>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	2201      	movs	r2, #1
 80051a0:	4013      	ands	r3, r2
 80051a2:	607b      	str	r3, [r7, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_PWR_CLK_ENABLE();
 80051a6:	4b09      	ldr	r3, [pc, #36]	; (80051cc <HAL_MspInit+0x44>)
 80051a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051aa:	4b08      	ldr	r3, [pc, #32]	; (80051cc <HAL_MspInit+0x44>)
 80051ac:	2180      	movs	r1, #128	; 0x80
 80051ae:	0549      	lsls	r1, r1, #21
 80051b0:	430a      	orrs	r2, r1
 80051b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80051b4:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_MspInit+0x44>)
 80051b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	055b      	lsls	r3, r3, #21
 80051bc:	4013      	ands	r3, r2
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b002      	add	sp, #8
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_I2C_MspInit>:

// Initialize all I2C ports
#if USE_I2C
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c) {
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b08b      	sub	sp, #44	; 0x2c
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

    // Handle I2C1
    if (hi2c->Instance==I2C1) {
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a24      	ldr	r2, [pc, #144]	; (8005270 <HAL_I2C_MspInit+0xa0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d141      	bne.n	8005266 <HAL_I2C_MspInit+0x96>
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051e2:	2414      	movs	r4, #20
 80051e4:	193b      	adds	r3, r7, r4
 80051e6:	0018      	movs	r0, r3
 80051e8:	2314      	movs	r3, #20
 80051ea:	001a      	movs	r2, r3
 80051ec:	2100      	movs	r1, #0
 80051ee:	f003 f9b6 	bl	800855e <memset>

        // I2C1 GPIO Configuration
        // PA9     ------> I2C1_SCL
        // PA10     ------> I2C1_SDA
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 80051f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051f6:	4b1f      	ldr	r3, [pc, #124]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 80051f8:	2101      	movs	r1, #1
 80051fa:	430a      	orrs	r2, r1
 80051fc:	635a      	str	r2, [r3, #52]	; 0x34
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 8005200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005202:	2201      	movs	r2, #1
 8005204:	4013      	ands	r3, r2
 8005206:	613b      	str	r3, [r7, #16]
 8005208:	693b      	ldr	r3, [r7, #16]
        GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800520a:	193b      	adds	r3, r7, r4
 800520c:	22c0      	movs	r2, #192	; 0xc0
 800520e:	00d2      	lsls	r2, r2, #3
 8005210:	601a      	str	r2, [r3, #0]
        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005212:	0021      	movs	r1, r4
 8005214:	187b      	adds	r3, r7, r1
 8005216:	2212      	movs	r2, #18
 8005218:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 800521a:	187b      	adds	r3, r7, r1
 800521c:	2201      	movs	r2, #1
 800521e:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005220:	187b      	adds	r3, r7, r1
 8005222:	2200      	movs	r2, #0
 8005224:	60da      	str	r2, [r3, #12]
        GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005226:	187b      	adds	r3, r7, r1
 8005228:	2206      	movs	r2, #6
 800522a:	611a      	str	r2, [r3, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522c:	187a      	adds	r2, r7, r1
 800522e:	23a0      	movs	r3, #160	; 0xa0
 8005230:	05db      	lsls	r3, r3, #23
 8005232:	0011      	movs	r1, r2
 8005234:	0018      	movs	r0, r3
 8005236:	f7fd f917 	bl	8002468 <HAL_GPIO_Init>

        // Peripheral clock enable
        __HAL_RCC_I2C1_CLK_ENABLE();
 800523a:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 800523c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 8005240:	2180      	movs	r1, #128	; 0x80
 8005242:	0389      	lsls	r1, r1, #14
 8005244:	430a      	orrs	r2, r1
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
 8005248:	4b0a      	ldr	r3, [pc, #40]	; (8005274 <HAL_I2C_MspInit+0xa4>)
 800524a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	039b      	lsls	r3, r3, #14
 8005250:	4013      	ands	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	68fb      	ldr	r3, [r7, #12]

        // I2C1 interrupt Init
        HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005256:	2200      	movs	r2, #0
 8005258:	2100      	movs	r1, #0
 800525a:	2017      	movs	r0, #23
 800525c:	f7fd f848 	bl	80022f0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8005260:	2017      	movs	r0, #23
 8005262:	f7fd f85a 	bl	800231a <HAL_NVIC_EnableIRQ>

    }

}
 8005266:	46c0      	nop			; (mov r8, r8)
 8005268:	46bd      	mov	sp, r7
 800526a:	b00b      	add	sp, #44	; 0x2c
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	40005400 	.word	0x40005400
 8005274:	40021000 	.word	0x40021000

08005278 <HAL_I2C_MspDeInit>:
#endif

// Deinitialize all I2C ports
#if USE_I2C
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

    // Handle I2C1
    if (hi2c->Instance==I2C1) {
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a0b      	ldr	r2, [pc, #44]	; (80052b4 <HAL_I2C_MspDeInit+0x3c>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d110      	bne.n	80052ac <HAL_I2C_MspDeInit+0x34>

        // Peripheral clock disable
        __HAL_RCC_I2C1_CLK_DISABLE();
 800528a:	4b0b      	ldr	r3, [pc, #44]	; (80052b8 <HAL_I2C_MspDeInit+0x40>)
 800528c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <HAL_I2C_MspDeInit+0x40>)
 8005290:	490a      	ldr	r1, [pc, #40]	; (80052bc <HAL_I2C_MspDeInit+0x44>)
 8005292:	400a      	ands	r2, r1
 8005294:	63da      	str	r2, [r3, #60]	; 0x3c

        // I2C1 GPIO Configuration
        // PA9     ------> I2C1_SCL
        // PA10     ------> I2C1_SDA
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8005296:	23c0      	movs	r3, #192	; 0xc0
 8005298:	00da      	lsls	r2, r3, #3
 800529a:	23a0      	movs	r3, #160	; 0xa0
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	0011      	movs	r1, r2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f7fd fa45 	bl	8002730 <HAL_GPIO_DeInit>

        // I2C1 interrupt DeInit
        HAL_NVIC_DisableIRQ(I2C1_IRQn);
 80052a6:	2017      	movs	r0, #23
 80052a8:	f7fd f847 	bl	800233a <HAL_NVIC_DisableIRQ>

    }

}
 80052ac:	46c0      	nop			; (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b002      	add	sp, #8
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	40005400 	.word	0x40005400
 80052b8:	40021000 	.word	0x40021000
 80052bc:	ffdfffff 	.word	0xffdfffff

080052c0 <NMI_Handler>:
#ifdef EVENT_TIMER
extern LPTIM_HandleTypeDef hlptim1;
#endif

// Cortex-M4 non-maskable interrupt
void NMI_Handler(void) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
}
 80052c4:	46c0      	nop			; (mov r8, r8)
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <HardFault_Handler>:

// Cortex-M4 hardware fault interrupt
void HardFault_Handler(void) {
 80052ca:	b580      	push	{r7, lr}
 80052cc:	af00      	add	r7, sp, #0
    while (1) ;
 80052ce:	e7fe      	b.n	80052ce <HardFault_Handler+0x4>

080052d0 <SVC_Handler>:
void UsageFault_Handler(void) {
    while (1) ;
}

// System service call via SWI instruction
void SVC_Handler(void) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	af00      	add	r7, sp, #0
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <PendSV_Handler>:
// Debug monitor
void DebugMon_Handler(void) {
}

// Pendable request for system service.
void PendSV_Handler(void) {
 80052da:	b580      	push	{r7, lr}
 80052dc:	af00      	add	r7, sp, #0
}
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <SysTick_Handler>:

// System tick timer
void SysTick_Handler(void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 80052e8:	f7fc fefa 	bl	80020e0 <HAL_IncTick>
}
 80052ec:	46c0      	nop			; (mov r8, r8)
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <I2C1_IRQHandler>:

// I2C1 event interrupt
#if USE_I2C
void I2C1_IRQHandler(void) {
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80052f8:	4b09      	ldr	r3, [pc, #36]	; (8005320 <I2C1_IRQHandler+0x2c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	23e0      	movs	r3, #224	; 0xe0
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4013      	ands	r3, r2
 8005304:	d004      	beq.n	8005310 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8005306:	4b06      	ldr	r3, [pc, #24]	; (8005320 <I2C1_IRQHandler+0x2c>)
 8005308:	0018      	movs	r0, r3
 800530a:	f7fd fdd1 	bl	8002eb0 <HAL_I2C_ER_IRQHandler>
  } else {
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
}
 800530e:	e003      	b.n	8005318 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <I2C1_IRQHandler+0x2c>)
 8005312:	0018      	movs	r0, r3
 8005314:	f7fd fdb2 	bl	8002e7c <HAL_I2C_EV_IRQHandler>
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
 800531e:	46c0      	nop			; (mov r8, r8)
 8005320:	200002b4 	.word	0x200002b4

08005324 <MY_GPIO_EXTI_IRQHandler>:
}
#endif

// GPIO handler, enhanced from the base ST handler in a way that enables us to distinguish from the multiple
// pins that sharing the same EXTI.
void MY_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	0002      	movs	r2, r0
 800532c:	1dbb      	adds	r3, r7, #6
 800532e:	801a      	strh	r2, [r3, #0]
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) {
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <MY_GPIO_EXTI_IRQHandler+0x64>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	1dba      	adds	r2, r7, #6
 8005336:	8812      	ldrh	r2, [r2, #0]
 8005338:	4013      	ands	r3, r2
 800533a:	d105      	bne.n	8005348 <MY_GPIO_EXTI_IRQHandler+0x24>
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <MY_GPIO_EXTI_IRQHandler+0x64>)
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	1dba      	adds	r2, r7, #6
 8005342:	8812      	ldrh	r2, [r2, #0]
 8005344:	4013      	ands	r3, r2
 8005346:	d001      	beq.n	800534c <MY_GPIO_EXTI_IRQHandler+0x28>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <MY_GPIO_EXTI_IRQHandler+0x2a>
 800534c:	2300      	movs	r3, #0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d015      	beq.n	800537e <MY_GPIO_EXTI_IRQHandler+0x5a>
        uint16_t GPIO_Line = GPIO_Pin & EXTI->RPR1;
 8005352:	4b0d      	ldr	r3, [pc, #52]	; (8005388 <MY_GPIO_EXTI_IRQHandler+0x64>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	b29a      	uxth	r2, r3
 8005358:	200e      	movs	r0, #14
 800535a:	183b      	adds	r3, r7, r0
 800535c:	1db9      	adds	r1, r7, #6
 800535e:	8809      	ldrh	r1, [r1, #0]
 8005360:	400a      	ands	r2, r1
 8005362:	801a      	strh	r2, [r3, #0]
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <MY_GPIO_EXTI_IRQHandler+0x64>)
 8005366:	1dba      	adds	r2, r7, #6
 8005368:	8812      	ldrh	r2, [r2, #0]
 800536a:	60da      	str	r2, [r3, #12]
 800536c:	4b06      	ldr	r3, [pc, #24]	; (8005388 <MY_GPIO_EXTI_IRQHandler+0x64>)
 800536e:	1dba      	adds	r2, r7, #6
 8005370:	8812      	ldrh	r2, [r2, #0]
 8005372:	611a      	str	r2, [r3, #16]
        HAL_GPIO_EXTI_Rising_Callback(GPIO_Line);
 8005374:	183b      	adds	r3, r7, r0
 8005376:	881b      	ldrh	r3, [r3, #0]
 8005378:	0018      	movs	r0, r3
 800537a:	f7ff fde9 	bl	8004f50 <HAL_GPIO_EXTI_Rising_Callback>
    }
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b004      	add	sp, #16
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	40021800 	.word	0x40021800

0800538c <EXTI0_1_IRQHandler>:

// GPIO interrupts
void EXTI0_1_IRQHandler( void ) {
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_0|GPIO_PIN_1);
 8005390:	2003      	movs	r0, #3
 8005392:	f7ff ffc7 	bl	8005324 <MY_GPIO_EXTI_IRQHandler>
}
 8005396:	46c0      	nop			; (mov r8, r8)
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <EXTI2_3_IRQHandler>:
void EXTI2_3_IRQHandler( void ) {
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_2|GPIO_PIN_3);
 80053a0:	200c      	movs	r0, #12
 80053a2:	f7ff ffbf 	bl	8005324 <MY_GPIO_EXTI_IRQHandler>
}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler( void ) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  MY_GPIO_EXTI_IRQHandler(GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80053b0:	4b03      	ldr	r3, [pc, #12]	; (80053c0 <EXTI4_15_IRQHandler+0x14>)
 80053b2:	0018      	movs	r0, r3
 80053b4:	f7ff ffb6 	bl	8005324 <MY_GPIO_EXTI_IRQHandler>
}
 80053b8:	46c0      	nop			; (mov r8, r8)
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	0000fff0 	.word	0x0000fff0

080053c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <_sbrk+0x50>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d102      	bne.n	80053da <_sbrk+0x16>
		heap_end = &end;
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <_sbrk+0x50>)
 80053d6:	4a10      	ldr	r2, [pc, #64]	; (8005418 <_sbrk+0x54>)
 80053d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80053da:	4b0e      	ldr	r3, [pc, #56]	; (8005414 <_sbrk+0x50>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80053e0:	4b0c      	ldr	r3, [pc, #48]	; (8005414 <_sbrk+0x50>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	18d3      	adds	r3, r2, r3
 80053e8:	466a      	mov	r2, sp
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d907      	bls.n	80053fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80053ee:	f003 f84f 	bl	8008490 <__errno>
 80053f2:	0003      	movs	r3, r0
 80053f4:	220c      	movs	r2, #12
 80053f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80053f8:	2301      	movs	r3, #1
 80053fa:	425b      	negs	r3, r3
 80053fc:	e006      	b.n	800540c <_sbrk+0x48>
	}

	heap_end += incr;
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <_sbrk+0x50>)
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	18d2      	adds	r2, r2, r3
 8005406:	4b03      	ldr	r3, [pc, #12]	; (8005414 <_sbrk+0x50>)
 8005408:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 800540a:	68fb      	ldr	r3, [r7, #12]
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	b004      	add	sp, #16
 8005412:	bd80      	pop	{r7, pc}
 8005414:	2000025c 	.word	0x2000025c
 8005418:	20000308 	.word	0x20000308

0800541c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005420:	4b03      	ldr	r3, [pc, #12]	; (8005430 <SystemInit+0x14>)
 8005422:	2280      	movs	r2, #128	; 0x80
 8005424:	0512      	lsls	r2, r2, #20
 8005426:	609a      	str	r2, [r3, #8]
#endif
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	e000ed00 	.word	0xe000ed00

08005434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005434:	480d      	ldr	r0, [pc, #52]	; (800546c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005436:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005438:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800543a:	e003      	b.n	8005444 <LoopCopyDataInit>

0800543c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800543e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005440:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005442:	3104      	adds	r1, #4

08005444 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005444:	480b      	ldr	r0, [pc, #44]	; (8005474 <LoopForever+0xa>)
  ldr r3, =_edata
 8005446:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <LoopForever+0xe>)
  adds r2, r0, r1
 8005448:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800544a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800544c:	d3f6      	bcc.n	800543c <CopyDataInit>
  ldr r2, =_sbss
 800544e:	4a0b      	ldr	r2, [pc, #44]	; (800547c <LoopForever+0x12>)
  b LoopFillZerobss
 8005450:	e002      	b.n	8005458 <LoopFillZerobss>

08005452 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005452:	2300      	movs	r3, #0
  str  r3, [r2]
 8005454:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005456:	3204      	adds	r2, #4

08005458 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8005458:	4b09      	ldr	r3, [pc, #36]	; (8005480 <LoopForever+0x16>)
  cmp r2, r3
 800545a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800545c:	d3f9      	bcc.n	8005452 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800545e:	f7ff ffdd 	bl	800541c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8005462:	f003 f81b 	bl	800849c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005466:	f7ff fc07 	bl	8004c78 <main>

0800546a <LoopForever>:

LoopForever:
    b LoopForever
 800546a:	e7fe      	b.n	800546a <LoopForever>
  ldr   r0, =_estack
 800546c:	20002000 	.word	0x20002000
  ldr r3, =_sidata
 8005470:	08008ddc 	.word	0x08008ddc
  ldr r0, =_sdata
 8005474:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005478:	20000238 	.word	0x20000238
  ldr r2, =_sbss
 800547c:	20000238 	.word	0x20000238
  ldr r3, = _ebss
 8005480:	20000304 	.word	0x20000304

08005484 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005484:	e7fe      	b.n	8005484 <ADC1_IRQHandler>
	...

08005488 <JAtoN>:
                                 * The "E" may actually be an "e".  E and X
                                 * may both be omitted (but not just one).
                                 */
    char **endPtr;              /* If non-NULL, store terminating character's
                                 * address here. */
{
 8005488:	b5b0      	push	{r4, r5, r7, lr}
 800548a:	b092      	sub	sp, #72	; 0x48
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
    int sign, expSign = FALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	643b      	str	r3, [r7, #64]	; 0x40
    double fraction, dblExp, *d;
    register const char *p;
    register int c;
    int exp = 0;                /* Exponent read from "EX" field. */
 8005496:	2300      	movs	r3, #0
 8005498:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracExp = 0;            /* Exponent that derives from the fractional
 800549a:	2300      	movs	r3, #0
 800549c:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Strip off leading blanks and check for a sign.
     */

    p = string;
 800549e:	68fc      	ldr	r4, [r7, #12]
    while (*p == ' ') {
 80054a0:	e000      	b.n	80054a4 <JAtoN+0x1c>
        p += 1;
 80054a2:	3401      	adds	r4, #1
    while (*p == ' ') {
 80054a4:	7823      	ldrb	r3, [r4, #0]
 80054a6:	2b20      	cmp	r3, #32
 80054a8:	d0fb      	beq.n	80054a2 <JAtoN+0x1a>
    }
    if (*p == '-') {
 80054aa:	7823      	ldrb	r3, [r4, #0]
 80054ac:	2b2d      	cmp	r3, #45	; 0x2d
 80054ae:	d103      	bne.n	80054b8 <JAtoN+0x30>
        sign = TRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
        p += 1;
 80054b4:	3401      	adds	r4, #1
 80054b6:	e005      	b.n	80054c4 <JAtoN+0x3c>
    } else {
        if (*p == '+') {
 80054b8:	7823      	ldrb	r3, [r4, #0]
 80054ba:	2b2b      	cmp	r3, #43	; 0x2b
 80054bc:	d100      	bne.n	80054c0 <JAtoN+0x38>
            p += 1;
 80054be:	3401      	adds	r4, #1
        }
        sign = FALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	647b      	str	r3, [r7, #68]	; 0x44
    /*
     * Count the number of digits in the mantissa (including the decimal
     * point), and also locate the decimal point.
     */

    decPt = -1;
 80054c4:	2301      	movs	r3, #1
 80054c6:	425b      	negs	r3, r3
 80054c8:	61fb      	str	r3, [r7, #28]
    for (mantSize = 0; ; mantSize += 1)
 80054ca:	2300      	movs	r3, #0
 80054cc:	623b      	str	r3, [r7, #32]
    {
        c = *p;
 80054ce:	7823      	ldrb	r3, [r4, #0]
 80054d0:	001d      	movs	r5, r3
        if (c < '0' || c > '9') {
 80054d2:	2d2f      	cmp	r5, #47	; 0x2f
 80054d4:	dd01      	ble.n	80054da <JAtoN+0x52>
 80054d6:	2d39      	cmp	r5, #57	; 0x39
 80054d8:	dd06      	ble.n	80054e8 <JAtoN+0x60>
            if ((c != '.') || (decPt >= 0)) {
 80054da:	2d2e      	cmp	r5, #46	; 0x2e
 80054dc:	d109      	bne.n	80054f2 <JAtoN+0x6a>
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	da06      	bge.n	80054f2 <JAtoN+0x6a>
                break;
            }
            decPt = mantSize;
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	61fb      	str	r3, [r7, #28]
        }
        p += 1;
 80054e8:	3401      	adds	r4, #1
    for (mantSize = 0; ; mantSize += 1)
 80054ea:	6a3b      	ldr	r3, [r7, #32]
 80054ec:	3301      	adds	r3, #1
 80054ee:	623b      	str	r3, [r7, #32]
        c = *p;
 80054f0:	e7ed      	b.n	80054ce <JAtoN+0x46>
     * collect 9 digits each (this is faster than using floating-point).
     * If the mantissa has more than 18 digits, ignore the extras, since
     * they can't affect the value anyway.
     */
    
    pExp  = p;
 80054f2:	613c      	str	r4, [r7, #16]
    p -= mantSize;
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	425b      	negs	r3, r3
 80054f8:	18e4      	adds	r4, r4, r3
    if (decPt < 0) {
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da02      	bge.n	8005506 <JAtoN+0x7e>
        decPt = mantSize;
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e002      	b.n	800550c <JAtoN+0x84>
    } else {
        mantSize -= 1;                  /* One of the digits was the point. */
 8005506:	6a3b      	ldr	r3, [r7, #32]
 8005508:	3b01      	subs	r3, #1
 800550a:	623b      	str	r3, [r7, #32]
    }
    if (mantSize > 18) {
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	2b12      	cmp	r3, #18
 8005510:	dd05      	ble.n	800551e <JAtoN+0x96>
        fracExp = decPt - 18;
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b12      	subs	r3, #18
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
        mantSize = 18;
 8005518:	2312      	movs	r3, #18
 800551a:	623b      	str	r3, [r7, #32]
 800551c:	e003      	b.n	8005526 <JAtoN+0x9e>
    } else {
        fracExp = decPt - mantSize;
 800551e:	69fa      	ldr	r2, [r7, #28]
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
    }
    if (mantSize == 0) {
 8005526:	6a3b      	ldr	r3, [r7, #32]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d105      	bne.n	8005538 <JAtoN+0xb0>
        fraction = 0.0;
 800552c:	2300      	movs	r3, #0
 800552e:	2400      	movs	r4, #0
 8005530:	63bb      	str	r3, [r7, #56]	; 0x38
 8005532:	63fc      	str	r4, [r7, #60]	; 0x3c
        p = string;
 8005534:	68fc      	ldr	r4, [r7, #12]
        goto done;
 8005536:	e0ca      	b.n	80056ce <JAtoN+0x246>
    } else {
        long frac1, frac2;
        frac1 = 0L;
 8005538:	2300      	movs	r3, #0
 800553a:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 800553c:	e014      	b.n	8005568 <JAtoN+0xe0>
        {
            c = *p;
 800553e:	7823      	ldrb	r3, [r4, #0]
 8005540:	001d      	movs	r5, r3
            p += 1;
 8005542:	3401      	adds	r4, #1
            if (c == '.') {
 8005544:	2d2e      	cmp	r5, #46	; 0x2e
 8005546:	d102      	bne.n	800554e <JAtoN+0xc6>
                c = *p;
 8005548:	7823      	ldrb	r3, [r4, #0]
 800554a:	001d      	movs	r5, r3
                p += 1;
 800554c:	3401      	adds	r4, #1
            }
            frac1 = 10*frac1 + (c - '0');
 800554e:	69ba      	ldr	r2, [r7, #24]
 8005550:	0013      	movs	r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	189b      	adds	r3, r3, r2
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	001a      	movs	r2, r3
 800555a:	002b      	movs	r3, r5
 800555c:	3b30      	subs	r3, #48	; 0x30
 800555e:	18d3      	adds	r3, r2, r3
 8005560:	61bb      	str	r3, [r7, #24]
        for ( ; mantSize > 9; mantSize -= 1)
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	3b01      	subs	r3, #1
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	6a3b      	ldr	r3, [r7, #32]
 800556a:	2b09      	cmp	r3, #9
 800556c:	dce7      	bgt.n	800553e <JAtoN+0xb6>
        }
        frac2 = 0L;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8005572:	e014      	b.n	800559e <JAtoN+0x116>
        {
            c = *p;
 8005574:	7823      	ldrb	r3, [r4, #0]
 8005576:	001d      	movs	r5, r3
            p += 1;
 8005578:	3401      	adds	r4, #1
            if (c == '.') {
 800557a:	2d2e      	cmp	r5, #46	; 0x2e
 800557c:	d102      	bne.n	8005584 <JAtoN+0xfc>
                c = *p;
 800557e:	7823      	ldrb	r3, [r4, #0]
 8005580:	001d      	movs	r5, r3
                p += 1;
 8005582:	3401      	adds	r4, #1
            }
            frac2 = 10*frac2 + (c - '0');
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	0013      	movs	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	189b      	adds	r3, r3, r2
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	001a      	movs	r2, r3
 8005590:	002b      	movs	r3, r5
 8005592:	3b30      	subs	r3, #48	; 0x30
 8005594:	18d3      	adds	r3, r2, r3
 8005596:	617b      	str	r3, [r7, #20]
        for (; mantSize > 0; mantSize -= 1)
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	3b01      	subs	r3, #1
 800559c:	623b      	str	r3, [r7, #32]
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	dce7      	bgt.n	8005574 <JAtoN+0xec>
        }
        fraction = (1.0e9 * frac1) + frac2;
 80055a4:	69b8      	ldr	r0, [r7, #24]
 80055a6:	f7fc fca7 	bl	8001ef8 <__aeabi_i2d>
 80055aa:	2200      	movs	r2, #0
 80055ac:	4b55      	ldr	r3, [pc, #340]	; (8005704 <JAtoN+0x27c>)
 80055ae:	f7fb feb3 	bl	8001318 <__aeabi_dmul>
 80055b2:	0003      	movs	r3, r0
 80055b4:	000c      	movs	r4, r1
 80055b6:	0025      	movs	r5, r4
 80055b8:	001c      	movs	r4, r3
 80055ba:	6978      	ldr	r0, [r7, #20]
 80055bc:	f7fc fc9c 	bl	8001ef8 <__aeabi_i2d>
 80055c0:	0002      	movs	r2, r0
 80055c2:	000b      	movs	r3, r1
 80055c4:	0020      	movs	r0, r4
 80055c6:	0029      	movs	r1, r5
 80055c8:	f7fa ff80 	bl	80004cc <__aeabi_dadd>
 80055cc:	0003      	movs	r3, r0
 80055ce:	000c      	movs	r4, r1
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80055d2:	63fc      	str	r4, [r7, #60]	; 0x3c

    /*
     * Skim off the exponent.
     */

    p = pExp;
 80055d4:	693c      	ldr	r4, [r7, #16]
    if ((*p == 'E') || (*p == 'e')) {
 80055d6:	7823      	ldrb	r3, [r4, #0]
 80055d8:	2b45      	cmp	r3, #69	; 0x45
 80055da:	d002      	beq.n	80055e2 <JAtoN+0x15a>
 80055dc:	7823      	ldrb	r3, [r4, #0]
 80055de:	2b65      	cmp	r3, #101	; 0x65
 80055e0:	d11f      	bne.n	8005622 <JAtoN+0x19a>
        p += 1;
 80055e2:	3401      	adds	r4, #1
        if (*p == '-') {
 80055e4:	7823      	ldrb	r3, [r4, #0]
 80055e6:	2b2d      	cmp	r3, #45	; 0x2d
 80055e8:	d103      	bne.n	80055f2 <JAtoN+0x16a>
            expSign = TRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	643b      	str	r3, [r7, #64]	; 0x40
            p += 1;
 80055ee:	3401      	adds	r4, #1
 80055f0:	e011      	b.n	8005616 <JAtoN+0x18e>
        } else {
            if (*p == '+') {
 80055f2:	7823      	ldrb	r3, [r4, #0]
 80055f4:	2b2b      	cmp	r3, #43	; 0x2b
 80055f6:	d100      	bne.n	80055fa <JAtoN+0x172>
                p += 1;
 80055f8:	3401      	adds	r4, #1
            }
            expSign = FALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	643b      	str	r3, [r7, #64]	; 0x40
        }
        while (*p >= '0' && *p <= '9') {
 80055fe:	e00a      	b.n	8005616 <JAtoN+0x18e>
            exp = exp * 10 + (*p - '0');
 8005600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005602:	0013      	movs	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	189b      	adds	r3, r3, r2
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	001a      	movs	r2, r3
 800560c:	7823      	ldrb	r3, [r4, #0]
 800560e:	3b30      	subs	r3, #48	; 0x30
 8005610:	18d3      	adds	r3, r2, r3
 8005612:	62bb      	str	r3, [r7, #40]	; 0x28
            p += 1;
 8005614:	3401      	adds	r4, #1
        while (*p >= '0' && *p <= '9') {
 8005616:	7823      	ldrb	r3, [r4, #0]
 8005618:	2b2f      	cmp	r3, #47	; 0x2f
 800561a:	d902      	bls.n	8005622 <JAtoN+0x19a>
 800561c:	7823      	ldrb	r3, [r4, #0]
 800561e:	2b39      	cmp	r3, #57	; 0x39
 8005620:	d9ee      	bls.n	8005600 <JAtoN+0x178>
        }
    }
    if (expSign) {
 8005622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005624:	2b00      	cmp	r3, #0
 8005626:	d004      	beq.n	8005632 <JAtoN+0x1aa>
        exp = fracExp - exp;
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005630:	e003      	b.n	800563a <JAtoN+0x1b2>
    } else {
        exp = fracExp + exp;
 8005632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	18d3      	adds	r3, r2, r3
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
     * Do this by processing the exponent one bit at a time to combine
     * many powers of 2 of 10. Then combine the exponent with the
     * fraction.
     */
    
    if (exp < 0) {
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	2b00      	cmp	r3, #0
 800563e:	da05      	bge.n	800564c <JAtoN+0x1c4>
        expSign = TRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	643b      	str	r3, [r7, #64]	; 0x40
        exp = -exp;
 8005644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005646:	425b      	negs	r3, r3
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
 800564a:	e001      	b.n	8005650 <JAtoN+0x1c8>
    } else {
        expSign = FALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	643b      	str	r3, [r7, #64]	; 0x40
    }
    if (exp > maxExponent) {
 8005650:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <JAtoN+0x280>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005656:	429a      	cmp	r2, r3
 8005658:	dd02      	ble.n	8005660 <JAtoN+0x1d8>
        exp = maxExponent;
 800565a:	4b2b      	ldr	r3, [pc, #172]	; (8005708 <JAtoN+0x280>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    dblExp = 1.0;
 8005660:	2200      	movs	r2, #0
 8005662:	4b2a      	ldr	r3, [pc, #168]	; (800570c <JAtoN+0x284>)
 8005664:	633a      	str	r2, [r7, #48]	; 0x30
 8005666:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 8005668:	4b29      	ldr	r3, [pc, #164]	; (8005710 <JAtoN+0x288>)
 800566a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800566c:	e014      	b.n	8005698 <JAtoN+0x210>
        if (exp & 01) {
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	2201      	movs	r2, #1
 8005672:	4013      	ands	r3, r2
 8005674:	d00a      	beq.n	800568c <JAtoN+0x204>
            dblExp *= *d;
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005680:	f7fb fe4a 	bl	8001318 <__aeabi_dmul>
 8005684:	0002      	movs	r2, r0
 8005686:	000b      	movs	r3, r1
 8005688:	633a      	str	r2, [r7, #48]	; 0x30
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
    for (d = powersOf10; exp != 0; exp >>= 1, d += 1) {
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	105b      	asrs	r3, r3, #1
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	3308      	adds	r3, #8
 8005696:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e7      	bne.n	800566e <JAtoN+0x1e6>
        }
    }
    if (expSign) {
 800569e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d00a      	beq.n	80056ba <JAtoN+0x232>
        fraction /= dblExp;
 80056a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056ac:	f7fb fa2a 	bl	8000b04 <__aeabi_ddiv>
 80056b0:	0002      	movs	r2, r0
 80056b2:	000b      	movs	r3, r1
 80056b4:	63ba      	str	r2, [r7, #56]	; 0x38
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056b8:	e009      	b.n	80056ce <JAtoN+0x246>
    } else {
        fraction *= dblExp;
 80056ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056c2:	f7fb fe29 	bl	8001318 <__aeabi_dmul>
 80056c6:	0002      	movs	r2, r0
 80056c8:	000b      	movs	r3, r1
 80056ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

done:
    if (endPtr != NULL) {
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <JAtoN+0x250>
        *endPtr = (char *) p;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	601c      	str	r4, [r3, #0]
    }

    if (sign) {
 80056d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <JAtoN+0x266>
        return -fraction;
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e4:	2280      	movs	r2, #128	; 0x80
 80056e6:	0612      	lsls	r2, r2, #24
 80056e8:	405a      	eors	r2, r3
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	e003      	b.n	80056f6 <JAtoN+0x26e>
    }
    return fraction;
 80056ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	607c      	str	r4, [r7, #4]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	687c      	ldr	r4, [r7, #4]
}
 80056fa:	0018      	movs	r0, r3
 80056fc:	0021      	movs	r1, r4
 80056fe:	46bd      	mov	sp, r7
 8005700:	b012      	add	sp, #72	; 0x48
 8005702:	bdb0      	pop	{r4, r5, r7, pc}
 8005704:	41cdcd65 	.word	0x41cdcd65
 8005708:	2000000c 	.word	0x2000000c
 800570c:	3ff00000 	.word	0x3ff00000
 8005710:	20000010 	.word	0x20000010

08005714 <case_insensitive_strcmp>:
    return STRINGIFY(N_CJSON_VERSION_MAJOR) "." STRINGIFY(N_CJSON_VERSION_MINOR) "." STRINGIFY(N_CJSON_VERSION_PATCH);
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <case_insensitive_strcmp+0x16>
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 800572a:	2301      	movs	r3, #1
 800572c:	e07e      	b.n	800582c <case_insensitive_strcmp+0x118>
    }

    if (string1 == string2)
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d10d      	bne.n	8005752 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8005736:	2300      	movs	r3, #0
 8005738:	e078      	b.n	800582c <case_insensitive_strcmp+0x118>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8005742:	2300      	movs	r3, #0
 8005744:	e072      	b.n	800582c <case_insensitive_strcmp+0x118>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3301      	adds	r3, #1
 800574a:	607b      	str	r3, [r7, #4]
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	3301      	adds	r3, #1
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	240f      	movs	r4, #15
 8005754:	193b      	adds	r3, r7, r4
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	f002 fec2 	bl	80084e4 <__locale_ctype_ptr>
 8005760:	0002      	movs	r2, r0
 8005762:	193b      	adds	r3, r7, r4
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	18d3      	adds	r3, r2, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	001a      	movs	r2, r3
 800576e:	2303      	movs	r3, #3
 8005770:	4013      	ands	r3, r2
 8005772:	2b01      	cmp	r3, #1
 8005774:	d105      	bne.n	8005782 <case_insensitive_strcmp+0x6e>
 8005776:	230f      	movs	r3, #15
 8005778:	18fb      	adds	r3, r7, r3
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	3320      	adds	r3, #32
 800577e:	001c      	movs	r4, r3
 8005780:	e002      	b.n	8005788 <case_insensitive_strcmp+0x74>
 8005782:	230f      	movs	r3, #15
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	781c      	ldrb	r4, [r3, #0]
 8005788:	250e      	movs	r5, #14
 800578a:	197b      	adds	r3, r7, r5
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	7812      	ldrb	r2, [r2, #0]
 8005790:	701a      	strb	r2, [r3, #0]
 8005792:	f002 fea7 	bl	80084e4 <__locale_ctype_ptr>
 8005796:	0002      	movs	r2, r0
 8005798:	197b      	adds	r3, r7, r5
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	3301      	adds	r3, #1
 800579e:	18d3      	adds	r3, r2, r3
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	001a      	movs	r2, r3
 80057a4:	2303      	movs	r3, #3
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d104      	bne.n	80057b6 <case_insensitive_strcmp+0xa2>
 80057ac:	230e      	movs	r3, #14
 80057ae:	18fb      	adds	r3, r7, r3
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	3320      	adds	r3, #32
 80057b4:	e002      	b.n	80057bc <case_insensitive_strcmp+0xa8>
 80057b6:	230e      	movs	r3, #14
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	429c      	cmp	r4, r3
 80057be:	d0bc      	beq.n	800573a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 80057c0:	240d      	movs	r4, #13
 80057c2:	193b      	adds	r3, r7, r4
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	7812      	ldrb	r2, [r2, #0]
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	f002 fe8b 	bl	80084e4 <__locale_ctype_ptr>
 80057ce:	0002      	movs	r2, r0
 80057d0:	193b      	adds	r3, r7, r4
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	18d3      	adds	r3, r2, r3
 80057d8:	781b      	ldrb	r3, [r3, #0]
 80057da:	001a      	movs	r2, r3
 80057dc:	2303      	movs	r3, #3
 80057de:	4013      	ands	r3, r2
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <case_insensitive_strcmp+0xdc>
 80057e4:	230d      	movs	r3, #13
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	3320      	adds	r3, #32
 80057ec:	001c      	movs	r4, r3
 80057ee:	e002      	b.n	80057f6 <case_insensitive_strcmp+0xe2>
 80057f0:	230d      	movs	r3, #13
 80057f2:	18fb      	adds	r3, r7, r3
 80057f4:	781c      	ldrb	r4, [r3, #0]
 80057f6:	250c      	movs	r5, #12
 80057f8:	197b      	adds	r3, r7, r5
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	f002 fe70 	bl	80084e4 <__locale_ctype_ptr>
 8005804:	0002      	movs	r2, r0
 8005806:	197b      	adds	r3, r7, r5
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	18d3      	adds	r3, r2, r3
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	001a      	movs	r2, r3
 8005812:	2303      	movs	r3, #3
 8005814:	4013      	ands	r3, r2
 8005816:	2b01      	cmp	r3, #1
 8005818:	d104      	bne.n	8005824 <case_insensitive_strcmp+0x110>
 800581a:	230c      	movs	r3, #12
 800581c:	18fb      	adds	r3, r7, r3
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	3320      	adds	r3, #32
 8005822:	e002      	b.n	800582a <case_insensitive_strcmp+0x116>
 8005824:	230c      	movs	r3, #12
 8005826:	18fb      	adds	r3, r7, r3
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	1ae3      	subs	r3, r4, r3
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	b004      	add	sp, #16
 8005832:	bdb0      	pop	{r4, r5, r7, pc}

08005834 <Jstrdup>:

static internal_hooks default_hooks = { internal_malloc, internal_free, internal_realloc };
static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* Jstrdup(const unsigned char* string, const internal_hooks * const hooks)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 800583e:	2300      	movs	r3, #0
 8005840:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 8005842:	2300      	movs	r3, #0
 8005844:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <Jstrdup+0x1c>
    {
        return NULL;
 800584c:	2300      	movs	r3, #0
 800584e:	e019      	b.n	8005884 <Jstrdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	0018      	movs	r0, r3
 8005854:	f7fa fc60 	bl	8000118 <strlen>
 8005858:	0003      	movs	r3, r0
 800585a:	3301      	adds	r3, #1
 800585c:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	0010      	movs	r0, r2
 8005866:	4798      	blx	r3
 8005868:	0003      	movs	r3, r0
 800586a:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <Jstrdup+0x42>
    {
        return NULL;
 8005872:	2300      	movs	r3, #0
 8005874:	e006      	b.n	8005884 <Jstrdup+0x50>
    }
    memcpy(copy, string, length);
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0018      	movs	r0, r3
 800587e:	f002 fe65 	bl	800854c <memcpy>

    return copy;
 8005882:	68bb      	ldr	r3, [r7, #8]
}
 8005884:	0018      	movs	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	b004      	add	sp, #16
 800588a:	bd80      	pop	{r7, pc}

0800588c <JFree>:
}

N_CJSON_PUBLIC(void *) JMalloc(size_t size) {
    return global_hooks.allocate(size);
}
N_CJSON_PUBLIC(void) JFree(void *p) {
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
    global_hooks.deallocate(p);
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <JFree+0x1c>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	0010      	movs	r0, r2
 800589c:	4798      	blx	r3
}
 800589e:	46c0      	nop			; (mov r8, r8)
 80058a0:	46bd      	mov	sp, r7
 80058a2:	b002      	add	sp, #8
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	20000058 	.word	0x20000058

080058ac <JNew_Item>:

/* Internal constructor. */
static J *JNew_Item(const internal_hooks * const hooks)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    J* node = (J*)hooks->allocate(sizeof(J));
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2028      	movs	r0, #40	; 0x28
 80058ba:	4798      	blx	r3
 80058bc:	0003      	movs	r3, r0
 80058be:	60fb      	str	r3, [r7, #12]
    if (node)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <JNew_Item+0x26>
    {
        memset(node, '\0', sizeof(J));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2228      	movs	r2, #40	; 0x28
 80058ca:	2100      	movs	r1, #0
 80058cc:	0018      	movs	r0, r3
 80058ce:	f002 fe46 	bl	800855e <memset>
    }

    return node;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b004      	add	sp, #16
 80058da:	bd80      	pop	{r7, pc}

080058dc <JDelete>:

/* Delete a J structure. */
N_CJSON_PUBLIC(void) JDelete(J *item)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    J *next = NULL;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80058e8:	e038      	b.n	800595c <JDelete+0x80>
    {
        next = item->next;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
        if (!(item->type & JIsReference) && (item->child != NULL))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	2380      	movs	r3, #128	; 0x80
 80058f6:	005b      	lsls	r3, r3, #1
 80058f8:	4013      	ands	r3, r2
 80058fa:	d108      	bne.n	800590e <JDelete+0x32>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d004      	beq.n	800590e <JDelete+0x32>
        {
            JDelete(item->child);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	0018      	movs	r0, r3
 800590a:	f7ff ffe7 	bl	80058dc <JDelete>
        }
        if (!(item->type & JIsReference) && (item->valuestring != NULL))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4013      	ands	r3, r2
 8005918:	d109      	bne.n	800592e <JDelete+0x52>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d005      	beq.n	800592e <JDelete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <JDelete+0x90>)
 8005924:	685a      	ldr	r2, [r3, #4]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	0018      	movs	r0, r3
 800592c:	4790      	blx	r2
        }
        if (!(item->type & JStringIsConst) && (item->string != NULL))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4013      	ands	r3, r2
 8005938:	d109      	bne.n	800594e <JDelete+0x72>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d005      	beq.n	800594e <JDelete+0x72>
        {
            global_hooks.deallocate(item->string);
 8005942:	4b0a      	ldr	r3, [pc, #40]	; (800596c <JDelete+0x90>)
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	0018      	movs	r0, r3
 800594c:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <JDelete+0x90>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	0010      	movs	r0, r2
 8005956:	4798      	blx	r3
        item = next;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1c3      	bne.n	80058ea <JDelete+0xe>
    }
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b004      	add	sp, #16
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	20000058 	.word	0x20000058

08005970 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8005974:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8005976:	0018      	movs	r0, r3
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static Jbool parse_number(J * const item, parse_buffer * const input_buffer)
{
 800597c:	b5b0      	push	{r4, r5, r7, lr}
 800597e:	b098      	sub	sp, #96	; 0x60
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
    double number = 0;
 8005986:	2300      	movs	r3, #0
 8005988:	2400      	movs	r4, #0
 800598a:	653b      	str	r3, [r7, #80]	; 0x50
 800598c:	657c      	str	r4, [r7, #84]	; 0x54
    unsigned char *after_end = NULL;
 800598e:	2300      	movs	r3, #0
 8005990:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8005992:	234f      	movs	r3, #79	; 0x4f
 8005994:	18fc      	adds	r4, r7, r3
 8005996:	f7ff ffeb 	bl	8005970 <get_decimal_point>
 800599a:	0003      	movs	r3, r0
 800599c:	7023      	strb	r3, [r4, #0]
    size_t i = 0;
 800599e:	2300      	movs	r3, #0
 80059a0:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <parse_number+0x34>
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <parse_number+0x38>
    {
        return false;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e08b      	b.n	8005acc <parse_number+0x150>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80059b4:	2300      	movs	r3, #0
 80059b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b8:	e02a      	b.n	8005a10 <parse_number+0x94>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6899      	ldr	r1, [r3, #8]
 80059c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059c4:	18cb      	adds	r3, r1, r3
 80059c6:	18d3      	adds	r3, r2, r3
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	3b2b      	subs	r3, #43	; 0x2b
 80059cc:	2b3a      	cmp	r3, #58	; 0x3a
 80059ce:	d82e      	bhi.n	8005a2e <parse_number+0xb2>
 80059d0:	009a      	lsls	r2, r3, #2
 80059d2:	4b40      	ldr	r3, [pc, #256]	; (8005ad4 <parse_number+0x158>)
 80059d4:	18d3      	adds	r3, r2, r3
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	469f      	mov	pc, r3
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059e4:	18cb      	adds	r3, r1, r3
 80059e6:	18d3      	adds	r3, r2, r3
 80059e8:	7819      	ldrb	r1, [r3, #0]
 80059ea:	2308      	movs	r3, #8
 80059ec:	18fa      	adds	r2, r7, r3
 80059ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059f0:	18d3      	adds	r3, r2, r3
 80059f2:	1c0a      	adds	r2, r1, #0
 80059f4:	701a      	strb	r2, [r3, #0]
                break;
 80059f6:	e008      	b.n	8005a0a <parse_number+0x8e>

            case '.':
                number_c_string[i] = decimal_point;
 80059f8:	2308      	movs	r3, #8
 80059fa:	18fa      	adds	r2, r7, r3
 80059fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059fe:	18d3      	adds	r3, r2, r3
 8005a00:	224f      	movs	r2, #79	; 0x4f
 8005a02:	18ba      	adds	r2, r7, r2
 8005a04:	7812      	ldrb	r2, [r2, #0]
 8005a06:	701a      	strb	r2, [r3, #0]
                break;
 8005a08:	46c0      	nop			; (mov r8, r8)
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a12:	2b3e      	cmp	r3, #62	; 0x3e
 8005a14:	d80d      	bhi.n	8005a32 <parse_number+0xb6>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <parse_number+0xb6>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a22:	18d2      	adds	r2, r2, r3
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3c6      	bcc.n	80059ba <parse_number+0x3e>

            default:
                goto loop_end;
        }
    }
loop_end:
 8005a2c:	e001      	b.n	8005a32 <parse_number+0xb6>
                goto loop_end;
 8005a2e:	46c0      	nop			; (mov r8, r8)
 8005a30:	e000      	b.n	8005a34 <parse_number+0xb8>
loop_end:
 8005a32:	46c0      	nop			; (mov r8, r8)
    number_c_string[i] = '\0';
 8005a34:	2108      	movs	r1, #8
 8005a36:	187a      	adds	r2, r7, r1
 8005a38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a3a:	18d3      	adds	r3, r2, r3
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	701a      	strb	r2, [r3, #0]

    /* some platforms may not have locale support */
#if !MINIMIZE_CLIB_DEPENDENCIES
    number = strtod((const char*)number_c_string, (char**)&after_end);
#else
    number = JAtoN((const char*)number_c_string, (char**)&after_end);
 8005a40:	2348      	movs	r3, #72	; 0x48
 8005a42:	18fa      	adds	r2, r7, r3
 8005a44:	000d      	movs	r5, r1
 8005a46:	187b      	adds	r3, r7, r1
 8005a48:	0011      	movs	r1, r2
 8005a4a:	0018      	movs	r0, r3
 8005a4c:	f7ff fd1c 	bl	8005488 <JAtoN>
 8005a50:	0003      	movs	r3, r0
 8005a52:	000c      	movs	r4, r1
 8005a54:	653b      	str	r3, [r7, #80]	; 0x50
 8005a56:	657c      	str	r4, [r7, #84]	; 0x54
#endif
    if (number_c_string == after_end)
 8005a58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5a:	0029      	movs	r1, r5
 8005a5c:	187b      	adds	r3, r7, r1
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d101      	bne.n	8005a66 <parse_number+0xea>
    {
        return false; /* parse_error */
 8005a62:	2300      	movs	r3, #0
 8005a64:	e032      	b.n	8005acc <parse_number+0x150>
    }

    item->valuedouble = number;
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a6a:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8005a6c:	6193      	str	r3, [r2, #24]
 8005a6e:	61d4      	str	r4, [r2, #28]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8005a70:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <parse_number+0x15c>)
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <parse_number+0x160>)
 8005a74:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a78:	f7fa fd00 	bl	800047c <__aeabi_dcmpge>
 8005a7c:	1e03      	subs	r3, r0, #0
 8005a7e:	d003      	beq.n	8005a88 <parse_number+0x10c>
    {
        item->valueint = INT_MAX;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <parse_number+0x164>)
 8005a84:	615a      	str	r2, [r3, #20]
 8005a86:	e013      	b.n	8005ab0 <parse_number+0x134>
    }
    else if (number <= INT_MIN)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	4b16      	ldr	r3, [pc, #88]	; (8005ae4 <parse_number+0x168>)
 8005a8c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005a8e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a90:	f7fa fce0 	bl	8000454 <__aeabi_dcmple>
 8005a94:	1e03      	subs	r3, r0, #0
 8005a96:	d004      	beq.n	8005aa2 <parse_number+0x126>
    {
        item->valueint = INT_MIN;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	0612      	lsls	r2, r2, #24
 8005a9e:	615a      	str	r2, [r3, #20]
 8005aa0:	e006      	b.n	8005ab0 <parse_number+0x134>
    }
    else
    {
        item->valueint = (int)number;
 8005aa2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aa6:	f7fc f9f1 	bl	8001e8c <__aeabi_d2iz>
 8005aaa:	0002      	movs	r2, r0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	615a      	str	r2, [r3, #20]
    }

    item->type = JNumber;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2208      	movs	r2, #8
 8005ab4:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005abc:	0011      	movs	r1, r2
 8005abe:	2208      	movs	r2, #8
 8005ac0:	18ba      	adds	r2, r7, r2
 8005ac2:	1a8a      	subs	r2, r1, r2
 8005ac4:	189a      	adds	r2, r3, r2
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	609a      	str	r2, [r3, #8]
    return true;
 8005aca:	2301      	movs	r3, #1
}
 8005acc:	0018      	movs	r0, r3
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	b018      	add	sp, #96	; 0x60
 8005ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ad4:	08008a2c 	.word	0x08008a2c
 8005ad8:	ffc00000 	.word	0xffc00000
 8005adc:	41dfffff 	.word	0x41dfffff
 8005ae0:	7fffffff 	.word	0x7fffffff
 8005ae4:	c1e00000 	.word	0xc1e00000

08005ae8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <ensure+0x20>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <ensure+0x24>
    {
        return NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e088      	b.n	8005c1e <ensure+0x136>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d007      	beq.n	8005b24 <ensure+0x3c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689a      	ldr	r2, [r3, #8]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d301      	bcc.n	8005b24 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	e07c      	b.n	8005c1e <ensure+0x136>
    }

    if (needed > INT_MAX)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	da01      	bge.n	8005b2e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e077      	b.n	8005c1e <ensure+0x136>
    }

    needed += p->offset + 1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	18d3      	adds	r3, r2, r3
 8005b36:	3301      	adds	r3, #1
 8005b38:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d805      	bhi.n	8005b50 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	18d3      	adds	r3, r2, r3
 8005b4e:	e066      	b.n	8005c1e <ensure+0x136>
    }

    if (p->noalloc) {
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d001      	beq.n	8005b5c <ensure+0x74>
        return NULL;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e060      	b.n	8005c1e <ensure+0x136>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4a32      	ldr	r2, [pc, #200]	; (8005c28 <ensure+0x140>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d907      	bls.n	8005b74 <ensure+0x8c>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	db02      	blt.n	8005b70 <ensure+0x88>
        {
            newsize = INT_MAX;
 8005b6a:	4b30      	ldr	r3, [pc, #192]	; (8005c2c <ensure+0x144>)
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	e004      	b.n	8005b7a <ensure+0x92>
        }
        else
        {
            return NULL;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e054      	b.n	8005c1e <ensure+0x136>
        }
    }
    else
    {
        newsize = needed * 2;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d019      	beq.n	8005bb6 <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1a      	ldr	r2, [r3, #32]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68b9      	ldr	r1, [r7, #8]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	4790      	blx	r2
 8005b90:	0003      	movs	r3, r0
 8005b92:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d137      	bne.n	8005c0a <ensure+0x122>
        {
            p->hooks.deallocate(p->buffer);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	4790      	blx	r2
            p->length = 0;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	601a      	str	r2, [r3, #0]

            return NULL;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e033      	b.n	8005c1e <ensure+0x136>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	699b      	ldr	r3, [r3, #24]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0010      	movs	r0, r2
 8005bbe:	4798      	blx	r3
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10d      	bne.n	8005be6 <ensure+0xfe>
        {
            p->hooks.deallocate(p->buffer);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	69da      	ldr	r2, [r3, #28]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	4790      	blx	r2
            p->length = 0;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	601a      	str	r2, [r3, #0]

            return NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e01b      	b.n	8005c1e <ensure+0x136>
        }
        if (newbuffer)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <ensure+0x116>
        {
            memcpy(newbuffer, p->buffer, p->offset + 1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6819      	ldr	r1, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	0018      	movs	r0, r3
 8005bfa:	f002 fca7 	bl	800854c <memcpy>
        }
        p->hooks.deallocate(p->buffer);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69da      	ldr	r2, [r3, #28]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	0018      	movs	r0, r3
 8005c08:	4790      	blx	r2
    }
    p->length = newsize;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	18d3      	adds	r3, r2, r3
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b004      	add	sp, #16
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	3fffffff 	.word	0x3fffffff
 8005c2c:	7fffffff 	.word	0x7fffffff

08005c30 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8005c30:	b590      	push	{r4, r7, lr}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d014      	beq.n	8005c6c <update_offset+0x3c>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d010      	beq.n	8005c6c <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	18d3      	adds	r3, r2, r3
 8005c54:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689c      	ldr	r4, [r3, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0018      	movs	r0, r3
 8005c5e:	f7fa fa5b 	bl	8000118 <strlen>
 8005c62:	0003      	movs	r3, r0
 8005c64:	18e2      	adds	r2, r4, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]
 8005c6a:	e000      	b.n	8005c6e <update_offset+0x3e>
        return;
 8005c6c:	46c0      	nop			; (mov r8, r8)
}
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	b005      	add	sp, #20
 8005c72:	bd90      	pop	{r4, r7, pc}

08005c74 <print_number>:

/* Render the number nicely from the given item into a string. */
static Jbool print_number(const J * const item, printbuffer * const output_buffer)
{
 8005c74:	b590      	push	{r4, r7, lr}
 8005c76:	b093      	sub	sp, #76	; 0x4c
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
    double d = item->valuedouble;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	69dc      	ldr	r4, [r3, #28]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	633b      	str	r3, [r7, #48]	; 0x30
 8005c8a:	637c      	str	r4, [r7, #52]	; 0x34
    int length = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	647b      	str	r3, [r7, #68]	; 0x44
    size_t i = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	643b      	str	r3, [r7, #64]	; 0x40
    unsigned char number_buffer[26]; /* temporary buffer to print the number into */
    unsigned char decimal_point = get_decimal_point();
 8005c94:	232f      	movs	r3, #47	; 0x2f
 8005c96:	18fc      	adds	r4, r7, r3
 8005c98:	f7ff fe6a 	bl	8005970 <get_decimal_point>
 8005c9c:	0003      	movs	r3, r0
 8005c9e:	7023      	strb	r3, [r4, #0]

    if (output_buffer == NULL)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <print_number+0x36>
    {
        return false;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	e076      	b.n	8005d98 <print_number+0x124>
    }

    /* This checks for NaN and Infinity */
    if ((d * 0) != 0)
 8005caa:	2200      	movs	r2, #0
 8005cac:	2300      	movs	r3, #0
 8005cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cb2:	f7fb fb31 	bl	8001318 <__aeabi_dmul>
 8005cb6:	0003      	movs	r3, r0
 8005cb8:	000c      	movs	r4, r1
 8005cba:	0018      	movs	r0, r3
 8005cbc:	0021      	movs	r1, r4
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f7fa fbb7 	bl	8000434 <__aeabi_dcmpeq>
 8005cc6:	1e03      	subs	r3, r0, #0
 8005cc8:	d111      	bne.n	8005cee <print_number+0x7a>
    {
        char *nbuf = (char *) number_buffer;
 8005cca:	2308      	movs	r3, #8
 8005ccc:	18fb      	adds	r3, r7, r3
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
        strcpy(nbuf, "null");
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	4b33      	ldr	r3, [pc, #204]	; (8005da0 <print_number+0x12c>)
 8005cd4:	0010      	movs	r0, r2
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	2305      	movs	r3, #5
 8005cda:	001a      	movs	r2, r3
 8005cdc:	f002 fc36 	bl	800854c <memcpy>
        length = strlen(nbuf);
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f7fa fa18 	bl	8000118 <strlen>
 8005ce8:	0003      	movs	r3, r0
 8005cea:	647b      	str	r3, [r7, #68]	; 0x44
 8005cec:	e00f      	b.n	8005d0e <print_number+0x9a>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
        }
#else
        char *nbuf = (char *) number_buffer;
 8005cee:	2308      	movs	r3, #8
 8005cf0:	18fb      	adds	r3, r7, r3
 8005cf2:	62bb      	str	r3, [r7, #40]	; 0x28
        JNtoA(d, nbuf, -1);
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005cfe:	f001 fdbd 	bl	800787c <JNtoA>
        length = strlen(nbuf);
 8005d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d04:	0018      	movs	r0, r3
 8005d06:	f7fa fa07 	bl	8000118 <strlen>
 8005d0a:	0003      	movs	r3, r0
 8005d0c:	647b      	str	r3, [r7, #68]	; 0x44
#endif
    }

    /* conversion failed or buffer overrun occured */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8005d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db02      	blt.n	8005d1a <print_number+0xa6>
 8005d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d16:	2b19      	cmp	r3, #25
 8005d18:	dd01      	ble.n	8005d1e <print_number+0xaa>
    {
        return false;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e03c      	b.n	8005d98 <print_number+0x124>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	1c5a      	adds	r2, r3, #1
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	0011      	movs	r1, r2
 8005d26:	0018      	movs	r0, r3
 8005d28:	f7ff fede 	bl	8005ae8 <ensure>
 8005d2c:	0003      	movs	r3, r0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (output_pointer == NULL)
 8005d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <print_number+0xc6>
    {
        return false;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e02e      	b.n	8005d98 <print_number+0x124>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	643b      	str	r3, [r7, #64]	; 0x40
 8005d3e:	e01b      	b.n	8005d78 <print_number+0x104>
    {
        if (number_buffer[i] == decimal_point)
 8005d40:	2308      	movs	r3, #8
 8005d42:	18fa      	adds	r2, r7, r3
 8005d44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d46:	18d3      	adds	r3, r2, r3
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	222f      	movs	r2, #47	; 0x2f
 8005d4c:	18ba      	adds	r2, r7, r2
 8005d4e:	7812      	ldrb	r2, [r2, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d105      	bne.n	8005d60 <print_number+0xec>
        {
            output_pointer[i] = '.';
 8005d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	18d3      	adds	r3, r2, r3
 8005d5a:	222e      	movs	r2, #46	; 0x2e
 8005d5c:	701a      	strb	r2, [r3, #0]
            continue;
 8005d5e:	e008      	b.n	8005d72 <print_number+0xfe>
        }

        output_pointer[i] = number_buffer[i];
 8005d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d64:	18d3      	adds	r3, r2, r3
 8005d66:	2208      	movs	r2, #8
 8005d68:	18b9      	adds	r1, r7, r2
 8005d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d6c:	188a      	adds	r2, r1, r2
 8005d6e:	7812      	ldrb	r2, [r2, #0]
 8005d70:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8005d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d74:	3301      	adds	r3, #1
 8005d76:	643b      	str	r3, [r7, #64]	; 0x40
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d3df      	bcc.n	8005d40 <print_number+0xcc>
    }
    output_pointer[i] = '\0';
 8005d80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d84:	18d3      	adds	r3, r2, r3
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d90:	18d2      	adds	r2, r2, r3
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	609a      	str	r2, [r3, #8]

    return true;
 8005d96:	2301      	movs	r3, #1
}
 8005d98:	0018      	movs	r0, r3
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	b013      	add	sp, #76	; 0x4c
 8005d9e:	bd90      	pop	{r4, r7, pc}
 8005da0:	080088a4 	.word	0x080088a4

08005da4 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	e04c      	b.n	8005e54 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	18d3      	adds	r3, r2, r3
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b2f      	cmp	r3, #47	; 0x2f
 8005dc4:	d90f      	bls.n	8005de6 <parse_hex4+0x42>
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	18d3      	adds	r3, r2, r3
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	2b39      	cmp	r3, #57	; 0x39
 8005dd0:	d809      	bhi.n	8005de6 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	18d3      	adds	r3, r2, r3
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	001a      	movs	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	18d3      	adds	r3, r2, r3
 8005de0:	3b30      	subs	r3, #48	; 0x30
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e02d      	b.n	8005e42 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	18d3      	adds	r3, r2, r3
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b40      	cmp	r3, #64	; 0x40
 8005df0:	d90f      	bls.n	8005e12 <parse_hex4+0x6e>
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	18d3      	adds	r3, r2, r3
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b46      	cmp	r3, #70	; 0x46
 8005dfc:	d809      	bhi.n	8005e12 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	18d3      	adds	r3, r2, r3
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	001a      	movs	r2, r3
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	18d3      	adds	r3, r2, r3
 8005e0c:	3b37      	subs	r3, #55	; 0x37
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	e017      	b.n	8005e42 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	18d3      	adds	r3, r2, r3
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b60      	cmp	r3, #96	; 0x60
 8005e1c:	d90f      	bls.n	8005e3e <parse_hex4+0x9a>
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	18d3      	adds	r3, r2, r3
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	2b66      	cmp	r3, #102	; 0x66
 8005e28:	d809      	bhi.n	8005e3e <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	18d3      	adds	r3, r2, r3
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	001a      	movs	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	18d3      	adds	r3, r2, r3
 8005e38:	3b57      	subs	r3, #87	; 0x57
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e001      	b.n	8005e42 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	e00c      	b.n	8005e5c <parse_hex4+0xb8>
        }

        if (i < 3)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d802      	bhi.n	8005e4e <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3301      	adds	r3, #1
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	2b03      	cmp	r3, #3
 8005e58:	d9af      	bls.n	8005dba <parse_hex4+0x16>
        }
    }

    return h;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
}
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	b004      	add	sp, #16
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08a      	sub	sp, #40	; 0x28
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8005e7c:	2323      	movs	r3, #35	; 0x23
 8005e7e:	18fb      	adds	r3, r7, r3
 8005e80:	2200      	movs	r2, #0
 8005e82:	701a      	strb	r2, [r3, #0]
    unsigned char utf8_position = 0;
 8005e84:	2322      	movs	r3, #34	; 0x22
 8005e86:	18fb      	adds	r3, r7, r3
 8005e88:	2200      	movs	r2, #0
 8005e8a:	701a      	strb	r2, [r3, #0]
    unsigned char sequence_length = 0;
 8005e8c:	2321      	movs	r3, #33	; 0x21
 8005e8e:	18fb      	adds	r3, r7, r3
 8005e90:	2200      	movs	r2, #0
 8005e92:	701a      	strb	r2, [r3, #0]
    unsigned char first_byte_mark = 0;
 8005e94:	2320      	movs	r3, #32
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	2200      	movs	r2, #0
 8005e9a:	701a      	strb	r2, [r3, #0]

    if ((input_end - first_sequence) < 6)
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	69bb      	ldr	r3, [r7, #24]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b05      	cmp	r3, #5
 8005ea4:	dc00      	bgt.n	8005ea8 <utf16_literal_to_utf8+0x44>
 8005ea6:	e0cd      	b.n	8006044 <utf16_literal_to_utf8+0x1e0>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	3302      	adds	r3, #2
 8005eac:	0018      	movs	r0, r3
 8005eae:	f7ff ff79 	bl	8005da4 <parse_hex4>
 8005eb2:	0003      	movs	r3, r0
 8005eb4:	61fb      	str	r3, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	4a69      	ldr	r2, [pc, #420]	; (8006060 <utf16_literal_to_utf8+0x1fc>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d904      	bls.n	8005ec8 <utf16_literal_to_utf8+0x64>
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	4a68      	ldr	r2, [pc, #416]	; (8006064 <utf16_literal_to_utf8+0x200>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d800      	bhi.n	8005ec8 <utf16_literal_to_utf8+0x64>
 8005ec6:	e0bf      	b.n	8006048 <utf16_literal_to_utf8+0x1e4>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4a67      	ldr	r2, [pc, #412]	; (8006068 <utf16_literal_to_utf8+0x204>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d93c      	bls.n	8005f4a <utf16_literal_to_utf8+0xe6>
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	4a63      	ldr	r2, [pc, #396]	; (8006060 <utf16_literal_to_utf8+0x1fc>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d838      	bhi.n	8005f4a <utf16_literal_to_utf8+0xe6>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3306      	adds	r3, #6
 8005edc:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8005ee2:	2321      	movs	r3, #33	; 0x21
 8005ee4:	18fb      	adds	r3, r7, r3
 8005ee6:	220c      	movs	r2, #12
 8005ee8:	701a      	strb	r2, [r3, #0]

        if ((input_end - second_sequence) < 6)
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	1ad3      	subs	r3, r2, r3
 8005ef0:	2b05      	cmp	r3, #5
 8005ef2:	dc00      	bgt.n	8005ef6 <utf16_literal_to_utf8+0x92>
 8005ef4:	e0aa      	b.n	800604c <utf16_literal_to_utf8+0x1e8>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b5c      	cmp	r3, #92	; 0x5c
 8005efc:	d000      	beq.n	8005f00 <utf16_literal_to_utf8+0x9c>
 8005efe:	e0a7      	b.n	8006050 <utf16_literal_to_utf8+0x1ec>
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	3301      	adds	r3, #1
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b75      	cmp	r3, #117	; 0x75
 8005f08:	d000      	beq.n	8005f0c <utf16_literal_to_utf8+0xa8>
 8005f0a:	e0a1      	b.n	8006050 <utf16_literal_to_utf8+0x1ec>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	3302      	adds	r3, #2
 8005f10:	0018      	movs	r0, r3
 8005f12:	f7ff ff47 	bl	8005da4 <parse_hex4>
 8005f16:	0003      	movs	r3, r0
 8005f18:	613b      	str	r3, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4a50      	ldr	r2, [pc, #320]	; (8006060 <utf16_literal_to_utf8+0x1fc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d800      	bhi.n	8005f24 <utf16_literal_to_utf8+0xc0>
 8005f22:	e095      	b.n	8006050 <utf16_literal_to_utf8+0x1ec>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	4a4f      	ldr	r2, [pc, #316]	; (8006064 <utf16_literal_to_utf8+0x200>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d900      	bls.n	8005f2e <utf16_literal_to_utf8+0xca>
 8005f2c:	e090      	b.n	8006050 <utf16_literal_to_utf8+0x1ec>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	029b      	lsls	r3, r3, #10
 8005f32:	4a4e      	ldr	r2, [pc, #312]	; (800606c <utf16_literal_to_utf8+0x208>)
 8005f34:	401a      	ands	r2, r3
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	059b      	lsls	r3, r3, #22
 8005f3a:	0d9b      	lsrs	r3, r3, #22
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	2280      	movs	r2, #128	; 0x80
 8005f40:	0252      	lsls	r2, r2, #9
 8005f42:	4694      	mov	ip, r2
 8005f44:	4463      	add	r3, ip
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
    {
 8005f48:	e005      	b.n	8005f56 <utf16_literal_to_utf8+0xf2>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8005f4a:	2321      	movs	r3, #33	; 0x21
 8005f4c:	18fb      	adds	r3, r7, r3
 8005f4e:	2206      	movs	r2, #6
 8005f50:	701a      	strb	r2, [r3, #0]
        codepoint = first_code;
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8005f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f58:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5a:	d804      	bhi.n	8005f66 <utf16_literal_to_utf8+0x102>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8005f5c:	2323      	movs	r3, #35	; 0x23
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	2201      	movs	r2, #1
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e025      	b.n	8005fb2 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x800)
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	4a41      	ldr	r2, [pc, #260]	; (8006070 <utf16_literal_to_utf8+0x20c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d808      	bhi.n	8005f80 <utf16_literal_to_utf8+0x11c>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 8005f6e:	2323      	movs	r3, #35	; 0x23
 8005f70:	18fb      	adds	r3, r7, r3
 8005f72:	2202      	movs	r2, #2
 8005f74:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xC0; /* 11000000 */
 8005f76:	2320      	movs	r3, #32
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	22c0      	movs	r2, #192	; 0xc0
 8005f7c:	701a      	strb	r2, [r3, #0]
 8005f7e:	e018      	b.n	8005fb2 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint < 0x10000)
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	4a3c      	ldr	r2, [pc, #240]	; (8006074 <utf16_literal_to_utf8+0x210>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d808      	bhi.n	8005f9a <utf16_literal_to_utf8+0x136>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8005f88:	2323      	movs	r3, #35	; 0x23
 8005f8a:	18fb      	adds	r3, r7, r3
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xE0; /* 11100000 */
 8005f90:	2320      	movs	r3, #32
 8005f92:	18fb      	adds	r3, r7, r3
 8005f94:	22e0      	movs	r2, #224	; 0xe0
 8005f96:	701a      	strb	r2, [r3, #0]
 8005f98:	e00b      	b.n	8005fb2 <utf16_literal_to_utf8+0x14e>
    }
    else if (codepoint <= 0x10FFFF)
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	4a36      	ldr	r2, [pc, #216]	; (8006078 <utf16_literal_to_utf8+0x214>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d858      	bhi.n	8006054 <utf16_literal_to_utf8+0x1f0>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8005fa2:	2323      	movs	r3, #35	; 0x23
 8005fa4:	18fb      	adds	r3, r7, r3
 8005fa6:	2204      	movs	r2, #4
 8005fa8:	701a      	strb	r2, [r3, #0]
        first_byte_mark = 0xF0; /* 11110000 */
 8005faa:	2320      	movs	r3, #32
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	22f0      	movs	r2, #240	; 0xf0
 8005fb0:	701a      	strb	r2, [r3, #0]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005fb2:	2322      	movs	r3, #34	; 0x22
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	2223      	movs	r2, #35	; 0x23
 8005fb8:	18ba      	adds	r2, r7, r2
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	701a      	strb	r2, [r3, #0]
 8005fc0:	e017      	b.n	8005ff2 <utf16_literal_to_utf8+0x18e>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	223f      	movs	r2, #63	; 0x3f
 8005fc8:	4013      	ands	r3, r2
 8005fca:	b2da      	uxtb	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6819      	ldr	r1, [r3, #0]
 8005fd0:	2022      	movs	r0, #34	; 0x22
 8005fd2:	183b      	adds	r3, r7, r0
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	18cb      	adds	r3, r1, r3
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	4249      	negs	r1, r1
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8005fe8:	183b      	adds	r3, r7, r0
 8005fea:	781a      	ldrb	r2, [r3, #0]
 8005fec:	183b      	adds	r3, r7, r0
 8005fee:	3a01      	subs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	2322      	movs	r3, #34	; 0x22
 8005ff4:	18fb      	adds	r3, r7, r3
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e2      	bne.n	8005fc2 <utf16_literal_to_utf8+0x15e>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8005ffc:	2323      	movs	r3, #35	; 0x23
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d90a      	bls.n	800601c <utf16_literal_to_utf8+0x1b8>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	b2d9      	uxtb	r1, r3
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2220      	movs	r2, #32
 8006010:	18ba      	adds	r2, r7, r2
 8006012:	7812      	ldrb	r2, [r2, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e007      	b.n	800602c <utf16_literal_to_utf8+0x1c8>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	b2da      	uxtb	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	217f      	movs	r1, #127	; 0x7f
 8006026:	400a      	ands	r2, r1
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2323      	movs	r3, #35	; 0x23
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	18d2      	adds	r2, r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]

    return sequence_length;
 800603c:	2321      	movs	r3, #33	; 0x21
 800603e:	18fb      	adds	r3, r7, r3
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	e009      	b.n	8006058 <utf16_literal_to_utf8+0x1f4>
        goto fail;
 8006044:	46c0      	nop			; (mov r8, r8)
 8006046:	e006      	b.n	8006056 <utf16_literal_to_utf8+0x1f2>
        goto fail;
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	e004      	b.n	8006056 <utf16_literal_to_utf8+0x1f2>
            goto fail;
 800604c:	46c0      	nop			; (mov r8, r8)
 800604e:	e002      	b.n	8006056 <utf16_literal_to_utf8+0x1f2>

fail:
 8006050:	46c0      	nop			; (mov r8, r8)
 8006052:	e000      	b.n	8006056 <utf16_literal_to_utf8+0x1f2>
        goto fail;
 8006054:	46c0      	nop			; (mov r8, r8)
    return 0;
 8006056:	2300      	movs	r3, #0
}
 8006058:	0018      	movs	r0, r3
 800605a:	46bd      	mov	sp, r7
 800605c:	b00a      	add	sp, #40	; 0x28
 800605e:	bd80      	pop	{r7, pc}
 8006060:	0000dbff 	.word	0x0000dbff
 8006064:	0000dfff 	.word	0x0000dfff
 8006068:	0000d7ff 	.word	0x0000d7ff
 800606c:	000ffc00 	.word	0x000ffc00
 8006070:	000007ff 	.word	0x000007ff
 8006074:	0000ffff 	.word	0x0000ffff
 8006078:	0010ffff 	.word	0x0010ffff

0800607c <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static Jbool parse_string(J * const item, parse_buffer * const input_buffer)
{
 800607c:	b5b0      	push	{r4, r5, r7, lr}
 800607e:	b08a      	sub	sp, #40	; 0x28
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	3301      	adds	r3, #1
 8006090:	18d3      	adds	r3, r2, r3
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	3301      	adds	r3, #1
 800609e:	18d3      	adds	r3, r2, r3
 80060a0:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	18d3      	adds	r3, r2, r3
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b22      	cmp	r3, #34	; 0x22
 80060b8:	d000      	beq.n	80060bc <parse_string+0x40>
 80060ba:	e0ca      	b.n	8006252 <parse_string+0x1d6>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80060c4:	e018      	b.n	80060f8 <parse_string+0x7c>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b5c      	cmp	r3, #92	; 0x5c
 80060cc:	d111      	bne.n	80060f2 <parse_string+0x76>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80060ce:	6a3b      	ldr	r3, [r7, #32]
 80060d0:	3301      	adds	r3, #1
 80060d2:	001a      	movs	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	001a      	movs	r2, r3
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d300      	bcc.n	80060e6 <parse_string+0x6a>
 80060e4:	e0b7      	b.n	8006256 <parse_string+0x1da>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	3301      	adds	r3, #1
 80060ea:	61bb      	str	r3, [r7, #24]
                input_end++;
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	3301      	adds	r3, #1
 80060f0:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	3301      	adds	r3, #1
 80060f6:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80060f8:	6a3a      	ldr	r2, [r7, #32]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	001a      	movs	r2, r3
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	429a      	cmp	r2, r3
 8006108:	d203      	bcs.n	8006112 <parse_string+0x96>
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b22      	cmp	r3, #34	; 0x22
 8006110:	d1d9      	bne.n	80060c6 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	001a      	movs	r2, r3
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	429a      	cmp	r2, r3
 8006122:	d300      	bcc.n	8006126 <parse_string+0xaa>
 8006124:	e099      	b.n	800625a <parse_string+0x1de>
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b22      	cmp	r3, #34	; 0x22
 800612c:	d000      	beq.n	8006130 <parse_string+0xb4>
 800612e:	e094      	b.n	800625a <parse_string+0x1de>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8006130:	6a3a      	ldr	r2, [r7, #32]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6819      	ldr	r1, [r3, #0]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	18cb      	adds	r3, r1, r3
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	001a      	movs	r2, r3
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	3201      	adds	r2, #1
 800614e:	0010      	movs	r0, r2
 8006150:	4798      	blx	r3
 8006152:	0003      	movs	r3, r0
 8006154:	61fb      	str	r3, [r7, #28]
        if (output == NULL)
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d100      	bne.n	800615e <parse_string+0xe2>
 800615c:	e07f      	b.n	800625e <parse_string+0x1e2>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8006162:	e05b      	b.n	800621c <parse_string+0x1a0>
    {
        if (*input_pointer != '\\')
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	2b5c      	cmp	r3, #92	; 0x5c
 800616a:	d008      	beq.n	800617e <parse_string+0x102>
        {
            *output_pointer++ = *input_pointer++;
 800616c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800616e:	1c53      	adds	r3, r2, #1
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	60f9      	str	r1, [r7, #12]
 8006178:	7812      	ldrb	r2, [r2, #0]
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e04e      	b.n	800621c <parse_string+0x1a0>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 800617e:	2317      	movs	r3, #23
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	2202      	movs	r2, #2
 8006184:	701a      	strb	r2, [r3, #0]
            if ((input_end - input_pointer) < 1)
 8006186:	6a3a      	ldr	r2, [r7, #32]
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	dd68      	ble.n	8006262 <parse_string+0x1e6>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	3301      	adds	r3, #1
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	3b22      	subs	r3, #34	; 0x22
 8006198:	2b53      	cmp	r3, #83	; 0x53
 800619a:	d864      	bhi.n	8006266 <parse_string+0x1ea>
 800619c:	009a      	lsls	r2, r3, #2
 800619e:	4b3f      	ldr	r3, [pc, #252]	; (800629c <parse_string+0x220>)
 80061a0:	18d3      	adds	r3, r2, r3
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	469f      	mov	pc, r3
            {
                case 'b':
                    *output_pointer++ = '\b';
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	60fa      	str	r2, [r7, #12]
 80061ac:	2208      	movs	r2, #8
 80061ae:	701a      	strb	r2, [r3, #0]
                    break;
 80061b0:	e02e      	b.n	8006210 <parse_string+0x194>
                case 'f':
                    *output_pointer++ = '\f';
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1c5a      	adds	r2, r3, #1
 80061b6:	60fa      	str	r2, [r7, #12]
 80061b8:	220c      	movs	r2, #12
 80061ba:	701a      	strb	r2, [r3, #0]
                    break;
 80061bc:	e028      	b.n	8006210 <parse_string+0x194>
                case 'n':
                    *output_pointer++ = '\n';
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	60fa      	str	r2, [r7, #12]
 80061c4:	220a      	movs	r2, #10
 80061c6:	701a      	strb	r2, [r3, #0]
                    break;
 80061c8:	e022      	b.n	8006210 <parse_string+0x194>
                case 'r':
                    *output_pointer++ = '\r';
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	60fa      	str	r2, [r7, #12]
 80061d0:	220d      	movs	r2, #13
 80061d2:	701a      	strb	r2, [r3, #0]
                    break;
 80061d4:	e01c      	b.n	8006210 <parse_string+0x194>
                case 't':
                    *output_pointer++ = '\t';
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	1c5a      	adds	r2, r3, #1
 80061da:	60fa      	str	r2, [r7, #12]
 80061dc:	2209      	movs	r2, #9
 80061de:	701a      	strb	r2, [r3, #0]
                    break;
 80061e0:	e016      	b.n	8006210 <parse_string+0x194>
                case '\"':
                case '\\':
                case '/':
                    *output_pointer++ = input_pointer[1];
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1c5a      	adds	r2, r3, #1
 80061e6:	60fa      	str	r2, [r7, #12]
 80061e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061ea:	7852      	ldrb	r2, [r2, #1]
 80061ec:	701a      	strb	r2, [r3, #0]
                    break;
 80061ee:	e00f      	b.n	8006210 <parse_string+0x194>

                /* UTF-16 literal */
                case 'u':
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80061f0:	2517      	movs	r5, #23
 80061f2:	197c      	adds	r4, r7, r5
 80061f4:	230c      	movs	r3, #12
 80061f6:	18fa      	adds	r2, r7, r3
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	0018      	movs	r0, r3
 80061fe:	f7ff fe31 	bl	8005e64 <utf16_literal_to_utf8>
 8006202:	0003      	movs	r3, r0
 8006204:	7023      	strb	r3, [r4, #0]
                    if (sequence_length == 0)
 8006206:	197b      	adds	r3, r7, r5
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d02d      	beq.n	800626a <parse_string+0x1ee>
                    {
                        /* failed to convert UTF16-literal to UTF-8 */
                        goto fail;
                    }
                    break;
 800620e:	46c0      	nop			; (mov r8, r8)

                default:
                    goto fail;
            }
            input_pointer += sequence_length;
 8006210:	2317      	movs	r3, #23
 8006212:	18fb      	adds	r3, r7, r3
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	18d3      	adds	r3, r2, r3
 800621a:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 800621c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	429a      	cmp	r2, r3
 8006222:	d39f      	bcc.n	8006164 <parse_string+0xe8>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]

    item->type = JString;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2210      	movs	r2, #16
 800622e:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	001a      	movs	r2, r3
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	609a      	str	r2, [r3, #8]

    return true;
 800624e:	2301      	movs	r3, #1
 8006250:	e01f      	b.n	8006292 <parse_string+0x216>
        goto fail;
 8006252:	46c0      	nop			; (mov r8, r8)
 8006254:	e00a      	b.n	800626c <parse_string+0x1f0>
                    goto fail;
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	e008      	b.n	800626c <parse_string+0x1f0>

fail:
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	e006      	b.n	800626c <parse_string+0x1f0>
            goto fail; /* allocation failure */
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	e004      	b.n	800626c <parse_string+0x1f0>
                goto fail;
 8006262:	46c0      	nop			; (mov r8, r8)
 8006264:	e002      	b.n	800626c <parse_string+0x1f0>
                    goto fail;
 8006266:	46c0      	nop			; (mov r8, r8)
 8006268:	e000      	b.n	800626c <parse_string+0x1f0>
                        goto fail;
 800626a:	46c0      	nop			; (mov r8, r8)
    if (output != NULL)
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <parse_string+0x200>
    {
        input_buffer->hooks.deallocate(output);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	0010      	movs	r0, r2
 800627a:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 800627c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <parse_string+0x214>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8006282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	001a      	movs	r2, r3
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	609a      	str	r2, [r3, #8]
    }

    return false;
 8006290:	2300      	movs	r3, #0
}
 8006292:	0018      	movs	r0, r3
 8006294:	46bd      	mov	sp, r7
 8006296:	b00a      	add	sp, #40	; 0x28
 8006298:	bdb0      	pop	{r4, r5, r7, pc}
 800629a:	46c0      	nop			; (mov r8, r8)
 800629c:	08008b18 	.word	0x08008b18

080062a0 <htoa16>:

/* Convert a 16-bit number to 4 hex digits, null-terminating it */
void htoa16(uint16_t n, unsigned char *p)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	0002      	movs	r2, r0
 80062a8:	6039      	str	r1, [r7, #0]
 80062aa:	1dbb      	adds	r3, r7, #6
 80062ac:	801a      	strh	r2, [r3, #0]
    int i;
    for (i=0; i<4; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	60fb      	str	r3, [r7, #12]
 80062b2:	e026      	b.n	8006302 <htoa16+0x62>
    {
        uint16_t nibble = (n >> 12) & 0xff;
 80062b4:	210a      	movs	r1, #10
 80062b6:	187b      	adds	r3, r7, r1
 80062b8:	1dba      	adds	r2, r7, #6
 80062ba:	8812      	ldrh	r2, [r2, #0]
 80062bc:	0b12      	lsrs	r2, r2, #12
 80062be:	801a      	strh	r2, [r3, #0]
        n = n << 4;
 80062c0:	1dbb      	adds	r3, r7, #6
 80062c2:	1dba      	adds	r2, r7, #6
 80062c4:	8812      	ldrh	r2, [r2, #0]
 80062c6:	0112      	lsls	r2, r2, #4
 80062c8:	801a      	strh	r2, [r3, #0]
        if (nibble >= 10)
 80062ca:	187b      	adds	r3, r7, r1
 80062cc:	881b      	ldrh	r3, [r3, #0]
 80062ce:	2b09      	cmp	r3, #9
 80062d0:	d90a      	bls.n	80062e8 <htoa16+0x48>
            *p++ = 'A' + (nibble-10);
 80062d2:	230a      	movs	r3, #10
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	881b      	ldrh	r3, [r3, #0]
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	1c59      	adds	r1, r3, #1
 80062de:	6039      	str	r1, [r7, #0]
 80062e0:	3237      	adds	r2, #55	; 0x37
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	e009      	b.n	80062fc <htoa16+0x5c>
        else
            *p++ = '0' + nibble;
 80062e8:	230a      	movs	r3, #10
 80062ea:	18fb      	adds	r3, r7, r3
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b2da      	uxtb	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	1c59      	adds	r1, r3, #1
 80062f4:	6039      	str	r1, [r7, #0]
 80062f6:	3230      	adds	r2, #48	; 0x30
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b03      	cmp	r3, #3
 8006306:	ddd5      	ble.n	80062b4 <htoa16+0x14>
    }
    *p = '\0';
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b004      	add	sp, #16
 8006314:	bd80      	pop	{r7, pc}
	...

08006318 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static Jbool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <print_string_ptr+0x28>
    {
        return false;
 800633c:	2300      	movs	r3, #0
 800633e:	e0e2      	b.n	8006506 <print_string_ptr+0x1ee>
    }

    /* empty string */
    if (input == NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d115      	bne.n	8006372 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2103      	movs	r1, #3
 800634a:	0018      	movs	r0, r3
 800634c:	f7ff fbcc 	bl	8005ae8 <ensure>
 8006350:	0003      	movs	r3, r0
 8006352:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <print_string_ptr+0x46>
        {
            return false;
 800635a:	2300      	movs	r3, #0
 800635c:	e0d3      	b.n	8006506 <print_string_ptr+0x1ee>
        }
        strcpy((char*)output, "\"\"");
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4b6b      	ldr	r3, [pc, #428]	; (8006510 <print_string_ptr+0x1f8>)
 8006362:	0010      	movs	r0, r2
 8006364:	0019      	movs	r1, r3
 8006366:	2303      	movs	r3, #3
 8006368:	001a      	movs	r2, r3
 800636a:	f002 f8ef 	bl	800854c <memcpy>

        return true;
 800636e:	2301      	movs	r3, #1
 8006370:	e0c9      	b.n	8006506 <print_string_ptr+0x1ee>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	e01c      	b.n	80063b2 <print_string_ptr+0x9a>
    {
        switch (*input_pointer)
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	2b0d      	cmp	r3, #13
 800637e:	dc05      	bgt.n	800638c <print_string_ptr+0x74>
 8006380:	2b0c      	cmp	r3, #12
 8006382:	da07      	bge.n	8006394 <print_string_ptr+0x7c>
 8006384:	3b08      	subs	r3, #8
 8006386:	2b02      	cmp	r3, #2
 8006388:	d808      	bhi.n	800639c <print_string_ptr+0x84>
 800638a:	e003      	b.n	8006394 <print_string_ptr+0x7c>
 800638c:	2b22      	cmp	r3, #34	; 0x22
 800638e:	d001      	beq.n	8006394 <print_string_ptr+0x7c>
 8006390:	2b5c      	cmp	r3, #92	; 0x5c
 8006392:	d103      	bne.n	800639c <print_string_ptr+0x84>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	3301      	adds	r3, #1
 8006398:	617b      	str	r3, [r7, #20]
                break;
 800639a:	e007      	b.n	80063ac <print_string_ptr+0x94>
            default:
                if (*input_pointer < 32)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	2b1f      	cmp	r3, #31
 80063a2:	d802      	bhi.n	80063aa <print_string_ptr+0x92>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3305      	adds	r3, #5
 80063a8:	617b      	str	r3, [r7, #20]
                }
                break;
 80063aa:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1de      	bne.n	8006378 <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 80063ba:	69fa      	ldr	r2, [r7, #28]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	001a      	movs	r2, r3
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	189b      	adds	r3, r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1cda      	adds	r2, r3, #3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	0011      	movs	r1, r2
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7ff fb89 	bl	8005ae8 <ensure>
 80063d6:	0003      	movs	r3, r0
 80063d8:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <print_string_ptr+0xcc>
    {
        return false;
 80063e0:	2300      	movs	r3, #0
 80063e2:	e090      	b.n	8006506 <print_string_ptr+0x1ee>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d117      	bne.n	800641a <print_string_ptr+0x102>
    {
        output[0] = '\"';
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2222      	movs	r2, #34	; 0x22
 80063ee:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	3301      	adds	r3, #1
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f002 f8a7 	bl	800854c <memcpy>
        output[output_length + 1] = '\"';
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	18d3      	adds	r3, r2, r3
 8006406:	2222      	movs	r2, #34	; 0x22
 8006408:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3302      	adds	r3, #2
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	18d3      	adds	r3, r2, r3
 8006412:	2200      	movs	r2, #0
 8006414:	701a      	strb	r2, [r3, #0]

        return true;
 8006416:	2301      	movs	r3, #1
 8006418:	e075      	b.n	8006506 <print_string_ptr+0x1ee>
    }

    output[0] = '\"';
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2222      	movs	r2, #34	; 0x22
 800641e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3301      	adds	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	e05b      	b.n	80064e4 <print_string_ptr+0x1cc>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b1f      	cmp	r3, #31
 8006432:	d90c      	bls.n	800644e <print_string_ptr+0x136>
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b22      	cmp	r3, #34	; 0x22
 800643a:	d008      	beq.n	800644e <print_string_ptr+0x136>
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b5c      	cmp	r3, #92	; 0x5c
 8006442:	d004      	beq.n	800644e <print_string_ptr+0x136>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	781a      	ldrb	r2, [r3, #0]
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e044      	b.n	80064d8 <print_string_ptr+0x1c0>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	1c5a      	adds	r2, r3, #1
 8006452:	61ba      	str	r2, [r7, #24]
 8006454:	225c      	movs	r2, #92	; 0x5c
 8006456:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d01a      	beq.n	8006496 <print_string_ptr+0x17e>
 8006460:	dc06      	bgt.n	8006470 <print_string_ptr+0x158>
 8006462:	2b09      	cmp	r3, #9
 8006464:	d023      	beq.n	80064ae <print_string_ptr+0x196>
 8006466:	2b0a      	cmp	r3, #10
 8006468:	d019      	beq.n	800649e <print_string_ptr+0x186>
 800646a:	2b08      	cmp	r3, #8
 800646c:	d00f      	beq.n	800648e <print_string_ptr+0x176>
 800646e:	e022      	b.n	80064b6 <print_string_ptr+0x19e>
 8006470:	2b22      	cmp	r3, #34	; 0x22
 8006472:	d008      	beq.n	8006486 <print_string_ptr+0x16e>
 8006474:	2b5c      	cmp	r3, #92	; 0x5c
 8006476:	d002      	beq.n	800647e <print_string_ptr+0x166>
 8006478:	2b0d      	cmp	r3, #13
 800647a:	d014      	beq.n	80064a6 <print_string_ptr+0x18e>
 800647c:	e01b      	b.n	80064b6 <print_string_ptr+0x19e>
            {
                case '\\':
                    *output_pointer = '\\';
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	225c      	movs	r2, #92	; 0x5c
 8006482:	701a      	strb	r2, [r3, #0]
                    break;
 8006484:	e028      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\"':
                    *output_pointer = '\"';
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2222      	movs	r2, #34	; 0x22
 800648a:	701a      	strb	r2, [r3, #0]
                    break;
 800648c:	e024      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\b':
                    *output_pointer = 'b';
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	2262      	movs	r2, #98	; 0x62
 8006492:	701a      	strb	r2, [r3, #0]
                    break;
 8006494:	e020      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\f':
                    *output_pointer = 'f';
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2266      	movs	r2, #102	; 0x66
 800649a:	701a      	strb	r2, [r3, #0]
                    break;
 800649c:	e01c      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\n':
                    *output_pointer = 'n';
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	226e      	movs	r2, #110	; 0x6e
 80064a2:	701a      	strb	r2, [r3, #0]
                    break;
 80064a4:	e018      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\r':
                    *output_pointer = 'r';
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2272      	movs	r2, #114	; 0x72
 80064aa:	701a      	strb	r2, [r3, #0]
                    break;
 80064ac:	e014      	b.n	80064d8 <print_string_ptr+0x1c0>
                case '\t':
                    *output_pointer = 't';
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2274      	movs	r2, #116	; 0x74
 80064b2:	701a      	strb	r2, [r3, #0]
                    break;
 80064b4:	e010      	b.n	80064d8 <print_string_ptr+0x1c0>
                default:
                    /* escape and print as unicode codepoint */
                    *output_pointer++ = 'u';
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1c5a      	adds	r2, r3, #1
 80064ba:	61ba      	str	r2, [r7, #24]
 80064bc:	2275      	movs	r2, #117	; 0x75
 80064be:	701a      	strb	r2, [r3, #0]
                    htoa16(*input_pointer, output_pointer);
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	0011      	movs	r1, r2
 80064ca:	0018      	movs	r0, r3
 80064cc:	f7ff fee8 	bl	80062a0 <htoa16>
                    output_pointer += 4;
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	3304      	adds	r3, #4
 80064d4:	61bb      	str	r3, [r7, #24]
                    break;
 80064d6:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	3301      	adds	r3, #1
 80064dc:	61fb      	str	r3, [r7, #28]
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	3301      	adds	r3, #1
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d19f      	bne.n	800642c <print_string_ptr+0x114>
            }
        }
    }
    output[output_length + 1] = '\"';
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	18d3      	adds	r3, r2, r3
 80064f4:	2222      	movs	r2, #34	; 0x22
 80064f6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3302      	adds	r3, #2
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	18d3      	adds	r3, r2, r3
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]

    return true;
 8006504:	2301      	movs	r3, #1
}
 8006506:	0018      	movs	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	b008      	add	sp, #32
 800650c:	bd80      	pop	{r7, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	080088ac 	.word	0x080088ac

08006514 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static Jbool print_string(const J * const item, printbuffer * const p)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b082      	sub	sp, #8
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	683a      	ldr	r2, [r7, #0]
 8006524:	0011      	movs	r1, r2
 8006526:	0018      	movs	r0, r3
 8006528:	f7ff fef6 	bl	8006318 <print_string_ptr>
 800652c:	0003      	movs	r3, r0
}
 800652e:	0018      	movs	r0, r3
 8006530:	46bd      	mov	sp, r7
 8006532:	b002      	add	sp, #8
 8006534:	bd80      	pop	{r7, pc}

08006536 <buffer_skip_whitespace>:
static Jbool parse_object(J * const item, parse_buffer * const input_buffer);
static Jbool print_object(const J * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b082      	sub	sp, #8
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d003      	beq.n	800654c <buffer_skip_whitespace+0x16>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d106      	bne.n	800655a <buffer_skip_whitespace+0x24>
    {
        return NULL;
 800654c:	2300      	movs	r3, #0
 800654e:	e021      	b.n	8006594 <buffer_skip_whitespace+0x5e>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d00d      	beq.n	800657c <buffer_skip_whitespace+0x46>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	689a      	ldr	r2, [r3, #8]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	429a      	cmp	r2, r3
 800656a:	d207      	bcs.n	800657c <buffer_skip_whitespace+0x46>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	18d3      	adds	r3, r2, r3
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b20      	cmp	r3, #32
 800657a:	d9e9      	bls.n	8006550 <buffer_skip_whitespace+0x1a>
    }

    if (buffer->offset == buffer->length)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d104      	bne.n	8006592 <buffer_skip_whitespace+0x5c>
    {
        buffer->offset--;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	1e5a      	subs	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8006592:	687b      	ldr	r3, [r7, #4]
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b002      	add	sp, #8
 800659a:	bd80      	pop	{r7, pc}

0800659c <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d007      	beq.n	80065ba <skip_utf8_bom+0x1e>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d003      	beq.n	80065ba <skip_utf8_bom+0x1e>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <skip_utf8_bom+0x22>
    {
        return NULL;
 80065ba:	2300      	movs	r3, #0
 80065bc:	e01b      	b.n	80065f6 <skip_utf8_bom+0x5a>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d017      	beq.n	80065f4 <skip_utf8_bom+0x58>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	1d1a      	adds	r2, r3, #4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d210      	bcs.n	80065f4 <skip_utf8_bom+0x58>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	18d3      	adds	r3, r2, r3
 80065dc:	4908      	ldr	r1, [pc, #32]	; (8006600 <skip_utf8_bom+0x64>)
 80065de:	2203      	movs	r2, #3
 80065e0:	0018      	movs	r0, r3
 80065e2:	f002 f88d 	bl	8008700 <strncmp>
 80065e6:	1e03      	subs	r3, r0, #0
 80065e8:	d104      	bne.n	80065f4 <skip_utf8_bom+0x58>
    {
        buffer->offset += 3;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	1cda      	adds	r2, r3, #3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80065f4:	687b      	ldr	r3, [r7, #4]
}
 80065f6:	0018      	movs	r0, r3
 80065f8:	46bd      	mov	sp, r7
 80065fa:	b002      	add	sp, #8
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	46c0      	nop			; (mov r8, r8)
 8006600:	080088b0 	.word	0x080088b0

08006604 <JParseWithOpts>:

/* Parse an object - create a new root, and populate. */
N_CJSON_PUBLIC(J *) JParseWithOpts(const char *value, const char **return_parse_end, Jbool require_null_terminated)
{
 8006604:	b590      	push	{r4, r7, lr}
 8006606:	b08f      	sub	sp, #60	; 0x3c
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	607a      	str	r2, [r7, #4]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8006610:	2318      	movs	r3, #24
 8006612:	18fb      	adds	r3, r7, r3
 8006614:	0018      	movs	r0, r3
 8006616:	231c      	movs	r3, #28
 8006618:	001a      	movs	r2, r3
 800661a:	2100      	movs	r1, #0
 800661c:	f001 ff9f 	bl	800855e <memset>
    J *item = NULL;
 8006620:	2300      	movs	r3, #0
 8006622:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 8006624:	4b51      	ldr	r3, [pc, #324]	; (800676c <JParseWithOpts+0x168>)
 8006626:	2200      	movs	r2, #0
 8006628:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 800662a:	4b50      	ldr	r3, [pc, #320]	; (800676c <JParseWithOpts+0x168>)
 800662c:	2200      	movs	r2, #0
 800662e:	605a      	str	r2, [r3, #4]

    if (value == NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d053      	beq.n	80066de <JParseWithOpts+0xda>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8006636:	2418      	movs	r4, #24
 8006638:	193b      	adds	r3, r7, r4
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	601a      	str	r2, [r3, #0]
    buffer.length = strlen((const char*)value) + sizeof("");
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	0018      	movs	r0, r3
 8006642:	f7f9 fd69 	bl	8000118 <strlen>
 8006646:	0003      	movs	r3, r0
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	193b      	adds	r3, r7, r4
 800664c:	605a      	str	r2, [r3, #4]
    buffer.offset = 0;
 800664e:	193b      	adds	r3, r7, r4
 8006650:	2200      	movs	r2, #0
 8006652:	609a      	str	r2, [r3, #8]
    buffer.hooks = global_hooks;
 8006654:	193b      	adds	r3, r7, r4
 8006656:	4a46      	ldr	r2, [pc, #280]	; (8006770 <JParseWithOpts+0x16c>)
 8006658:	3310      	adds	r3, #16
 800665a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800665c:	c313      	stmia	r3!, {r0, r1, r4}

    item = JNew_Item(&global_hooks);
 800665e:	4b44      	ldr	r3, [pc, #272]	; (8006770 <JParseWithOpts+0x16c>)
 8006660:	0018      	movs	r0, r3
 8006662:	f7ff f923 	bl	80058ac <JNew_Item>
 8006666:	0003      	movs	r3, r0
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 800666a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d038      	beq.n	80066e2 <JParseWithOpts+0xde>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8006670:	2318      	movs	r3, #24
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	0018      	movs	r0, r3
 8006676:	f7ff ff91 	bl	800659c <skip_utf8_bom>
 800667a:	0003      	movs	r3, r0
 800667c:	0018      	movs	r0, r3
 800667e:	f7ff ff5a 	bl	8006536 <buffer_skip_whitespace>
 8006682:	0002      	movs	r2, r0
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006686:	0011      	movs	r1, r2
 8006688:	0018      	movs	r0, r3
 800668a:	f000 f931 	bl	80068f0 <parse_value>
 800668e:	1e03      	subs	r3, r0, #0
 8006690:	d029      	beq.n	80066e6 <JParseWithOpts+0xe2>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d015      	beq.n	80066c4 <JParseWithOpts+0xc0>
    {
        buffer_skip_whitespace(&buffer);
 8006698:	2118      	movs	r1, #24
 800669a:	000c      	movs	r4, r1
 800669c:	187b      	adds	r3, r7, r1
 800669e:	0018      	movs	r0, r3
 80066a0:	f7ff ff49 	bl	8006536 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 80066a4:	0021      	movs	r1, r4
 80066a6:	187b      	adds	r3, r7, r1
 80066a8:	689a      	ldr	r2, [r3, #8]
 80066aa:	187b      	adds	r3, r7, r1
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d21b      	bcs.n	80066ea <JParseWithOpts+0xe6>
 80066b2:	2118      	movs	r1, #24
 80066b4:	187b      	adds	r3, r7, r1
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	187b      	adds	r3, r7, r1
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	18d3      	adds	r3, r2, r3
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d112      	bne.n	80066ea <JParseWithOpts+0xe6>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <JParseWithOpts+0xd6>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 80066ca:	2118      	movs	r1, #24
 80066cc:	187b      	adds	r3, r7, r1
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	187b      	adds	r3, r7, r1
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	18d2      	adds	r2, r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	601a      	str	r2, [r3, #0]
    }

    return item;
 80066da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066dc:	e042      	b.n	8006764 <JParseWithOpts+0x160>
        goto fail;
 80066de:	46c0      	nop			; (mov r8, r8)
 80066e0:	e004      	b.n	80066ec <JParseWithOpts+0xe8>
        goto fail;
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	e002      	b.n	80066ec <JParseWithOpts+0xe8>
        goto fail;
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	e000      	b.n	80066ec <JParseWithOpts+0xe8>

fail:
 80066ea:	46c0      	nop			; (mov r8, r8)
    if (item != NULL)
 80066ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <JParseWithOpts+0xf6>
    {
        JDelete(item);
 80066f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f4:	0018      	movs	r0, r3
 80066f6:	f7ff f8f1 	bl	80058dc <JDelete>
    }

    if (value != NULL)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d030      	beq.n	8006762 <JParseWithOpts+0x15e>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8006700:	2110      	movs	r1, #16
 8006702:	187b      	adds	r3, r7, r1
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	601a      	str	r2, [r3, #0]
        local_error.position = 0;
 8006708:	187b      	adds	r3, r7, r1
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]

        if (buffer.offset < buffer.length)
 800670e:	2118      	movs	r1, #24
 8006710:	187b      	adds	r3, r7, r1
 8006712:	689a      	ldr	r2, [r3, #8]
 8006714:	187b      	adds	r3, r7, r1
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	429a      	cmp	r2, r3
 800671a:	d206      	bcs.n	800672a <JParseWithOpts+0x126>
        {
            local_error.position = buffer.offset;
 800671c:	2318      	movs	r3, #24
 800671e:	18fb      	adds	r3, r7, r3
 8006720:	689a      	ldr	r2, [r3, #8]
 8006722:	2310      	movs	r3, #16
 8006724:	18fb      	adds	r3, r7, r3
 8006726:	605a      	str	r2, [r3, #4]
 8006728:	e00b      	b.n	8006742 <JParseWithOpts+0x13e>
        }
        else if (buffer.length > 0)
 800672a:	2318      	movs	r3, #24
 800672c:	18fb      	adds	r3, r7, r3
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d006      	beq.n	8006742 <JParseWithOpts+0x13e>
        {
            local_error.position = buffer.length - 1;
 8006734:	2318      	movs	r3, #24
 8006736:	18fb      	adds	r3, r7, r3
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	1e5a      	subs	r2, r3, #1
 800673c:	2310      	movs	r3, #16
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	605a      	str	r2, [r3, #4]
        }

        if (return_parse_end != NULL)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d007      	beq.n	8006758 <JParseWithOpts+0x154>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 8006748:	2110      	movs	r1, #16
 800674a:	187b      	adds	r3, r7, r1
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	187b      	adds	r3, r7, r1
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	18d2      	adds	r2, r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 8006758:	4b04      	ldr	r3, [pc, #16]	; (800676c <JParseWithOpts+0x168>)
 800675a:	2210      	movs	r2, #16
 800675c:	18ba      	adds	r2, r7, r2
 800675e:	ca03      	ldmia	r2!, {r0, r1}
 8006760:	c303      	stmia	r3!, {r0, r1}
    }

    return NULL;
 8006762:	2300      	movs	r3, #0
}
 8006764:	0018      	movs	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	b00f      	add	sp, #60	; 0x3c
 800676a:	bd90      	pop	{r4, r7, pc}
 800676c:	20000260 	.word	0x20000260
 8006770:	20000058 	.word	0x20000058

08006774 <JParse>:

/* Default options for JParse */
N_CJSON_PUBLIC(J *) JParse(const char *value)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
    return JParseWithOpts(value, 0, 0);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	2100      	movs	r1, #0
 8006782:	0018      	movs	r0, r3
 8006784:	f7ff ff3e 	bl	8006604 <JParseWithOpts>
 8006788:	0003      	movs	r3, r0
}
 800678a:	0018      	movs	r0, r3
 800678c:	46bd      	mov	sp, r7
 800678e:	b002      	add	sp, #8
 8006790:	bd80      	pop	{r7, pc}
	...

08006794 <print>:

#define cjson_min(a, b) ((a < b) ? a : b)

static unsigned char *print(const J * const item, Jbool format, const internal_hooks * const hooks)
{
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b08e      	sub	sp, #56	; 0x38
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 80067a4:	2410      	movs	r4, #16
 80067a6:	193b      	adds	r3, r7, r4
 80067a8:	2224      	movs	r2, #36	; 0x24
 80067aa:	2100      	movs	r1, #0
 80067ac:	0018      	movs	r0, r3
 80067ae:	f001 fed6 	bl	800855e <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	4b44      	ldr	r3, [pc, #272]	; (80068c8 <print+0x134>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	0018      	movs	r0, r3
 80067bc:	4790      	blx	r2
 80067be:	0002      	movs	r2, r0
 80067c0:	0021      	movs	r1, r4
 80067c2:	187b      	adds	r3, r7, r1
 80067c4:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 80067c6:	4b40      	ldr	r3, [pc, #256]	; (80068c8 <print+0x134>)
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	187b      	adds	r3, r7, r1
 80067cc:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 80067ce:	187b      	adds	r3, r7, r1
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 80067d4:	187b      	adds	r3, r7, r1
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	3318      	adds	r3, #24
 80067da:	ca31      	ldmia	r2!, {r0, r4, r5}
 80067dc:	c331      	stmia	r3!, {r0, r4, r5}
    if (buffer->buffer == NULL)
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d050      	beq.n	8006888 <print+0xf4>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 80067e6:	2310      	movs	r3, #16
 80067e8:	18fa      	adds	r2, r7, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	0011      	movs	r1, r2
 80067ee:	0018      	movs	r0, r3
 80067f0:	f000 f96e 	bl	8006ad0 <print_value>
 80067f4:	1e03      	subs	r3, r0, #0
 80067f6:	d049      	beq.n	800688c <print+0xf8>
    {
        goto fail;
    }
    update_offset(buffer);
 80067f8:	2310      	movs	r3, #16
 80067fa:	18fb      	adds	r3, r7, r3
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7ff fa17 	bl	8005c30 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d013      	beq.n	8006832 <print+0x9e>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689a      	ldr	r2, [r3, #8]
 800680e:	2110      	movs	r1, #16
 8006810:	187b      	adds	r3, r7, r1
 8006812:	6818      	ldr	r0, [r3, #0]
 8006814:	187b      	adds	r3, r7, r1
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	3301      	adds	r3, #1
 800681a:	0019      	movs	r1, r3
 800681c:	4790      	blx	r2
 800681e:	0003      	movs	r3, r0
 8006820:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 8006822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006824:	2b00      	cmp	r3, #0
 8006826:	d033      	beq.n	8006890 <print+0xfc>
            goto fail;
        }
        buffer->buffer = NULL;
 8006828:	2310      	movs	r3, #16
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2200      	movs	r2, #0
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	e028      	b.n	8006884 <print+0xf0>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	2310      	movs	r3, #16
 8006838:	18fb      	adds	r3, r7, r3
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	3301      	adds	r3, #1
 800683e:	0018      	movs	r0, r3
 8006840:	4790      	blx	r2
 8006842:	0003      	movs	r3, r0
 8006844:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 8006846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006848:	2b00      	cmp	r3, #0
 800684a:	d023      	beq.n	8006894 <print+0x100>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 800684c:	2010      	movs	r0, #16
 800684e:	183b      	adds	r3, r7, r0
 8006850:	6819      	ldr	r1, [r3, #0]
 8006852:	183b      	adds	r3, r7, r0
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	1c5a      	adds	r2, r3, #1
 8006858:	183b      	adds	r3, r7, r0
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	429a      	cmp	r2, r3
 800685e:	d900      	bls.n	8006862 <print+0xce>
 8006860:	001a      	movs	r2, r3
 8006862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006864:	0018      	movs	r0, r3
 8006866:	f001 fe71 	bl	800854c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 800686a:	2110      	movs	r1, #16
 800686c:	187b      	adds	r3, r7, r1
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006872:	18d3      	adds	r3, r2, r3
 8006874:	2200      	movs	r2, #0
 8006876:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	187b      	adds	r3, r7, r1
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	0018      	movs	r0, r3
 8006882:	4790      	blx	r2
    }

    return printed;
 8006884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006886:	e01b      	b.n	80068c0 <print+0x12c>
        goto fail;
 8006888:	46c0      	nop			; (mov r8, r8)
 800688a:	e004      	b.n	8006896 <print+0x102>
        goto fail;
 800688c:	46c0      	nop			; (mov r8, r8)
 800688e:	e002      	b.n	8006896 <print+0x102>
            goto fail;
 8006890:	46c0      	nop			; (mov r8, r8)
 8006892:	e000      	b.n	8006896 <print+0x102>
            goto fail;
 8006894:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8006896:	2310      	movs	r3, #16
 8006898:	18fb      	adds	r3, r7, r3
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d006      	beq.n	80068ae <print+0x11a>
    {
        hooks->deallocate(buffer->buffer);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	2310      	movs	r3, #16
 80068a6:	18fb      	adds	r3, r7, r3
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	0018      	movs	r0, r3
 80068ac:	4790      	blx	r2
    }

    if (printed != NULL)
 80068ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <print+0x12a>
    {
        hooks->deallocate(printed);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068ba:	0010      	movs	r0, r2
 80068bc:	4798      	blx	r3
    }

    return NULL;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	0018      	movs	r0, r3
 80068c2:	46bd      	mov	sp, r7
 80068c4:	b00e      	add	sp, #56	; 0x38
 80068c6:	bdb0      	pop	{r4, r5, r7, pc}
 80068c8:	08008c68 	.word	0x08008c68

080068cc <JPrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

N_CJSON_PUBLIC(char *) JPrintUnformatted(const J *item)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 80068d4:	4a05      	ldr	r2, [pc, #20]	; (80068ec <JPrintUnformatted+0x20>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2100      	movs	r1, #0
 80068da:	0018      	movs	r0, r3
 80068dc:	f7ff ff5a 	bl	8006794 <print>
 80068e0:	0003      	movs	r3, r0
}
 80068e2:	0018      	movs	r0, r3
 80068e4:	46bd      	mov	sp, r7
 80068e6:	b002      	add	sp, #8
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	46c0      	nop			; (mov r8, r8)
 80068ec:	20000058 	.word	0x20000058

080068f0 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static Jbool parse_value(J * const item, parse_buffer * const input_buffer)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b082      	sub	sp, #8
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d003      	beq.n	8006908 <parse_value+0x18>
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <parse_value+0x1c>
    {
        return false; /* no input */
 8006908:	2300      	movs	r3, #0
 800690a:	e0d7      	b.n	8006abc <parse_value+0x1cc>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d01c      	beq.n	800694c <parse_value+0x5c>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	1d1a      	adds	r2, r3, #4
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	429a      	cmp	r2, r3
 800691e:	d815      	bhi.n	800694c <parse_value+0x5c>
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	18d3      	adds	r3, r2, r3
 800692a:	4966      	ldr	r1, [pc, #408]	; (8006ac4 <parse_value+0x1d4>)
 800692c:	2204      	movs	r2, #4
 800692e:	0018      	movs	r0, r3
 8006930:	f001 fee6 	bl	8008700 <strncmp>
 8006934:	1e03      	subs	r3, r0, #0
 8006936:	d109      	bne.n	800694c <parse_value+0x5c>
    {
        item->type = JNULL;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2204      	movs	r2, #4
 800693c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	1d1a      	adds	r2, r3, #4
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	609a      	str	r2, [r3, #8]
        return true;
 8006948:	2301      	movs	r3, #1
 800694a:	e0b7      	b.n	8006abc <parse_value+0x1cc>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01c      	beq.n	800698c <parse_value+0x9c>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	1d5a      	adds	r2, r3, #5
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	429a      	cmp	r2, r3
 800695e:	d815      	bhi.n	800698c <parse_value+0x9c>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	18d3      	adds	r3, r2, r3
 800696a:	4957      	ldr	r1, [pc, #348]	; (8006ac8 <parse_value+0x1d8>)
 800696c:	2205      	movs	r2, #5
 800696e:	0018      	movs	r0, r3
 8006970:	f001 fec6 	bl	8008700 <strncmp>
 8006974:	1e03      	subs	r3, r0, #0
 8006976:	d109      	bne.n	800698c <parse_value+0x9c>
    {
        item->type = JFalse;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	1d5a      	adds	r2, r3, #5
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	609a      	str	r2, [r3, #8]
        return true;
 8006988:	2301      	movs	r3, #1
 800698a:	e097      	b.n	8006abc <parse_value+0x1cc>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d01f      	beq.n	80069d2 <parse_value+0xe2>
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	1d1a      	adds	r2, r3, #4
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	429a      	cmp	r2, r3
 800699e:	d818      	bhi.n	80069d2 <parse_value+0xe2>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	18d3      	adds	r3, r2, r3
 80069aa:	4948      	ldr	r1, [pc, #288]	; (8006acc <parse_value+0x1dc>)
 80069ac:	2204      	movs	r2, #4
 80069ae:	0018      	movs	r0, r3
 80069b0:	f001 fea6 	bl	8008700 <strncmp>
 80069b4:	1e03      	subs	r3, r0, #0
 80069b6:	d10c      	bne.n	80069d2 <parse_value+0xe2>
    {
        item->type = JTrue;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2201      	movs	r2, #1
 80069c2:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	1d1a      	adds	r2, r3, #4
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	609a      	str	r2, [r3, #8]
        return true;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e074      	b.n	8006abc <parse_value+0x1cc>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d015      	beq.n	8006a04 <parse_value+0x114>
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	689a      	ldr	r2, [r3, #8]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d20f      	bcs.n	8006a04 <parse_value+0x114>
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	18d3      	adds	r3, r2, r3
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	2b22      	cmp	r3, #34	; 0x22
 80069f2:	d107      	bne.n	8006a04 <parse_value+0x114>
    {
        return parse_string(item, input_buffer);
 80069f4:	683a      	ldr	r2, [r7, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	0011      	movs	r1, r2
 80069fa:	0018      	movs	r0, r3
 80069fc:	f7ff fb3e 	bl	800607c <parse_string>
 8006a00:	0003      	movs	r3, r0
 8006a02:	e05b      	b.n	8006abc <parse_value+0x1cc>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d025      	beq.n	8006a56 <parse_value+0x166>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d21f      	bcs.n	8006a56 <parse_value+0x166>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	18d3      	adds	r3, r2, r3
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b2d      	cmp	r3, #45	; 0x2d
 8006a24:	d00f      	beq.n	8006a46 <parse_value+0x156>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	18d3      	adds	r3, r2, r3
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b2f      	cmp	r3, #47	; 0x2f
 8006a34:	d90f      	bls.n	8006a56 <parse_value+0x166>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	18d3      	adds	r3, r2, r3
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b39      	cmp	r3, #57	; 0x39
 8006a44:	d807      	bhi.n	8006a56 <parse_value+0x166>
    {
        return parse_number(item, input_buffer);
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	0011      	movs	r1, r2
 8006a4c:	0018      	movs	r0, r3
 8006a4e:	f7fe ff95 	bl	800597c <parse_number>
 8006a52:	0003      	movs	r3, r0
 8006a54:	e032      	b.n	8006abc <parse_value+0x1cc>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d015      	beq.n	8006a88 <parse_value+0x198>
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d20f      	bcs.n	8006a88 <parse_value+0x198>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	18d3      	adds	r3, r2, r3
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b5b      	cmp	r3, #91	; 0x5b
 8006a76:	d107      	bne.n	8006a88 <parse_value+0x198>
    {
        return parse_array(item, input_buffer);
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	0011      	movs	r1, r2
 8006a7e:	0018      	movs	r0, r3
 8006a80:	f000 f8e4 	bl	8006c4c <parse_array>
 8006a84:	0003      	movs	r3, r0
 8006a86:	e019      	b.n	8006abc <parse_value+0x1cc>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d015      	beq.n	8006aba <parse_value+0x1ca>
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d20f      	bcs.n	8006aba <parse_value+0x1ca>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	18d3      	adds	r3, r2, r3
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b7b      	cmp	r3, #123	; 0x7b
 8006aa8:	d107      	bne.n	8006aba <parse_value+0x1ca>
    {
        return parse_object(item, input_buffer);
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	0011      	movs	r1, r2
 8006ab0:	0018      	movs	r0, r3
 8006ab2:	f000 fa1f 	bl	8006ef4 <parse_object>
 8006ab6:	0003      	movs	r3, r0
 8006ab8:	e000      	b.n	8006abc <parse_value+0x1cc>
    }

    return false;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	0018      	movs	r0, r3
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	b002      	add	sp, #8
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	080088a4 	.word	0x080088a4
 8006ac8:	080088b4 	.word	0x080088b4
 8006acc:	080088bc 	.word	0x080088bc

08006ad0 <print_value>:

/* Render a value to text. */
static Jbool print_value(const J * const item, printbuffer * const output_buffer)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <print_value+0x1a>
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <print_value+0x1e>
    {
        return false;
 8006aea:	2300      	movs	r3, #0
 8006aec:	e0a4      	b.n	8006c38 <print_value+0x168>
    }

    switch ((item->type) & 0xFF)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	22ff      	movs	r2, #255	; 0xff
 8006af4:	4013      	ands	r3, r2
 8006af6:	2b08      	cmp	r3, #8
 8006af8:	d057      	beq.n	8006baa <print_value+0xda>
 8006afa:	dc06      	bgt.n	8006b0a <print_value+0x3a>
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d03e      	beq.n	8006b7e <print_value+0xae>
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d010      	beq.n	8006b26 <print_value+0x56>
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d024      	beq.n	8006b52 <print_value+0x82>
 8006b08:	e095      	b.n	8006c36 <print_value+0x166>
 8006b0a:	2b20      	cmp	r3, #32
 8006b0c:	d100      	bne.n	8006b10 <print_value+0x40>
 8006b0e:	e082      	b.n	8006c16 <print_value+0x146>
 8006b10:	dc03      	bgt.n	8006b1a <print_value+0x4a>
 8006b12:	2b10      	cmp	r3, #16
 8006b14:	d100      	bne.n	8006b18 <print_value+0x48>
 8006b16:	e076      	b.n	8006c06 <print_value+0x136>
 8006b18:	e08d      	b.n	8006c36 <print_value+0x166>
 8006b1a:	2b40      	cmp	r3, #64	; 0x40
 8006b1c:	d100      	bne.n	8006b20 <print_value+0x50>
 8006b1e:	e082      	b.n	8006c26 <print_value+0x156>
 8006b20:	2b80      	cmp	r3, #128	; 0x80
 8006b22:	d04a      	beq.n	8006bba <print_value+0xea>
 8006b24:	e087      	b.n	8006c36 <print_value+0x166>
    {
        case JNULL:
            output = ensure(output_buffer, 5);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2105      	movs	r1, #5
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f7fe ffdc 	bl	8005ae8 <ensure>
 8006b30:	0003      	movs	r3, r0
 8006b32:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d101      	bne.n	8006b3e <print_value+0x6e>
            {
                return false;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	e07c      	b.n	8006c38 <print_value+0x168>
            }
            strcpy((char*)output, "null");
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	4b3f      	ldr	r3, [pc, #252]	; (8006c40 <print_value+0x170>)
 8006b42:	0010      	movs	r0, r2
 8006b44:	0019      	movs	r1, r3
 8006b46:	2305      	movs	r3, #5
 8006b48:	001a      	movs	r2, r3
 8006b4a:	f001 fcff 	bl	800854c <memcpy>
            return true;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e072      	b.n	8006c38 <print_value+0x168>

        case JFalse:
            output = ensure(output_buffer, 6);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2106      	movs	r1, #6
 8006b56:	0018      	movs	r0, r3
 8006b58:	f7fe ffc6 	bl	8005ae8 <ensure>
 8006b5c:	0003      	movs	r3, r0
 8006b5e:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <print_value+0x9a>
            {
                return false;
 8006b66:	2300      	movs	r3, #0
 8006b68:	e066      	b.n	8006c38 <print_value+0x168>
            }
            strcpy((char*)output, "false");
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	4b35      	ldr	r3, [pc, #212]	; (8006c44 <print_value+0x174>)
 8006b6e:	0010      	movs	r0, r2
 8006b70:	0019      	movs	r1, r3
 8006b72:	2306      	movs	r3, #6
 8006b74:	001a      	movs	r2, r3
 8006b76:	f001 fce9 	bl	800854c <memcpy>
            return true;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e05c      	b.n	8006c38 <print_value+0x168>

        case JTrue:
            output = ensure(output_buffer, 5);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2105      	movs	r1, #5
 8006b82:	0018      	movs	r0, r3
 8006b84:	f7fe ffb0 	bl	8005ae8 <ensure>
 8006b88:	0003      	movs	r3, r0
 8006b8a:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <print_value+0xc6>
            {
                return false;
 8006b92:	2300      	movs	r3, #0
 8006b94:	e050      	b.n	8006c38 <print_value+0x168>
            }
            strcpy((char*)output, "true");
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4b2b      	ldr	r3, [pc, #172]	; (8006c48 <print_value+0x178>)
 8006b9a:	0010      	movs	r0, r2
 8006b9c:	0019      	movs	r1, r3
 8006b9e:	2305      	movs	r3, #5
 8006ba0:	001a      	movs	r2, r3
 8006ba2:	f001 fcd3 	bl	800854c <memcpy>
            return true;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e046      	b.n	8006c38 <print_value+0x168>

        case JNumber:
            return print_number(item, output_buffer);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	0011      	movs	r1, r2
 8006bb0:	0018      	movs	r0, r3
 8006bb2:	f7ff f85f 	bl	8005c74 <print_number>
 8006bb6:	0003      	movs	r3, r0
 8006bb8:	e03e      	b.n	8006c38 <print_value+0x168>

        case JRaw:
        {
            size_t raw_length = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <print_value+0xfa>
            {
                return false;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	e036      	b.n	8006c38 <print_value+0x168>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7f9 faa2 	bl	8000118 <strlen>
 8006bd4:	0003      	movs	r3, r0
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	0011      	movs	r1, r2
 8006be0:	0018      	movs	r0, r3
 8006be2:	f7fe ff81 	bl	8005ae8 <ensure>
 8006be6:	0003      	movs	r3, r0
 8006be8:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <print_value+0x124>
            {
                return false;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e021      	b.n	8006c38 <print_value+0x168>
            }
            memcpy(output, item->valuestring, raw_length);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6919      	ldr	r1, [r3, #16]
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f001 fca5 	bl	800854c <memcpy>
            return true;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e018      	b.n	8006c38 <print_value+0x168>
        }

        case JString:
            return print_string(item, output_buffer);
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	0011      	movs	r1, r2
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7ff fc81 	bl	8006514 <print_string>
 8006c12:	0003      	movs	r3, r0
 8006c14:	e010      	b.n	8006c38 <print_value+0x168>

        case JArray:
            return print_array(item, output_buffer);
 8006c16:	683a      	ldr	r2, [r7, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	0011      	movs	r1, r2
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f000 f8db 	bl	8006dd8 <print_array>
 8006c22:	0003      	movs	r3, r0
 8006c24:	e008      	b.n	8006c38 <print_value+0x168>

        case JObject:
            return print_object(item, output_buffer);
 8006c26:	683a      	ldr	r2, [r7, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 fa63 	bl	80070f8 <print_object>
 8006c32:	0003      	movs	r3, r0
 8006c34:	e000      	b.n	8006c38 <print_value+0x168>

        default:
            return false;
 8006c36:	2300      	movs	r3, #0
    }
}
 8006c38:	0018      	movs	r0, r3
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	b004      	add	sp, #16
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	080088a4 	.word	0x080088a4
 8006c44:	080088b4 	.word	0x080088b4
 8006c48:	080088bc 	.word	0x080088bc

08006c4c <parse_array>:

/* Build an array from input text. */
static Jbool parse_array(J * const item, parse_buffer * const input_buffer)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b086      	sub	sp, #24
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* head of the linked list */
 8006c56:	2300      	movs	r3, #0
 8006c58:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	4a5c      	ldr	r2, [pc, #368]	; (8006dd4 <parse_array+0x188>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d901      	bls.n	8006c6c <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8006c68:	2300      	movs	r3, #0
 8006c6a:	e0af      	b.n	8006dcc <parse_array+0x180>
    }
    input_buffer->depth++;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	18d3      	adds	r3, r2, r3
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b5b      	cmp	r3, #91	; 0x5b
 8006c84:	d000      	beq.n	8006c88 <parse_array+0x3c>
 8006c86:	e092      	b.n	8006dae <parse_array+0x162>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	0018      	movs	r0, r3
 8006c96:	f7ff fc4e 	bl	8006536 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00d      	beq.n	8006cbc <parse_array+0x70>
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	689a      	ldr	r2, [r3, #8]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d207      	bcs.n	8006cbc <parse_array+0x70>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	18d3      	adds	r3, r2, r3
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	2b5d      	cmp	r3, #93	; 0x5d
 8006cba:	d065      	beq.n	8006d88 <parse_array+0x13c>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d005      	beq.n	8006cce <parse_array+0x82>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d305      	bcc.n	8006cda <parse_array+0x8e>
    {
        input_buffer->offset--;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	1e5a      	subs	r2, r3, #1
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	609a      	str	r2, [r3, #8]
        goto fail;
 8006cd8:	e070      	b.n	8006dbc <parse_array+0x170>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	1e5a      	subs	r2, r3, #1
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7fe fddf 	bl	80058ac <JNew_Item>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05c      	beq.n	8006db2 <parse_array+0x166>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d104      	bne.n	8006d08 <parse_array+0xbc>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	e007      	b.n	8006d18 <parse_array+0xcc>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	0018      	movs	r0, r3
 8006d26:	f7ff fc06 	bl	8006536 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	0011      	movs	r1, r2
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7ff fddd 	bl	80068f0 <parse_value>
 8006d36:	1e03      	subs	r3, r0, #0
 8006d38:	d03d      	beq.n	8006db6 <parse_array+0x16a>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7ff fbfa 	bl	8006536 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00d      	beq.n	8006d64 <parse_array+0x118>
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d207      	bcs.n	8006d64 <parse_array+0x118>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	18d3      	adds	r3, r2, r3
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b2c      	cmp	r3, #44	; 0x2c
 8006d62:	d0bf      	beq.n	8006ce4 <parse_array+0x98>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d027      	beq.n	8006dba <parse_array+0x16e>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d221      	bcs.n	8006dba <parse_array+0x16e>
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	18d3      	adds	r3, r2, r3
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	2b5d      	cmp	r3, #93	; 0x5d
 8006d84:	d119      	bne.n	8006dba <parse_array+0x16e>
    {
        goto fail; /* expected end of array */
    }

success:
 8006d86:	e000      	b.n	8006d8a <parse_array+0x13e>
        goto success;
 8006d88:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	1e5a      	subs	r2, r3, #1
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	60da      	str	r2, [r3, #12]

    item->type = JArray;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2220      	movs	r2, #32
 8006d98:	60da      	str	r2, [r3, #12]
    item->child = head;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	1c5a      	adds	r2, r3, #1
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	609a      	str	r2, [r3, #8]

    return true;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e00e      	b.n	8006dcc <parse_array+0x180>
        goto fail;
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	e004      	b.n	8006dbc <parse_array+0x170>
            goto fail; /* allocation failure */
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	e002      	b.n	8006dbc <parse_array+0x170>
            goto fail; /* failed to parse value */
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	e000      	b.n	8006dbc <parse_array+0x170>

fail:
 8006dba:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <parse_array+0x17e>
    {
        JDelete(head);
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	0018      	movs	r0, r3
 8006dc6:	f7fe fd89 	bl	80058dc <JDelete>
    }

    return false;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	0018      	movs	r0, r3
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b006      	add	sp, #24
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	000003e7 	.word	0x000003e7

08006dd8 <print_array>:

/* Render an array to text */
static Jbool print_array(const J * const item, printbuffer * const output_buffer)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b086      	sub	sp, #24
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8006de2:	2300      	movs	r3, #0
 8006de4:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
    J *current_element = item->child;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d101      	bne.n	8006dfa <print_array+0x22>
    {
        return false;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e078      	b.n	8006eec <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	0018      	movs	r0, r3
 8006e00:	f7fe fe72 	bl	8005ae8 <ensure>
 8006e04:	0003      	movs	r3, r0
 8006e06:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d101      	bne.n	8006e12 <print_array+0x3a>
    {
        return false;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	e06c      	b.n	8006eec <print_array+0x114>
    }

    *output_pointer = '[';
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	225b      	movs	r2, #91	; 0x5b
 8006e16:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	1c5a      	adds	r2, r3, #1
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8006e2c:	e041      	b.n	8006eb2 <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	0011      	movs	r1, r2
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7ff fe4b 	bl	8006ad0 <print_value>
 8006e3a:	1e03      	subs	r3, r0, #0
 8006e3c:	d101      	bne.n	8006e42 <print_array+0x6a>
        {
            return false;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	e054      	b.n	8006eec <print_array+0x114>
        }
        update_offset(output_buffer);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7fe fef3 	bl	8005c30 <update_offset>
        if (current_element->next)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d02c      	beq.n	8006eac <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <print_array+0x86>
 8006e5a:	2302      	movs	r3, #2
 8006e5c:	e000      	b.n	8006e60 <print_array+0x88>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	0011      	movs	r1, r2
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	f7fe fe3c 	bl	8005ae8 <ensure>
 8006e70:	0003      	movs	r3, r0
 8006e72:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d101      	bne.n	8006e7e <print_array+0xa6>
            {
                return false;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e036      	b.n	8006eec <print_array+0x114>
            }
            *output_pointer++ = ',';
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	617a      	str	r2, [r7, #20]
 8006e84:	222c      	movs	r2, #44	; 0x2c
 8006e86:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	695b      	ldr	r3, [r3, #20]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d004      	beq.n	8006e9a <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	1c5a      	adds	r2, r3, #1
 8006e94:	617a      	str	r2, [r7, #20]
 8006e96:	2220      	movs	r2, #32
 8006e98:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	18d2      	adds	r2, r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d1ba      	bne.n	8006e2e <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	2102      	movs	r1, #2
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f7fe fe13 	bl	8005ae8 <ensure>
 8006ec2:	0003      	movs	r3, r0
 8006ec4:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d101      	bne.n	8006ed0 <print_array+0xf8>
    {
        return false;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e00d      	b.n	8006eec <print_array+0x114>
    }
    *output_pointer++ = ']';
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	617a      	str	r2, [r7, #20]
 8006ed6:	225d      	movs	r2, #93	; 0x5d
 8006ed8:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2200      	movs	r2, #0
 8006ede:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	60da      	str	r2, [r3, #12]

    return true;
 8006eea:	2301      	movs	r3, #1
}
 8006eec:	0018      	movs	r0, r3
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	b006      	add	sp, #24
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <parse_object>:

/* Build an object from the text. */
static Jbool parse_object(J * const item, parse_buffer * const input_buffer)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
    J *head = NULL; /* linked list head */
 8006efe:	2300      	movs	r3, #0
 8006f00:	617b      	str	r3, [r7, #20]
    J *current_item = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= N_CJSON_NESTING_LIMIT)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	4a7a      	ldr	r2, [pc, #488]	; (80070f4 <parse_object+0x200>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d901      	bls.n	8006f14 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8006f10:	2300      	movs	r3, #0
 8006f12:	e0ea      	b.n	80070ea <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	1c5a      	adds	r2, r3, #1
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d100      	bne.n	8006f26 <parse_object+0x32>
 8006f24:	e0d2      	b.n	80070cc <parse_object+0x1d8>
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	d300      	bcc.n	8006f34 <parse_object+0x40>
 8006f32:	e0cb      	b.n	80070cc <parse_object+0x1d8>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	689b      	ldr	r3, [r3, #8]
 8006f3c:	18d3      	adds	r3, r2, r3
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b7b      	cmp	r3, #123	; 0x7b
 8006f42:	d000      	beq.n	8006f46 <parse_object+0x52>
 8006f44:	e0c2      	b.n	80070cc <parse_object+0x1d8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	0018      	movs	r0, r3
 8006f54:	f7ff faef 	bl	8006536 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00e      	beq.n	8006f7c <parse_object+0x88>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d208      	bcs.n	8006f7c <parse_object+0x88>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	689b      	ldr	r3, [r3, #8]
 8006f72:	18d3      	adds	r3, r2, r3
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b7d      	cmp	r3, #125	; 0x7d
 8006f78:	d100      	bne.n	8006f7c <parse_object+0x88>
 8006f7a:	e094      	b.n	80070a6 <parse_object+0x1b2>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d005      	beq.n	8006f8e <parse_object+0x9a>
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d305      	bcc.n	8006f9a <parse_object+0xa6>
    {
        input_buffer->offset--;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	1e5a      	subs	r2, r3, #1
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	609a      	str	r2, [r3, #8]
        goto fail;
 8006f98:	e09f      	b.n	80070da <parse_object+0x1e6>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        J *new_item = JNew_Item(&(input_buffer->hooks));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	3310      	adds	r3, #16
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f7fe fc7f 	bl	80058ac <JNew_Item>
 8006fae:	0003      	movs	r3, r0
 8006fb0:	60fb      	str	r3, [r7, #12]
        if (new_item == NULL)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d100      	bne.n	8006fba <parse_object+0xc6>
 8006fb8:	e08a      	b.n	80070d0 <parse_object+0x1dc>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d104      	bne.n	8006fca <parse_object+0xd6>
        {
            /* start the linked list */
            current_item = head = new_item;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	e007      	b.n	8006fda <parse_object+0xe6>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	1c5a      	adds	r2, r3, #1
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7ff faa5 	bl	8006536 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8006fec:	683a      	ldr	r2, [r7, #0]
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	0011      	movs	r1, r2
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	f7ff f842 	bl	800607c <parse_string>
 8006ff8:	1e03      	subs	r3, r0, #0
 8006ffa:	d100      	bne.n	8006ffe <parse_object+0x10a>
 8006ffc:	e06a      	b.n	80070d4 <parse_object+0x1e0>
        {
            goto fail; /* faile to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	0018      	movs	r0, r3
 8007002:	f7ff fa98 	bl	8006536 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	691a      	ldr	r2, [r3, #16]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 800700e:	693b      	ldr	r3, [r7, #16]
 8007010:	2200      	movs	r2, #0
 8007012:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d058      	beq.n	80070cc <parse_object+0x1d8>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	429a      	cmp	r2, r3
 8007024:	d252      	bcs.n	80070cc <parse_object+0x1d8>
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	18d3      	adds	r3, r2, r3
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b3a      	cmp	r3, #58	; 0x3a
 8007034:	d14a      	bne.n	80070cc <parse_object+0x1d8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	1c5a      	adds	r2, r3, #1
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	0018      	movs	r0, r3
 8007044:	f7ff fa77 	bl	8006536 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	0011      	movs	r1, r2
 800704e:	0018      	movs	r0, r3
 8007050:	f7ff fc4e 	bl	80068f0 <parse_value>
 8007054:	1e03      	subs	r3, r0, #0
 8007056:	d03f      	beq.n	80070d8 <parse_object+0x1e4>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	0018      	movs	r0, r3
 800705c:	f7ff fa6b 	bl	8006536 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d00d      	beq.n	8007082 <parse_object+0x18e>
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689a      	ldr	r2, [r3, #8]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	429a      	cmp	r2, r3
 8007070:	d207      	bcs.n	8007082 <parse_object+0x18e>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	18d3      	adds	r3, r2, r3
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	2b2c      	cmp	r3, #44	; 0x2c
 8007080:	d090      	beq.n	8006fa4 <parse_object+0xb0>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d021      	beq.n	80070cc <parse_object+0x1d8>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	d21b      	bcs.n	80070cc <parse_object+0x1d8>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	18d3      	adds	r3, r2, r3
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	2b7d      	cmp	r3, #125	; 0x7d
 80070a2:	d113      	bne.n	80070cc <parse_object+0x1d8>
    {
        goto fail; /* expected end of object */
    }

success:
 80070a4:	e000      	b.n	80070a8 <parse_object+0x1b4>
        goto success; /* empty object */
 80070a6:	46c0      	nop			; (mov r8, r8)
    input_buffer->depth--;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	1e5a      	subs	r2, r3, #1
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	60da      	str	r2, [r3, #12]

    item->type = JObject;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2240      	movs	r2, #64	; 0x40
 80070b6:	60da      	str	r2, [r3, #12]
    item->child = head;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	1c5a      	adds	r2, r3, #1
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	609a      	str	r2, [r3, #8]
    return true;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e00e      	b.n	80070ea <parse_object+0x1f6>

fail:
 80070cc:	46c0      	nop			; (mov r8, r8)
 80070ce:	e004      	b.n	80070da <parse_object+0x1e6>
            goto fail; /* allocation failure */
 80070d0:	46c0      	nop			; (mov r8, r8)
 80070d2:	e002      	b.n	80070da <parse_object+0x1e6>
            goto fail; /* faile to parse name */
 80070d4:	46c0      	nop			; (mov r8, r8)
 80070d6:	e000      	b.n	80070da <parse_object+0x1e6>
            goto fail; /* failed to parse value */
 80070d8:	46c0      	nop			; (mov r8, r8)
    if (head != NULL)
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d003      	beq.n	80070e8 <parse_object+0x1f4>
    {
        JDelete(head);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	0018      	movs	r0, r3
 80070e4:	f7fe fbfa 	bl	80058dc <JDelete>
    }

    return false;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	0018      	movs	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	b006      	add	sp, #24
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	000003e7 	.word	0x000003e7

080070f8 <print_object>:

/* Render an object to text. */
static Jbool print_object(const J * const item, printbuffer * const output_buffer)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
    J *current_item = item->child;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <print_object+0x22>
    {
        return false;
 8007116:	2300      	movs	r3, #0
 8007118:	e113      	b.n	8007342 <print_object+0x24a>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <print_object+0x2e>
 8007122:	2302      	movs	r3, #2
 8007124:	e000      	b.n	8007128 <print_object+0x30>
 8007126:	2301      	movs	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	0011      	movs	r1, r2
 8007132:	0018      	movs	r0, r3
 8007134:	f7fe fcd8 	bl	8005ae8 <ensure>
 8007138:	0003      	movs	r3, r0
 800713a:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <print_object+0x4e>
    {
        return false;
 8007142:	2300      	movs	r3, #0
 8007144:	e0fd      	b.n	8007342 <print_object+0x24a>
    }

    *output_pointer++ = '{';
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	1c5a      	adds	r2, r3, #1
 800714a:	61fa      	str	r2, [r7, #28]
 800714c:	227b      	movs	r2, #123	; 0x7b
 800714e:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	1c5a      	adds	r2, r3, #1
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d004      	beq.n	800716c <print_object+0x74>
    {
        *output_pointer++ = '\n';
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	61fa      	str	r2, [r7, #28]
 8007168:	220a      	movs	r2, #10
 800716a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	689a      	ldr	r2, [r3, #8]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	18d2      	adds	r2, r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	609a      	str	r2, [r3, #8]

    while (current_item)
 8007178:	e0a7      	b.n	80072ca <print_object+0x1d2>
    {
        if (output_buffer->format)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d024      	beq.n	80071cc <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68da      	ldr	r2, [r3, #12]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	0011      	movs	r1, r2
 800718a:	0018      	movs	r0, r3
 800718c:	f7fe fcac 	bl	8005ae8 <ensure>
 8007190:	0003      	movs	r3, r0
 8007192:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <print_object+0xa6>
            {
                return false;
 800719a:	2300      	movs	r3, #0
 800719c:	e0d1      	b.n	8007342 <print_object+0x24a>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	617b      	str	r3, [r7, #20]
 80071a2:	e007      	b.n	80071b4 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	61fa      	str	r2, [r7, #28]
 80071aa:	2209      	movs	r2, #9
 80071ac:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	3301      	adds	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	697a      	ldr	r2, [r7, #20]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d3f2      	bcc.n	80071a4 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	18d2      	adds	r2, r2, r3
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	0011      	movs	r1, r2
 80071d4:	0018      	movs	r0, r3
 80071d6:	f7ff f89f 	bl	8006318 <print_string_ptr>
 80071da:	1e03      	subs	r3, r0, #0
 80071dc:	d101      	bne.n	80071e2 <print_object+0xea>
        {
            return false;
 80071de:	2300      	movs	r3, #0
 80071e0:	e0af      	b.n	8007342 <print_object+0x24a>
        }
        update_offset(output_buffer);
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	0018      	movs	r0, r3
 80071e6:	f7fe fd23 	bl	8005c30 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	695b      	ldr	r3, [r3, #20]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d001      	beq.n	80071f6 <print_object+0xfe>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e000      	b.n	80071f8 <print_object+0x100>
 80071f6:	2301      	movs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	0011      	movs	r1, r2
 8007200:	0018      	movs	r0, r3
 8007202:	f7fe fc71 	bl	8005ae8 <ensure>
 8007206:	0003      	movs	r3, r0
 8007208:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d101      	bne.n	8007214 <print_object+0x11c>
        {
            return false;
 8007210:	2300      	movs	r3, #0
 8007212:	e096      	b.n	8007342 <print_object+0x24a>
        }
        *output_pointer++ = ':';
 8007214:	69fb      	ldr	r3, [r7, #28]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	61fa      	str	r2, [r7, #28]
 800721a:	223a      	movs	r2, #58	; 0x3a
 800721c:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d004      	beq.n	8007230 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	61fa      	str	r2, [r7, #28]
 800722c:	2209      	movs	r2, #9
 800722e:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	18d2      	adds	r2, r2, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	0011      	movs	r1, r2
 8007242:	0018      	movs	r0, r3
 8007244:	f7ff fc44 	bl	8006ad0 <print_value>
 8007248:	1e03      	subs	r3, r0, #0
 800724a:	d101      	bne.n	8007250 <print_object+0x158>
        {
            return false;
 800724c:	2300      	movs	r3, #0
 800724e:	e078      	b.n	8007342 <print_object+0x24a>
        }
        update_offset(output_buffer);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	0018      	movs	r0, r3
 8007254:	f7fe fcec 	bl	8005c30 <update_offset>

        /* print comma if not last */
        length = (size_t) ((output_buffer->format ? 1 : 0) + (current_item->next ? 1 : 0));
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	695b      	ldr	r3, [r3, #20]
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	4193      	sbcs	r3, r2
 8007260:	b2db      	uxtb	r3, r3
 8007262:	001a      	movs	r2, r3
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	1e59      	subs	r1, r3, #1
 800726a:	418b      	sbcs	r3, r1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	18d3      	adds	r3, r2, r3
 8007270:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	0011      	movs	r1, r2
 800727a:	0018      	movs	r0, r3
 800727c:	f7fe fc34 	bl	8005ae8 <ensure>
 8007280:	0003      	movs	r3, r0
 8007282:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <print_object+0x196>
        {
            return false;
 800728a:	2300      	movs	r3, #0
 800728c:	e059      	b.n	8007342 <print_object+0x24a>
        }
        if (current_item->next)
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <print_object+0x1a8>
        {
            *output_pointer++ = ',';
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	61fa      	str	r2, [r7, #28]
 800729c:	222c      	movs	r2, #44	; 0x2c
 800729e:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	695b      	ldr	r3, [r3, #20]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <print_object+0x1ba>
        {
            *output_pointer++ = '\n';
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	1c5a      	adds	r2, r3, #1
 80072ac:	61fa      	str	r2, [r7, #28]
 80072ae:	220a      	movs	r2, #10
 80072b0:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	18d2      	adds	r2, r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d000      	beq.n	80072d2 <print_object+0x1da>
 80072d0:	e753      	b.n	800717a <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <print_object+0x1ea>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	e000      	b.n	80072e4 <print_object+0x1ec>
 80072e2:	2302      	movs	r3, #2
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	0019      	movs	r1, r3
 80072e8:	0010      	movs	r0, r2
 80072ea:	f7fe fbfd 	bl	8005ae8 <ensure>
 80072ee:	0003      	movs	r3, r0
 80072f0:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <print_object+0x204>
    {
        return false;
 80072f8:	2300      	movs	r3, #0
 80072fa:	e022      	b.n	8007342 <print_object+0x24a>
    }
    if (output_buffer->format)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <print_object+0x22e>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
 8007308:	e007      	b.n	800731a <print_object+0x222>
        {
            *output_pointer++ = '\t';
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	61fa      	str	r2, [r7, #28]
 8007310:	2209      	movs	r2, #9
 8007312:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	3301      	adds	r3, #1
 8007318:	613b      	str	r3, [r7, #16]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	3b01      	subs	r3, #1
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	429a      	cmp	r2, r3
 8007324:	d3f1      	bcc.n	800730a <print_object+0x212>
        }
    }
    *output_pointer++ = '}';
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	1c5a      	adds	r2, r3, #1
 800732a:	61fa      	str	r2, [r7, #28]
 800732c:	227d      	movs	r2, #125	; 0x7d
 800732e:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2200      	movs	r2, #0
 8007334:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
 800733a:	1e5a      	subs	r2, r3, #1
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	60da      	str	r2, [r3, #12]

    return true;
 8007340:	2301      	movs	r3, #1
}
 8007342:	0018      	movs	r0, r3
 8007344:	46bd      	mov	sp, r7
 8007346:	b008      	add	sp, #32
 8007348:	bd80      	pop	{r7, pc}

0800734a <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static J *get_object_item(const J * const object, const char * const name, const Jbool case_sensitive)
{
 800734a:	b580      	push	{r7, lr}
 800734c:	b086      	sub	sp, #24
 800734e:	af00      	add	r7, sp, #0
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	60b9      	str	r1, [r7, #8]
 8007354:	607a      	str	r2, [r7, #4]
    J *current_element = NULL;
 8007356:	2300      	movs	r3, #0
 8007358:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <get_object_item+0x1c>
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <get_object_item+0x20>
    {
        return NULL;
 8007366:	2300      	movs	r3, #0
 8007368:	e026      	b.n	80073b8 <get_object_item+0x6e>
    }

    current_element = object->child;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d013      	beq.n	800739e <get_object_item+0x54>
    {
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 8007376:	e002      	b.n	800737e <get_object_item+0x34>
        {
            current_element = current_element->next;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (strcmp(name, current_element->string) != 0))
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d018      	beq.n	80073b6 <get_object_item+0x6c>
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	6a1a      	ldr	r2, [r3, #32]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	0011      	movs	r1, r2
 800738c:	0018      	movs	r0, r3
 800738e:	f7f8 feb9 	bl	8000104 <strcmp>
 8007392:	1e03      	subs	r3, r0, #0
 8007394:	d1f0      	bne.n	8007378 <get_object_item+0x2e>
 8007396:	e00e      	b.n	80073b6 <get_object_item+0x6c>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d008      	beq.n	80073b6 <get_object_item+0x6c>
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	6a1a      	ldr	r2, [r3, #32]
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	0011      	movs	r1, r2
 80073ac:	0018      	movs	r0, r3
 80073ae:	f7fe f9b1 	bl	8005714 <case_insensitive_strcmp>
 80073b2:	1e03      	subs	r3, r0, #0
 80073b4:	d1f0      	bne.n	8007398 <get_object_item+0x4e>
        }
    }

    return current_element;
 80073b6:	697b      	ldr	r3, [r7, #20]
}
 80073b8:	0018      	movs	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b006      	add	sp, #24
 80073be:	bd80      	pop	{r7, pc}

080073c0 <JGetObjectItem>:

N_CJSON_PUBLIC(J *) JGetObjectItem(const J * const object, const char * const string)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	0018      	movs	r0, r3
 80073d2:	f7ff ffba 	bl	800734a <get_object_item>
 80073d6:	0003      	movs	r3, r0
}
 80073d8:	0018      	movs	r0, r3
 80073da:	46bd      	mov	sp, r7
 80073dc:	b002      	add	sp, #8
 80073de:	bd80      	pop	{r7, pc}

080073e0 <suffix_object>:
    return JGetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(J *prev, J *item)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
    prev->next = item;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	683a      	ldr	r2, [r7, #0]
 80073ee:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	605a      	str	r2, [r3, #4]
}
 80073f6:	46c0      	nop			; (mov r8, r8)
 80073f8:	46bd      	mov	sp, r7
 80073fa:	b002      	add	sp, #8
 80073fc:	bd80      	pop	{r7, pc}

080073fe <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static Jbool add_item_to_array(J *array, J *item)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
    J *child = NULL;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL))
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <add_item_to_array+0x1a>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <add_item_to_array+0x1e>
    {
        return false;
 8007418:	2300      	movs	r3, #0
 800741a:	e017      	b.n	800744c <add_item_to_array+0x4e>
    }

    child = array->child;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	60fb      	str	r3, [r7, #12]

    if (child == NULL)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d106      	bne.n	8007436 <add_item_to_array+0x38>
    {
        /* list is empty, start new one */
        array->child = item;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	609a      	str	r2, [r3, #8]
 800742e:	e00c      	b.n	800744a <add_item_to_array+0x4c>
    else
    {
        /* append to the end */
        while (child->next)
        {
            child = child->next;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	60fb      	str	r3, [r7, #12]
        while (child->next)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1f8      	bne.n	8007430 <add_item_to_array+0x32>
        }
        suffix_object(child, item);
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	0011      	movs	r1, r2
 8007444:	0018      	movs	r0, r3
 8007446:	f7ff ffcb 	bl	80073e0 <suffix_object>
    }

    return true;
 800744a:	2301      	movs	r3, #1
}
 800744c:	0018      	movs	r0, r3
 800744e:	46bd      	mov	sp, r7
 8007450:	b004      	add	sp, #16
 8007452:	bd80      	pop	{r7, pc}

08007454 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800745c:	687b      	ldr	r3, [r7, #4]
}
 800745e:	0018      	movs	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	b002      	add	sp, #8
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static Jbool add_item_to_object(J * const object, const char * const string, J * const item, const internal_hooks * const hooks, const Jbool constant_key)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
    int new_type = JInvalid;
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d005      	beq.n	8007490 <add_item_to_object+0x28>
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d002      	beq.n	8007490 <add_item_to_object+0x28>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d101      	bne.n	8007494 <add_item_to_object+0x2c>
    {
        return false;
 8007490:	2300      	movs	r3, #0
 8007492:	e03e      	b.n	8007512 <add_item_to_object+0xaa>
    }

    if (constant_key)
 8007494:	6a3b      	ldr	r3, [r7, #32]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00c      	beq.n	80074b4 <add_item_to_object+0x4c>
    {
        new_key = (char*)cast_away_const(string);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	0018      	movs	r0, r3
 800749e:	f7ff ffd9 	bl	8007454 <cast_away_const>
 80074a2:	0003      	movs	r3, r0
 80074a4:	617b      	str	r3, [r7, #20]
        new_type = item->type | JStringIsConst;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	2280      	movs	r2, #128	; 0x80
 80074ac:	0092      	lsls	r2, r2, #2
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	e011      	b.n	80074d8 <add_item_to_object+0x70>
    }
    else
    {
        new_key = (char*)Jstrdup((const unsigned char*)string, hooks);
 80074b4:	683a      	ldr	r2, [r7, #0]
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	0011      	movs	r1, r2
 80074ba:	0018      	movs	r0, r3
 80074bc:	f7fe f9ba 	bl	8005834 <Jstrdup>
 80074c0:	0003      	movs	r3, r0
 80074c2:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <add_item_to_object+0x66>
        {
            return false;
 80074ca:	2300      	movs	r3, #0
 80074cc:	e021      	b.n	8007512 <add_item_to_object+0xaa>
        }

        new_type = item->type & ~JStringIsConst;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	4a12      	ldr	r2, [pc, #72]	; (800751c <add_item_to_object+0xb4>)
 80074d4:	4013      	ands	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & JStringIsConst) && (item->string != NULL))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	68da      	ldr	r2, [r3, #12]
 80074dc:	2380      	movs	r3, #128	; 0x80
 80074de:	009b      	lsls	r3, r3, #2
 80074e0:	4013      	ands	r3, r2
 80074e2:	d109      	bne.n	80074f8 <add_item_to_object+0x90>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <add_item_to_object+0x90>
    {
        hooks->deallocate(item->string);
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a1b      	ldr	r3, [r3, #32]
 80074f4:	0018      	movs	r0, r3
 80074f6:	4790      	blx	r2
    }

    item->string = new_key;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	697a      	ldr	r2, [r7, #20]
 80074fc:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	693a      	ldr	r2, [r7, #16]
 8007502:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	0011      	movs	r1, r2
 800750a:	0018      	movs	r0, r3
 800750c:	f7ff ff77 	bl	80073fe <add_item_to_array>
 8007510:	0003      	movs	r3, r0
}
 8007512:	0018      	movs	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	b006      	add	sp, #24
 8007518:	bd80      	pop	{r7, pc}
 800751a:	46c0      	nop			; (mov r8, r8)
 800751c:	fffffdff 	.word	0xfffffdff

08007520 <JAddItemToObject>:

N_CJSON_PUBLIC(void) JAddItemToObject(J *object, const char *string, J *item)
{
 8007520:	b590      	push	{r4, r7, lr}
 8007522:	b087      	sub	sp, #28
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	607a      	str	r2, [r7, #4]
    add_item_to_object(object, string, item, &global_hooks, false);
 800752c:	4c06      	ldr	r4, [pc, #24]	; (8007548 <JAddItemToObject+0x28>)
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68b9      	ldr	r1, [r7, #8]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	2300      	movs	r3, #0
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	0023      	movs	r3, r4
 800753a:	f7ff ff95 	bl	8007468 <add_item_to_object>
}
 800753e:	46c0      	nop			; (mov r8, r8)
 8007540:	46bd      	mov	sp, r7
 8007542:	b005      	add	sp, #20
 8007544:	bd90      	pop	{r4, r7, pc}
 8007546:	46c0      	nop			; (mov r8, r8)
 8007548:	20000058 	.word	0x20000058

0800754c <JAddBoolToObject>:
    JDelete(false_item);
    return NULL;
}

N_CJSON_PUBLIC(J*) JAddBoolToObject(J * const object, const char * const name, const Jbool boolean)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b089      	sub	sp, #36	; 0x24
 8007550:	af02      	add	r7, sp, #8
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
    J *bool_item = JCreateBool(boolean);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	0018      	movs	r0, r3
 800755c:	f000 f866 	bl	800762c <JCreateBool>
 8007560:	0003      	movs	r3, r0
 8007562:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, bool_item, &global_hooks, false))
 8007564:	4c0a      	ldr	r4, [pc, #40]	; (8007590 <JAddBoolToObject+0x44>)
 8007566:	697a      	ldr	r2, [r7, #20]
 8007568:	68b9      	ldr	r1, [r7, #8]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	2300      	movs	r3, #0
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	0023      	movs	r3, r4
 8007572:	f7ff ff79 	bl	8007468 <add_item_to_object>
 8007576:	1e03      	subs	r3, r0, #0
 8007578:	d001      	beq.n	800757e <JAddBoolToObject+0x32>
    {
        return bool_item;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	e004      	b.n	8007588 <JAddBoolToObject+0x3c>
    }

    JDelete(bool_item);
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	0018      	movs	r0, r3
 8007582:	f7fe f9ab 	bl	80058dc <JDelete>
    return NULL;
 8007586:	2300      	movs	r3, #0
}
 8007588:	0018      	movs	r0, r3
 800758a:	46bd      	mov	sp, r7
 800758c:	b007      	add	sp, #28
 800758e:	bd90      	pop	{r4, r7, pc}
 8007590:	20000058 	.word	0x20000058

08007594 <JAddNumberToObject>:

N_CJSON_PUBLIC(J*) JAddNumberToObject(J * const object, const char * const name, const double number)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b089      	sub	sp, #36	; 0x24
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	603a      	str	r2, [r7, #0]
 80075a0:	607b      	str	r3, [r7, #4]
    J *number_item = JCreateNumber(number);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	687c      	ldr	r4, [r7, #4]
 80075a6:	0018      	movs	r0, r3
 80075a8:	0021      	movs	r1, r4
 80075aa:	f000 f85b 	bl	8007664 <JCreateNumber>
 80075ae:	0003      	movs	r3, r0
 80075b0:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80075b2:	4c0b      	ldr	r4, [pc, #44]	; (80075e0 <JAddNumberToObject+0x4c>)
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	68b9      	ldr	r1, [r7, #8]
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	0023      	movs	r3, r4
 80075c0:	f7ff ff52 	bl	8007468 <add_item_to_object>
 80075c4:	1e03      	subs	r3, r0, #0
 80075c6:	d001      	beq.n	80075cc <JAddNumberToObject+0x38>
    {
        return number_item;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	e004      	b.n	80075d6 <JAddNumberToObject+0x42>
    }

    JDelete(number_item);
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	0018      	movs	r0, r3
 80075d0:	f7fe f984 	bl	80058dc <JDelete>
    return NULL;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	0018      	movs	r0, r3
 80075d8:	46bd      	mov	sp, r7
 80075da:	b007      	add	sp, #28
 80075dc:	bd90      	pop	{r4, r7, pc}
 80075de:	46c0      	nop			; (mov r8, r8)
 80075e0:	20000058 	.word	0x20000058

080075e4 <JAddStringToObject>:

N_CJSON_PUBLIC(J*) JAddStringToObject(J * const object, const char * const name, const char * const string)
{
 80075e4:	b590      	push	{r4, r7, lr}
 80075e6:	b089      	sub	sp, #36	; 0x24
 80075e8:	af02      	add	r7, sp, #8
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
    J *string_item = JCreateString(string);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	0018      	movs	r0, r3
 80075f4:	f000 f87c 	bl	80076f0 <JCreateString>
 80075f8:	0003      	movs	r3, r0
 80075fa:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80075fc:	4c0a      	ldr	r4, [pc, #40]	; (8007628 <JAddStringToObject+0x44>)
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	68b9      	ldr	r1, [r7, #8]
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	2300      	movs	r3, #0
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	0023      	movs	r3, r4
 800760a:	f7ff ff2d 	bl	8007468 <add_item_to_object>
 800760e:	1e03      	subs	r3, r0, #0
 8007610:	d001      	beq.n	8007616 <JAddStringToObject+0x32>
    {
        return string_item;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	e004      	b.n	8007620 <JAddStringToObject+0x3c>
    }

    JDelete(string_item);
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	0018      	movs	r0, r3
 800761a:	f7fe f95f 	bl	80058dc <JDelete>
    return NULL;
 800761e:	2300      	movs	r3, #0
}
 8007620:	0018      	movs	r0, r3
 8007622:	46bd      	mov	sp, r7
 8007624:	b007      	add	sp, #28
 8007626:	bd90      	pop	{r4, r7, pc}
 8007628:	20000058 	.word	0x20000058

0800762c <JCreateBool>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateBool(Jbool b)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 8007634:	4b0a      	ldr	r3, [pc, #40]	; (8007660 <JCreateBool+0x34>)
 8007636:	0018      	movs	r0, r3
 8007638:	f7fe f938 	bl	80058ac <JNew_Item>
 800763c:	0003      	movs	r3, r0
 800763e:	60fb      	str	r3, [r7, #12]
    if(item)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <JCreateBool+0x2a>
    {
        item->type = b ? JTrue : JFalse;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <JCreateBool+0x24>
 800764c:	2202      	movs	r2, #2
 800764e:	e000      	b.n	8007652 <JCreateBool+0x26>
 8007650:	2201      	movs	r2, #1
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	60da      	str	r2, [r3, #12]
    }

    return item;
 8007656:	68fb      	ldr	r3, [r7, #12]
}
 8007658:	0018      	movs	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	b004      	add	sp, #16
 800765e:	bd80      	pop	{r7, pc}
 8007660:	20000058 	.word	0x20000058

08007664 <JCreateNumber>:

N_CJSON_PUBLIC(J *) JCreateNumber(double num)
{
 8007664:	b590      	push	{r4, r7, lr}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6038      	str	r0, [r7, #0]
 800766c:	6079      	str	r1, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 800766e:	4b1b      	ldr	r3, [pc, #108]	; (80076dc <JCreateNumber+0x78>)
 8007670:	0018      	movs	r0, r3
 8007672:	f7fe f91b 	bl	80058ac <JNew_Item>
 8007676:	0003      	movs	r3, r0
 8007678:	60fb      	str	r3, [r7, #12]
    if(item)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d027      	beq.n	80076d0 <JCreateNumber+0x6c>
    {
        item->type = JNumber;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2208      	movs	r2, #8
 8007684:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	687c      	ldr	r4, [r7, #4]
 800768c:	6193      	str	r3, [r2, #24]
 800768e:	61d4      	str	r4, [r2, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8007690:	4a13      	ldr	r2, [pc, #76]	; (80076e0 <JCreateNumber+0x7c>)
 8007692:	4b14      	ldr	r3, [pc, #80]	; (80076e4 <JCreateNumber+0x80>)
 8007694:	6838      	ldr	r0, [r7, #0]
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	f7f8 fef0 	bl	800047c <__aeabi_dcmpge>
 800769c:	1e03      	subs	r3, r0, #0
 800769e:	d003      	beq.n	80076a8 <JCreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	4a11      	ldr	r2, [pc, #68]	; (80076e8 <JCreateNumber+0x84>)
 80076a4:	615a      	str	r2, [r3, #20]
 80076a6:	e013      	b.n	80076d0 <JCreateNumber+0x6c>
        }
        else if (num <= INT_MIN)
 80076a8:	2200      	movs	r2, #0
 80076aa:	4b10      	ldr	r3, [pc, #64]	; (80076ec <JCreateNumber+0x88>)
 80076ac:	6838      	ldr	r0, [r7, #0]
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	f7f8 fed0 	bl	8000454 <__aeabi_dcmple>
 80076b4:	1e03      	subs	r3, r0, #0
 80076b6:	d004      	beq.n	80076c2 <JCreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2280      	movs	r2, #128	; 0x80
 80076bc:	0612      	lsls	r2, r2, #24
 80076be:	615a      	str	r2, [r3, #20]
 80076c0:	e006      	b.n	80076d0 <JCreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 80076c2:	6838      	ldr	r0, [r7, #0]
 80076c4:	6879      	ldr	r1, [r7, #4]
 80076c6:	f7fa fbe1 	bl	8001e8c <__aeabi_d2iz>
 80076ca:	0002      	movs	r2, r0
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 80076d0:	68fb      	ldr	r3, [r7, #12]
}
 80076d2:	0018      	movs	r0, r3
 80076d4:	46bd      	mov	sp, r7
 80076d6:	b005      	add	sp, #20
 80076d8:	bd90      	pop	{r4, r7, pc}
 80076da:	46c0      	nop			; (mov r8, r8)
 80076dc:	20000058 	.word	0x20000058
 80076e0:	ffc00000 	.word	0xffc00000
 80076e4:	41dfffff 	.word	0x41dfffff
 80076e8:	7fffffff 	.word	0x7fffffff
 80076ec:	c1e00000 	.word	0xc1e00000

080076f0 <JCreateString>:

N_CJSON_PUBLIC(J *) JCreateString(const char *string)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
    J *item = JNew_Item(&global_hooks);
 80076f8:	4b11      	ldr	r3, [pc, #68]	; (8007740 <JCreateString+0x50>)
 80076fa:	0018      	movs	r0, r3
 80076fc:	f7fe f8d6 	bl	80058ac <JNew_Item>
 8007700:	0003      	movs	r3, r0
 8007702:	60fb      	str	r3, [r7, #12]
    if(item)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d015      	beq.n	8007736 <JCreateString+0x46>
    {
        item->type = JString;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2210      	movs	r2, #16
 800770e:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)Jstrdup((const unsigned char*)string, &global_hooks);
 8007710:	4a0b      	ldr	r2, [pc, #44]	; (8007740 <JCreateString+0x50>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	0011      	movs	r1, r2
 8007716:	0018      	movs	r0, r3
 8007718:	f7fe f88c 	bl	8005834 <Jstrdup>
 800771c:	0002      	movs	r2, r0
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d105      	bne.n	8007736 <JCreateString+0x46>
        {
            JDelete(item);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	0018      	movs	r0, r3
 800772e:	f7fe f8d5 	bl	80058dc <JDelete>
            return NULL;
 8007732:	2300      	movs	r3, #0
 8007734:	e000      	b.n	8007738 <JCreateString+0x48>
        }
    }

    return item;
 8007736:	68fb      	ldr	r3, [r7, #12]
}
 8007738:	0018      	movs	r0, r3
 800773a:	46bd      	mov	sp, r7
 800773c:	b004      	add	sp, #16
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20000058 	.word	0x20000058

08007744 <JCreateObject>:

    return item;
}

N_CJSON_PUBLIC(J *) JCreateObject(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
    J *item = JNew_Item(&global_hooks);
 800774a:	4b08      	ldr	r3, [pc, #32]	; (800776c <JCreateObject+0x28>)
 800774c:	0018      	movs	r0, r3
 800774e:	f7fe f8ad 	bl	80058ac <JNew_Item>
 8007752:	0003      	movs	r3, r0
 8007754:	607b      	str	r3, [r7, #4]
    if (item)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d002      	beq.n	8007762 <JCreateObject+0x1e>
    {
        item->type = JObject;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2240      	movs	r2, #64	; 0x40
 8007760:	60da      	str	r2, [r3, #12]
    }

    return item;
 8007762:	687b      	ldr	r3, [r7, #4]
}
 8007764:	0018      	movs	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	b002      	add	sp, #8
 800776a:	bd80      	pop	{r7, pc}
 800776c:	20000058 	.word	0x20000058

08007770 <JIsNumber>:

    return (item->type & 0xFF) == JNULL;
}

N_CJSON_PUBLIC(Jbool) JIsNumber(const J * const item)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <JIsNumber+0x12>
    {
        return false;
 800777e:	2300      	movs	r3, #0
 8007780:	e007      	b.n	8007792 <JIsNumber+0x22>
    }

    return (item->type & 0xFF) == JNumber;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	22ff      	movs	r2, #255	; 0xff
 8007788:	4013      	ands	r3, r2
 800778a:	3b08      	subs	r3, #8
 800778c:	425a      	negs	r2, r3
 800778e:	4153      	adcs	r3, r2
 8007790:	b2db      	uxtb	r3, r3
}
 8007792:	0018      	movs	r0, r3
 8007794:	46bd      	mov	sp, r7
 8007796:	b002      	add	sp, #8
 8007798:	bd80      	pop	{r7, pc}

0800779a <JIsString>:

N_CJSON_PUBLIC(Jbool) JIsString(const J * const item)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d101      	bne.n	80077ac <JIsString+0x12>
    {
        return false;
 80077a8:	2300      	movs	r3, #0
 80077aa:	e007      	b.n	80077bc <JIsString+0x22>
    }

    return (item->type & 0xFF) == JString;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	22ff      	movs	r2, #255	; 0xff
 80077b2:	4013      	ands	r3, r2
 80077b4:	3b10      	subs	r3, #16
 80077b6:	425a      	negs	r2, r3
 80077b8:	4153      	adcs	r3, r2
 80077ba:	b2db      	uxtb	r3, r3
}
 80077bc:	0018      	movs	r0, r3
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <JGetNumber>:
        return NULL;
    return item;
}

// Return a number from the specified JSON object, or 0 if it's not present
double JGetNumber(J *rsp, const char *field) {
 80077c4:	b590      	push	{r4, r7, lr}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d102      	bne.n	80077da <JGetNumber+0x16>
        return 0.0;
 80077d4:	2300      	movs	r3, #0
 80077d6:	2400      	movs	r4, #0
 80077d8:	e019      	b.n	800780e <JGetNumber+0x4a>
    J *item = JGetObjectItem(rsp, field);
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	0011      	movs	r1, r2
 80077e0:	0018      	movs	r0, r3
 80077e2:	f7ff fded 	bl	80073c0 <JGetObjectItem>
 80077e6:	0003      	movs	r3, r0
 80077e8:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <JGetNumber+0x32>
        return 0.0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	2400      	movs	r4, #0
 80077f4:	e00b      	b.n	800780e <JGetNumber+0x4a>
    if (!JIsNumber(item))
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0018      	movs	r0, r3
 80077fa:	f7ff ffb9 	bl	8007770 <JIsNumber>
 80077fe:	1e03      	subs	r3, r0, #0
 8007800:	d102      	bne.n	8007808 <JGetNumber+0x44>
        return 0.0;
 8007802:	2300      	movs	r3, #0
 8007804:	2400      	movs	r4, #0
 8007806:	e002      	b.n	800780e <JGetNumber+0x4a>
    return item->valuedouble;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	69dc      	ldr	r4, [r3, #28]
 800780c:	699b      	ldr	r3, [r3, #24]
}
 800780e:	0018      	movs	r0, r3
 8007810:	0021      	movs	r1, r4
 8007812:	46bd      	mov	sp, r7
 8007814:	b005      	add	sp, #20
 8007816:	bd90      	pop	{r4, r7, pc}

08007818 <JIsNullString>:
        return 0.0;
    return JIsTrue(item);
}

// Return true if the object is valid and if the field is not present or if it's null
bool JIsNullString(J *rsp, const char *field) {
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
    if (rsp == NULL)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <JIsNullString+0x14>
        return false;
 8007828:	2300      	movs	r3, #0
 800782a:	e022      	b.n	8007872 <JIsNullString+0x5a>
    J *item = JGetObjectItem(rsp, field);
 800782c:	683a      	ldr	r2, [r7, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	0011      	movs	r1, r2
 8007832:	0018      	movs	r0, r3
 8007834:	f7ff fdc4 	bl	80073c0 <JGetObjectItem>
 8007838:	0003      	movs	r3, r0
 800783a:	60fb      	str	r3, [r7, #12]
    if (item == NULL)
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d101      	bne.n	8007846 <JIsNullString+0x2e>
        return true;
 8007842:	2301      	movs	r3, #1
 8007844:	e015      	b.n	8007872 <JIsNullString+0x5a>
    if (!JIsString(item))
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	0018      	movs	r0, r3
 800784a:	f7ff ffa6 	bl	800779a <JIsString>
 800784e:	1e03      	subs	r3, r0, #0
 8007850:	d101      	bne.n	8007856 <JIsNullString+0x3e>
        return false;
 8007852:	2300      	movs	r3, #0
 8007854:	e00d      	b.n	8007872 <JIsNullString+0x5a>
    if (item->valuestring == NULL)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d101      	bne.n	8007862 <JIsNullString+0x4a>
        return true;
 800785e:	2301      	movs	r3, #1
 8007860:	e007      	b.n	8007872 <JIsNullString+0x5a>
    if (item->valuestring[0] == '\0')
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <JIsNullString+0x58>
        return true;
 800786c:	2301      	movs	r3, #1
 800786e:	e000      	b.n	8007872 <JIsNullString+0x5a>
    return false;
 8007870:	2300      	movs	r3, #0
}
 8007872:	0018      	movs	r0, r3
 8007874:	46bd      	mov	sp, r7
 8007876:	b004      	add	sp, #16
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <JNtoA>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * JNtoA(double f, char * buf, int original_precision)
{
 800787c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787e:	b08f      	sub	sp, #60	; 0x3c
 8007880:	af00      	add	r7, sp, #0
 8007882:	60b8      	str	r0, [r7, #8]
 8007884:	60f9      	str	r1, [r7, #12]
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	637b      	str	r3, [r7, #52]	; 0x34
	char * p = ptr;
 800788e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007890:	633b      	str	r3, [r7, #48]	; 0x30
	char c;
	long intPart;

	// Check specifically for uncommon but bad floating point numbers that can't be converted
	uint8_t fbytes[8];
	memcpy(&fbytes, &f, sizeof(fbytes));
 8007892:	2310      	movs	r3, #16
 8007894:	18fa      	adds	r2, r7, r3
 8007896:	2308      	movs	r3, #8
 8007898:	18fb      	adds	r3, r7, r3
 800789a:	0010      	movs	r0, r2
 800789c:	0019      	movs	r1, r3
 800789e:	2308      	movs	r3, #8
 80078a0:	001a      	movs	r2, r3
 80078a2:	f000 fe53 	bl	800854c <memcpy>
	bool wasFF = true;
 80078a6:	2327      	movs	r3, #39	; 0x27
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	2201      	movs	r2, #1
 80078ac:	701a      	strb	r2, [r3, #0]
	int i;
	for (i=0; i<(int)sizeof(fbytes); i++)
 80078ae:	2300      	movs	r3, #0
 80078b0:	623b      	str	r3, [r7, #32]
 80078b2:	e00d      	b.n	80078d0 <JNtoA+0x54>
		if (fbytes[i] != 0xff) wasFF = false;
 80078b4:	2310      	movs	r3, #16
 80078b6:	18fa      	adds	r2, r7, r3
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	18d3      	adds	r3, r2, r3
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2bff      	cmp	r3, #255	; 0xff
 80078c0:	d003      	beq.n	80078ca <JNtoA+0x4e>
 80078c2:	2327      	movs	r3, #39	; 0x27
 80078c4:	18fb      	adds	r3, r7, r3
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
	for (i=0; i<(int)sizeof(fbytes); i++)
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	3301      	adds	r3, #1
 80078ce:	623b      	str	r3, [r7, #32]
 80078d0:	6a3b      	ldr	r3, [r7, #32]
 80078d2:	2b07      	cmp	r3, #7
 80078d4:	ddee      	ble.n	80078b4 <JNtoA+0x38>
	if (wasFF)
 80078d6:	2327      	movs	r3, #39	; 0x27
 80078d8:	18fb      	adds	r3, r7, r3
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d003      	beq.n	80078e8 <JNtoA+0x6c>
		f = 0.0;
 80078e0:	2200      	movs	r2, #0
 80078e2:	2300      	movs	r3, #0
 80078e4:	60ba      	str	r2, [r7, #8]
 80078e6:	60fb      	str	r3, [r7, #12]

	// check precision bounds
	int precision = original_precision;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	61fb      	str	r3, [r7, #28]
	if (precision < 0 || precision > JNTOA_PRECISION)
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	db02      	blt.n	80078f8 <JNtoA+0x7c>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	2b0a      	cmp	r3, #10
 80078f6:	dd01      	ble.n	80078fc <JNtoA+0x80>
		precision = JNTOA_PRECISION;
 80078f8:	230a      	movs	r3, #10
 80078fa:	61fb      	str	r3, [r7, #28]

	// sign stuff
	if (f < 0)
 80078fc:	68b8      	ldr	r0, [r7, #8]
 80078fe:	68f9      	ldr	r1, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	f7f8 fd9c 	bl	8000440 <__aeabi_dcmplt>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d00e      	beq.n	800792a <JNtoA+0xae>
	{
		f = -f;
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	0011      	movs	r1, r2
 8007912:	000c      	movs	r4, r1
 8007914:	2180      	movs	r1, #128	; 0x80
 8007916:	0609      	lsls	r1, r1, #24
 8007918:	4059      	eors	r1, r3
 800791a:	000d      	movs	r5, r1
 800791c:	60bc      	str	r4, [r7, #8]
 800791e:	60fd      	str	r5, [r7, #12]
		*ptr++ = '-';
 8007920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	637a      	str	r2, [r7, #52]	; 0x34
 8007926:	222d      	movs	r2, #45	; 0x2d
 8007928:	701a      	strb	r2, [r3, #0]
	}

	if (original_precision < 0)	 // negative precision == automatic precision guess
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	da43      	bge.n	80079b8 <JNtoA+0x13c>
	{
		if (f < 1.0) precision = 6;
 8007930:	68b8      	ldr	r0, [r7, #8]
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	4b8c      	ldr	r3, [pc, #560]	; (8007b68 <JNtoA+0x2ec>)
 8007938:	f7f8 fd82 	bl	8000440 <__aeabi_dcmplt>
 800793c:	1e03      	subs	r3, r0, #0
 800793e:	d002      	beq.n	8007946 <JNtoA+0xca>
 8007940:	2306      	movs	r3, #6
 8007942:	61fb      	str	r3, [r7, #28]
 8007944:	e038      	b.n	80079b8 <JNtoA+0x13c>
		else if (f < 10.0) precision = 5;
 8007946:	68b8      	ldr	r0, [r7, #8]
 8007948:	68f9      	ldr	r1, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	4b87      	ldr	r3, [pc, #540]	; (8007b6c <JNtoA+0x2f0>)
 800794e:	f7f8 fd77 	bl	8000440 <__aeabi_dcmplt>
 8007952:	1e03      	subs	r3, r0, #0
 8007954:	d002      	beq.n	800795c <JNtoA+0xe0>
 8007956:	2305      	movs	r3, #5
 8007958:	61fb      	str	r3, [r7, #28]
 800795a:	e02d      	b.n	80079b8 <JNtoA+0x13c>
		else if (f < 100.0) precision = 4;
 800795c:	68b8      	ldr	r0, [r7, #8]
 800795e:	68f9      	ldr	r1, [r7, #12]
 8007960:	2200      	movs	r2, #0
 8007962:	4b83      	ldr	r3, [pc, #524]	; (8007b70 <JNtoA+0x2f4>)
 8007964:	f7f8 fd6c 	bl	8000440 <__aeabi_dcmplt>
 8007968:	1e03      	subs	r3, r0, #0
 800796a:	d002      	beq.n	8007972 <JNtoA+0xf6>
 800796c:	2304      	movs	r3, #4
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e022      	b.n	80079b8 <JNtoA+0x13c>
		else if (f < 1000.0) precision = 3;
 8007972:	68b8      	ldr	r0, [r7, #8]
 8007974:	68f9      	ldr	r1, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	4b7e      	ldr	r3, [pc, #504]	; (8007b74 <JNtoA+0x2f8>)
 800797a:	f7f8 fd61 	bl	8000440 <__aeabi_dcmplt>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d002      	beq.n	8007988 <JNtoA+0x10c>
 8007982:	2303      	movs	r3, #3
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	e017      	b.n	80079b8 <JNtoA+0x13c>
		else if (f < 10000.0) precision = 2;
 8007988:	68b8      	ldr	r0, [r7, #8]
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	4b7a      	ldr	r3, [pc, #488]	; (8007b78 <JNtoA+0x2fc>)
 8007990:	f7f8 fd56 	bl	8000440 <__aeabi_dcmplt>
 8007994:	1e03      	subs	r3, r0, #0
 8007996:	d002      	beq.n	800799e <JNtoA+0x122>
 8007998:	2302      	movs	r3, #2
 800799a:	61fb      	str	r3, [r7, #28]
 800799c:	e00c      	b.n	80079b8 <JNtoA+0x13c>
		else if (f < 100000.0) precision = 1;
 800799e:	68b8      	ldr	r0, [r7, #8]
 80079a0:	68f9      	ldr	r1, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	4b75      	ldr	r3, [pc, #468]	; (8007b7c <JNtoA+0x300>)
 80079a6:	f7f8 fd4b 	bl	8000440 <__aeabi_dcmplt>
 80079aa:	1e03      	subs	r3, r0, #0
 80079ac:	d002      	beq.n	80079b4 <JNtoA+0x138>
 80079ae:	2301      	movs	r3, #1
 80079b0:	61fb      	str	r3, [r7, #28]
 80079b2:	e001      	b.n	80079b8 <JNtoA+0x13c>
		else precision = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	61fb      	str	r3, [r7, #28]
	}

	// round value according the precision
	if (precision)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00f      	beq.n	80079de <JNtoA+0x162>
		f += rounders[precision];
 80079be:	4a70      	ldr	r2, [pc, #448]	; (8007b80 <JNtoA+0x304>)
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	00db      	lsls	r3, r3, #3
 80079c4:	18d3      	adds	r3, r2, r3
 80079c6:	6818      	ldr	r0, [r3, #0]
 80079c8:	6859      	ldr	r1, [r3, #4]
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	68fc      	ldr	r4, [r7, #12]
 80079ce:	001a      	movs	r2, r3
 80079d0:	0023      	movs	r3, r4
 80079d2:	f7f8 fd7b 	bl	80004cc <__aeabi_dadd>
 80079d6:	0003      	movs	r3, r0
 80079d8:	000c      	movs	r4, r1
 80079da:	60bb      	str	r3, [r7, #8]
 80079dc:	60fc      	str	r4, [r7, #12]

	// integer part...
	intPart = f;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	68fc      	ldr	r4, [r7, #12]
 80079e2:	0018      	movs	r0, r3
 80079e4:	0021      	movs	r1, r4
 80079e6:	f7fa fa51 	bl	8001e8c <__aeabi_d2iz>
 80079ea:	0003      	movs	r3, r0
 80079ec:	62bb      	str	r3, [r7, #40]	; 0x28
	f -= intPart;
 80079ee:	68bc      	ldr	r4, [r7, #8]
 80079f0:	68fd      	ldr	r5, [r7, #12]
 80079f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80079f4:	f7fa fa80 	bl	8001ef8 <__aeabi_i2d>
 80079f8:	0002      	movs	r2, r0
 80079fa:	000b      	movs	r3, r1
 80079fc:	0020      	movs	r0, r4
 80079fe:	0029      	movs	r1, r5
 8007a00:	f7f9 fefc 	bl	80017fc <__aeabi_dsub>
 8007a04:	0003      	movs	r3, r0
 8007a06:	000c      	movs	r4, r1
 8007a08:	60bb      	str	r3, [r7, #8]
 8007a0a:	60fc      	str	r4, [r7, #12]

	if (!intPart)
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <JNtoA+0x1a2>
		*ptr++ = '0';
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	1c5a      	adds	r2, r3, #1
 8007a16:	637a      	str	r2, [r7, #52]	; 0x34
 8007a18:	2230      	movs	r2, #48	; 0x30
 8007a1a:	701a      	strb	r2, [r3, #0]
 8007a1c:	e034      	b.n	8007a88 <JNtoA+0x20c>
	else
	{
		// save start pointer
		p = ptr;
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30

		// convert (reverse order)
		while (intPart)
 8007a22:	e013      	b.n	8007a4c <JNtoA+0x1d0>
		{
			*p++ = '0' + intPart % 10;
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	210a      	movs	r1, #10
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7f8 fced 	bl	8000408 <__aeabi_idivmod>
 8007a2e:	000b      	movs	r3, r1
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a34:	1c59      	adds	r1, r3, #1
 8007a36:	6339      	str	r1, [r7, #48]	; 0x30
 8007a38:	3230      	adds	r2, #48	; 0x30
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 8007a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a40:	210a      	movs	r1, #10
 8007a42:	0018      	movs	r0, r3
 8007a44:	f7f8 fbfa 	bl	800023c <__divsi3>
 8007a48:	0003      	movs	r3, r0
 8007a4a:	62bb      	str	r3, [r7, #40]	; 0x28
		while (intPart)
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e8      	bne.n	8007a24 <JNtoA+0x1a8>
		}

		// save end pos
		p1 = p;
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 8007a56:	e011      	b.n	8007a7c <JNtoA+0x200>
		{
			c = *--p;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a5e:	212f      	movs	r1, #47	; 0x2f
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a64:	7812      	ldrb	r2, [r2, #0]
 8007a66:	701a      	strb	r2, [r3, #0]
			*p = *ptr;
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8007a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	637a      	str	r2, [r7, #52]	; 0x34
 8007a76:	187a      	adds	r2, r7, r1
 8007a78:	7812      	ldrb	r2, [r2, #0]
 8007a7a:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d8e9      	bhi.n	8007a58 <JNtoA+0x1dc>
		}

		// restore end pos
		ptr = p1;
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	637b      	str	r3, [r7, #52]	; 0x34
	}

	// decimal part
	if (precision)
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d040      	beq.n	8007b10 <JNtoA+0x294>
	{

		// place decimal point
		*ptr++ = '.';
 8007a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a90:	1c5a      	adds	r2, r3, #1
 8007a92:	637a      	str	r2, [r7, #52]	; 0x34
 8007a94:	222e      	movs	r2, #46	; 0x2e
 8007a96:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 8007a98:	e035      	b.n	8007b06 <JNtoA+0x28a>
		{
			f *= 10.0;
 8007a9a:	68b8      	ldr	r0, [r7, #8]
 8007a9c:	68f9      	ldr	r1, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4b32      	ldr	r3, [pc, #200]	; (8007b6c <JNtoA+0x2f0>)
 8007aa2:	f7f9 fc39 	bl	8001318 <__aeabi_dmul>
 8007aa6:	0003      	movs	r3, r0
 8007aa8:	000c      	movs	r4, r1
 8007aaa:	60bb      	str	r3, [r7, #8]
 8007aac:	60fc      	str	r4, [r7, #12]
			c = f;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	68fc      	ldr	r4, [r7, #12]
 8007ab2:	262f      	movs	r6, #47	; 0x2f
 8007ab4:	19bd      	adds	r5, r7, r6
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	0021      	movs	r1, r4
 8007aba:	f7f8 fce9 	bl	8000490 <__aeabi_d2uiz>
 8007abe:	0003      	movs	r3, r0
 8007ac0:	702b      	strb	r3, [r5, #0]

			// Invalid floating point numbers (specifically 0xffffff) end up at this point
			// with a c == 255 after the coercion
			if (c > 9) c = 0;
 8007ac2:	19bb      	adds	r3, r7, r6
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b09      	cmp	r3, #9
 8007ac8:	d903      	bls.n	8007ad2 <JNtoA+0x256>
 8007aca:	232f      	movs	r3, #47	; 0x2f
 8007acc:	18fb      	adds	r3, r7, r3
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]

			*ptr++ = '0' + c;
 8007ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad4:	1c5a      	adds	r2, r3, #1
 8007ad6:	637a      	str	r2, [r7, #52]	; 0x34
 8007ad8:	212f      	movs	r1, #47	; 0x2f
 8007ada:	187a      	adds	r2, r7, r1
 8007adc:	7812      	ldrb	r2, [r2, #0]
 8007ade:	3230      	adds	r2, #48	; 0x30
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	701a      	strb	r2, [r3, #0]
			f -= c;
 8007ae4:	68bc      	ldr	r4, [r7, #8]
 8007ae6:	68fd      	ldr	r5, [r7, #12]
 8007ae8:	187b      	adds	r3, r7, r1
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	0018      	movs	r0, r3
 8007aee:	f7fa fa03 	bl	8001ef8 <__aeabi_i2d>
 8007af2:	0002      	movs	r2, r0
 8007af4:	000b      	movs	r3, r1
 8007af6:	0020      	movs	r0, r4
 8007af8:	0029      	movs	r1, r5
 8007afa:	f7f9 fe7f 	bl	80017fc <__aeabi_dsub>
 8007afe:	0003      	movs	r3, r0
 8007b00:	000c      	movs	r4, r1
 8007b02:	60bb      	str	r3, [r7, #8]
 8007b04:	60fc      	str	r4, [r7, #12]
		while (precision--)
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	1e5a      	subs	r2, r3, #1
 8007b0a:	61fa      	str	r2, [r7, #28]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1c4      	bne.n	8007a9a <JNtoA+0x21e>
		}
	}

	// terminating zero
	*ptr = 0;
 8007b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]

	// Remove trailing zero's if automatic precision
	if (NULL != strchr(buf, '.')) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	212e      	movs	r1, #46	; 0x2e
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	f000 fde2 	bl	80086e4 <strchr>
 8007b20:	1e03      	subs	r3, r0, #0
 8007b22:	d01b      	beq.n	8007b5c <JNtoA+0x2e0>
		if (original_precision < 0) {
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da18      	bge.n	8007b5c <JNtoA+0x2e0>
			--ptr;
 8007b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	637b      	str	r3, [r7, #52]	; 0x34
			while (ptr > (buf+1) && *ptr == '0')
 8007b30:	e004      	b.n	8007b3c <JNtoA+0x2c0>
				*ptr-- = 0;
 8007b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b34:	1e5a      	subs	r2, r3, #1
 8007b36:	637a      	str	r2, [r7, #52]	; 0x34
 8007b38:	2200      	movs	r2, #0
 8007b3a:	701a      	strb	r2, [r3, #0]
			while (ptr > (buf+1) && *ptr == '0')
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d903      	bls.n	8007b4e <JNtoA+0x2d2>
 8007b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b48:	781b      	ldrb	r3, [r3, #0]
 8007b4a:	2b30      	cmp	r3, #48	; 0x30
 8007b4c:	d0f1      	beq.n	8007b32 <JNtoA+0x2b6>
			if (*ptr == '.')
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b2e      	cmp	r3, #46	; 0x2e
 8007b54:	d102      	bne.n	8007b5c <JNtoA+0x2e0>
				*ptr = 0;
 8007b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b58:	2200      	movs	r2, #0
 8007b5a:	701a      	strb	r2, [r3, #0]
		}
	}

	return buf;
 8007b5c:	687b      	ldr	r3, [r7, #4]
}
 8007b5e:	0018      	movs	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	b00f      	add	sp, #60	; 0x3c
 8007b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b66:	46c0      	nop			; (mov r8, r8)
 8007b68:	3ff00000 	.word	0x3ff00000
 8007b6c:	40240000 	.word	0x40240000
 8007b70:	40590000 	.word	0x40590000
 8007b74:	408f4000 	.word	0x408f4000
 8007b78:	40c38800 	.word	0x40c38800
 8007b7c:	40f86a00 	.word	0x40f86a00
 8007b80:	08008c70 	.word	0x08008c70

08007b84 <NoteSetFn>:
        hookDelayMs = delayfn;
    if (hookGetMs == NULL)
        hookGetMs = millisfn;
}
// Set the debug output hook
void NoteSetFn(mallocFn mallocfn, freeFn freefn, delayMsFn delayfn, getMsFn millisfn) {
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
 8007b90:	603b      	str	r3, [r7, #0]
    hookMalloc = mallocfn;
 8007b92:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <NoteSetFn+0x30>)
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	601a      	str	r2, [r3, #0]
    hookFree = freefn;
 8007b98:	4b07      	ldr	r3, [pc, #28]	; (8007bb8 <NoteSetFn+0x34>)
 8007b9a:	68ba      	ldr	r2, [r7, #8]
 8007b9c:	601a      	str	r2, [r3, #0]
    hookDelayMs = delayfn;
 8007b9e:	4b07      	ldr	r3, [pc, #28]	; (8007bbc <NoteSetFn+0x38>)
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	601a      	str	r2, [r3, #0]
    hookGetMs = millisfn;
 8007ba4:	4b06      	ldr	r3, [pc, #24]	; (8007bc0 <NoteSetFn+0x3c>)
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	601a      	str	r2, [r3, #0]
}
 8007baa:	46c0      	nop			; (mov r8, r8)
 8007bac:	46bd      	mov	sp, r7
 8007bae:	b004      	add	sp, #16
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	46c0      	nop			; (mov r8, r8)
 8007bb4:	20000278 	.word	0x20000278
 8007bb8:	2000027c 	.word	0x2000027c
 8007bbc:	20000280 	.word	0x20000280
 8007bc0:	20000284 	.word	0x20000284

08007bc4 <NoteSetFnI2C>:

    notecardReset = serialNoteReset;
    notecardTransaction = serialNoteTransaction;
}

void NoteSetFnI2C(uint32_t i2caddress, uint32_t i2cmax, i2cResetFn resetfn, i2cTransmitFn transmitfn, i2cReceiveFn receivefn) {
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
    i2cAddress = i2caddress;
 8007bd2:	4b0e      	ldr	r3, [pc, #56]	; (8007c0c <NoteSetFnI2C+0x48>)
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]
    i2cMax = i2cmax;
 8007bd8:	4b0d      	ldr	r3, [pc, #52]	; (8007c10 <NoteSetFnI2C+0x4c>)
 8007bda:	68ba      	ldr	r2, [r7, #8]
 8007bdc:	601a      	str	r2, [r3, #0]

    hookActiveInterface = interfaceI2C;
 8007bde:	4b0d      	ldr	r3, [pc, #52]	; (8007c14 <NoteSetFnI2C+0x50>)
 8007be0:	2202      	movs	r2, #2
 8007be2:	601a      	str	r2, [r3, #0]

    hookI2CReset = resetfn;
 8007be4:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <NoteSetFnI2C+0x54>)
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	601a      	str	r2, [r3, #0]
    hookI2CTransmit = transmitfn;
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <NoteSetFnI2C+0x58>)
 8007bec:	683a      	ldr	r2, [r7, #0]
 8007bee:	601a      	str	r2, [r3, #0]
    hookI2CReceive = receivefn;
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <NoteSetFnI2C+0x5c>)
 8007bf2:	69ba      	ldr	r2, [r7, #24]
 8007bf4:	601a      	str	r2, [r3, #0]

    notecardReset = i2cNoteReset;
 8007bf6:	4b0b      	ldr	r3, [pc, #44]	; (8007c24 <NoteSetFnI2C+0x60>)
 8007bf8:	4a0b      	ldr	r2, [pc, #44]	; (8007c28 <NoteSetFnI2C+0x64>)
 8007bfa:	601a      	str	r2, [r3, #0]
    notecardTransaction = i2cNoteTransaction;
 8007bfc:	4b0b      	ldr	r3, [pc, #44]	; (8007c2c <NoteSetFnI2C+0x68>)
 8007bfe:	4a0c      	ldr	r2, [pc, #48]	; (8007c30 <NoteSetFnI2C+0x6c>)
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	46c0      	nop			; (mov r8, r8)
 8007c04:	46bd      	mov	sp, r7
 8007c06:	b004      	add	sp, #16
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	46c0      	nop			; (mov r8, r8)
 8007c0c:	2000028c 	.word	0x2000028c
 8007c10:	20000290 	.word	0x20000290
 8007c14:	20000288 	.word	0x20000288
 8007c18:	20000294 	.word	0x20000294
 8007c1c:	20000298 	.word	0x20000298
 8007c20:	2000029c 	.word	0x2000029c
 8007c24:	200002a0 	.word	0x200002a0
 8007c28:	0800813d 	.word	0x0800813d
 8007c2c:	200002a4 	.word	0x200002a4
 8007c30:	08007ed5 	.word	0x08007ed5

08007c34 <NoteFnGetMs>:
        va_end(args);
        hookDebugOutput(line);
    }
#endif
}
long unsigned int NoteFnGetMs() {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	af00      	add	r7, sp, #0
    if (hookGetMs == NULL)
 8007c38:	4b06      	ldr	r3, [pc, #24]	; (8007c54 <NoteFnGetMs+0x20>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <NoteFnGetMs+0x10>
        return 0;
 8007c40:	2300      	movs	r3, #0
 8007c42:	e003      	b.n	8007c4c <NoteFnGetMs+0x18>
    return hookGetMs();
 8007c44:	4b03      	ldr	r3, [pc, #12]	; (8007c54 <NoteFnGetMs+0x20>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	4798      	blx	r3
 8007c4a:	0003      	movs	r3, r0
}
 8007c4c:	0018      	movs	r0, r3
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	20000284 	.word	0x20000284

08007c58 <NoteFnDelayMs>:
void NoteFnDelayMs(uint32_t ms) {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
    if (hookDelayMs != NULL)
 8007c60:	4b06      	ldr	r3, [pc, #24]	; (8007c7c <NoteFnDelayMs+0x24>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d004      	beq.n	8007c72 <NoteFnDelayMs+0x1a>
        hookDelayMs(ms);
 8007c68:	4b04      	ldr	r3, [pc, #16]	; (8007c7c <NoteFnDelayMs+0x24>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	0010      	movs	r0, r2
 8007c70:	4798      	blx	r3
}
 8007c72:	46c0      	nop			; (mov r8, r8)
 8007c74:	46bd      	mov	sp, r7
 8007c76:	b002      	add	sp, #8
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	20000280 	.word	0x20000280

08007c80 <NoteFnMalloc>:
void *NoteFnMalloc(size_t size) {
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
    if (hookMalloc == NULL)
 8007c88:	4b07      	ldr	r3, [pc, #28]	; (8007ca8 <NoteFnMalloc+0x28>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d101      	bne.n	8007c94 <NoteFnMalloc+0x14>
        return NULL;
 8007c90:	2300      	movs	r3, #0
 8007c92:	e005      	b.n	8007ca0 <NoteFnMalloc+0x20>
    return hookMalloc(size);
 8007c94:	4b04      	ldr	r3, [pc, #16]	; (8007ca8 <NoteFnMalloc+0x28>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	0010      	movs	r0, r2
 8007c9c:	4798      	blx	r3
 8007c9e:	0003      	movs	r3, r0
}
 8007ca0:	0018      	movs	r0, r3
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	b002      	add	sp, #8
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000278 	.word	0x20000278

08007cac <NoteFnFree>:
void NoteFnFree(void *p) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
    if (hookFree != NULL)
 8007cb4:	4b06      	ldr	r3, [pc, #24]	; (8007cd0 <NoteFnFree+0x24>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d004      	beq.n	8007cc6 <NoteFnFree+0x1a>
        hookFree(p);
 8007cbc:	4b04      	ldr	r3, [pc, #16]	; (8007cd0 <NoteFnFree+0x24>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	0010      	movs	r0, r2
 8007cc4:	4798      	blx	r3
}
 8007cc6:	46c0      	nop			; (mov r8, r8)
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	b002      	add	sp, #8
 8007ccc:	bd80      	pop	{r7, pc}
 8007cce:	46c0      	nop			; (mov r8, r8)
 8007cd0:	2000027c 	.word	0x2000027c

08007cd4 <NoteFnLockI2C>:
void NoteFnLockI2C() {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
    if (hookLockI2C != NULL)
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <NoteFnLockI2C+0x18>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <NoteFnLockI2C+0x12>
        hookLockI2C();
 8007ce0:	4b02      	ldr	r3, [pc, #8]	; (8007cec <NoteFnLockI2C+0x18>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4798      	blx	r3
}
 8007ce6:	46c0      	nop			; (mov r8, r8)
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000268 	.word	0x20000268

08007cf0 <NoteFnUnlockI2C>:
void NoteFnUnlockI2C() {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	af00      	add	r7, sp, #0
    if (hookUnlockI2C != NULL)
 8007cf4:	4b04      	ldr	r3, [pc, #16]	; (8007d08 <NoteFnUnlockI2C+0x18>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d002      	beq.n	8007d02 <NoteFnUnlockI2C+0x12>
        hookUnlockI2C();
 8007cfc:	4b02      	ldr	r3, [pc, #8]	; (8007d08 <NoteFnUnlockI2C+0x18>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4798      	blx	r3
}
 8007d02:	46c0      	nop			; (mov r8, r8)
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	2000026c 	.word	0x2000026c

08007d0c <NoteFnLockNote>:
void NoteFnLockNote() {
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
    if (hookLockNote != NULL)
 8007d10:	4b04      	ldr	r3, [pc, #16]	; (8007d24 <NoteFnLockNote+0x18>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d002      	beq.n	8007d1e <NoteFnLockNote+0x12>
        hookLockNote();
 8007d18:	4b02      	ldr	r3, [pc, #8]	; (8007d24 <NoteFnLockNote+0x18>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4798      	blx	r3
}
 8007d1e:	46c0      	nop			; (mov r8, r8)
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000270 	.word	0x20000270

08007d28 <NoteFnUnlockNote>:
void NoteFnUnlockNote() {
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	af00      	add	r7, sp, #0
    if (hookUnlockNote != NULL)
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <NoteFnUnlockNote+0x18>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d002      	beq.n	8007d3a <NoteFnUnlockNote+0x12>
        hookUnlockNote();
 8007d34:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <NoteFnUnlockNote+0x18>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4798      	blx	r3
}
 8007d3a:	46c0      	nop			; (mov r8, r8)
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20000274 	.word	0x20000274

08007d44 <NoteFnI2CReset>:
char NoteFnSerialReceive() {
    if (hookActiveInterface == interfaceSerial && hookSerialReceive != NULL)
        return hookSerialReceive();
    return 0;
}
void NoteFnI2CReset() {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	af00      	add	r7, sp, #0
    if (hookActiveInterface == interfaceI2C && hookI2CReset != NULL)
 8007d48:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <NoteFnI2CReset+0x20>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d106      	bne.n	8007d5e <NoteFnI2CReset+0x1a>
 8007d50:	4b05      	ldr	r3, [pc, #20]	; (8007d68 <NoteFnI2CReset+0x24>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <NoteFnI2CReset+0x1a>
        hookI2CReset();
 8007d58:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <NoteFnI2CReset+0x24>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4798      	blx	r3
}
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000288 	.word	0x20000288
 8007d68:	20000294 	.word	0x20000294

08007d6c <NoteFnI2CTransmit>:
const char *NoteFnI2CTransmit(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size) {
 8007d6c:	b590      	push	{r4, r7, lr}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6039      	str	r1, [r7, #0]
 8007d74:	0011      	movs	r1, r2
 8007d76:	1dbb      	adds	r3, r7, #6
 8007d78:	1c02      	adds	r2, r0, #0
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	1d3b      	adds	r3, r7, #4
 8007d7e:	1c0a      	adds	r2, r1, #0
 8007d80:	801a      	strh	r2, [r3, #0]
    if (hookActiveInterface == interfaceI2C && hookI2CTransmit != NULL)
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <NoteFnI2CTransmit+0x48>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b02      	cmp	r3, #2
 8007d88:	d10e      	bne.n	8007da8 <NoteFnI2CTransmit+0x3c>
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <NoteFnI2CTransmit+0x4c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <NoteFnI2CTransmit+0x3c>
        return hookI2CTransmit(DevAddress, pBuffer, Size);
 8007d92:	4b09      	ldr	r3, [pc, #36]	; (8007db8 <NoteFnI2CTransmit+0x4c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	1d3a      	adds	r2, r7, #4
 8007d98:	8814      	ldrh	r4, [r2, #0]
 8007d9a:	6839      	ldr	r1, [r7, #0]
 8007d9c:	1dba      	adds	r2, r7, #6
 8007d9e:	8810      	ldrh	r0, [r2, #0]
 8007da0:	0022      	movs	r2, r4
 8007da2:	4798      	blx	r3
 8007da4:	0003      	movs	r3, r0
 8007da6:	e000      	b.n	8007daa <NoteFnI2CTransmit+0x3e>
    return "i2c not active";
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <NoteFnI2CTransmit+0x50>)
}
 8007daa:	0018      	movs	r0, r3
 8007dac:	46bd      	mov	sp, r7
 8007dae:	b003      	add	sp, #12
 8007db0:	bd90      	pop	{r4, r7, pc}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	20000288 	.word	0x20000288
 8007db8:	20000298 	.word	0x20000298
 8007dbc:	080088c4 	.word	0x080088c4

08007dc0 <NoteFnI2CReceive>:
const char *NoteFnI2CReceive(uint16_t DevAddress, uint8_t* pBuffer, uint16_t Size, uint32_t *available) {
 8007dc0:	b5b0      	push	{r4, r5, r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	60b9      	str	r1, [r7, #8]
 8007dc8:	0011      	movs	r1, r2
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	230e      	movs	r3, #14
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	1c02      	adds	r2, r0, #0
 8007dd2:	801a      	strh	r2, [r3, #0]
 8007dd4:	230c      	movs	r3, #12
 8007dd6:	18fb      	adds	r3, r7, r3
 8007dd8:	1c0a      	adds	r2, r1, #0
 8007dda:	801a      	strh	r2, [r3, #0]
    if (hookActiveInterface == interfaceI2C && hookI2CReceive != NULL)
 8007ddc:	4b0d      	ldr	r3, [pc, #52]	; (8007e14 <NoteFnI2CReceive+0x54>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d111      	bne.n	8007e08 <NoteFnI2CReceive+0x48>
 8007de4:	4b0c      	ldr	r3, [pc, #48]	; (8007e18 <NoteFnI2CReceive+0x58>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00d      	beq.n	8007e08 <NoteFnI2CReceive+0x48>
        return hookI2CReceive(DevAddress, pBuffer, Size, available);
 8007dec:	4b0a      	ldr	r3, [pc, #40]	; (8007e18 <NoteFnI2CReceive+0x58>)
 8007dee:	681c      	ldr	r4, [r3, #0]
 8007df0:	687d      	ldr	r5, [r7, #4]
 8007df2:	230c      	movs	r3, #12
 8007df4:	18fb      	adds	r3, r7, r3
 8007df6:	881a      	ldrh	r2, [r3, #0]
 8007df8:	68b9      	ldr	r1, [r7, #8]
 8007dfa:	230e      	movs	r3, #14
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	8818      	ldrh	r0, [r3, #0]
 8007e00:	002b      	movs	r3, r5
 8007e02:	47a0      	blx	r4
 8007e04:	0003      	movs	r3, r0
 8007e06:	e000      	b.n	8007e0a <NoteFnI2CReceive+0x4a>
    return "i2c not active";
 8007e08:	4b04      	ldr	r3, [pc, #16]	; (8007e1c <NoteFnI2CReceive+0x5c>)
}
 8007e0a:	0018      	movs	r0, r3
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b004      	add	sp, #16
 8007e10:	bdb0      	pop	{r4, r5, r7, pc}
 8007e12:	46c0      	nop			; (mov r8, r8)
 8007e14:	20000288 	.word	0x20000288
 8007e18:	2000029c 	.word	0x2000029c
 8007e1c:	080088c4 	.word	0x080088c4

08007e20 <NoteFnI2CAddress>:
uint32_t NoteFnI2CAddress() {
 8007e20:	b580      	push	{r7, lr}
 8007e22:	af00      	add	r7, sp, #0
    if (i2cAddress == NOTE_I2C_MAX_DEFAULT)
 8007e24:	4b05      	ldr	r3, [pc, #20]	; (8007e3c <NoteFnI2CAddress+0x1c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d101      	bne.n	8007e30 <NoteFnI2CAddress+0x10>
        return 0x17;
 8007e2c:	2317      	movs	r3, #23
 8007e2e:	e001      	b.n	8007e34 <NoteFnI2CAddress+0x14>
    return i2cAddress;
 8007e30:	4b02      	ldr	r3, [pc, #8]	; (8007e3c <NoteFnI2CAddress+0x1c>)
 8007e32:	681b      	ldr	r3, [r3, #0]
}
 8007e34:	0018      	movs	r0, r3
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	2000028c 	.word	0x2000028c

08007e40 <NoteFnI2CMax>:
uint32_t NoteFnI2CMax() {
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
    // Many Arduino libraries (such as ESP32) have a limit less than 32, so if the max isn't specified
    // we must assume the worst and segment the I2C messages into very tiny chunks.
    if (i2cMax == NOTE_I2C_MAX_DEFAULT)
 8007e44:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <NoteFnI2CMax+0x28>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <NoteFnI2CMax+0x10>
        return 30;
 8007e4c:	231e      	movs	r3, #30
 8007e4e:	e008      	b.n	8007e62 <NoteFnI2CMax+0x22>
    // Note design specs
    if (i2cMax > 127)
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <NoteFnI2CMax+0x28>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b7f      	cmp	r3, #127	; 0x7f
 8007e56:	d902      	bls.n	8007e5e <NoteFnI2CMax+0x1e>
        i2cMax = 127;
 8007e58:	4b03      	ldr	r3, [pc, #12]	; (8007e68 <NoteFnI2CMax+0x28>)
 8007e5a:	227f      	movs	r2, #127	; 0x7f
 8007e5c:	601a      	str	r2, [r3, #0]
    return i2cMax;
 8007e5e:	4b02      	ldr	r3, [pc, #8]	; (8007e68 <NoteFnI2CMax+0x28>)
 8007e60:	681b      	ldr	r3, [r3, #0]
}
 8007e62:	0018      	movs	r0, r3
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	20000290 	.word	0x20000290

08007e6c <NoteFnNoteReset>:

bool NoteFnNoteReset() {
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0
    if (notecardReset == NULL)
 8007e70:	4b06      	ldr	r3, [pc, #24]	; (8007e8c <NoteFnNoteReset+0x20>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d101      	bne.n	8007e7c <NoteFnNoteReset+0x10>
        return "notecard not initialized";
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e003      	b.n	8007e84 <NoteFnNoteReset+0x18>
    return notecardReset();
 8007e7c:	4b03      	ldr	r3, [pc, #12]	; (8007e8c <NoteFnNoteReset+0x20>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4798      	blx	r3
 8007e82:	0003      	movs	r3, r0
}
 8007e84:	0018      	movs	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}
 8007e8a:	46c0      	nop			; (mov r8, r8)
 8007e8c:	200002a0 	.word	0x200002a0

08007e90 <NoteFnTransaction>:
const char *NoteFnTransaction(char *json, char **jsonResponse) {
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
    if (notecardTransaction == NULL)
 8007e9a:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <NoteFnTransaction+0x2c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d101      	bne.n	8007ea6 <NoteFnTransaction+0x16>
        return "notecard not initialized";
 8007ea2:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <NoteFnTransaction+0x30>)
 8007ea4:	e006      	b.n	8007eb4 <NoteFnTransaction+0x24>
    return notecardTransaction(json, jsonResponse);
 8007ea6:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <NoteFnTransaction+0x2c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6839      	ldr	r1, [r7, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	0010      	movs	r0, r2
 8007eb0:	4798      	blx	r3
 8007eb2:	0003      	movs	r3, r0
}
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	b002      	add	sp, #8
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	200002a4 	.word	0x200002a4
 8007ec0:	080088d4 	.word	0x080088d4

08007ec4 <_DelayIO>:
#include "n_lib.h"

// We've noticed that there's an instability in some cards' implementations of I2C, and as a result
// we introduce an intentional delay before each and every I2C I/O.	 The timing was computed empirically based
// on a number of commercial devices.
static void _DelayIO() {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
	_DelayMs(6);
 8007ec8:	2006      	movs	r0, #6
 8007eca:	f7ff fec5 	bl	8007c58 <NoteFnDelayMs>
}
 8007ece:	46c0      	nop			; (mov r8, r8)
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <i2cNoteTransaction>:

// Initiate a transaction to the notecard using reqdoc, and return the result in rspdoc
const char *i2cNoteTransaction(char *json, char **jsonResponse) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b092      	sub	sp, #72	; 0x48
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]

	// Append '\n' to the transaction
	int jsonLen = strlen(json)+1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	0018      	movs	r0, r3
 8007ee2:	f7f8 f919 	bl	8000118 <strlen>
 8007ee6:	0003      	movs	r3, r0
 8007ee8:	3301      	adds	r3, #1
 8007eea:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t *transmitBuf = (uint8_t *) _Malloc(jsonLen);
 8007eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eee:	0018      	movs	r0, r3
 8007ef0:	f7ff fec6 	bl	8007c80 <NoteFnMalloc>
 8007ef4:	0003      	movs	r3, r0
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
	if (transmitBuf == NULL)
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <i2cNoteTransaction+0x2e>
		return "insufficient memory";
 8007efe:	4b8b      	ldr	r3, [pc, #556]	; (800812c <i2cNoteTransaction+0x258>)
 8007f00:	e110      	b.n	8008124 <i2cNoteTransaction+0x250>
	memcpy(transmitBuf, json, jsonLen-1);
 8007f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f04:	3b01      	subs	r3, #1
 8007f06:	001a      	movs	r2, r3
 8007f08:	6879      	ldr	r1, [r7, #4]
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 fb1d 	bl	800854c <memcpy>
	transmitBuf[jsonLen-1] = '\n';
 8007f12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f14:	3b01      	subs	r3, #1
 8007f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f18:	18d3      	adds	r3, r2, r3
 8007f1a:	220a      	movs	r2, #10
 8007f1c:	701a      	strb	r2, [r3, #0]

	// Transmit the request in chunks, but also in segments so as not to overwhelm the notecard's interrupt buffers
	const char *errstr;
	uint8_t *chunk = transmitBuf;
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t sentInSegment = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (jsonLen > 0) {
 8007f26:	e046      	b.n	8007fb6 <i2cNoteTransaction+0xe2>
		int chunklen = (uint8_t) (jsonLen > (int)_I2CMax() ? (int)_I2CMax() : jsonLen);
 8007f28:	f7ff ff8a 	bl	8007e40 <NoteFnI2CMax>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	001a      	movs	r2, r3
 8007f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f32:	4293      	cmp	r3, r2
 8007f34:	dd04      	ble.n	8007f40 <i2cNoteTransaction+0x6c>
 8007f36:	f7ff ff83 	bl	8007e40 <NoteFnI2CMax>
 8007f3a:	0003      	movs	r3, r0
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	e001      	b.n	8007f44 <i2cNoteTransaction+0x70>
 8007f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	613b      	str	r3, [r7, #16]
		_LockI2C();
 8007f46:	f7ff fec5 	bl	8007cd4 <NoteFnLockI2C>
		_DelayIO();
 8007f4a:	f7ff ffbb 	bl	8007ec4 <_DelayIO>
		errstr = _I2CTransmit(_I2CAddress(), chunk, chunklen);
 8007f4e:	f7ff ff67 	bl	8007e20 <NoteFnI2CAddress>
 8007f52:	0003      	movs	r3, r0
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f5c:	0018      	movs	r0, r3
 8007f5e:	f7ff ff05 	bl	8007d6c <NoteFnI2CTransmit>
 8007f62:	0003      	movs	r3, r0
 8007f64:	60fb      	str	r3, [r7, #12]
		if (errstr != NULL) {
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <i2cNoteTransaction+0xac>
			_Free(transmitBuf);
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7ff fe9c 	bl	8007cac <NoteFnFree>
			_I2CReset();
 8007f74:	f7ff fee6 	bl	8007d44 <NoteFnI2CReset>
			_UnlockI2C();
 8007f78:	f7ff feba 	bl	8007cf0 <NoteFnUnlockI2C>
			_Debug("i2c transmit: ");
			_Debug(errstr);
			_Debug("\n");
			return errstr;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	e0d1      	b.n	8008124 <i2cNoteTransaction+0x250>
		}
		_UnlockI2C();
 8007f80:	f7ff feb6 	bl	8007cf0 <NoteFnUnlockI2C>
		chunk += chunklen;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f88:	18d3      	adds	r3, r2, r3
 8007f8a:	643b      	str	r3, [r7, #64]	; 0x40
		jsonLen -= chunklen;
 8007f8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	647b      	str	r3, [r7, #68]	; 0x44
		sentInSegment += chunklen;
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f98:	18d3      	adds	r3, r2, r3
 8007f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (sentInSegment > CARD_REQUEST_SEGMENT_MAX_LEN) {
 8007f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f9e:	23fa      	movs	r3, #250	; 0xfa
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d907      	bls.n	8007fb6 <i2cNoteTransaction+0xe2>
			sentInSegment -= CARD_REQUEST_SEGMENT_MAX_LEN;
 8007fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fa8:	4a61      	ldr	r2, [pc, #388]	; (8008130 <i2cNoteTransaction+0x25c>)
 8007faa:	4694      	mov	ip, r2
 8007fac:	4463      	add	r3, ip
 8007fae:	63fb      	str	r3, [r7, #60]	; 0x3c
			_DelayMs(CARD_REQUEST_SEGMENT_DELAY_MS);
 8007fb0:	20fa      	movs	r0, #250	; 0xfa
 8007fb2:	f7ff fe51 	bl	8007c58 <NoteFnDelayMs>
	while (jsonLen > 0) {
 8007fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	dcb5      	bgt.n	8007f28 <i2cNoteTransaction+0x54>
		}
	}

	// Free the transmit buffer
	_Free(transmitBuf);
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	0018      	movs	r0, r3
 8007fc0:	f7ff fe74 	bl	8007cac <NoteFnFree>

	// Dynamically grow the buffer as we read.	Note that we always put the +1 in the alloc
	// so we can be assured that it can be null-terminated, which must be the case because
	// our json parser requires a null-terminated string.
	int jsonbufAllocLen = 1024;
 8007fc4:	2380      	movs	r3, #128	; 0x80
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	63bb      	str	r3, [r7, #56]	; 0x38
	char *jsonbuf = (char *) _Malloc(jsonbufAllocLen+1);
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	3301      	adds	r3, #1
 8007fce:	0018      	movs	r0, r3
 8007fd0:	f7ff fe56 	bl	8007c80 <NoteFnMalloc>
 8007fd4:	0003      	movs	r3, r0
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
	if (jsonbuf == NULL) {
 8007fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d101      	bne.n	8007fe2 <i2cNoteTransaction+0x10e>
		_Debug("transaction: jsonbuf malloc failed\n");
		return "insufficient memory";
 8007fde:	4b53      	ldr	r3, [pc, #332]	; (800812c <i2cNoteTransaction+0x258>)
 8007fe0:	e0a0      	b.n	8008124 <i2cNoteTransaction+0x250>
	}

	// Loop, building a reply buffer out of received chunks.  We'll build the reply in the same
	// buffer we used to transmit, and will grow it as necessary.
	bool receivedNewline = false;
 8007fe2:	2333      	movs	r3, #51	; 0x33
 8007fe4:	18fb      	adds	r3, r7, r3
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
	int jsonbufLen = 0;
 8007fea:	2300      	movs	r3, #0
 8007fec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int chunklen = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t start = _GetMs();
 8007ff2:	f7ff fe1f 	bl	8007c34 <NoteFnGetMs>
 8007ff6:	0003      	movs	r3, r0
 8007ff8:	623b      	str	r3, [r7, #32]
	while (true) {

		// Grow the buffer as necessary to read this next chunk
		if (jsonbufLen + chunklen > jsonbufAllocLen) {
 8007ffa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	18d3      	adds	r3, r2, r3
 8008000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008002:	429a      	cmp	r2, r3
 8008004:	da2b      	bge.n	800805e <i2cNoteTransaction+0x18a>
			int growlen = 1024;
 8008006:	2380      	movs	r3, #128	; 0x80
 8008008:	00db      	lsls	r3, r3, #3
 800800a:	61fb      	str	r3, [r7, #28]
			if (chunklen > growlen)
 800800c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	429a      	cmp	r2, r3
 8008012:	dd04      	ble.n	800801e <i2cNoteTransaction+0x14a>
				jsonbufAllocLen += chunklen;
 8008014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	18d3      	adds	r3, r2, r3
 800801a:	63bb      	str	r3, [r7, #56]	; 0x38
 800801c:	e003      	b.n	8008026 <i2cNoteTransaction+0x152>
			else
				jsonbufAllocLen += growlen;
 800801e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	18d3      	adds	r3, r2, r3
 8008024:	63bb      	str	r3, [r7, #56]	; 0x38
			char *jsonbufNew = (char *) _Malloc(jsonbufAllocLen+1);
 8008026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008028:	3301      	adds	r3, #1
 800802a:	0018      	movs	r0, r3
 800802c:	f7ff fe28 	bl	8007c80 <NoteFnMalloc>
 8008030:	0003      	movs	r3, r0
 8008032:	61bb      	str	r3, [r7, #24]
			if (jsonbufNew == NULL) {
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d105      	bne.n	8008046 <i2cNoteTransaction+0x172>
				_Debug("transaction: jsonbuf grow malloc failed\n");
				_Free(jsonbuf);
 800803a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800803c:	0018      	movs	r0, r3
 800803e:	f7ff fe35 	bl	8007cac <NoteFnFree>
				return "insufficient memory";
 8008042:	4b3a      	ldr	r3, [pc, #232]	; (800812c <i2cNoteTransaction+0x258>)
 8008044:	e06e      	b.n	8008124 <i2cNoteTransaction+0x250>
			}
			memcpy(jsonbufNew, jsonbuf, jsonbufLen);
 8008046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008048:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	0018      	movs	r0, r3
 800804e:	f000 fa7d 	bl	800854c <memcpy>
			_Free(jsonbuf);
 8008052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008054:	0018      	movs	r0, r3
 8008056:	f7ff fe29 	bl	8007cac <NoteFnFree>
			jsonbuf = jsonbufNew;
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
		}

		// Read the chunk
		uint32_t available;
		_LockI2C();
 800805e:	f7ff fe39 	bl	8007cd4 <NoteFnLockI2C>
		_DelayIO();
 8008062:	f7ff ff2f 	bl	8007ec4 <_DelayIO>
		const char *err = _I2CReceive(_I2CAddress(), (uint8_t *) &jsonbuf[jsonbufLen], chunklen, &available);
 8008066:	f7ff fedb 	bl	8007e20 <NoteFnI2CAddress>
 800806a:	0003      	movs	r3, r0
 800806c:	b298      	uxth	r0, r3
 800806e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008072:	18d1      	adds	r1, r2, r3
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	b29a      	uxth	r2, r3
 8008078:	2308      	movs	r3, #8
 800807a:	18fb      	adds	r3, r7, r3
 800807c:	f7ff fea0 	bl	8007dc0 <NoteFnI2CReceive>
 8008080:	0003      	movs	r3, r0
 8008082:	617b      	str	r3, [r7, #20]
		_UnlockI2C();
 8008084:	f7ff fe34 	bl	8007cf0 <NoteFnUnlockI2C>
		if (err != NULL) {
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d005      	beq.n	800809a <i2cNoteTransaction+0x1c6>
			_Free(jsonbuf);
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008090:	0018      	movs	r0, r3
 8008092:	f7ff fe0b 	bl	8007cac <NoteFnFree>
			_Debug("i2c receive error\n");
			return err;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	e044      	b.n	8008124 <i2cNoteTransaction+0x250>
		}

		// We've now received the chunk
		jsonbufLen += chunklen;
 800809a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	18d3      	adds	r3, r2, r3
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		// If the last byte of the chunk is \n, chances are that we're done.  However, just so
		// that we pull everything pending from the module, we only exit when we've received
		// a newline AND there's nothing left available from the module.
		if (jsonbufLen > 0 && jsonbuf[jsonbufLen-1] == '\n')
 80080a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dd0a      	ble.n	80080be <i2cNoteTransaction+0x1ea>
 80080a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ae:	18d3      	adds	r3, r2, r3
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b0a      	cmp	r3, #10
 80080b4:	d103      	bne.n	80080be <i2cNoteTransaction+0x1ea>
			receivedNewline = true;
 80080b6:	2333      	movs	r3, #51	; 0x33
 80080b8:	18fb      	adds	r3, r7, r3
 80080ba:	2201      	movs	r2, #1
 80080bc:	701a      	strb	r2, [r3, #0]

		// For the next iteration, read the min of what's available and what we're permitted to read
		chunklen = (int) (available > _I2CMax() ? _I2CMax() : available);
 80080be:	f7ff febf 	bl	8007e40 <NoteFnI2CMax>
 80080c2:	0002      	movs	r2, r0
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d203      	bcs.n	80080d2 <i2cNoteTransaction+0x1fe>
 80080ca:	f7ff feb9 	bl	8007e40 <NoteFnI2CMax>
 80080ce:	0003      	movs	r3, r0
 80080d0:	e000      	b.n	80080d4 <i2cNoteTransaction+0x200>
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28

		// If there's something available on the notecard for us to receive, do it
		if (chunklen > 0)
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc21      	bgt.n	8008120 <i2cNoteTransaction+0x24c>
			continue;

		// If there's nothing available AND we've received a newline, we're done
		if (receivedNewline)
 80080dc:	2333      	movs	r3, #51	; 0x33
 80080de:	18fb      	adds	r3, r7, r3
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d009      	beq.n	80080fa <i2cNoteTransaction+0x226>
		_DelayMs(50);

	}

	// Null-terminate it, using the +1 space that we'd allocated in the buffer
	jsonbuf[jsonbufLen] = '\0';
 80080e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ea:	18d3      	adds	r3, r2, r3
 80080ec:	2200      	movs	r2, #0
 80080ee:	701a      	strb	r2, [r3, #0]

	// Return it
	*jsonResponse = jsonbuf;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f4:	601a      	str	r2, [r3, #0]
	return NULL;
 80080f6:	2300      	movs	r3, #0
 80080f8:	e014      	b.n	8008124 <i2cNoteTransaction+0x250>
		if (_GetMs() >= start + (NOTECARD_TRANSACTION_TIMEOUT_SEC*1000)) {
 80080fa:	f7ff fd9b 	bl	8007c34 <NoteFnGetMs>
 80080fe:	0002      	movs	r2, r0
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	490c      	ldr	r1, [pc, #48]	; (8008134 <i2cNoteTransaction+0x260>)
 8008104:	468c      	mov	ip, r1
 8008106:	4463      	add	r3, ip
 8008108:	429a      	cmp	r2, r3
 800810a:	d305      	bcc.n	8008118 <i2cNoteTransaction+0x244>
			_Free(jsonbuf);
 800810c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800810e:	0018      	movs	r0, r3
 8008110:	f7ff fdcc 	bl	8007cac <NoteFnFree>
			return "notecard request or response was lost";
 8008114:	4b08      	ldr	r3, [pc, #32]	; (8008138 <i2cNoteTransaction+0x264>)
 8008116:	e005      	b.n	8008124 <i2cNoteTransaction+0x250>
		_DelayMs(50);
 8008118:	2032      	movs	r0, #50	; 0x32
 800811a:	f7ff fd9d 	bl	8007c58 <NoteFnDelayMs>
 800811e:	e76c      	b.n	8007ffa <i2cNoteTransaction+0x126>
			continue;
 8008120:	46c0      	nop			; (mov r8, r8)
	while (true) {
 8008122:	e76a      	b.n	8007ffa <i2cNoteTransaction+0x126>
}
 8008124:	0018      	movs	r0, r3
 8008126:	46bd      	mov	sp, r7
 8008128:	b012      	add	sp, #72	; 0x48
 800812a:	bd80      	pop	{r7, pc}
 800812c:	080088f0 	.word	0x080088f0
 8008130:	fffffc18 	.word	0xfffffc18
 8008134:	00002710 	.word	0x00002710
 8008138:	08008904 	.word	0x08008904

0800813c <i2cNoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool i2cNoteReset() {
 800813c:	b590      	push	{r4, r7, lr}
 800813e:	b0a7      	sub	sp, #156	; 0x9c
 8008140:	af00      	add	r7, sp, #0

	// Reset the I2C subsystem
	_LockI2C();
 8008142:	f7ff fdc7 	bl	8007cd4 <NoteFnLockI2C>
	_I2CReset();
 8008146:	f7ff fdfd 	bl	8007d44 <NoteFnI2CReset>
	_UnlockI2C();
 800814a:	f7ff fdd1 	bl	8007cf0 <NoteFnUnlockI2C>

	// Synchronize by guaranteeing not only that I2C works, but that we drain the remainder of any
	// pending partial reply from a previously-aborted session.	 This outer loop does retries on
	// I2C error, and is simply here for robustness.
	bool notecardReady = false;
 800814e:	2397      	movs	r3, #151	; 0x97
 8008150:	18fb      	adds	r3, r7, r3
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
	int retries;
	for (retries=0; !notecardReady && retries<3; retries++) {
 8008156:	2300      	movs	r3, #0
 8008158:	2290      	movs	r2, #144	; 0x90
 800815a:	18ba      	adds	r2, r7, r2
 800815c:	6013      	str	r3, [r2, #0]
 800815e:	e060      	b.n	8008222 <i2cNoteReset+0xe6>

		_Debug("notecard i2c reset\n");

		// Loop to drain all chunks of data that may be ready to transmit to us
		int chunklen = 0;
 8008160:	2300      	movs	r3, #0
 8008162:	228c      	movs	r2, #140	; 0x8c
 8008164:	18ba      	adds	r2, r7, r2
 8008166:	6013      	str	r3, [r2, #0]
		while (true) {

			// Read the next chunk of available data
			uint32_t available;
			uint8_t buffer[128];
			chunklen = (chunklen > (int)sizeof(buffer)) ? (int)sizeof(buffer) : chunklen;
 8008168:	238c      	movs	r3, #140	; 0x8c
 800816a:	18fb      	adds	r3, r7, r3
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2b80      	cmp	r3, #128	; 0x80
 8008170:	dd00      	ble.n	8008174 <i2cNoteReset+0x38>
 8008172:	2380      	movs	r3, #128	; 0x80
 8008174:	248c      	movs	r4, #140	; 0x8c
 8008176:	193a      	adds	r2, r7, r4
 8008178:	6013      	str	r3, [r2, #0]
			chunklen = (chunklen > (int)_I2CMax()) ? (int)_I2CMax() : chunklen;
 800817a:	f7ff fe61 	bl	8007e40 <NoteFnI2CMax>
 800817e:	0003      	movs	r3, r0
 8008180:	001a      	movs	r2, r3
 8008182:	193b      	adds	r3, r7, r4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4293      	cmp	r3, r2
 8008188:	dd03      	ble.n	8008192 <i2cNoteReset+0x56>
 800818a:	f7ff fe59 	bl	8007e40 <NoteFnI2CMax>
 800818e:	0003      	movs	r3, r0
 8008190:	e002      	b.n	8008198 <i2cNoteReset+0x5c>
 8008192:	238c      	movs	r3, #140	; 0x8c
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	248c      	movs	r4, #140	; 0x8c
 800819a:	193a      	adds	r2, r7, r4
 800819c:	6013      	str	r3, [r2, #0]
			_LockI2C();
 800819e:	f7ff fd99 	bl	8007cd4 <NoteFnLockI2C>
			_DelayIO();
 80081a2:	f7ff fe8f 	bl	8007ec4 <_DelayIO>
			const char *err = _I2CReceive(_I2CAddress(), buffer, chunklen, &available);
 80081a6:	f7ff fe3b 	bl	8007e20 <NoteFnI2CAddress>
 80081aa:	0003      	movs	r3, r0
 80081ac:	b298      	uxth	r0, r3
 80081ae:	193b      	adds	r3, r7, r4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	2384      	movs	r3, #132	; 0x84
 80081b6:	18fb      	adds	r3, r7, r3
 80081b8:	1d39      	adds	r1, r7, #4
 80081ba:	f7ff fe01 	bl	8007dc0 <NoteFnI2CReceive>
 80081be:	0003      	movs	r3, r0
 80081c0:	2488      	movs	r4, #136	; 0x88
 80081c2:	193a      	adds	r2, r7, r4
 80081c4:	6013      	str	r3, [r2, #0]
			_UnlockI2C();
 80081c6:	f7ff fd93 	bl	8007cf0 <NoteFnUnlockI2C>
			if (err) break;
 80081ca:	193b      	adds	r3, r7, r4
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d110      	bne.n	80081f4 <i2cNoteReset+0xb8>

			// If nothing left, we're ready to transmit a command to receive the data
			if (available == 0) {
 80081d2:	2384      	movs	r3, #132	; 0x84
 80081d4:	18fb      	adds	r3, r7, r3
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d104      	bne.n	80081e6 <i2cNoteReset+0xaa>
				notecardReady = true;
 80081dc:	2397      	movs	r3, #151	; 0x97
 80081de:	18fb      	adds	r3, r7, r3
 80081e0:	2201      	movs	r2, #1
 80081e2:	701a      	strb	r2, [r3, #0]
				break;
 80081e4:	e007      	b.n	80081f6 <i2cNoteReset+0xba>
			}

			// Read everything that's left on the module
			chunklen = available;
 80081e6:	2384      	movs	r3, #132	; 0x84
 80081e8:	18fb      	adds	r3, r7, r3
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	228c      	movs	r2, #140	; 0x8c
 80081ee:	18ba      	adds	r2, r7, r2
 80081f0:	6013      	str	r3, [r2, #0]
		while (true) {
 80081f2:	e7b9      	b.n	8008168 <i2cNoteReset+0x2c>
			if (err) break;
 80081f4:	46c0      	nop			; (mov r8, r8)

		}

		// Exit loop if success
		if (notecardReady)
 80081f6:	2397      	movs	r3, #151	; 0x97
 80081f8:	18fb      	adds	r3, r7, r3
 80081fa:	781b      	ldrb	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d11e      	bne.n	800823e <i2cNoteReset+0x102>
			break;

		// Reinitialize i2c if there's no response
		_LockI2C();
 8008200:	f7ff fd68 	bl	8007cd4 <NoteFnLockI2C>
		_I2CReset();
 8008204:	f7ff fd9e 	bl	8007d44 <NoteFnI2CReset>
		_UnlockI2C();
 8008208:	f7ff fd72 	bl	8007cf0 <NoteFnUnlockI2C>
		_Debug("warning: notecard not responding\n");
		_DelayMs(2000);
 800820c:	23fa      	movs	r3, #250	; 0xfa
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	0018      	movs	r0, r3
 8008212:	f7ff fd21 	bl	8007c58 <NoteFnDelayMs>
	for (retries=0; !notecardReady && retries<3; retries++) {
 8008216:	2290      	movs	r2, #144	; 0x90
 8008218:	18bb      	adds	r3, r7, r2
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	3301      	adds	r3, #1
 800821e:	18ba      	adds	r2, r7, r2
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	2397      	movs	r3, #151	; 0x97
 8008224:	18fb      	adds	r3, r7, r3
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2201      	movs	r2, #1
 800822a:	4053      	eors	r3, r2
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d006      	beq.n	8008240 <i2cNoteReset+0x104>
 8008232:	2390      	movs	r3, #144	; 0x90
 8008234:	18fb      	adds	r3, r7, r3
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b02      	cmp	r3, #2
 800823a:	dd91      	ble.n	8008160 <i2cNoteReset+0x24>
 800823c:	e000      	b.n	8008240 <i2cNoteReset+0x104>
			break;
 800823e:	46c0      	nop			; (mov r8, r8)

	}

	// Done
	return notecardReady;
 8008240:	2397      	movs	r3, #151	; 0x97
 8008242:	18fb      	adds	r3, r7, r3
 8008244:	781b      	ldrb	r3, [r3, #0]
}
 8008246:	0018      	movs	r0, r3
 8008248:	46bd      	mov	sp, r7
 800824a:	b027      	add	sp, #156	; 0x9c
 800824c:	bd90      	pop	{r4, r7, pc}
	...

08008250 <errDoc>:

// Flag that gets set whenever an error occurs that should force a reset
static bool resetRequired = true;

// Create an error response document
static J *errDoc(const char *errmsg) {
 8008250:	b580      	push	{r7, lr}
 8008252:	b084      	sub	sp, #16
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
    J *rspdoc = JCreateObject();
 8008258:	f7ff fa74 	bl	8007744 <JCreateObject>
 800825c:	0003      	movs	r3, r0
 800825e:	60fb      	str	r3, [r7, #12]
    if (rspdoc != NULL)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d005      	beq.n	8008272 <errDoc+0x22>
        JAddStringToObject(rspdoc, "err", errmsg);
 8008266:	687a      	ldr	r2, [r7, #4]
 8008268:	4904      	ldr	r1, [pc, #16]	; (800827c <errDoc+0x2c>)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	0018      	movs	r0, r3
 800826e:	f7ff f9b9 	bl	80075e4 <JAddStringToObject>
#ifdef SHOW_TRANSACTIONS
    _Debug("{\"err\":\"");
	_Debug(errmsg);
	_Debug("\"}\n");
#endif
    return rspdoc;
 8008272:	68fb      	ldr	r3, [r7, #12]
}
 8008274:	0018      	movs	r0, r3
 8008276:	46bd      	mov	sp, r7
 8008278:	b004      	add	sp, #16
 800827a:	bd80      	pop	{r7, pc}
 800827c:	0800892c 	.word	0x0800892c

08008280 <NoteNewRequest>:

// Lock for mutual exclusion, not only because access to the card must be serialized, but also because
// both C++ and ArduinoJSON call malloc() which is not a thread-safe operation.
J *NoteNewRequest(const char *request) {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
    J *reqdoc = JCreateObject();
 8008288:	f7ff fa5c 	bl	8007744 <JCreateObject>
 800828c:	0003      	movs	r3, r0
 800828e:	60fb      	str	r3, [r7, #12]
    if (reqdoc != NULL)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <NoteNewRequest+0x22>
        JAddStringToObject(reqdoc, "req", request);
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4904      	ldr	r1, [pc, #16]	; (80082ac <NoteNewRequest+0x2c>)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0018      	movs	r0, r3
 800829e:	f7ff f9a1 	bl	80075e4 <JAddStringToObject>
    return reqdoc;
 80082a2:	68fb      	ldr	r3, [r7, #12]
}
 80082a4:	0018      	movs	r0, r3
 80082a6:	46bd      	mov	sp, r7
 80082a8:	b004      	add	sp, #16
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	08008930 	.word	0x08008930

080082b0 <NoteRequest>:

// Perform a request, FREEING THE REQUEST STRUCTURE, then returning true if success and
// false if either we ran into an error such as out-of-memory or if an error was returned
// from the transaction in the "err" field.
bool NoteRequest(J *req) {
 80082b0:	b5b0      	push	{r4, r5, r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequest(NoteNewRequest("xxx"))
    if (req == NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d101      	bne.n	80082c2 <NoteRequest+0x12>
        return false;
 80082be:	2300      	movs	r3, #0
 80082c0:	e022      	b.n	8008308 <NoteRequest+0x58>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f000 f847 	bl	8008358 <NoteTransaction>
 80082ca:	0003      	movs	r3, r0
 80082cc:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <NoteRequest+0x30>
        JDelete(req);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	0018      	movs	r0, r3
 80082d8:	f7fd fb00 	bl	80058dc <JDelete>
        return false;
 80082dc:	2300      	movs	r3, #0
 80082de:	e013      	b.n	8008308 <NoteRequest+0x58>
    }
    // Check for a transaction error, and exit
    bool success = JIsNullString(rsp, "err");
 80082e0:	250b      	movs	r5, #11
 80082e2:	197c      	adds	r4, r7, r5
 80082e4:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <NoteRequest+0x60>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	0011      	movs	r1, r2
 80082ea:	0018      	movs	r0, r3
 80082ec:	f7ff fa94 	bl	8007818 <JIsNullString>
 80082f0:	0003      	movs	r3, r0
 80082f2:	7023      	strb	r3, [r4, #0]
    JDelete(req);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	0018      	movs	r0, r3
 80082f8:	f7fd faf0 	bl	80058dc <JDelete>
    JDelete(rsp);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	0018      	movs	r0, r3
 8008300:	f7fd faec 	bl	80058dc <JDelete>
    return success;
 8008304:	197b      	adds	r3, r7, r5
 8008306:	781b      	ldrb	r3, [r3, #0]
}
 8008308:	0018      	movs	r0, r3
 800830a:	46bd      	mov	sp, r7
 800830c:	b004      	add	sp, #16
 800830e:	bdb0      	pop	{r4, r5, r7, pc}
 8008310:	0800892c 	.word	0x0800892c

08008314 <NoteRequestResponse>:

// Perform a request, FREEING THE REQUEST STRUCTURE, and returning a reply structure or
// NULL if there's insufficient memory.
J *NoteRequestResponse(J *req) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
    // Exit if null request.  This allows safe execution of the form NoteRequestResponse(NoteNewRequest("xxx"))
    if (req == NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <NoteRequestResponse+0x12>
        return NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	e013      	b.n	800834e <NoteRequestResponse+0x3a>
    // Execute the transaction
    J *rsp = NoteTransaction(req);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	0018      	movs	r0, r3
 800832a:	f000 f815 	bl	8008358 <NoteTransaction>
 800832e:	0003      	movs	r3, r0
 8008330:	60fb      	str	r3, [r7, #12]
    if (rsp == NULL) {
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d105      	bne.n	8008344 <NoteRequestResponse+0x30>
        JDelete(req);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	0018      	movs	r0, r3
 800833c:	f7fd face 	bl	80058dc <JDelete>
        return NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	e004      	b.n	800834e <NoteRequestResponse+0x3a>
    }
    // Free the request and exit
    JDelete(req);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	0018      	movs	r0, r3
 8008348:	f7fd fac8 	bl	80058dc <JDelete>
    return rsp;
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	0018      	movs	r0, r3
 8008350:	46bd      	mov	sp, r7
 8008352:	b004      	add	sp, #16
 8008354:	bd80      	pop	{r7, pc}
	...

08008358 <NoteTransaction>:

// Initiate a transaction to the card using reqdoc, and return the result in rspdoc.  This does
// NOT free the request structure.
J *NoteTransaction(J *req) {
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

    // If a reset of the module is required for any reason, do it now.
    // We must do this before acquiring lock.
    if (resetRequired) {
 8008360:	4b30      	ldr	r3, [pc, #192]	; (8008424 <NoteTransaction+0xcc>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <NoteTransaction+0x26>
        if (!NoteReset())
 8008368:	f000 f86c 	bl	8008444 <NoteReset>
 800836c:	0003      	movs	r3, r0
 800836e:	001a      	movs	r2, r3
 8008370:	2301      	movs	r3, #1
 8008372:	4053      	eors	r3, r2
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d001      	beq.n	800837e <NoteTransaction+0x26>
            return NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	e04e      	b.n	800841c <NoteTransaction+0xc4>
    }

    // Lock
    _LockNote();
 800837e:	f7ff fcc5 	bl	8007d0c <NoteFnLockNote>

    // Serialize the JSON requet
    char *json = JPrintUnformatted(req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	0018      	movs	r0, r3
 8008386:	f7fe faa1 	bl	80068cc <JPrintUnformatted>
 800838a:	0003      	movs	r3, r0
 800838c:	627b      	str	r3, [r7, #36]	; 0x24
    if (json == NULL) {
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d109      	bne.n	80083a8 <NoteTransaction+0x50>
        J *rsp = errDoc("can't convert to JSON");
 8008394:	4b24      	ldr	r3, [pc, #144]	; (8008428 <NoteTransaction+0xd0>)
 8008396:	0018      	movs	r0, r3
 8008398:	f7ff ff5a 	bl	8008250 <errDoc>
 800839c:	0003      	movs	r3, r0
 800839e:	613b      	str	r3, [r7, #16]
        _UnlockNote();
 80083a0:	f7ff fcc2 	bl	8007d28 <NoteFnUnlockNote>
        return rsp;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	e039      	b.n	800841c <NoteTransaction+0xc4>
    _Debug(json);
#endif

    // Pertform the transaction
    char *responseJSON;
    const char *errStr = _Transaction(json, &responseJSON);
 80083a8:	230c      	movs	r3, #12
 80083aa:	18fa      	adds	r2, r7, r3
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	0011      	movs	r1, r2
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7ff fd6d 	bl	8007e90 <NoteFnTransaction>
 80083b6:	0003      	movs	r3, r0
 80083b8:	623b      	str	r3, [r7, #32]

    // Free the json
    JFree(json);
 80083ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083bc:	0018      	movs	r0, r3
 80083be:	f7fd fa65 	bl	800588c <JFree>

    // If error, queue up a reset
    if (errStr != NULL) {
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d00b      	beq.n	80083e0 <NoteTransaction+0x88>
		NoteResetRequired();
 80083c8:	f000 f832 	bl	8008430 <NoteResetRequired>
        J *rsp = errDoc(errStr);
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	0018      	movs	r0, r3
 80083d0:	f7ff ff3e 	bl	8008250 <errDoc>
 80083d4:	0003      	movs	r3, r0
 80083d6:	617b      	str	r3, [r7, #20]
        _UnlockNote();
 80083d8:	f7ff fca6 	bl	8007d28 <NoteFnUnlockNote>
        return rsp;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	e01d      	b.n	800841c <NoteTransaction+0xc4>
    }

    // Parse the reply from the card on the input stream
    J *rspdoc = JParse(responseJSON);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	0018      	movs	r0, r3
 80083e4:	f7fe f9c6 	bl	8006774 <JParse>
 80083e8:	0003      	movs	r3, r0
 80083ea:	61fb      	str	r3, [r7, #28]
    if (rspdoc == NULL) {
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10d      	bne.n	800840e <NoteTransaction+0xb6>
        _Free(responseJSON);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7ff fc59 	bl	8007cac <NoteFnFree>
        _Debug("unable to parse response JSON:\n");
		_Debug(responseJSON);
        J *rsp = errDoc("unrecognized response from card");
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <NoteTransaction+0xd4>)
 80083fc:	0018      	movs	r0, r3
 80083fe:	f7ff ff27 	bl	8008250 <errDoc>
 8008402:	0003      	movs	r3, r0
 8008404:	61bb      	str	r3, [r7, #24]
        _UnlockNote();
 8008406:	f7ff fc8f 	bl	8007d28 <NoteFnUnlockNote>
        return rsp;
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	e006      	b.n	800841c <NoteTransaction+0xc4>
    _Debug(responseJSON);
	_Debug("\n");
#endif

    // Discard the buffer now that it's parsed
    _Free(responseJSON);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff fc4b 	bl	8007cac <NoteFnFree>

    // Unlock
    _UnlockNote();
 8008416:	f7ff fc87 	bl	8007d28 <NoteFnUnlockNote>

    // Done
    return rspdoc;
 800841a:	69fb      	ldr	r3, [r7, #28]
    
}
 800841c:	0018      	movs	r0, r3
 800841e:	46bd      	mov	sp, r7
 8008420:	b00a      	add	sp, #40	; 0x28
 8008422:	bd80      	pop	{r7, pc}
 8008424:	20000064 	.word	0x20000064
 8008428:	08008934 	.word	0x08008934
 800842c:	0800894c 	.word	0x0800894c

08008430 <NoteResetRequired>:

// Mark that a reset will be required before doing further I/O on a given port
void NoteResetRequired() {
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
    resetRequired = true;
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <NoteResetRequired+0x10>)
 8008436:	2201      	movs	r2, #1
 8008438:	701a      	strb	r2, [r3, #0]
}
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20000064 	.word	0x20000064

08008444 <NoteReset>:

// Initialize or re-initialize the module, returning false if anything fails
bool NoteReset() {
 8008444:	b580      	push	{r7, lr}
 8008446:	af00      	add	r7, sp, #0
    _LockNote();
 8008448:	f7ff fc60 	bl	8007d0c <NoteFnLockNote>
    resetRequired = !_NoteReset();
 800844c:	f7ff fd0e 	bl	8007e6c <NoteFnNoteReset>
 8008450:	0003      	movs	r3, r0
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	4193      	sbcs	r3, r2
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2201      	movs	r2, #1
 800845a:	4053      	eors	r3, r2
 800845c:	b2db      	uxtb	r3, r3
 800845e:	1c1a      	adds	r2, r3, #0
 8008460:	2301      	movs	r3, #1
 8008462:	4013      	ands	r3, r2
 8008464:	b2da      	uxtb	r2, r3
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <NoteReset+0x48>)
 8008468:	701a      	strb	r2, [r3, #0]
    _UnlockNote();
 800846a:	f7ff fc5d 	bl	8007d28 <NoteFnUnlockNote>
    return !resetRequired;
 800846e:	4b07      	ldr	r3, [pc, #28]	; (800848c <NoteReset+0x48>)
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	1e5a      	subs	r2, r3, #1
 8008474:	4193      	sbcs	r3, r2
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2201      	movs	r2, #1
 800847a:	4053      	eors	r3, r2
 800847c:	b2db      	uxtb	r3, r3
 800847e:	1c1a      	adds	r2, r3, #0
 8008480:	2301      	movs	r3, #1
 8008482:	4013      	ands	r3, r2
 8008484:	b2db      	uxtb	r3, r3
}
 8008486:	0018      	movs	r0, r3
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}
 800848c:	20000064 	.word	0x20000064

08008490 <__errno>:
 8008490:	4b01      	ldr	r3, [pc, #4]	; (8008498 <__errno+0x8>)
 8008492:	6818      	ldr	r0, [r3, #0]
 8008494:	4770      	bx	lr
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	20000068 	.word	0x20000068

0800849c <__libc_init_array>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	2600      	movs	r6, #0
 80084a0:	4d0c      	ldr	r5, [pc, #48]	; (80084d4 <__libc_init_array+0x38>)
 80084a2:	4c0d      	ldr	r4, [pc, #52]	; (80084d8 <__libc_init_array+0x3c>)
 80084a4:	1b64      	subs	r4, r4, r5
 80084a6:	10a4      	asrs	r4, r4, #2
 80084a8:	42a6      	cmp	r6, r4
 80084aa:	d109      	bne.n	80084c0 <__libc_init_array+0x24>
 80084ac:	2600      	movs	r6, #0
 80084ae:	f000 f947 	bl	8008740 <_init>
 80084b2:	4d0a      	ldr	r5, [pc, #40]	; (80084dc <__libc_init_array+0x40>)
 80084b4:	4c0a      	ldr	r4, [pc, #40]	; (80084e0 <__libc_init_array+0x44>)
 80084b6:	1b64      	subs	r4, r4, r5
 80084b8:	10a4      	asrs	r4, r4, #2
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	d105      	bne.n	80084ca <__libc_init_array+0x2e>
 80084be:	bd70      	pop	{r4, r5, r6, pc}
 80084c0:	00b3      	lsls	r3, r6, #2
 80084c2:	58eb      	ldr	r3, [r5, r3]
 80084c4:	4798      	blx	r3
 80084c6:	3601      	adds	r6, #1
 80084c8:	e7ee      	b.n	80084a8 <__libc_init_array+0xc>
 80084ca:	00b3      	lsls	r3, r6, #2
 80084cc:	58eb      	ldr	r3, [r5, r3]
 80084ce:	4798      	blx	r3
 80084d0:	3601      	adds	r6, #1
 80084d2:	e7f2      	b.n	80084ba <__libc_init_array+0x1e>
 80084d4:	08008dd4 	.word	0x08008dd4
 80084d8:	08008dd4 	.word	0x08008dd4
 80084dc:	08008dd4 	.word	0x08008dd4
 80084e0:	08008dd8 	.word	0x08008dd8

080084e4 <__locale_ctype_ptr>:
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <__locale_ctype_ptr+0x14>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d100      	bne.n	80084f0 <__locale_ctype_ptr+0xc>
 80084ee:	4b03      	ldr	r3, [pc, #12]	; (80084fc <__locale_ctype_ptr+0x18>)
 80084f0:	33ec      	adds	r3, #236	; 0xec
 80084f2:	6818      	ldr	r0, [r3, #0]
 80084f4:	4770      	bx	lr
 80084f6:	46c0      	nop			; (mov r8, r8)
 80084f8:	20000068 	.word	0x20000068
 80084fc:	200000cc 	.word	0x200000cc

08008500 <malloc>:
 8008500:	b510      	push	{r4, lr}
 8008502:	4b03      	ldr	r3, [pc, #12]	; (8008510 <malloc+0x10>)
 8008504:	0001      	movs	r1, r0
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	f000 f87c 	bl	8008604 <_malloc_r>
 800850c:	bd10      	pop	{r4, pc}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	20000068 	.word	0x20000068

08008514 <free>:
 8008514:	b510      	push	{r4, lr}
 8008516:	4b03      	ldr	r3, [pc, #12]	; (8008524 <free+0x10>)
 8008518:	0001      	movs	r1, r0
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	f000 f828 	bl	8008570 <_free_r>
 8008520:	bd10      	pop	{r4, pc}
 8008522:	46c0      	nop			; (mov r8, r8)
 8008524:	20000068 	.word	0x20000068

08008528 <__ascii_mbtowc>:
 8008528:	b082      	sub	sp, #8
 800852a:	2900      	cmp	r1, #0
 800852c:	d100      	bne.n	8008530 <__ascii_mbtowc+0x8>
 800852e:	a901      	add	r1, sp, #4
 8008530:	1e10      	subs	r0, r2, #0
 8008532:	d006      	beq.n	8008542 <__ascii_mbtowc+0x1a>
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <__ascii_mbtowc+0x1e>
 8008538:	7813      	ldrb	r3, [r2, #0]
 800853a:	600b      	str	r3, [r1, #0]
 800853c:	7810      	ldrb	r0, [r2, #0]
 800853e:	1e43      	subs	r3, r0, #1
 8008540:	4198      	sbcs	r0, r3
 8008542:	b002      	add	sp, #8
 8008544:	4770      	bx	lr
 8008546:	2002      	movs	r0, #2
 8008548:	4240      	negs	r0, r0
 800854a:	e7fa      	b.n	8008542 <__ascii_mbtowc+0x1a>

0800854c <memcpy>:
 800854c:	2300      	movs	r3, #0
 800854e:	b510      	push	{r4, lr}
 8008550:	429a      	cmp	r2, r3
 8008552:	d100      	bne.n	8008556 <memcpy+0xa>
 8008554:	bd10      	pop	{r4, pc}
 8008556:	5ccc      	ldrb	r4, [r1, r3]
 8008558:	54c4      	strb	r4, [r0, r3]
 800855a:	3301      	adds	r3, #1
 800855c:	e7f8      	b.n	8008550 <memcpy+0x4>

0800855e <memset>:
 800855e:	0003      	movs	r3, r0
 8008560:	1812      	adds	r2, r2, r0
 8008562:	4293      	cmp	r3, r2
 8008564:	d100      	bne.n	8008568 <memset+0xa>
 8008566:	4770      	bx	lr
 8008568:	7019      	strb	r1, [r3, #0]
 800856a:	3301      	adds	r3, #1
 800856c:	e7f9      	b.n	8008562 <memset+0x4>
	...

08008570 <_free_r>:
 8008570:	b570      	push	{r4, r5, r6, lr}
 8008572:	0005      	movs	r5, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	d010      	beq.n	800859a <_free_r+0x2a>
 8008578:	1f0c      	subs	r4, r1, #4
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da00      	bge.n	8008582 <_free_r+0x12>
 8008580:	18e4      	adds	r4, r4, r3
 8008582:	0028      	movs	r0, r5
 8008584:	f000 f8d9 	bl	800873a <__malloc_lock>
 8008588:	4a1d      	ldr	r2, [pc, #116]	; (8008600 <_free_r+0x90>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d105      	bne.n	800859c <_free_r+0x2c>
 8008590:	6063      	str	r3, [r4, #4]
 8008592:	6014      	str	r4, [r2, #0]
 8008594:	0028      	movs	r0, r5
 8008596:	f000 f8d1 	bl	800873c <__malloc_unlock>
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	42a3      	cmp	r3, r4
 800859e:	d909      	bls.n	80085b4 <_free_r+0x44>
 80085a0:	6821      	ldr	r1, [r4, #0]
 80085a2:	1860      	adds	r0, r4, r1
 80085a4:	4283      	cmp	r3, r0
 80085a6:	d1f3      	bne.n	8008590 <_free_r+0x20>
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	1841      	adds	r1, r0, r1
 80085ae:	6021      	str	r1, [r4, #0]
 80085b0:	e7ee      	b.n	8008590 <_free_r+0x20>
 80085b2:	0013      	movs	r3, r2
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	d001      	beq.n	80085be <_free_r+0x4e>
 80085ba:	42a2      	cmp	r2, r4
 80085bc:	d9f9      	bls.n	80085b2 <_free_r+0x42>
 80085be:	6819      	ldr	r1, [r3, #0]
 80085c0:	1858      	adds	r0, r3, r1
 80085c2:	42a0      	cmp	r0, r4
 80085c4:	d10b      	bne.n	80085de <_free_r+0x6e>
 80085c6:	6820      	ldr	r0, [r4, #0]
 80085c8:	1809      	adds	r1, r1, r0
 80085ca:	1858      	adds	r0, r3, r1
 80085cc:	6019      	str	r1, [r3, #0]
 80085ce:	4282      	cmp	r2, r0
 80085d0:	d1e0      	bne.n	8008594 <_free_r+0x24>
 80085d2:	6810      	ldr	r0, [r2, #0]
 80085d4:	6852      	ldr	r2, [r2, #4]
 80085d6:	1841      	adds	r1, r0, r1
 80085d8:	6019      	str	r1, [r3, #0]
 80085da:	605a      	str	r2, [r3, #4]
 80085dc:	e7da      	b.n	8008594 <_free_r+0x24>
 80085de:	42a0      	cmp	r0, r4
 80085e0:	d902      	bls.n	80085e8 <_free_r+0x78>
 80085e2:	230c      	movs	r3, #12
 80085e4:	602b      	str	r3, [r5, #0]
 80085e6:	e7d5      	b.n	8008594 <_free_r+0x24>
 80085e8:	6821      	ldr	r1, [r4, #0]
 80085ea:	1860      	adds	r0, r4, r1
 80085ec:	4282      	cmp	r2, r0
 80085ee:	d103      	bne.n	80085f8 <_free_r+0x88>
 80085f0:	6810      	ldr	r0, [r2, #0]
 80085f2:	6852      	ldr	r2, [r2, #4]
 80085f4:	1841      	adds	r1, r0, r1
 80085f6:	6021      	str	r1, [r4, #0]
 80085f8:	6062      	str	r2, [r4, #4]
 80085fa:	605c      	str	r4, [r3, #4]
 80085fc:	e7ca      	b.n	8008594 <_free_r+0x24>
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	200002a8 	.word	0x200002a8

08008604 <_malloc_r>:
 8008604:	2303      	movs	r3, #3
 8008606:	b570      	push	{r4, r5, r6, lr}
 8008608:	1ccd      	adds	r5, r1, #3
 800860a:	439d      	bics	r5, r3
 800860c:	3508      	adds	r5, #8
 800860e:	0006      	movs	r6, r0
 8008610:	2d0c      	cmp	r5, #12
 8008612:	d21e      	bcs.n	8008652 <_malloc_r+0x4e>
 8008614:	250c      	movs	r5, #12
 8008616:	42a9      	cmp	r1, r5
 8008618:	d81d      	bhi.n	8008656 <_malloc_r+0x52>
 800861a:	0030      	movs	r0, r6
 800861c:	f000 f88d 	bl	800873a <__malloc_lock>
 8008620:	4a25      	ldr	r2, [pc, #148]	; (80086b8 <_malloc_r+0xb4>)
 8008622:	6814      	ldr	r4, [r2, #0]
 8008624:	0021      	movs	r1, r4
 8008626:	2900      	cmp	r1, #0
 8008628:	d119      	bne.n	800865e <_malloc_r+0x5a>
 800862a:	4c24      	ldr	r4, [pc, #144]	; (80086bc <_malloc_r+0xb8>)
 800862c:	6823      	ldr	r3, [r4, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d103      	bne.n	800863a <_malloc_r+0x36>
 8008632:	0030      	movs	r0, r6
 8008634:	f000 f844 	bl	80086c0 <_sbrk_r>
 8008638:	6020      	str	r0, [r4, #0]
 800863a:	0029      	movs	r1, r5
 800863c:	0030      	movs	r0, r6
 800863e:	f000 f83f 	bl	80086c0 <_sbrk_r>
 8008642:	1c43      	adds	r3, r0, #1
 8008644:	d12b      	bne.n	800869e <_malloc_r+0x9a>
 8008646:	230c      	movs	r3, #12
 8008648:	0030      	movs	r0, r6
 800864a:	6033      	str	r3, [r6, #0]
 800864c:	f000 f876 	bl	800873c <__malloc_unlock>
 8008650:	e003      	b.n	800865a <_malloc_r+0x56>
 8008652:	2d00      	cmp	r5, #0
 8008654:	dadf      	bge.n	8008616 <_malloc_r+0x12>
 8008656:	230c      	movs	r3, #12
 8008658:	6033      	str	r3, [r6, #0]
 800865a:	2000      	movs	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	680b      	ldr	r3, [r1, #0]
 8008660:	1b5b      	subs	r3, r3, r5
 8008662:	d419      	bmi.n	8008698 <_malloc_r+0x94>
 8008664:	2b0b      	cmp	r3, #11
 8008666:	d903      	bls.n	8008670 <_malloc_r+0x6c>
 8008668:	600b      	str	r3, [r1, #0]
 800866a:	18cc      	adds	r4, r1, r3
 800866c:	6025      	str	r5, [r4, #0]
 800866e:	e003      	b.n	8008678 <_malloc_r+0x74>
 8008670:	684b      	ldr	r3, [r1, #4]
 8008672:	428c      	cmp	r4, r1
 8008674:	d10d      	bne.n	8008692 <_malloc_r+0x8e>
 8008676:	6013      	str	r3, [r2, #0]
 8008678:	0030      	movs	r0, r6
 800867a:	f000 f85f 	bl	800873c <__malloc_unlock>
 800867e:	0020      	movs	r0, r4
 8008680:	2207      	movs	r2, #7
 8008682:	300b      	adds	r0, #11
 8008684:	1d23      	adds	r3, r4, #4
 8008686:	4390      	bics	r0, r2
 8008688:	1ac3      	subs	r3, r0, r3
 800868a:	d0e7      	beq.n	800865c <_malloc_r+0x58>
 800868c:	425a      	negs	r2, r3
 800868e:	50e2      	str	r2, [r4, r3]
 8008690:	e7e4      	b.n	800865c <_malloc_r+0x58>
 8008692:	6063      	str	r3, [r4, #4]
 8008694:	000c      	movs	r4, r1
 8008696:	e7ef      	b.n	8008678 <_malloc_r+0x74>
 8008698:	000c      	movs	r4, r1
 800869a:	6849      	ldr	r1, [r1, #4]
 800869c:	e7c3      	b.n	8008626 <_malloc_r+0x22>
 800869e:	2303      	movs	r3, #3
 80086a0:	1cc4      	adds	r4, r0, #3
 80086a2:	439c      	bics	r4, r3
 80086a4:	42a0      	cmp	r0, r4
 80086a6:	d0e1      	beq.n	800866c <_malloc_r+0x68>
 80086a8:	1a21      	subs	r1, r4, r0
 80086aa:	0030      	movs	r0, r6
 80086ac:	f000 f808 	bl	80086c0 <_sbrk_r>
 80086b0:	1c43      	adds	r3, r0, #1
 80086b2:	d1db      	bne.n	800866c <_malloc_r+0x68>
 80086b4:	e7c7      	b.n	8008646 <_malloc_r+0x42>
 80086b6:	46c0      	nop			; (mov r8, r8)
 80086b8:	200002a8 	.word	0x200002a8
 80086bc:	200002ac 	.word	0x200002ac

080086c0 <_sbrk_r>:
 80086c0:	2300      	movs	r3, #0
 80086c2:	b570      	push	{r4, r5, r6, lr}
 80086c4:	4c06      	ldr	r4, [pc, #24]	; (80086e0 <_sbrk_r+0x20>)
 80086c6:	0005      	movs	r5, r0
 80086c8:	0008      	movs	r0, r1
 80086ca:	6023      	str	r3, [r4, #0]
 80086cc:	f7fc fe7a 	bl	80053c4 <_sbrk>
 80086d0:	1c43      	adds	r3, r0, #1
 80086d2:	d103      	bne.n	80086dc <_sbrk_r+0x1c>
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d000      	beq.n	80086dc <_sbrk_r+0x1c>
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	bd70      	pop	{r4, r5, r6, pc}
 80086de:	46c0      	nop			; (mov r8, r8)
 80086e0:	20000300 	.word	0x20000300

080086e4 <strchr>:
 80086e4:	b2c9      	uxtb	r1, r1
 80086e6:	7803      	ldrb	r3, [r0, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d004      	beq.n	80086f6 <strchr+0x12>
 80086ec:	428b      	cmp	r3, r1
 80086ee:	d100      	bne.n	80086f2 <strchr+0xe>
 80086f0:	4770      	bx	lr
 80086f2:	3001      	adds	r0, #1
 80086f4:	e7f7      	b.n	80086e6 <strchr+0x2>
 80086f6:	424b      	negs	r3, r1
 80086f8:	4159      	adcs	r1, r3
 80086fa:	4249      	negs	r1, r1
 80086fc:	4008      	ands	r0, r1
 80086fe:	e7f7      	b.n	80086f0 <strchr+0xc>

08008700 <strncmp>:
 8008700:	2300      	movs	r3, #0
 8008702:	b530      	push	{r4, r5, lr}
 8008704:	429a      	cmp	r2, r3
 8008706:	d00a      	beq.n	800871e <strncmp+0x1e>
 8008708:	3a01      	subs	r2, #1
 800870a:	5cc4      	ldrb	r4, [r0, r3]
 800870c:	5ccd      	ldrb	r5, [r1, r3]
 800870e:	42ac      	cmp	r4, r5
 8008710:	d104      	bne.n	800871c <strncmp+0x1c>
 8008712:	4293      	cmp	r3, r2
 8008714:	d002      	beq.n	800871c <strncmp+0x1c>
 8008716:	3301      	adds	r3, #1
 8008718:	2c00      	cmp	r4, #0
 800871a:	d1f6      	bne.n	800870a <strncmp+0xa>
 800871c:	1b63      	subs	r3, r4, r5
 800871e:	0018      	movs	r0, r3
 8008720:	bd30      	pop	{r4, r5, pc}

08008722 <__ascii_wctomb>:
 8008722:	1e0b      	subs	r3, r1, #0
 8008724:	d004      	beq.n	8008730 <__ascii_wctomb+0xe>
 8008726:	2aff      	cmp	r2, #255	; 0xff
 8008728:	d904      	bls.n	8008734 <__ascii_wctomb+0x12>
 800872a:	238a      	movs	r3, #138	; 0x8a
 800872c:	6003      	str	r3, [r0, #0]
 800872e:	3b8b      	subs	r3, #139	; 0x8b
 8008730:	0018      	movs	r0, r3
 8008732:	4770      	bx	lr
 8008734:	700a      	strb	r2, [r1, #0]
 8008736:	2301      	movs	r3, #1
 8008738:	e7fa      	b.n	8008730 <__ascii_wctomb+0xe>

0800873a <__malloc_lock>:
 800873a:	4770      	bx	lr

0800873c <__malloc_unlock>:
 800873c:	4770      	bx	lr
	...

08008740 <_init>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	46c0      	nop			; (mov r8, r8)
 8008744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008746:	bc08      	pop	{r3}
 8008748:	469e      	mov	lr, r3
 800874a:	4770      	bx	lr

0800874c <_fini>:
 800874c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800874e:	46c0      	nop			; (mov r8, r8)
 8008750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008752:	bc08      	pop	{r3}
 8008754:	469e      	mov	lr, r3
 8008756:	4770      	bx	lr
